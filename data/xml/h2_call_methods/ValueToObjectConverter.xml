<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/ValueToObjectConverter.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Array</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Blob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Clob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLXML</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Duration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>OffsetDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>OffsetTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Period</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>ZonedDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>Interval</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcBlob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcClob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcLob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLXML</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>TraceObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JSR310Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JdbcUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>LegacyDateTimeUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Data type conversion methods between values and Java objects.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueToObjectConverter</name> <super_list><extends>extends <super><name>TraceObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The Geometry class. This object is null if the JTS jar file is not in the
     * classpath.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>GEOMETRY_CLASS</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GEOMETRY_CLASS_NAME</name> <init>= <expr><literal type="string">"org.locationtech.jts.geom.Geometry"</literal></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name><name>JdbcUtils</name><operator>.</operator><name>loadUserClass</name></name><argument_list>(<argument><expr><name>GEOMETRY_CLASS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name>GEOMETRY_CLASS</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Convert a Java object to a value.
     *
     * @param session
     *            the session
     * @param x
     *            the value
     * @param type
     *            the suggested value type, or {@code Value#UNKNOWN}
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>objectToValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueJavaObject</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><call><name><name>JdbcUtils</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>Value</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>Value</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(<argument><expr><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>v</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>String</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Long</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Boolean</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueTinyint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Byte</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Short</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Short</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueReal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Float</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Double</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>Double</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueVarbinary</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>UUID</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>UUID</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Character</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueChar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Character</name><operator>)</operator> <name>x</name><operator>)</operator><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalDate</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localDateToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>LocalDate</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>LocalTime</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localDateTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>LocalDateTime</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Instant</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>instantToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>Instant</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>OffsetTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>offsetTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>OffsetTime</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>OffsetDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>offsetDateTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>OffsetDateTime</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>ZonedDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>zonedDateTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>ZonedDateTime</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Interval</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Interval</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>Interval</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ValueInterval</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getQualifier</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>isNegative</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>getLeading</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i</name><operator>.</operator><name>getRemaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>periodToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>Period</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Duration</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>durationToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>Duration</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name><name>Object</name><index>[]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>arrayToValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>GEOMETRY_CLASS</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>GEOMETRY_CLASS</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueGeometry</name><operator>.</operator><name>getFromGeometry</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>BigInteger</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>BigInteger</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>BigDecimal</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>getAnyScale</name></name><argument_list>(<argument><expr><operator>(</operator><name>BigDecimal</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>otherToValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>otherToValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>Array</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><operator>(</operator><name>Array</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <return>return <expr><call><name>arrayToValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>array</name><operator>.</operator><name>getArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>ResultSet</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>resultSetToValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>ResultSet</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ValueLob</name></type> <name>lob</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>Reader</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>Reader</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>instanceof</operator> <name>BufferedReader</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>lob</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createClob</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>Clob</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Clob</name></type> <name>clob</name> <init>= <expr><operator>(</operator><name>Clob</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><call><name><name>clob</name><operator>.</operator><name>getCharacterStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>lob</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createClob</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name><name>clob</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>InputStream</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lob</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createBlob</name><argument_list>(<argument><expr><operator>(</operator><name>InputStream</name><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>Blob</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Blob</name></type> <name>blob</name> <init>= <expr><operator>(</operator><name>Blob</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>lob</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createBlob</name><argument_list>(<argument><expr><call><name><name>blob</name><operator>.</operator><name>getBinaryStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>blob</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>instanceof</operator> <name>SQLXML</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>lob</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>createClob</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SQLXML</name><operator>)</operator> <name>x</name><operator>)</operator><operator>.</operator><call><name>getCharacterStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>legacyObjectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>v</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueJavaObject</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><call><name><name>JdbcUtils</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>arrayToValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// (a.getClass().isArray());</comment>
        <comment type="line">// (a.getClass().getComponentType().isPrimitive());</comment>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>o</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>o</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>v</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>objectToValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>ValueArray</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>Value</name></type> <name>resultSetToValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ResultSetMetaData</name></type> <name>meta</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name>readResultSetMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATA_CONVERSION_ERROR_1</name></name></expr></argument>, <argument><expr><literal type="string">"Empty ResultSet to ROW value"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>columns</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>objectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATA_CONVERSION_ERROR_1</name></name></expr></argument>, <argument><expr><literal type="string">"Multi-row ResultSet to ROW value"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>readResultSetMeta</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>ResultSetMetaData</name></type> <name>meta</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>columnCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnLabel</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnTypeName</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnTypeName</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columnType</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>convertSQLTypeToValueType</name></name><argument_list>(<argument><expr><call><name><name>meta</name><operator>.</operator><name>getColumnType</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnTypeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getPrecision</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getScale</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name> <operator>&amp;&amp;</operator> <call><name><name>columnTypeName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">" ARRAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name><name>TypeInfo</name>
                        <operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                <argument><expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>getTypeByName</name></name><argument_list>(
                                        <argument><expr><call><name><name>columnTypeName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>columnTypeName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>session</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>columnType</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the specified value to an object of the specified type.
     *
     * @param &lt;T&gt;
     *            the type
     * @param type
     *            the class
     * @param value
     *            the value
     * @param conn
     *            the connection
     * @return the object of the specified class representing the specified
     *         value, or {@code null}
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>valueToObject</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JdbcConnection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>BigDecimal</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>BigInteger</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBigInteger</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>String</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Boolean</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Byte</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getByte</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Short</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Short</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getShort</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Long</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getFloat</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Double</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Double</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getDouble</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>UUID</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>convertToUuid</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUuid</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Character</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>(</operator><name>Character</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Interval</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>value</name> <operator>instanceof</operator> <name>ValueInterval</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>convertTo</name></name><argument_list>(<argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTERVAL_DAY_TO_SECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ValueInterval</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ValueInterval</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getQualifier</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getLeading</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getRemaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>LocalDate</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalDate</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>LocalTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>LocalDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalDateTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>OffsetTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToOffsetTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>OffsetDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToOffsetDateTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>ZonedDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToZonedDateTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Instant</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToInstant</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToPeriod</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Duration</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>valueToDuration</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name>valueToArray</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>GEOMETRY_CLASS</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>GEOMETRY_CLASS</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>convertToGeometry</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGeometry</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name>valueToOther</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Object</name></type> <name>valueToArray</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JdbcConnection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>array</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueArray</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>componentType</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getComponentType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>array</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>objArray</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Array</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>componentType</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>objArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>valueToObject</name><argument_list>(<argument><expr><name>componentType</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>objArray</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Object</name></type> <name>valueToOther</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JdbcConnection</name></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Object</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>JdbcUtils</name><operator>.</operator><name>deserialize</name></name><argument_list>(
                    <argument><expr><call><name><name>value</name><operator>.</operator><name>convertToJavaObject</name></name><argument_list>(<argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_JAVA_OBJECT</name></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>CONVERT_TO</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytesNoCopy</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>conn</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>InputStream</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Reader</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Array</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcArray</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Blob</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcBlob</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>JdbcLob</name><operator>.</operator><name>State</name><operator>.</operator><name>WITH_VALUE</name></name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>BLOB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Clob</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcClob</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>JdbcLob</name><operator>.</operator><name>State</name><operator>.</operator><name>WITH_VALUE</name></name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>CLOB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>SQLXML</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLXML</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>JdbcLob</name><operator>.</operator><name>State</name><operator>.</operator><name>WITH_VALUE</name></name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>SQLXML</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>ResultSet</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcResultSet</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>convertToAnyRow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>RESULT_SET</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>valueToLegacyType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>obj</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>JdbcUtils</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBytesNoCopy</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>conn</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>obj</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"converting to class "</literal> <operator>+</operator> <call><name><name>type</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the name of the Java class for the given value type.
     *
     * @param type
     *            the value type
     * @param forJdbc
     *            if {@code true} get class for JDBC layer, if {@code false} get
     *            class for Java functions API
     * @return the class
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getDefaultClass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forJdbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <return>return <expr><name><name>Void</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <return>return <expr><name><name>String</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <return>return <expr><name><name>Clob</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <return>return <expr><name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><name><name>Blob</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <return>return <expr><name><name>Boolean</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>Byte</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>Short</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <return>return <expr><name><name>BigDecimal</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><name><name>Float</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>LocalDate</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Time</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>LocalTime</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <return>return <expr><name><name>OffsetTime</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>LocalDateTime</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <return>return <expr><name><name>OffsetDateTime</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <return>return <expr><name><name>Interval</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><name><name>Object</name><operator>.</operator><name>class</name></name></expr> </then><else>: <expr><name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><name>GEOMETRY_CLASS</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>clazz</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>clazz</name></expr> </then><else>: <expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
            <return>return <expr><name><name>UUID</name><operator>.</operator><name>class</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>Array</name><operator>.</operator><name>class</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>Object</name><index>[]</index></name><operator>.</operator><name>class</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ResultSet</name><operator>.</operator><name>class</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>Object</name><index>[]</index></name><operator>.</operator><name>class</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"data type "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the specified value to the default Java object for its type.
     *
     * @param value
     *            the value
     * @param conn
     *            the connection
     * @param forJdbc
     *            if {@code true} perform conversion for JDBC layer, if
     *            {@code false} perform conversion for Java functions API
     * @return the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>valueToDefaultObject</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JdbcConnection</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forJdbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcClob</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>JdbcLob</name><operator>.</operator><name>State</name><operator>.</operator><name>WITH_VALUE</name></name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>CLOB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcBlob</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>JdbcLob</name><operator>.</operator><name>State</name><operator>.</operator><name>WITH_VALUE</name></name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>BLOB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getByte</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getShort</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getFloat</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><call><name><name>value</name><operator>.</operator><name>getDouble</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>toDate</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalDate</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>toTime</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>valueToOffsetTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>toTimestamp</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>valueToLocalDateTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <return>return <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>valueToOffsetDateTime</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <return>return <expr><operator>(</operator><operator>(</operator><name>ValueInterval</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getInterval</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>forJdbc</name></expr> ?</condition><then> <expr><call><name><name>JdbcUtils</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBytesNoCopy</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>conn</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>GEOMETRY_CLASS</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>ValueGeometry</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getGeometry</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
            <return>return <expr><operator>(</operator><operator>(</operator><name>ValueUuid</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getUuid</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>JdbcArray</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>ARRAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>valueToDefaultArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>forJdbc</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>forJdbc</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>JdbcResultSet</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ValueRow</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name>getNextId</name><argument_list>(<argument><expr><name><name>TraceObject</name><operator>.</operator><name>RESULT_SET</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>valueToDefaultArray</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>forJdbc</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"data type "</literal> <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the specified array value to array of default Java objects for
     * its type.
     *
     * @param value
     *            the array value
     * @param conn
     *            the connection
     * @param forJdbc
     *            if {@code true} perform conversion for JDBC layer, if
     *            {@code false} perform conversion for Java functions API
     * @return the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>valueToDefaultArray</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>JdbcConnection</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forJdbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueCollectionBase</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>values</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>valueToDefaultObject</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>forJdbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read a value from the given result set.
     *
     * @param session
     *            the session
     * @param rs
     *            the result set
     * @param columnIndex
     *            the column index (1-based)
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>readValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>JdbcResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInternal</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(
                    <argument><expr><call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createClob</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>session</name>
                    <operator>.</operator><name>addTemporaryLob</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createBlob</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>ValueToObjectConverter</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

}</block></class>
</unit>
