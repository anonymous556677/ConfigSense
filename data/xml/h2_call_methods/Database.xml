<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/Database.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>DatabaseEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>JavaObjectSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>TableEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Prepared</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateTableData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>SetTypes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name><operator>.</operator><name>ModeEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>TraceSystem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>DefaultNullOrdering</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>PgCatalogSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>LobStorageMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>RowFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>InformationSchema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>TriggerObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>security</name><operator>.</operator><name>auth</name><operator>.</operator><name>Authenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>DataHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>FileLock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>FileLockMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>FileStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>InDoubtTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>LobStorageFrontend</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>LobStorageInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>fs</name><operator>.</operator><name>encrypt</name><operator>.</operator><name>FileEncrypt</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableLinkConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableSynonym</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>tools</name><operator>.</operator><name>DeleteDbFiles</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>tools</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JdbcUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>SmallLRUCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>SourceCompiler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TempFileDeleter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZoneProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CaseInsensitiveConcurrentMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CaseInsensitiveMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestampTimeZone</name></name>;</import>

<comment type="block" format="javadoc">/**
 * There is one database object per open database.
 *
 * The format of the meta data table is:
 *  id int, 0, objectType int, sql varchar
 *
 * @since 2004-04-15 22:49
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Database</name> <super_list><implements>implements <super><name>DataHandler</name></super>, <super><name>CastDataProvider</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>initialPowerOffCount</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ASSERT</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>META_LOCK_DEBUGGING</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Database</name></argument>&gt;</argument_list></name></type> <name>META_LOCK_DEBUGGING_DB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Throwable</name></argument>&gt;</argument_list></name></type> <name>META_LOCK_DEBUGGING_STACK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>SessionLocal</name><index>[]</index></name></type> <name>EMPTY_SESSION_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>SessionLocal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>a</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// Intentional side-effect</comment>
        <assert>assert <expr><name>a</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</assert>
        <expr_stmt><expr><name>ASSERT</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING</name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING_DB</name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING_STACK</name> <operator>=</operator> <operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING_DB</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>META_LOCK_DEBUGGING_STACK</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * The default name of the system user. This name is only used as long as
     * there is no administrator user registered.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SYSTEM_USER_NAME</name> <init>= <expr><literal type="string">"DBA"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>persistent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>databaseName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>databaseShortName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>databaseURL</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>cipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>filePasswordHash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>fileEncryptionKey</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RightOwner</name></argument>&gt;</argument_list></name></type> <name>usersAndRoles</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Setting</name></argument>&gt;</argument_list></name></type> <name>settings</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>schemas</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>rights</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Comment</name></argument>&gt;</argument_list></name></type> <name>comments</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableEngine</name></argument>&gt;</argument_list></name></type> <name>tableEngines</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>userSessions</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>synchronizedSet</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>exclusiveSession</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BitSet</name></type> <name>objectIds</name> <init>= <expr><operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>lobSyncObject</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Schema</name></type> <name>mainSchema</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Schema</name></type> <name>infoSchema</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Schema</name></type> <name>pgCatalogSchema</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextSessionId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextTempTableId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>User</name></type> <name>systemUser</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SessionLocal</name></type> <name>systemSession</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SessionLocal</name></type> <name>lobSession</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Table</name></type> <name>meta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Index</name></type> <name>metaIdIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FileLock</name></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>starting</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TraceSystem</name></type> <name>traceSystem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Trace</name></type> <name>trace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileLockMethod</name></type> <name>fileLockMethod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Role</name></type> <name>publicRole</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>modificationDataId</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>modificationMetaId</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Used to trigger the client side to reload some of the settings.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>remoteSettingsId</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CompareMode</name></type> <name>compareMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>cluster</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>CLUSTERING_DISABLED</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readOnly</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DatabaseEventListener</name></type> <name>eventListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxMemoryRows</name> <init>= <expr><name><name>SysProperties</name><operator>.</operator><name>MAX_MEMORY_ROWS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lockMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxLengthInplaceLob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>allowLiterals</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_ALL</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>powerOffCount</name> <init>= <expr><name>initialPowerOffCount</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>closeDelay</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DelayedDatabaseCloser</name></type> <name>delayedCloser</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>closing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreCase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>deleteFilesOnDisconnect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>optimizeReuseResults</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>cacheType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>referentialIntegrity</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>Mode</name><operator>.</operator><name>getRegular</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DefaultNullOrdering</name></type> <name>defaultNullOrdering</name> <init>= <expr><name><name>DefaultNullOrdering</name><operator>.</operator><name>LOW</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxOperationMemory</name> <init>=
            <expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_MAX_OPERATION_MEMORY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>SmallLRUCache</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>lobFileListCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>autoServerMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>autoServerPort</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Server</name></type> <name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>TableLinkConnection</name></argument>, <argument><name>TableLinkConnection</name></argument>&gt;</argument_list></name></type> <name>linkConnections</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TempFileDeleter</name></type> <name>tempFileDeleter</name> <init>= <expr><call><name><name>TempFileDeleter</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>compactMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SourceCompiler</name></type> <name>compiler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LobStorageInterface</name></type> <name>lobStorage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>pageSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>defaultTableType</name> <init>= <expr><name><name>Table</name><operator>.</operator><name>TYPE_CACHED</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DbSettings</name></type> <name>dbSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Store</name></type> <name>store</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowBuiltinAliasOverride</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name>DbException</name></argument>&gt;</argument_list></name></type> <name>backgroundException</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JavaObjectSerializer</name></type> <name>javaObjectSerializer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>javaObjectSerializerName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>javaObjectSerializerInitialized</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>queryStatistics</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>queryStatisticsMaxEntries</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>QUERY_STATISTICS_MAX_ENTRIES</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>QueryStatisticsData</name></type> <name>queryStatisticsData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RowFactory</name></type> <name>rowFactory</name> <init>= <expr><call><name><name>RowFactory</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreCatalogs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Authenticator</name></type> <name>authenticator</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Database</name><parameter_list>(<parameter><decl><type><name>ConnectionInfo</name></type> <name>ci</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cipher</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ASSERT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_DB</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_STACK</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>databaseName</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dbSettings</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getDbSettings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compareMode</name></name> <operator>=</operator> <call><name><name>CompareMode</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filePasswordHash</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getFilePasswordHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileEncryptionKey</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getFileEncryptionKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseName</name></name> <operator>=</operator> <name>databaseName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseShortName</name></name> <operator>=</operator> <call><name>parseDatabaseShortName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxLengthInplaceLob</name></name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>DEFAULT_MAX_LENGTH_INPLACE_LOB</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher</name></name> <operator>=</operator> <name>cipher</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoServerMode</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"AUTO_SERVER"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoServerPort</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"AUTO_SERVER_PORT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pageSize</name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"PAGE_SIZE"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_PAGE_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cipher</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>pageSize</name> <operator>%</operator> <name><name>FileEncrypt</name><operator>.</operator><name>BLOCK_SIZE</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"CIPHER &amp;&amp; PAGE_SIZE="</literal> <operator>+</operator> <name>pageSize</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>accessModeData</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>toLowerEnglish</name></name><argument_list>(<argument><expr><call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"ACCESS_MODE_DATA"</literal></expr></argument>, <argument><expr><literal type="string">"rw"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="string">"r"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>accessModeData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>readOnly</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lockMethodName</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"FILE_LOCK"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fileLockMethod</name> <operator>=</operator> <ternary><condition><expr><name>lockMethodName</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>FileLock</name><operator>.</operator><name>getFileLockMethod</name></name><argument_list>(<argument><expr><name>lockMethodName</name></expr></argument>)</argument_list></call></expr> </then><else>:
                            <expr><ternary><condition><expr><name>autoServerMode</name></expr> ?</condition><then> <expr><name><name>FileLockMethod</name><operator>.</operator><name>FILE</name></name></expr> </then><else>: <expr><name><name>FileLockMethod</name><operator>.</operator><name>FS</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseURL</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>removeProperty</name></name><argument_list>(<argument><expr><literal type="string">"DATABASE_EVENT_LISTENER"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setEventListenerClass</name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>removeProperty</name></name><argument_list>(<argument><expr><literal type="string">"MODE"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>Mode</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_MODE_1</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>removeProperty</name></name><argument_list>(<argument><expr><literal type="string">"DEFAULT_NULL_ORDERING"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>defaultNullOrdering</name> <operator>=</operator> <call><name><name>DefaultNullOrdering</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"DEFAULT_NULL_ORDERING"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"JAVA_OBJECT_SERIALIZER"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaObjectSerializerName</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowBuiltinAliasOverride</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"BUILTIN_ALIAS_OVERRIDE"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>closeAtVmShutdown</name> <init>= <expr><name><name>dbSettings</name><operator>.</operator><name>dbCloseOnExit</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>traceLevelFile</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>getIntProperty</name></name><argument_list>(<argument><expr><name><name>SetTypes</name><operator>.</operator><name>TRACE_LEVEL_FILE</name></name></expr></argument>, <argument><expr><name><name>TraceSystem</name><operator>.</operator><name>DEFAULT_TRACE_LEVEL_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>traceLevelSystemOut</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>getIntProperty</name></name><argument_list>(<argument><expr><name><name>SetTypes</name><operator>.</operator><name>TRACE_LEVEL_SYSTEM_OUT</name></name></expr></argument>,
                <argument><expr><name><name>TraceSystem</name><operator>.</operator><name>DEFAULT_TRACE_LEVEL_SYSTEM_OUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cacheType</name></name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><call><name><name>ci</name><operator>.</operator><name>removeProperty</name></name><argument_list>(<argument><expr><literal type="string">"CACHE_TYPE"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>CACHE_TYPE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreCatalogs</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"IGNORE_CATALOGS"</literal></expr></argument>, <argument><expr><name><name>dbSettings</name><operator>.</operator><name>ignoreCatalogs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockMode</name></name> <operator>=</operator> <call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"LOCK_MODE"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_LOCK_MODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>traceFile</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>readOnly</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>traceLevelFile</name> <operator>&gt;=</operator> <name><name>TraceSystem</name><operator>.</operator><name>DEBUG</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>traceFile</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.io.tmpdir"</literal></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/h2_"</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call>
                            <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>SUFFIX_TRACE_FILE</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>traceFile</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>traceFile</name> <operator>=</operator> <name>databaseName</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>SUFFIX_TRACE_FILE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>traceFile</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>traceSystem</name> <operator>=</operator> <operator>new</operator> <call><name>TraceSystem</name><argument_list>(<argument><expr><name>traceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>traceSystem</name><operator>.</operator><name>setLevelFile</name></name><argument_list>(<argument><expr><name>traceLevelFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>traceSystem</name><operator>.</operator><name>setLevelSystemOut</name></name><argument_list>(<argument><expr><name>traceLevelSystemOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>trace</name> <operator>=</operator> <call><name><name>traceSystem</name><operator>.</operator><name>getTrace</name></name><argument_list>(<argument><expr><name><name>Trace</name><operator>.</operator><name>DATABASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opening {0} (build {1})"</literal></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>BUILD_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>autoServerMode</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>readOnly</name> <operator>||</operator> <operator>!</operator><name>persistent</name> <operator>||</operator> <name>fileLockMethod</name> <operator>==</operator> <name><name>FileLockMethod</name><operator>.</operator><name>NO</name></name>
                    <operator>||</operator> <name>fileLockMethod</name> <operator>==</operator> <name><name>FileLockMethod</name><operator>.</operator><name>FS</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(
                        <argument><expr><literal type="string">"AUTO_SERVER=TRUE &amp;&amp; (readOnly || inMemory || FILE_LOCK=NO || FILE_LOCK=FS)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>lockFileName</name> <init>= <expr><name>databaseName</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>SUFFIX_LOCK_FILE</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>readOnly</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>FileUtils</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>lockFileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_ALREADY_OPEN_1</name></name></expr></argument>, <argument><expr><literal type="string">"Lock file exists: "</literal> <operator>+</operator> <name>lockFileName</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fileLockMethod</name> <operator>!=</operator> <name><name>FileLockMethod</name><operator>.</operator><name>NO</name></name> <operator>&amp;&amp;</operator> <name>fileLockMethod</name> <operator>!=</operator> <name><name>FileLockMethod</name><operator>.</operator><name>FS</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>lock</name> <operator>=</operator> <operator>new</operator> <call><name>FileLock</name><argument_list>(<argument><expr><name>traceSystem</name></expr></argument>, <argument><expr><name>lockFileName</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_SLEEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>fileLockMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>autoServerMode</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>startServer</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>getUniqueId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>deleteOldTempFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>dbSettings</name><operator>.</operator><name>mvStore</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>store</name> <operator>=</operator> <operator>new</operator> <call><name>Store</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>systemUser</name> <operator>=</operator> <operator>new</operator> <call><name>User</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SYSTEM_USER_NAME</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>systemUser</name><operator>.</operator><name>setAdmin</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mainSchema</name> <operator>=</operator> <operator>new</operator> <call><name>Schema</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MAIN_SCHEMA_ID</name></name></expr></argument>, <argument><expr><call><name>sysIdentifier</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SCHEMA_MAIN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>systemUser</name></expr></argument>,
                    <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>infoSchema</name> <operator>=</operator> <operator>new</operator> <call><name>InformationSchema</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>systemUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>schemas</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>mainSchema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mainSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>schemas</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>infoSchema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>infoSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>getEnum</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pgCatalogSchema</name> <operator>=</operator> <operator>new</operator> <call><name>PgCatalogSchema</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>systemUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>schemas</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>pgCatalogSchema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pgCatalogSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>pgCatalogSchema</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>publicRole</name> <operator>=</operator> <operator>new</operator> <call><name>Role</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sysIdentifier</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>PUBLIC_ROLE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>usersAndRoles</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>publicRole</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>publicRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>systemSession</name> <operator>=</operator> <call><name>createSession</name><argument_list>(<argument><expr><name>systemUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lobSession</name> <operator>=</operator> <call><name>createSession</name><argument_list>(<argument><expr><name>systemUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>settingKeys</name> <init>= <expr><call><name><name>dbSettings</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>getTransactionStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>lobSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>settingKeys</name><operator>.</operator><name>removeIf</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"PAGE_STORE_"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CreateTableData</name></type> <name>data</name> <init>= <expr><call><name>createSysTableData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name><name>mainSchema</name><operator>.</operator><name>createTable</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>pkCols</name> <init>= <expr><call><name><name>IndexColumn</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{ <expr><call><name><name>data</name><operator>.</operator><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>metaIdIndex</name> <operator>=</operator> <call><name><name>meta</name><operator>.</operator><name>addIndex</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>, <argument><expr><literal type="string">"SYS_ID"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkCols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                    <argument><expr><call><name><name>IndexType</name><operator>.</operator><name>createPrimaryKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>objectIds</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>executeMeta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>getTransactionStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endLeftoverTransactions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>removeTemporaryMaps</name></name><argument_list>(<argument><expr><name>objectIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>recompileInvalidViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>starting</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// set CREATE_BUILD in a new database</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>settingName</name> <init>= <expr><call><name><name>SetTypes</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name><name>SetTypes</name><operator>.</operator><name>CREATE_BUILD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Setting</name></type> <name>setting</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>settingName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>setting</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>setting</name> <operator>=</operator> <operator>new</operator> <call><name>Setting</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>allocateObjectId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>settingName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>setting</name><operator>.</operator><name>setIntValue</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>BUILD_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addDatabaseObject</name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>, <argument><expr><name>setting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>lobStorage</name> <operator>=</operator> <operator>new</operator> <call><name>LobStorageMap</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lobSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"opened {0}"</literal></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>writeDelay</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"WRITE_DELAY"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>DEFAULT_WRITE_DELAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setWriteDelay</name><argument_list>(<argument><expr><name>writeDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>closeAtVmShutdown</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>OnExitDatabaseCloser</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>OutOfMemoryError</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>fillInStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>DbException</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>DbException</name><operator>)</operator> <name>e</name><operator>)</operator><operator>.</operator><call><name>getErrorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>DATABASE_ALREADY_OPEN_1</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>stopServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <comment type="line">// only write if the database is not already in use</comment>
                        <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"opening {0}"</literal></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>traceSystem</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>closeOpenFilesAndUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLockTimeout</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Setting</name></type> <name>setting</name> <init>= <expr><call><name>findSetting</name><argument_list>(<argument><expr><call><name><name>SetTypes</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name><name>SetTypes</name><operator>.</operator><name>DEFAULT_LOCK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>setting</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Constants</name><operator>.</operator><name>INITIAL_LOCK_TIMEOUT</name></name></expr> </then><else>: <expr><call><name><name>setting</name><operator>.</operator><name>getIntValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowFactory</name></type> <name>getRowFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowFactory</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRowFactory</name><parameter_list>(<parameter><decl><type><name>RowFactory</name></type> <name>rowFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowFactory</name></name> <operator>=</operator> <name>rowFactory</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInitialPowerOffCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>initialPowerOffCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPowerOffCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>powerOffCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Store</name></type> <name>getStore</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>store</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getModificationDataId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>modificationDataId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getNextModificationDataId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>modificationDataId</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getModificationMetaId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>modificationMetaId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getNextModificationMetaId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// if the meta data has been modified, the data is modified as well</comment>
        <comment type="line">// (because MetaTable returns modificationDataId)</comment>
        <expr_stmt><expr><call><name><name>modificationDataId</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>modificationMetaId</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRemoteSettingsId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>remoteSettingsId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getNextRemoteSettingsId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>remoteSettingsId</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPowerOffCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>powerOffCount</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>checkPowerOff</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>checkPowerOff2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkPowerOff2</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>powerOffCount</name><operator>--</operator></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>powerOffCount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>closeImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>stopServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// allow testing shutdown</comment>
                    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lock</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>traceSystem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>traceSystem</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>DbException</name><operator>.</operator><name>traceThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Engine</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_CLOSED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the trace object for the given module id.
     *
     * @param moduleId the module id
     * @return the trace object
     */</comment>
    <function><type><specifier>public</specifier> <name>Trace</name></type> <name>getTrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>moduleId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>traceSystem</name><operator>.</operator><name>getTrace</name></name><argument_list>(<argument><expr><name>moduleId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>FileStore</name></type> <name>openFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>openMode</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mustExist</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mustExist</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>FileUtils</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>FileStore</name></type> <name>store</name> <init>= <expr><call><name><name>FileStore</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>openMode</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>,
                <argument><expr><name>filePasswordHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>closeSilently</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>store</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the file password hash is correct.
     *
     * @param testCipher the cipher algorithm
     * @param testHash the hash code
     * @return true if the cipher algorithm and the password match
     */</comment>
    <function><type><name>boolean</name></type> <name>validateFilePasswordHash</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>testCipher</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>testHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>testCipher</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Utils</name><operator>.</operator><name>compareSecure</name></name><argument_list>(<argument><expr><name>testHash</name></expr></argument>, <argument><expr><name>filePasswordHash</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>parseDatabaseShortName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> <init>= <expr><name>databaseName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>
        <label><name>loop</name>:</label> <while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'/'</literal></expr>:</case>
            <case>case <expr><literal type="char">':'</literal></expr>:</case>
            <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
                <break>break <name>loop</name>;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>++</operator><name>i</name> <operator>==</operator> <name>l</name></expr> ?</condition><then> <expr><literal type="string">"UNNAMED"</literal></expr> </then><else>: <expr><call><name><name>n</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>truncateString</name></name><argument_list>(
                <argument><expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>databaseToUpper</name></name></expr> ?</condition><then> <expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>databaseToLower</name></name></expr> ?</condition><then> <expr><call><name><name>StringUtils</name><operator>.</operator><name>toLowerEnglish</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></else></ternary></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>MAX_IDENTIFIER_LENGTH</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CreateTableData</name></type> <name>createSysTableData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CreateTableData</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>CreateTableData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>cols</name> <init>= <expr><name><name>data</name><operator>.</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>columnId</name> <init>= <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>columnId</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>columnId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cols</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <literal type="string">"SYS"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>temporary</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>persistData</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>persistIndexes</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>isHidden</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>systemSession</name></expr>;</expr_stmt>
        <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>metaIdIndex</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>MetaRecord</name></argument>&gt;</argument_list></name></type> <name>firstRecords</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>domainRecords</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>,
                <decl><type ref="prev"/><name>middleRecords</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>constraintRecords</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>,
                <decl><type ref="prev"/><name>lastRecords</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>MetaRecord</name></type> <name>rec</name> <init>= <expr><operator>new</operator> <call><name>MetaRecord</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>objectIds</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>rec</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><call><name><name>rec</name><operator>.</operator><name>getObjectType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>SETTING</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>SCHEMA</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>FUNCTION_ALIAS</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>firstRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>DOMAIN</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>domainRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>SEQUENCE</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>CONSTANT</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>TABLE_OR_VIEW</name></name></expr>:</case>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>INDEX</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>middleRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>constraintRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>lastRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></while>
        <synchronized>synchronized <init>(<expr><name>systemSession</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name>executeMeta</name><argument_list>(<argument><expr><name>firstRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Domains may depend on other domains</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>domainRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>count</name> <operator>=</operator> <name>j</name></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>DbException</name></type> <name>exception</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>MetaRecord</name></type> <name>rec</name> <init>= <expr><call><name><name>domainRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <try>try <block>{<block_content>
                            <expr_stmt><expr><call><name><name>rec</name><operator>.</operator><name>prepareAndExecute</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>systemSession</name></expr></argument>, <argument><expr><name>eventListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>exception</name> <operator>=</operator> <name>ex</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name><name>domainRecords</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>j</name><operator>++</operator></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>exception</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><name>exception</name></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>executeMeta</name><argument_list>(<argument><expr><name>middleRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Prepare, but don't create all constraints and sort them</comment>
            <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>constraintRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Prepared</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Prepared</name></type> <name>prepared</name> <init>= <expr><call><name><name>constraintRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>prepare</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>systemSession</name></expr></argument>, <argument><expr><name>eventListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>prepared</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>constraints</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>prepared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>constraints</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>MetaRecord</name><operator>.</operator><name>CONSTRAINTS_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Create constraints in order (unique and primary key before</comment>
                <comment type="line">// all others)</comment>
                <for>for <control>(<init><decl><type><name>Prepared</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>MetaRecord</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>eventListener</name></expr></argument>, <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>executeMeta</name><argument_list>(<argument><expr><name>lastRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeMeta</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>MetaRecord</name></argument>&gt;</argument_list></name></type> <name>records</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>records</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>MetaRecord</name></type> <name>rec</name> <range>: <expr><name>records</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rec</name><operator>.</operator><name>prepareAndExecute</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>systemSession</name></expr></argument>, <argument><expr><name>eventListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startServer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>server</name> <operator>=</operator> <call><name><name>Server</name><operator>.</operator><name>createTcpServer</name></name><argument_list>(
                    <argument><expr><literal type="string">"-tcpPort"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>autoServerPort</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"-tcpAllowOthers"</literal></expr></argument>,
                    <argument><expr><literal type="string">"-tcpDaemon"</literal></expr></argument>,
                    <argument><expr><literal type="string">"-key"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>String</name></type> <name>localAddress</name> <init>= <expr><call><name><name>NetUtils</name><operator>.</operator><name>getLocalAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><name>localAddress</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"server"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>hostName</name> <init>= <expr><call><name><name>NetUtils</name><operator>.</operator><name>getHostName</name></name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"hostName"</literal></expr></argument>, <argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>stopServer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>server</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Server</name></type> <name>s</name> <init>= <expr><name>server</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// avoid calling stop recursively</comment>
            <comment type="line">// because stopping the server will</comment>
            <comment type="line">// try to close the database as well</comment>
            <expr_stmt><expr><name>server</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>recompileInvalidViews</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>atLeastOneRecompiledSuccessfully</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>atLeastOneRecompiledSuccessfully</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Table</name></type> <name>obj</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>TableView</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>TableView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>TableView</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>recompile</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>view</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>atLeastOneRecompiledSuccessfully</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block> while <condition>(<expr><name>atLeastOneRecompiledSuccessfully</name></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>TableView</name><operator>.</operator><name>clearIndexCaches</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addMeta</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><call><name><name>Thread</name><operator>.</operator><name>holdsLock</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</assert>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>obj</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Row</name></type> <name>r</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getTemplateRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>MetaRecord</name><operator>.</operator><name>populateRowFromDBObject</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <assert>assert <expr><call><name><name>objectIds</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</assert>
                <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>verifyMetaLocked</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>metaIdIndex</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <assert>assert <expr><name>starting</name></expr>;</assert>
                    <decl_stmt><decl><type><name>Row</name></type> <name>oldRow</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>MetaRecord</name></type> <name>rec</name> <init>= <expr><operator>new</operator> <call><name>MetaRecord</name><argument_list>(<argument><expr><name>oldRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <assert>assert <expr><call><name><name>rec</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</assert>
                    <assert>assert <expr><call><name><name>rec</name><operator>.</operator><name>getObjectType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</assert>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rec</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getCreateSQLForMeta</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>updateRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify the meta table is locked.
     *
     * @param session the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>verifyMetaLocked</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lockMode</name> <operator>!=</operator> <name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name> <operator>&amp;&amp;</operator> <name>meta</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>meta</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lock the metadata table for updates.
     *
     * @param session the session
     * @return whether it was already locked before by this session
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>lockMeta</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// this method can not be synchronized on the database object,</comment>
        <comment type="line">// as unlocking is also synchronized on the database object -</comment>
        <comment type="line">// so if locking starts just before unlocking, locking could</comment>
        <comment type="line">// never be successful</comment>
        <if_stmt><if>if <condition>(<expr><name>meta</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ASSERT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lockMetaAssertion</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>meta</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>lockMetaAssertion</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// If we are locking two different databases in the same stack, just ignore it.</comment>
        <comment type="line">// This only happens in TestLinkedTable where we connect to another h2 DB in the</comment>
        <comment type="line">// same process.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>META_LOCK_DEBUGGING_DB</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>META_LOCK_DEBUGGING_DB</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>SessionLocal</name></type> <name>prev</name> <init>= <expr><call><name><name>META_LOCK_DEBUGGING</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_DB</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_STACK</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Throwable</name><argument_list>(<argument><expr><literal type="string">"Last meta lock granted in this stack trace, "</literal>
                        <operator>+</operator> <literal type="string">"this is debug information for following IllegalStateException"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_STACK</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>printStackTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"meta currently locked by "</literal> <operator>+</operator> <name>prev</name> <operator>+</operator> <literal type="string">", sessionid="</literal> <operator>+</operator> <call><name><name>prev</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                        <operator>+</operator> <literal type="string">" and trying to be locked by different session, "</literal> <operator>+</operator> <name>session</name> <operator>+</operator> <literal type="string">", sessionid="</literal> <comment type="line">//</comment>
                        <operator>+</operator> <call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" on same thread"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unlock the metadata table.
     *
     * @param session the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unlockMeta</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>meta</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>unlockMetaDebug</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method doesn't actually unlock the metadata table, all it does it
     * reset the debugging flags.
     *
     * @param session the session
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>unlockMetaDebug</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ASSERT</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>META_LOCK_DEBUGGING</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_DB</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>META_LOCK_DEBUGGING_STACK</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given object from the meta data.
     *
     * @param session the session
     * @param id the id of the object to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeMeta</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SearchRow</name></type> <name>r</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createRow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>wasLocked</name> <init>= <expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>metaIdIndex</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Row</name></type> <name>found</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>removeRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>checkMetaFree</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wasLocked</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// must not keep the lock if it was not locked</comment>
                    <comment type="line">// otherwise updating sequences may cause a deadlock</comment>
                    <expr_stmt><expr><call><name>unlockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></finally></try>
            <comment type="line">// release of the object id has to be postponed until the end of the transaction,</comment>
            <comment type="line">// otherwise it might be re-used prematurely, and it would make</comment>
            <comment type="line">// rollback impossible or lead to MVMaps name collision,</comment>
            <comment type="line">// so until then ids are accumulated within session</comment>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>scheduleDatabaseObjectIdForRelease</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mark some database ids as unused.
     * @param idsToRelease the ids to release
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>releaseDatabaseObjectIds</name><parameter_list>(<parameter><decl><type><name>BitSet</name></type> <name>idsToRelease</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>objectIds</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>objectIds</name><operator>.</operator><name>andNot</name></name><argument_list>(<argument><expr><name>idsToRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>?</name> <extends>extends <name>DbObject</name></extends></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>ROLE</name></name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>usersAndRoles</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>SETTING</name></name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>settings</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>RIGHT</name></name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>rights</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>SCHEMA</name></name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>schemas</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>COMMENT</name></name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>comments</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DbObject</name></argument>&gt;</argument_list></name><operator>)</operator> <name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a schema object to the database.
     *
     * @param session the session
     * @param obj the object to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSchemaObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SchemaObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add an object to the database.
     *
     * @param session the session
     * @param obj the object to add
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addDatabaseObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><operator>(</operator><name>User</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>user</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>systemUser</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>SYSTEM_USER_NAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>systemUser</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name> <operator>&amp;&amp;</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"object already exists"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the comment for the given database object if one exists, or null if
     * not.
     *
     * @param object the database object
     * @return the comment or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Comment</name></type> <name>findComment</name><parameter_list>(<parameter><decl><type><name>DbObject</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>object</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>COMMENT</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>Comment</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>comments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the role if it exists, or null if not.
     *
     * @param roleName the name of the role
     * @return the role or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Role</name></type> <name>findRole</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>roleName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <init>= <expr><call><name>findUserOrRole</name><argument_list>(<argument><expr><name>roleName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>rightOwner</name> <operator>instanceof</operator> <name>Role</name></expr> ?</condition><then> <expr><operator>(</operator><name>Role</name><operator>)</operator> <name>rightOwner</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the schema if it exists, or null if not.
     *
     * @param schemaName the name of the schema
     * @return the schema or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Schema</name></type> <name>findSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>schemas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the setting if it exists, or null if not.
     *
     * @param name the name of the setting
     * @return the setting or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Setting</name></type> <name>findSetting</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the user if it exists, or null if not.
     *
     * @param name the name of the user
     * @return the user or null
     */</comment>
    <function><type><specifier>public</specifier> <name>User</name></type> <name>findUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <init>= <expr><call><name>findUserOrRole</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>rightOwner</name> <operator>instanceof</operator> <name>User</name></expr> ?</condition><then> <expr><operator>(</operator><name>User</name><operator>)</operator> <name>rightOwner</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get user with the given name. This method throws an exception if the user
     * does not exist.
     *
     * @param name the user name
     * @return the user
     * @throws DbException if the user does not exist
     */</comment>
    <function><type><specifier>public</specifier> <name>User</name></type> <name>getUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><call><name>findUser</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>USER_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>user</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the user or role if it exists, or {@code null} if not.
     *
     * @param name the name of the user or role
     * @return the user, the role, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>RightOwner</name></type> <name>findUserOrRole</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>usersAndRoles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a session for the given user.
     *
     * @param user the user
     * @param networkConnectionInfo the network connection information, or {@code null}
     * @return the session, or null if the database is currently closing
     * @throws DbException if the database is in exclusive mode
     */</comment>
    <function><type><specifier>synchronized</specifier> <name>SessionLocal</name></type> <name>createSession</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>closing</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>exclusiveSession</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_IN_EXCLUSIVE_MODE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SessionLocal</name></type> <name>session</name> <init>= <expr><call><name>createSession</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setNetworkConnectionInfo</name></name><argument_list>(<argument><expr><name>networkConnectionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userSessions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"connecting session #{0} to {1}"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>delayedCloser</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>delayedCloser</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>delayedCloser</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>session</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>SessionLocal</name></type> <name>createSession</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>++</operator><name>nextSessionId</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>SessionLocal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a session. This method is called after the user has disconnected.
     *
     * @param session the session
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeSession</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>exclusiveSession</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>userSessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"disconnecting session #{0}"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isUserSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>userSessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>closeDelay</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>closeDelay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>delayedCloser</name> <operator>=</operator> <operator>new</operator> <call><name>DelayedDatabaseCloser</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>closeDelay</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"disconnected session #{0}"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>isUserSession</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>session</name> <operator>!=</operator> <name>systemSession</name> <operator>&amp;&amp;</operator> <name>session</name> <operator>!=</operator> <name>lobSession</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>closeAllSessionsExcept</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>except</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>SessionLocal</name><index>[]</index></name></type> <name>all</name> <init>= <expr><call><name><name>userSessions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>EMPTY_SESSION_ARRAY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>except</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// indicate that session need to be closed ASAP</comment>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>suspend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>getLockTimeout</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// 'sleep' should be strictly greater than zero, otherwise real time is not taken into consideration</comment>
        <comment type="line">// and the thread simply waits until notified</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>sleep</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>timeout</name> <operator>/</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <comment type="line">// although nobody going to notify us</comment>
                <comment type="line">// it is vital to give up lock on a database</comment>
                <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore</comment>
            </block_content>}</block></catch></try>
            <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name> <operator>&gt;</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>except</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>s</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <try>try <block>{<block_content>
                            <comment type="line">// this will rollback outstanding transaction</comment>
                            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"disconnecting session #{0}"</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><name>all</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>except</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>s</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close the database.
     *
     * @param fromShutdownHook true if this method is called from the shutdown
     *            hook
     */</comment>
    <function><type><name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fromShutdownHook</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DbException</name></type> <name>b</name> <init>= <expr><call><name><name>backgroundException</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>closeImpl</name><argument_list>(<argument><expr><name>fromShutdownHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// wrap the exception, so we see it was thrown here</comment>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeImpl</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fromShutdownHook</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>closing</name> <operator>||</operator> <operator>!</operator><name>fromShutdownHook</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>userSessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>closing</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stopServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>userSessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <assert>assert <expr><name>fromShutdownHook</name></expr>;</assert>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"closing {0} from shutdown hook"</literal></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>closeAllSessionsExcept</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"closing {0}"</literal></expr></argument>, <argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// allow the event listener to connect to the database</comment>
                <expr_stmt><expr><name>closing</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DatabaseEventListener</name></type> <name>e</name> <init>= <expr><name>eventListener</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// set it to null, to make sure it's called only once</comment>
                <expr_stmt><expr><name>eventListener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>closingDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>closing</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>userSessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"event listener {0} left connection open"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// if listener left an open connection</comment>
                    <expr_stmt><expr><call><name>closeAllSessionsExcept</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>removeOrphanedLobs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></synchronized>
        <try>try <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>systemSession</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>Sequence</name></type> <name>sequence</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllSequences</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>sequence</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                    <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTriggers</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <try>try <block>{<block_content>
                                <expr_stmt><expr><call><name><name>trigger</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></catch></try>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>powerOffCount</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>tempFileDeleter</name><operator>.</operator><name>deleteAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>lobSession</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>lobSession</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lobSession</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>systemSession</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>systemSession</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>closeOpenFilesAndUnlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>traceSystem</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>OnExitDatabaseCloser</name><operator>.</operator><name>unregister</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>deleteFilesOnDisconnect</name> <operator>&amp;&amp;</operator> <name>persistent</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>deleteFilesOnDisconnect</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>directory</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>DeleteDbFiles</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// ignore (the trace is closed already)</comment>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name><name>Engine</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeOrphanedLobs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// remove all session variables and temporary lobs</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>persistent</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>lobStorage</name><operator>.</operator><name>removeAllForTable</name></name><argument_list>(<argument><expr><name><name>LobStorageFrontend</name><operator>.</operator><name>TABLE_ID_SESSION_VARIABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close all open files and unlock the database.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>closeOpenFilesAndUnlock</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isClosed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>compactMode</name> <operator>==</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_IMMEDIATELY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>closeImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>allowedCompactionTime</name> <init>=
                            <expr><ternary><condition><expr><name>compactMode</name> <operator>==</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_COMPACT</name></name> <operator>||</operator>
                            <name>compactMode</name> <operator>==</operator> <name><name>CommandInterface</name><operator>.</operator><name>SHUTDOWN_DEFRAG</name></name> <operator>||</operator>
                            <name><name>dbSettings</name><operator>.</operator><name>defragAlways</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>dbSettings</name><operator>.</operator><name>maxCompactTime</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>allowedCompactionTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Don't delete temp files if everything is already closed</comment>
                <comment type="line">// (maybe in checkPowerOff), the database could be open now</comment>
                <comment type="line">// (even from within another process).</comment>
                <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>fileLockMethod</name> <operator>==</operator> <name><name>FileLockMethod</name><operator>.</operator><name>NO</name></name> <operator>||</operator> <name>fileLockMethod</name> <operator>==</operator> <name><name>FileLockMethod</name><operator>.</operator><name>FS</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>deleteOldTempFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lock</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>closeFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>closeImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkMetaFree</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SearchRow</name></type> <name>r</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createRow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>metaIdIndex</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Allocate a new object id.
     *
     * @return the id
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>allocateObjectId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>objectIds</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name><name>objectIds</name><operator>.</operator><name>nextClearBit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>objectIds</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns system user.
     *
     * @return system user
     */</comment>
    <function><type><specifier>public</specifier> <name>User</name></type> <name>getSystemUser</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>systemUser</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns main schema (usually PUBLIC).
     *
     * @return main schema (usually PUBLIC)
     */</comment>
    <function><type><specifier>public</specifier> <name>Schema</name></type> <name>getMainSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mainSchema</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Comment</name></argument>&gt;</argument_list></name></type> <name>getAllComments</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>comments</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getAllowLiterals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Constants</name><operator>.</operator><name>ALLOW_LITERALS_ALL</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>allowLiterals</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>getAllRights</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>rights</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all tables and views. Meta data tables may be excluded.
     *
     * @return all objects of that type
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getAllTablesAndViews</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all synonyms.
     *
     * @return all objects of that type
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TableSynonym</name></argument>&gt;</argument_list></name></type> <name>getAllSynonyms</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TableSynonym</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getAllSynonyms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>getAllSchemas</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Schema</name></argument>&gt;</argument_list></name></type> <name>getAllSchemasNoMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Setting</name></argument>&gt;</argument_list></name></type> <name>getAllSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>settings</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>RightOwner</name></argument>&gt;</argument_list></name></type> <name>getAllUsersAndRoles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>usersAndRoles</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCacheType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cacheType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCluster</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cluster</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CompareMode</name></type> <name>getCompareMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>compareMode</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getDatabasePath</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>toRealPath</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getShortName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>databaseShortName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>databaseName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all sessions that are currently connected to the database.
     *
     * @param includingSystemSession if the system session should also be
     *            included
     * @return the list of sessions
     */</comment>
    <function><type><specifier>public</specifier> <name><name>SessionLocal</name><index>[]</index></name></type> <name>getSessions</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>includingSystemSession</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
        <comment type="line">// need to synchronized on this database,</comment>
        <comment type="line">// otherwise the list may contain null elements</comment>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>userSessions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
        <if_stmt><if>if <condition>(<expr><name>includingSystemSession</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// copy, to ensure the reference is stable</comment>
            <decl_stmt><decl><type><name>SessionLocal</name></type> <name>s</name> <init>= <expr><name>systemSession</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>lobSession</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>SessionLocal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update an object in the system table.
     *
     * @param session the session
     * @param obj the database object
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateMeta</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>obj</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Row</name></type> <name>newRow</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getTemplateRow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>MetaRecord</name><operator>.</operator><name>populateRowFromDBObject</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Row</name></type> <name>oldRow</name> <init>= <expr><call><name><name>metaIdIndex</name><operator>.</operator><name>getRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>oldRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>meta</name><operator>.</operator><name>updateRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// for temporary objects</comment>
            <synchronized>synchronized <init>(<expr><name>objectIds</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>objectIds</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename a schema object.
     *
     * @param session the session
     * @param obj the object
     * @param newName the new name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>renameSchemaObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>,
            <parameter><decl><type><name>SchemaObject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rename</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateMetaAndFirstLevelChildren</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateMetaAndFirstLevelChildren</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Comment</name></type> <name>comment</name> <init>= <expr><call><name>findComment</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name><name>comment</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>updateMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// remember that this scans only one level deep!</comment>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>DbObject</name></type> <name>o</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>o</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>updateMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename a database object.
     *
     * @param session the session
     * @param obj the object
     * @param newName the new name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>renameDatabaseObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>,
            <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"not found: "</literal> <operator>+</operator> <call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"object already exists: "</literal> <operator>+</operator> <name>newName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>checkRename</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateMetaAndFirstLevelChildren</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>deleteOldTempFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>FileUtils</name><operator>.</operator><name>newDirectoryStream</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SUFFIX_TEMP_FILE</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>databaseName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// can't always delete the files, they may still be open</comment>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>tryDelete</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the schema. If the schema does not exist, an exception is thrown.
     *
     * @param schemaName the name of the schema
     * @return the schema
     * @throws DbException no schema with that name exists
     */</comment>
    <function><type><specifier>public</specifier> <name>Schema</name></type> <name>getSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name>findSchema</name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SCHEMA_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>schema</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the object from the database.
     *
     * @param session the session
     * @param obj the object to remove
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeDatabaseObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>objName</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"not found: "</literal> <operator>+</operator> <name>objName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Comment</name></type> <name>comment</name> <init>= <expr><call><name>findComment</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>removeDatabaseObject</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the first table that depends on this object.
     *
     * @param obj the object to find
     * @param except the table to exclude (or null)
     * @return the first dependent table, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getDependentTable</name><parameter_list>(<parameter><decl><type><name>SchemaObject</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>except</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>COMMENT</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>INDEX</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>RIGHT</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>TRIGGER</name></name></expr>:</case>
        <case>case <expr><name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>:</case>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        <default>default:</default>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>except</name> <operator>==</operator> <name>t</name> <operator>||</operator> <name><name>TableType</name><operator>.</operator><name>VIEW</name></name> <operator>==</operator> <call><name><name>t</name><operator>.</operator><name>getTableType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>addDependencies</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>t</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove an object from the system table.
     *
     * @param session the session
     * @param obj the object to be removed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSchemaObject</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>,
            <parameter><decl><type><name>SchemaObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>TABLE_OR_VIEW</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>INDEX</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>Index</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTableIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeLocalTempTableConstraint</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>checkWritingAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>Comment</name></type> <name>comment</name> <init>= <expr><call><name>findComment</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>removeDatabaseObject</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name>getDependentTable</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CANNOT_DROP_2</name></name></expr></argument>, <argument><expr><call><name><name>obj</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this database is disk-based.
     *
     * @return true if it is disk-based, false if it is in-memory only.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPersistent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>persistent</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TraceSystem</name></type> <name>getTraceSystem</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>traceSystem</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setCacheSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>Utils</name><operator>.</operator><name>getMemoryMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>kb</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setMasterUser</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>lockMeta</name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addDatabaseObject</name><argument_list>(<argument><expr><name>systemSession</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>systemSession</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Role</name></type> <name>getPublicRole</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>publicRole</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a unique temporary table name.
     *
     * @param baseName the prefix of the returned name
     * @param session the session
     * @return a unique name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getTempTableName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>baseName</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>tempName</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>tempName</name> <operator>=</operator> <name>baseName</name> <operator>+</operator> <literal type="string">"_COPY_"</literal> <operator>+</operator> <call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>+</operator>
                    <literal type="string">"_"</literal> <operator>+</operator> <name>nextTempTableId</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name><name>mainSchema</name><operator>.</operator><name>findTableOrView</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tempName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
        <return>return <expr><name>tempName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompareMode</name><parameter_list>(<parameter><decl><type><name>CompareMode</name></type> <name>compareMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compareMode</name></name> <operator>=</operator> <name>compareMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCluster</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cluster</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cluster</name></name> <operator>=</operator> <name>cluster</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>checkWritingAllowed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>readOnly</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>readOnly</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWriteDelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAutoCommitDelay</name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRetentionTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRetentionTime</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetentionTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setRetentionTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowBuiltinAliasOverride</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>allowBuiltinAliasOverride</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAllowBuiltinAliasOverride</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>allowBuiltinAliasOverride</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the list of in-doubt transactions.
     *
     * @return the list
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>getInDoubtTransactions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>store</name><operator>.</operator><name>getInDoubtTransactions</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepare a transaction.
     *
     * @param session the session
     * @param transaction the name of the transaction
     */</comment>
    <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>prepareCommit</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>prepareCommit</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If there is a background store thread, and if there wasn an exception in
     * that thread, throw it now.
     */</comment>
    <function><type><name>void</name></type> <name>throwLastBackgroundException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBackgroundThread</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>DbException</name></type> <name>b</name> <init>= <expr><call><name><name>backgroundException</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// wrap the exception, so we see it was thrown here</comment>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundException</name><parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>backgroundException</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TraceSystem</name></type> <name>t</name> <init>= <expr><call><name>getTraceSystem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>getTrace</name></name><argument_list>(<argument><expr><name><name>Trace</name><operator>.</operator><name>DATABASE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>error</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>getBackgroundException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MVStoreException</name></type> <name>exception</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPanicException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>exception</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>backgroundException</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Flush all pending changes to the transaction log.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>backgroundException</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEventListener</name><parameter_list>(<parameter><decl><type><name>DatabaseEventListener</name></type> <name>eventListener</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventListener</name></name> <operator>=</operator> <name>eventListener</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEventListenerClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>className</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>eventListener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>eventListener</name> <operator>=</operator> <operator>(</operator><name>DatabaseEventListener</name><operator>)</operator>
                        <call><name><name>JdbcUtils</name><operator>.</operator><name>loadUserClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDeclaredConstructor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> <init>= <expr><name>databaseURL</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cipher</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>url</name> <operator>+=</operator> <literal type="string">";CIPHER="</literal> <operator>+</operator> <name>cipher</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(
                        <argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ERROR_SETTING_DATABASE_EVENT_LISTENER_2</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>,
                        <argument><expr><name>className</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the progress of a long running operation.
     * This method calls the {@link DatabaseEventListener} if one is registered.
     *
     * @param state the {@link DatabaseEventListener} state
     * @param name the object name
     * @param x the current position
     * @param max the highest value or 0 if unknown
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore this (user made) exception</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is called after an exception occurred, to inform the database
     * event listener (if one is set).
     *
     * @param e the exception
     * @param sql the SQL statement
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>exceptionThrown</name><parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>exceptionThrown</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore this (user made) exception</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Synchronize the files with the file system. This method is called when
     * executing the SQL statement CHECKPOINT SYNC.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>sync</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>readOnly</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>sync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxMemoryRows</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>maxMemoryRows</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxMemoryRows</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLockMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>lockMode</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name></expr>:</case>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_READ_COMMITTED</name></name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE</name></name></expr>:</case>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE_GC</name></name></expr>:</case>
            <expr_stmt><expr><name>lockMode</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>LOCK_MODE_READ_COMMITTED</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"lock mode"</literal></expr></argument>, <argument><expr><name>lockMode</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockMode</name></name> <operator>=</operator> <name>lockMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLockMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lockMode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCloseDelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>closeDelay</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SessionLocal</name></type> <name>getSystemSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>systemSession</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the database is in the process of closing.
     *
     * @return true if the database is closing
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isClosing</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>closing</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxLengthInplaceLob</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxLengthInplaceLob</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMaxLengthInplaceLob</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>maxLengthInplaceLob</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreCase</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>ignoreCase</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIgnoreCase</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>starting</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// tables created at startup must not be converted to ignorecase</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ignoreCase</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreCatalogs</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>ignoreCatalogs</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIgnoreCatalogs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>ignoreCatalogs</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setDeleteFilesOnDisconnect</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deleteFilesOnDisconnect</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowLiterals</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowLiterals</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOptimizeReuseResults</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>optimizeReuseResults</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptimizeReuseResults</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>optimizeReuseResults</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Object</name></type> <name>getLobSyncObject</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lobSyncObject</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSessionCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userSessions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReferentialIntegrity</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>referentialIntegrity</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getReferentialIntegrity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>referentialIntegrity</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQueryStatistics</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>queryStatistics</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>queryStatisticsData</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getQueryStatistics</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>queryStatistics</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQueryStatisticsMaxEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>queryStatisticsMaxEntries</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>queryStatisticsData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>queryStatisticsData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>queryStatisticsData</name><operator>.</operator><name>setMaxQueryEntries</name></name><argument_list>(<argument><expr><name>queryStatisticsMaxEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>QueryStatisticsData</name></type> <name>getQueryStatisticsData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>queryStatistics</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>queryStatisticsData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>queryStatisticsData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>queryStatisticsData</name> <operator>=</operator> <operator>new</operator> <call><name>QueryStatisticsData</name><argument_list>(<argument><expr><name>queryStatisticsMaxEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>queryStatisticsData</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the database is currently opening. This is true until all stored
     * SQL statements have been executed.
     *
     * @return true if the database is still starting
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStarting</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>starting</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Called after the database has been opened and initialized. This method
     * notifies the event listener if one has been set.
     */</comment>
    <function><type><name>void</name></type> <name>opened</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>opened</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getNextRemoteSettingsId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Mode</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mode</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultNullOrdering</name><parameter_list>(<parameter><decl><type><name>DefaultNullOrdering</name></type> <name>defaultNullOrdering</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultNullOrdering</name></name> <operator>=</operator> <name>defaultNullOrdering</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DefaultNullOrdering</name></type> <name>getDefaultNullOrdering</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultNullOrdering</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxOperationMemory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxOperationMemory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxOperationMemory</name></name>  <operator>=</operator> <name>maxOperationMemory</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxOperationMemory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>maxOperationMemory</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SessionLocal</name></type> <name>getExclusiveSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>exclusiveSession</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the session that can exclusively access the database.
     *
     * @param session the session
     * @param closeOthers whether other sessions are closed
     * @return true if success or if database is in exclusive mode
     *         set by this session already, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setExclusiveSession</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>closeOthers</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>exclusiveSession</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>session</name> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>exclusiveSession</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>closeOthers</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>closeAllSessionsExcept</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Stop exclusive access the database by provided session.
     *
     * @param session the session
     * @return true if success or if database is in non-exclusive mode already,
     *         false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>unsetExclusiveSession</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>exclusiveSession</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
            <operator>||</operator> <call><name><name>exclusiveSession</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>SmallLRUCache</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>getLobFileListCache</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lobFileListCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lobFileListCache</name> <operator>=</operator> <call><name><name>SmallLRUCache</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>lobFileListCache</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the system table (containing the catalog) is locked.
     *
     * @return true if it is currently locked
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSysTableLocked</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>meta</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>meta</name><operator>.</operator><name>isLockedExclusively</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the system table (containing the catalog) is locked by the
     * given session.
     *
     * @param session the session
     * @return true if it is currently locked
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSysTableLockedBy</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>meta</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>meta</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open a new connection or get an existing connection to another database.
     *
     * @param driver the database driver or null
     * @param url the database URL
     * @param user the user name
     * @param password the password
     * @return the connection
     */</comment>
    <function><type><specifier>public</specifier> <name>TableLinkConnection</name></type> <name>getLinkConnection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>driver</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>linkConnections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>linkConnections</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TableLinkConnection</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>linkConnections</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>user</name></expr></argument>,
                <argument><expr><name>password</name></expr></argument>, <argument><expr><name><name>dbSettings</name><operator>.</operator><name>shareLinkedConnections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>databaseShortName</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Immediately close the database.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdownImmediately</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>closing</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPowerOffCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>checkPowerOff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>closeFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>powerOffCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TempFileDeleter</name></type> <name>getTempFileDeleter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>tempFileDeleter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the first user defined table, excluding the LOB_BLOCKS table that the
     * Recover tool creates.
     *
     * @return the table or null if no table is defined
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getFirstUserTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>schemas</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// exclude the LOB_MAP that the Recover tool creates</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>INFORMATION_SCHEMA_ID</name></name>
                        <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"LOB_BLOCKS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>table</name></expr>;</return>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Flush all changes and open a new transaction log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkpoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>persistent</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>getTempFileDeleter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deleteUnused</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Switch the database to read-only mode.
     *
     * @param readOnly the new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadOnly</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>readOnly</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readOnly</name></name> <operator>=</operator> <name>readOnly</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompactMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>compactMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compactMode</name></name> <operator>=</operator> <name>compactMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SourceCompiler</name></type> <name>getCompiler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compiler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>compiler</name> <operator>=</operator> <operator>new</operator> <call><name>SourceCompiler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>compiler</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>LobStorageInterface</name></type> <name>getLobStorage</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lobStorage</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SessionLocal</name></type> <name>getLobSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lobSession</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDefaultTableType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultTableType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultTableType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>defaultTableType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultTableType</name></name> <operator>=</operator> <name>defaultTableType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DbSettings</name></type> <name>getSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dbSettings</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new hash map. Depending on the configuration, the key is case
     * sensitive or case insensitive.
     *
     * @param &lt;V&gt; the value type
     * @return the hash map
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newStringMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CaseInsensitiveMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new hash map. Depending on the configuration, the key is case
     * sensitive or case insensitive.
     *
     * @param &lt;V&gt; the value type
     * @param  initialCapacity the initial capacity
     * @return the hash map
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newStringMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CaseInsensitiveMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new hash map. Depending on the configuration, the key is case
     * sensitive or case insensitive.
     *
     * @param &lt;V&gt; the value type
     * @return the hash map
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>newConcurrentStringMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CaseInsensitiveConcurrentMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>
                </then><else>: <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two identifiers (table names, column names,...) and verify they
     * are equal. Case sensitivity depends on the configuration.
     *
     * @param a the first identifier
     * @param b the second identifier
     * @return true if they match
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equalsIdentifiers</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>dbSettings</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns identifier in upper or lower case depending on database settings.
     *
     * @param upperName
     *            identifier in the upper case
     * @return identifier in upper or lower case
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>sysIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>upperName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><call><name>isUpperSysIdentifier</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</assert>
        <return>return <expr><ternary><condition><expr><name><name>dbSettings</name><operator>.</operator><name>databaseToLower</name></name></expr> ?</condition><then> <expr><call><name><name>StringUtils</name><operator>.</operator><name>toLowerEnglish</name></name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>upperName</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUpperSysIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>upperName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>upperName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>upperName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>upperName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>upperName</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>readLob</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lobId</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hmac</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getFileEncryptionKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fileEncryptionKey</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPageSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>pageSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>JavaObjectSerializer</name></type> <name>getJavaObjectSerializer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>initJavaObjectSerializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>javaObjectSerializer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initJavaObjectSerializer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>javaObjectSerializerInitialized</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>javaObjectSerializerInitialized</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>serializerName</name> <init>= <expr><name>javaObjectSerializerName</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>serializerName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>serializerName</name> <operator>=</operator> <call><name><name>serializerName</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>serializerName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                        <operator>!</operator><call><name><name>serializerName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>javaObjectSerializer</name> <operator>=</operator> <operator>(</operator><name>JavaObjectSerializer</name><operator>)</operator>
                                <call><name><name>JdbcUtils</name><operator>.</operator><name>loadUserClass</name></name><argument_list>(<argument><expr><name>serializerName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDeclaredConstructor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>javaObjectSerializerInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavaObjectSerializerName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>serializerName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><name>javaObjectSerializerInitialized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaObjectSerializerName</name> <operator>=</operator> <name>serializerName</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getNextRemoteSettingsId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the table engine class, loading it if needed.
     *
     * @param tableEngine the table engine name
     * @return the class
     */</comment>
    <function><type><specifier>public</specifier> <name>TableEngine</name></type> <name>getTableEngine</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableEngine</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><call><name><name>Thread</name><operator>.</operator><name>holdsLock</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>TableEngine</name></type> <name>engine</name> <init>= <expr><call><name><name>tableEngines</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableEngine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>engine</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>engine</name> <operator>=</operator> <operator>(</operator><name>TableEngine</name><operator>)</operator> <call><name><name>JdbcUtils</name><operator>.</operator><name>loadUserClass</name></name><argument_list>(<argument><expr><name>tableEngine</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDeclaredConstructor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>tableEngines</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tableEngine</name></expr></argument>, <argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>engine</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * get authenticator for database users
     * @return authenticator set for database
     */</comment>
    <function><type><specifier>public</specifier> <name>Authenticator</name></type> <name>getAuthenticator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>authenticator</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set current database authenticator
     *
     * @param authenticator = authenticator to set, null to revert to the Internal authenticator
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAuthenticator</name><parameter_list>(<parameter><decl><type><name>Authenticator</name></type> <name>authenticator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>authenticator</name><operator>!=</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>authenticator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authenticator</name></name><operator>=</operator><name>authenticator</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ValueTimestampTimeZone</name></type> <name>currentTimestamp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> <init>= <expr><call><name><name>SessionLocal</name><operator>.</operator><name>getThreadLocalSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>currentTimestamp</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"Unsafe comparison or cast"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TimeZoneProvider</name></type> <name>currentTimeZone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> <init>= <expr><call><name><name>SessionLocal</name><operator>.</operator><name>getThreadLocalSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>session</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"Unsafe comparison or cast"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>zeroBasedEnums</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>dbSettings</name><operator>.</operator><name>zeroBasedEnums</name></name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
