<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/query/Query.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name><operator>.</operator><name>WITHOUT_PARENTHESES</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name><operator>.</operator><name>DEFAULT_SQL_FLAGS</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Prepared</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Alias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Parameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LocalResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a SELECT statement (simple, or union).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Query</name> <super_list><extends>extends <super><name>Prepared</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Evaluated values of OFFSET and FETCH clauses.
     */</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>OffsetFetch</name> <block>{

        <comment type="block" format="javadoc">/**
         * OFFSET value.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * FETCH value.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>fetch</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Whether FETCH value is a PERCENT value.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>fetchPercent</name></decl>;</decl_stmt>

        <constructor><name>OffsetFetch</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>fetch</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fetchPercent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetch</name></name> <operator>=</operator> <name>fetch</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchPercent</name></name> <operator>=</operator> <name>fetchPercent</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * The column list, including invisible expressions such as order by expressions.
     */</comment>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Array of expressions.
     *
     * @see #expressions
     */</comment>
    <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>expressionArray</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Describes elements of the ORDER BY clause of a query.
     */</comment>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     *  A sort order represents an ORDER BY clause in a query.
     */</comment>
    <decl_stmt><decl><type><name>SortOrder</name></type> <name>sort</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The fetch expression as specified in the FETCH, LIMIT, or TOP clause.
     */</comment>
    <decl_stmt><decl><type><name>Expression</name></type> <name>fetchExpr</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether limit expression specifies percentage of rows.
     */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>fetchPercent</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether tied rows should be included in result too.
     */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>withTies</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The offset expression as specified in the OFFSET clause.
     */</comment>
    <decl_stmt><decl><type><name>Expression</name></type> <name>offsetExpr</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the result must only contain distinct rows.
     */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>distinct</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the result needs to support random access.
     */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>randomAccessResult</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The visible columns (the ones required in the result).
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>visibleColumnCount</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Number of columns including visible columns and additional virtual
     * columns for ORDER BY and DISTINCT ON clauses. This number does not
     * include virtual columns for HAVING and QUALIFY.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>resultColumnCount</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>noCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastEvaluated</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ResultInterface</name></type> <name>lastResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>lastExists</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Value</name><index>[]</index></name></type> <name>lastParameters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cacheableChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>neverLazy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>checkInit</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>isPrepared</name></decl>;</decl_stmt>

    <constructor><name>Query</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeverLazy</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>neverLazy</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNeverLazy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>neverLazy</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this is a UNION query.
     *
     * @return {@code true} if this is a UNION query
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isUnion</name><parameter_list>()</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>queryMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LocalResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>expressionArray</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>, <argument><expr><name>resultColumnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Execute the query without checking the cache. If a target is specified,
     * the results are written to it, and the method returns null. If no target
     * is specified, a new LocalResult is created and returned.
     *
     * @param limit the limit as specified in the JDBC method call
     * @param target the target to write results to
     * @return the result
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ResultInterface</name></type> <name>queryWithoutCache</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>ResultTarget</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>private</specifier> <name>ResultInterface</name></type> <name>queryWithoutCacheLazyCheck</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>ResultTarget</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>disableLazy</name> <init>= <expr><name>neverLazy</name> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>isLazyQueryExecution</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>disableLazy</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setLazyQueryExecution</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name>queryWithoutCache</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>disableLazy</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setLazyQueryExecution</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize the query.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The the list of select expressions.
     * This may include invisible expressions such as order by expressions.
     *
     * @return the list of expressions
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>getExpressions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>expressions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the cost to execute this query.
     *
     * @return the cost
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>double</name></type> <name>getCost</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Calculate the cost when used as a subquery.
     * This method returns a value between 10 and 1000000,
     * to ensure adding other values can't result in an integer overflow.
     *
     * @return the estimated cost as an integer
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCostAsExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// ensure the cost is not larger than 1 million,</comment>
        <comment type="line">// so that adding other values can't overflow</comment>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1_000_000d</literal></expr></argument>, <argument><expr><literal type="number">10d</literal> <operator>+</operator> <literal type="number">10d</literal> <operator>*</operator> <call><name>getCost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all tables that are involved in this query.
     *
     * @return the set of tables
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getTables</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the order by list.
     *
     * @param order the order by list
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrder</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>orderList</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the query has an order.
     *
     * @return true if it has
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>orderList</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>sort</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the 'for update' flag.
     *
     * @param forUpdate the new setting
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setForUpdate</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>forUpdate</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the column count of this query.
     *
     * @return the column count
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>visibleColumnCount</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns data type of rows.
     *
     * @return data type of rows
     */</comment>
    <function><type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getRowDataType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>visibleColumnCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>expressionArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>expressionArray</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Map the columns to the given column resolver.
     *
     * @param resolver
     *            the resolver
     * @param level
     *            the subquery level (0 is the top level query, 1 is the first
     *            subquery level)
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Change the evaluatable flag. This is used when building the execution
     * plan.
     *
     * @param tableFilter the table filter
     * @param b the new value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Add a condition to the query. This is used for views.
     *
     * @param param the parameter
     * @param columnId the column index (0 meaning the first column)
     * @param comparisonType the comparison type
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>addGlobalCondition</name><parameter_list>(<parameter><decl><type><name>Parameter</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnId</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>comparisonType</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check whether adding condition to the query is allowed. This is not
     * allowed for views that have an order by and a limit, as it would affect
     * the returned results.
     *
     * @return true if adding global conditions is allowed
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>allowGlobalConditions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this expression and all sub-expressions can fulfill a criteria.
     * If any part returns false, the result is false.
     *
     * @param visitor the visitor
     * @return if the criteria can be fulfilled
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>isEverything</name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>READONLY_VISITOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update all aggregate function values.
     *
     * @param s the session
     * @param stage select stage
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Call the before triggers on all tables.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>fireBeforeSelectTriggers</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the distinct flag only if it is possible, may be used as a possible
     * optimization only.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDistinctIfPossible</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isAnyDistinct</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>offsetExpr</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>fetchExpr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>distinct</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return whether this query is a plain {@code DISTINCT} query
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStandardDistinct</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>distinct</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return whether this query is a {@code DISTINCT} or
     *         {@code DISTINCT ON (...)} query
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAnyDistinct</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>distinct</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether results support random access.
     *
     * @return whether results support random access
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRandomAccessResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>randomAccessResult</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether results need to support random access.
     *
     * @param b the new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRandomAccessResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>randomAccessResult</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isTransactional</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Disable caching of result sets.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableCache</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>noCache</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sameResultAsLast</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>lastParams</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lastEval</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cacheableChecked</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name>getMaxDataModificationId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>noCache</name> <operator>=</operator> <name>max</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEverything</name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <operator>!</operator><call><name>isEverything</name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>INDEPENDENT_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>noCache</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cacheableChecked</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>noCache</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>a</name> <init>= <expr><name><name>lastParams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>b</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>areEqual</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name>getMaxDataModificationId</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>lastEval</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier>  <name><name>Value</name><index>[]</index></name></type> <name>getParameterValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>EMPTY_VALUES</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>params</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParamValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>params</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>ResultInterface</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxrows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>maxrows</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Execute the query, writing the result to the target result.
     *
     * @param limit the maximum number of rows to return
     * @param target the target result (null will return the result)
     * @return the result set (if the target is not set).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>ResultInterface</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>ResultTarget</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isUnion</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// union doesn't always know the parameter list of the left and</comment>
            <comment type="line">// right queries</comment>
            <return>return <expr><call><name>queryWithoutCacheLazyCheck</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fireBeforeSelectTriggers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>noCache</name> <operator>||</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOptimizeReuseResults</name><argument_list>()</argument_list></call> <operator>||</operator>
                <operator>(</operator><call><name><name>session</name><operator>.</operator><name>isLazyQueryExecution</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>neverLazy</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>queryWithoutCacheLazyCheck</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>params</name> <init>= <expr><call><name>getParameterValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getModificationDataId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isEverything</name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastResult</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>lastResult</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                    <name>limit</name> <operator>==</operator> <name>lastLimit</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>sameResultAsLast</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>lastParameters</name></expr></argument>, <argument><expr><name>lastEvaluated</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>lastResult</name> <operator>=</operator> <call><name><name>lastResult</name><operator>.</operator><name>createShallowCopy</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>lastResult</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>lastResult</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>lastResult</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastParameters</name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>closeLastResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>r</name> <init>= <expr><call><name>queryWithoutCacheLazyCheck</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>lastResult</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastExists</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastEvaluated</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastLimit</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeLastResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lastResult</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>lastResult</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Execute the EXISTS predicate over the query.
     *
     * @return EXISTS predicate result
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isUnion</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// union doesn't always know the parameter list of the left and</comment>
            <comment type="line">// right queries</comment>
            <return>return <expr><call><name>executeExists</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fireBeforeSelectTriggers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>noCache</name> <operator>||</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOptimizeReuseResults</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>executeExists</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>params</name> <init>= <expr><call><name>getParameterValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getModificationDataId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isEverything</name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lastExists</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>sameResultAsLast</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>lastParameters</name></expr></argument>, <argument><expr><name>lastEvaluated</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>lastExists</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastParameters</name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>exists</name> <init>= <expr><call><name>executeExists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>lastExists</name> <operator>=</operator> <name>exists</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastResult</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastEvaluated</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
        <return>return <expr><name>exists</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>executeExists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>r</name> <init>= <expr><call><name>queryWithoutCacheLazyCheck</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>exists</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>exists</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize the order by list. This call may extend the expressions list.
     *
     * @param expressionSQL the select list SQL snippets
     * @param mustBeInResult all order by expressions must be in the select list
     * @param filters the table filters
     * @return {@code true} if ORDER BY clause is preserved, {@code false}
     *         otherwise
     */</comment>
    <function><type><name>boolean</name></type> <name>initOrder</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>expressionSQL</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mustBeInResult</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TableFilter</name></argument>&gt;</argument_list></name></type> <name>filters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>i</name> <init>= <expr><call><name><name>orderList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>QueryOrderBy</name></type> <name>o</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><name><name>o</name><operator>.</operator><name>expression</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>initExpression</name><argument_list>(<argument><expr><name>expressionSQL</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>mustBeInResult</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>o</name><operator>.</operator><name>columnIndexExpr</name></name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>o</name><operator>.</operator><name>expression</name></name> <operator>=</operator> <call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNonAliasExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>orderList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>orderList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize the 'ORDER BY' or 'DISTINCT' expressions.
     *
     * @param expressionSQL the select list SQL snippets
     * @param e the expression.
     * @param mustBeInResult all order by expressions must be in the select list
     * @param filters the table filters.
     * @return index on the expression in the {@link #expressions} list.
     */</comment>
    <function><type><name>int</name></type> <name>initExpression</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>expressionSQL</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mustBeInResult</name></decl></parameter>,
            <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TableFilter</name></argument>&gt;</argument_list></name></type> <name>filters</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// special case: SELECT 1 AS A FROM DUAL ORDER BY A</comment>
        <comment type="line">// (oracle supports it, but only in order by, not in group by and</comment>
        <comment type="line">// not in having):</comment>
        <comment type="line">// SELECT 1 AS A FROM DUAL ORDER BY -A</comment>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// order by expression</comment>
            <decl_stmt><decl><type><name>ExpressionColumn</name></type> <name>exprCol</name> <init>= <expr><operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tableAlias</name> <init>= <expr><call><name><name>exprCol</name><operator>.</operator><name>getOriginalTableAliasName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>col</name> <init>= <expr><call><name><name>exprCol</name><operator>.</operator><name>getOriginalColumnName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>visible</name> <init>= <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>visible</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>ec</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ec</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// select expression</comment>
                    <decl_stmt><decl><type><name>ExpressionColumn</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>ec</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>j</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ca</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getOriginalTableAliasName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ca</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name>j</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>filters</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <comment type="line">// select id from test order by test.id</comment>
                        <for>for <control>(<init><decl><type><name>TableFilter</name></type> <name>f</name> <range>: <expr><name>filters</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>getTableAlias</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tableAlias</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <return>return <expr><name>j</name></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ec</name> <operator>instanceof</operator> <name>Alias</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><call><name><name>ec</name><operator>.</operator><name>getAlias</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>j</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>ec2</name> <init>= <expr><call><name><name>ec</name><operator>.</operator><name>getNonAliasExpression</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ec2</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>ExpressionColumn</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>ec2</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>ta</name> <init>= <expr><call><name><name>exprCol</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>tb</name> <init>= <expr><call><name><name>c2</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>s2</name> <init>= <expr><call><name><name>c2</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name>j</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expressionSQL</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>expressionSQL</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><call><name><name>expressionSQL</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>j</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>expressionSQL</name> <operator>==</operator> <literal type="null">null</literal>
                <operator>||</operator> <name>mustBeInResult</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>db</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowUnrelatedOrderByExpressionsInDistinctQueries</name>
                        <operator>&amp;&amp;</operator> <operator>!</operator><call><name>checkOrderOther</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>expressionSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ORDER_BY_NOT_IN_RESULT</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressionSQL</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>idx</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * An additional check for expression in ORDER BY list for DISTINCT selects
     * that was not matched with selected expressions in regular way. This
     * method allows expressions based only on selected expressions in different
     * complicated ways with functions, comparisons, or operators.
     *
     * @param session session
     * @param expr expression to check
     * @param expressionSQL SQL of allowed expressions
     * @return whether the specified expression should be allowed in ORDER BY
     *         list of DISTINCT select
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkOrderOther</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>expressionSQL</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>expr</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// ValueExpression, null expression in CASE, or other</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>exprSQL</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>sql</name><range>: <expr><name>expressionSQL</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIdentifiers</name><argument_list>(<argument><expr><name>exprSQL</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>expr</name><operator>.</operator><name>getSubexpressionCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>expr</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Expression is an ExpressionColumn, Parameter, SequenceValue or</comment>
            <comment type="line">// has other unsupported type without subexpressions</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkOrderOther</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>expr</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expressionSQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a {@link SortOrder} object given the list of {@link QueryOrderBy}
     * objects.
     *
     * @param orderList a list of {@link QueryOrderBy} elements
     * @param expressionCount the number of columns in the query
     */</comment>
    <function><type><name>void</name></type> <name>prepareOrder</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expressionCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>orderList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>index</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortType</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>QueryOrderBy</name></type> <name>o</name> <init>= <expr><call><name><name>orderList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>reverse</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>columnIndexExpr</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// parameter not yet set - order by first column</comment>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reverse</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><name>idx</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>idx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name>expressionCount</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ORDER_BY_NOT_IN_RESULT</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>o</name><operator>.</operator><name>sortType</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// TODO NULLS FIRST / LAST should be inverted too?</comment>
                <expr_stmt><expr><name>type</name> <operator>^=</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>sortType</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>sort</name> <operator>=</operator> <operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>, <argument><expr><name>orderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>orderList</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes constant expressions from the sort order.
     *
     * Some constants are detected only after optimization of expressions, this
     * method removes them from the sort order only. They are currently
     * preserved in the list of expressions.
     */</comment>
    <function><type><name>void</name></type> <name>cleanupOrder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name><name>sourceIndexes</name><index>[]</index></name> <init>= <expr><call><name><name>sort</name><operator>.</operator><name>getQueryColumnIndexes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>sourceIndexes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>constants</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>sourceIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isConstant</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>constants</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>constants</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>constants</name> <operator>==</operator> <name>count</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sort</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>count</name> <operator>-</operator> <name>constants</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortTypes</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sourceSortTypes</name> <init>= <expr><call><name><name>sort</name><operator>.</operator><name>getSortTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryOrderBy</name></argument>&gt;</argument_list></name></type> <name>orderList</name> <init>= <expr><call><name><name>sort</name><operator>.</operator><name>getOrderList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>sourceIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isConstant</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sourceIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sortTypes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sourceSortTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>sort</name> <operator>=</operator> <operator>new</operator> <call><name>SortOrder</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>sortTypes</name></expr></argument>, <argument><expr><name>orderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>CommandInterface</name><operator>.</operator><name>SELECT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOffset</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offsetExpr</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>offsetExpr</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFetch</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>fetch</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchExpr</name></name> <operator>=</operator> <name>fetch</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getFetch</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fetchExpr</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFetchPercent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fetchPercent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchPercent</name></name> <operator>=</operator> <name>fetchPercent</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFetchPercent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fetchPercent</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWithTies</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withTies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>withTies</name></name> <operator>=</operator> <name>withTies</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWithTies</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>withTies</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a parameter to the parameter list.
     *
     * @param param the parameter to add
     */</comment>
    <function><type><name>void</name></type> <name>addParameter</name><parameter_list>(<parameter><decl><type><name>Parameter</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>parameters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>getMaxDataModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name> <init>= <expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getMaxModificationIdVisitor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>isEverything</name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>visitor</name><operator>.</operator><name>getMaxDataModificationId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getSnapshotDataModificationId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Appends ORDER BY, OFFSET, and FETCH clauses to the plan.
     *
     * @param builder query plan string builder.
     * @param sqlFlags formatting flags
     * @param expressions the array of expressions
     */</comment>
    <function><type><name>void</name></type> <name>appendEndOfQueryToSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>expressions</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sort</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nORDER BY "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>orderList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nORDER BY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>orderList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>orderList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetExpr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>count</name> <init>= <expr><call><name><name>offsetExpr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nOFFSET "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" ROW"</literal></expr> </then><else>: <expr><literal type="string">" ROWS"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetchExpr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nFETCH "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>offsetExpr</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"NEXT"</literal></expr> </then><else>: <expr><literal type="string">"FIRST"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>count</name> <init>= <expr><call><name><name>fetchExpr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>WITHOUT_PARENTHESES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>withCount</name> <init>= <expr><name>fetchPercent</name> <operator>||</operator> <operator>!</operator><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>withCount</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>fetchPercent</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" PERCENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>withCount</name></expr> ?</condition><then> <expr><literal type="string">" ROW"</literal></expr> </then><else>: <expr><literal type="string">" ROWS"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>withTies</name></expr> ?</condition><then> <expr><literal type="string">" WITH TIES"</literal></expr> </then><else>: <expr><literal type="string">" ONLY"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Evaluates OFFSET and FETCH expressions.
     *
     * @param maxRows
     *            additional limit
     * @return the evaluated values
     */</comment>
    <function><type><name>OffsetFetch</name></type> <name>getOffsetFetch</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetExpr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>offsetExpr</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"result OFFSET"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>fetch</name> <init>= <expr><ternary><condition><expr><name>maxRows</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>maxRows</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetchExpr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>fetchExpr</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"result FETCH"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>fetch</name> <operator>=</operator> <ternary><condition><expr><name>fetch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>fetchPercent</name> <init>= <expr><name><name>this</name><operator>.</operator><name>fetchPercent</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetchPercent</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"result FETCH PERCENT"</literal></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// 0 PERCENT means 0</comment>
            <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fetchPercent</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>OffsetFetch</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>, <argument><expr><name>fetchPercent</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Applies limits, if any, to a result and makes it ready for value
     * retrieval.
     *
     * @param result
     *            the result
     * @param offset
     *            OFFSET value
     * @param fetch
     *            FETCH value
     * @param fetchPercent
     *            whether FETCH value is a PERCENT value
     * @param target
     *            target result or null
     * @return the result or null
     */</comment>
    <function><type><name>LocalResult</name></type> <name>finishResult</name><parameter_list>(<parameter><decl><type><name>LocalResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>fetch</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fetchPercent</name></decl></parameter>, <parameter><decl><type><name>ResultTarget</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setOffset</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetch</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setLimit</name></name><argument_list>(<argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setFetchPercent</name></name><argument_list>(<argument><expr><name>fetchPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>withTies</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>setWithTies</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>randomAccessResult</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>distinct</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>convertToDistinct</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>target</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a result into a distinct result, using the current columns.
     *
     * @param result the source
     * @return the distinct result
     */</comment>
    <function><type><name>LocalResult</name></type> <name>convertToDistinct</name><parameter_list>(<parameter><decl><type><name>ResultInterface</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LocalResult</name></type> <name>distinctResult</name> <init>= <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>expressionArray</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>, <argument><expr><name>resultColumnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>distinctResult</name><operator>.</operator><name>setDistinct</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>distinctResult</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>distinctResult</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>distinctResult</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts this query to a table or a view.
     *
     * @param alias alias name for the view
     * @param columnTemplates column templates, or {@code null}
     * @param parameters the parameters
     * @param forCreateView if true, a system session will be used for the view
     * @param topQuery the top level query
     * @return the table or the view
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>toTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columnTemplates</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>forCreateView</name></decl></parameter>, <parameter><decl><type><name>Query</name></type> <name>topQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setParameterList</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checkInit</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>TableView</name><operator>.</operator><name>createTempView</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>forCreateView</name></expr> ?</condition><then> <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemSession</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>session</name></expr></else></ternary></expr></argument>,
                <argument><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>columnTemplates</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>topQuery</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>collectDependencies</name><parameter_list>(<parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name> <init>= <expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getDependenciesVisitor</name></name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>isEverything</name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this query will always return the same value and has no side
     * effects.
     *
     * @return if this query will always return the same value and has no side
     *         effects.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isConstantQuery</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>hasOrder</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>offsetExpr</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>offsetExpr</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>fetchExpr</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>fetchExpr</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If this query is determined as a single-row query, returns a replacement
     * expression.
     *
     * @return the expression, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getIfSingleRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
