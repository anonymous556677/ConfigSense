<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/DbSettings.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class contains various database-level settings. To override the
 * documented default value for a database, append the setting in the database
 * URL: "jdbc:h2:./test;ANALYZE_SAMPLE=1000" when opening the first connection
 * to the database. The settings can not be changed once the database is open.
 * &lt;p&gt;
 * Some settings are a last resort and temporary solution to work around a
 * problem in the application or database engine. Also, there are system
 * properties to enable features that are not yet fully tested or that are not
 * backward compatible.
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>DbSettings</name> <super_list><extends>extends <super><name>SettingsBase</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The initial size of the hash table.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_SIZE</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTERNAL.
     * The default settings. Those must not be modified.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DbSettings</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>DbSettings</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>TABLE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;ANALYZE_AUTO&lt;/code&gt; (default: 2000).
     * After changing this many rows, ANALYZE is automatically run for a table.
     * Automatically running ANALYZE is disabled if set to 0. If set to 1000,
     * then ANALYZE will run against each user table after about 1000 changes to
     * that table. The time between running ANALYZE doubles each time since
     * starting the database. It is not run on local temporary tables, and
     * tables that have a trigger on SELECT.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>analyzeAuto</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"ANALYZE_AUTO"</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;ANALYZE_SAMPLE&lt;/code&gt; (default: 10000).
     * The default sample size when analyzing a table.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>analyzeSample</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"ANALYZE_SAMPLE"</literal></expr></argument>, <argument><expr><literal type="number">10_000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;AUTO_COMPACT_FILL_RATE&lt;/code&gt;
     * (default: 90, which means 90%, 0 disables auto-compacting).
     * Set the auto-compact target fill rate. If the average fill rate (the
     * percentage of the storage space that contains active data) of the
     * chunks is lower, then the chunks with a low fill rate are re-written.
     * Also, if the percentage of empty space between chunks is higher than
     * this value, then chunks at the end of the file are moved. Compaction
     * stops if the target fill rate is reached.
     * This setting only affects MVStore engine.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>autoCompactFillRate</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"AUTO_COMPACT_FILL_RATE"</literal></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DATABASE_TO_LOWER&lt;/code&gt; (default: false).
     * When set to true unquoted identifiers and short name of database are
     * converted to lower case. Value of this setting should not be changed
     * after creation of database. Setting this to "true" is experimental.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>databaseToLower</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DATABASE_TO_UPPER&lt;/code&gt; (default: true).
     * When set to true unquoted identifiers and short name of database are
     * converted to upper case.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>databaseToUpper</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;CASE_INSENSITIVE_IDENTIFIERS&lt;/code&gt; (default:
     * false).
     * When set to true, all identifier names (table names, column names) are
     * case insensitive. Setting this to "true" is experimental.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>caseInsensitiveIdentifiers</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"CASE_INSENSITIVE_IDENTIFIERS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DB_CLOSE_ON_EXIT&lt;/code&gt; (default: true).
     * Close the database when the virtual machine exits normally, using a
     * shutdown hook.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>dbCloseOnExit</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DB_CLOSE_ON_EXIT"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DEFAULT_CONNECTION&lt;/code&gt; (default: false).
     * Whether Java functions can use
     * &lt;code&gt;DriverManager.getConnection("jdbc:default:connection")&lt;/code&gt; to
     * get a database connection. This feature is disabled by default for
     * performance reasons. Please note the Oracle JDBC driver will try to
     * resolve this database URL if it is loaded before the H2 driver.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>defaultConnection</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_CONNECTION"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DEFAULT_ESCAPE&lt;/code&gt; (default: \).
     * The default escape character for LIKE comparisons. To select no escape
     * character, use an empty string.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>defaultEscape</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_ESCAPE"</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DEFRAG_ALWAYS&lt;/code&gt; (default: false)
     * Each time the database is closed normally, it is fully defragmented (the
     * same as SHUTDOWN DEFRAG). If you execute SHUTDOWN COMPACT, then this
     * setting is ignored.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>defragAlways</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DEFRAG_ALWAYS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DROP_RESTRICT&lt;/code&gt; (default: true)
     * Whether the default action for DROP TABLE, DROP VIEW, DROP SCHEMA, DROP
     * DOMAIN, and DROP CONSTRAINT is RESTRICT.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>dropRestrict</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DROP_RESTRICT"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;ESTIMATED_FUNCTION_TABLE_ROWS&lt;/code&gt; (default:
     * 1000).
     * The estimated number of rows in a function table (for example, CSVREAD or
     * FTL_SEARCH). This value is used by the optimizer.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>estimatedFunctionTableRows</name> <init>= <expr><call><name>get</name><argument_list>(
            <argument><expr><literal type="string">"ESTIMATED_FUNCTION_TABLE_ROWS"</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;LOB_TIMEOUT&lt;/code&gt; (default: 300000,
     * which means 5 minutes).
     * The number of milliseconds a temporary LOB reference is kept until it
     * times out. After the timeout, the LOB is no longer accessible using this
     * reference.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>lobTimeout</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"LOB_TIMEOUT"</literal></expr></argument>, <argument><expr><literal type="number">300_000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;MAX_COMPACT_TIME&lt;/code&gt; (default: 200).
     * The maximum time in milliseconds used to compact a database when closing.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxCompactTime</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"MAX_COMPACT_TIME"</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;MAX_QUERY_TIMEOUT&lt;/code&gt; (default: 0).
     * The maximum timeout of a query in milliseconds. The default is 0, meaning
     * no limit. Please note the actual query timeout may be set to a lower
     * value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxQueryTimeout</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"MAX_QUERY_TIMEOUT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_DISTINCT&lt;/code&gt; (default: true).
     * Improve the performance of simple DISTINCT queries if an index is
     * available for the given column. The optimization is used if:
     * &lt;ul&gt;
     * &lt;li&gt;The select is a single column query without condition &lt;/li&gt;
     * &lt;li&gt;The query contains only one table, and no group by &lt;/li&gt;
     * &lt;li&gt;There is only one table involved &lt;/li&gt;
     * &lt;li&gt;There is an ascending index on the column &lt;/li&gt;
     * &lt;li&gt;The selectivity of the column is below 20 &lt;/li&gt;
     * &lt;/ul&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeDistinct</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_DISTINCT"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_EVALUATABLE_SUBQUERIES&lt;/code&gt; (default:
     * true).
     * Optimize subqueries that are not dependent on the outer query.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeEvaluatableSubqueries</name> <init>= <expr><call><name>get</name><argument_list>(
            <argument><expr><literal type="string">"OPTIMIZE_EVALUATABLE_SUBQUERIES"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_INSERT_FROM_SELECT&lt;/code&gt;
     * (default: true).
     * Insert into table from query directly bypassing temporary disk storage.
     * This also applies to create table as select.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeInsertFromSelect</name> <init>= <expr><call><name>get</name><argument_list>(
            <argument><expr><literal type="string">"OPTIMIZE_INSERT_FROM_SELECT"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_IN_LIST&lt;/code&gt; (default: true).
     * Optimize IN(...) and IN(SELECT ...) comparisons. This includes
     * optimization for SELECT, DELETE, and UPDATE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeInList</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_IN_LIST"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_IN_SELECT&lt;/code&gt; (default: true).
     * Optimize IN(SELECT ...) comparisons. This includes
     * optimization for SELECT, DELETE, and UPDATE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeInSelect</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_IN_SELECT"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_OR&lt;/code&gt; (default: true).
     * Convert (C=? OR C=?) to (C IN(?, ?)).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeOr</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_OR"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_TWO_EQUALS&lt;/code&gt; (default: true).
     * Optimize expressions of the form A=B AND B=1. In this case, AND A=1 is
     * added so an index on A can be used.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeTwoEquals</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_TWO_EQUALS"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES&lt;/code&gt; (default: true).
     * Optimize expressions of the form (SELECT A) to A.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>optimizeSimpleSingleRowSubqueries</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;QUERY_CACHE_SIZE&lt;/code&gt; (default: 8).
     * The size of the query cache, in number of cached statements. Each session
     * has it's own cache with the given size. The cache is only used if the SQL
     * statement and all parameters match. Only the last returned result per
     * query is cached. The following statement types are cached: SELECT
     * statements are cached (excluding UNION and FOR UPDATE statements), CALL
     * if it returns a single value, DELETE, INSERT, MERGE, UPDATE, and
     * transactional statements such as COMMIT. This works for both statements
     * and prepared statement.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>queryCacheSize</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"QUERY_CACHE_SIZE"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;RECOMPILE_ALWAYS&lt;/code&gt; (default: false).
     * Always recompile prepared statements.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>recompileAlways</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"RECOMPILE_ALWAYS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;REUSE_SPACE&lt;/code&gt; (default: true).
     * If disabled, all changes are appended to the database file, and existing
     * content is never overwritten. This setting has no effect if the database
     * is already open.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>reuseSpace</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"REUSE_SPACE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;SHARE_LINKED_CONNECTIONS&lt;/code&gt;
     * (default: true).
     * Linked connections should be shared, that means connections to the same
     * database should be used for all linked tables that connect to the same
     * database.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>shareLinkedConnections</name> <init>= <expr><call><name>get</name><argument_list>(
            <argument><expr><literal type="string">"SHARE_LINKED_CONNECTIONS"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;DEFAULT_TABLE_ENGINE&lt;/code&gt;
     * (default: null).
     * The default table engine to use for new tables.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>defaultTableEngine</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_TABLE_ENGINE"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;MV_STORE&lt;/code&gt;
     * (default: true).
     * Use the MVStore storage engine.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>mvStore</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"MV_STORE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;COMPRESS&lt;/code&gt;
     * (default: false).
     * Compress data when storing.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>compressData</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"COMPRESS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;IGNORE_CATALOGS&lt;/code&gt;
     * (default: false).
     * If set, all catalog names in identifiers are silently accepted
     * without comparing them with the short name of the database.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ignoreCatalogs</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"IGNORE_CATALOGS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database setting &lt;code&gt;ZERO_BASED_ENUMS&lt;/code&gt;
     * (default: false).
     * If set, ENUM ordinal values are 0-based.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>zeroBasedEnums</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"ZERO_BASED_ENUMS"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DbSettings</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>lower</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DATABASE_TO_LOWER"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>upperSet</name> <init>= <expr><call><name>containsKey</name><argument_list>(<argument><expr><literal type="string">"DATABASE_TO_UPPER"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>upper</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><literal type="string">"DATABASE_TO_UPPER"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lower</name> <operator>&amp;&amp;</operator> <name>upper</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>upperSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNSUPPORTED_SETTING_COMBINATION</name></name></expr></argument>,
                        <argument><expr><literal type="string">"DATABASE_TO_LOWER &amp; DATABASE_TO_UPPER"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>upper</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>databaseToLower</name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>databaseToUpper</name> <operator>=</operator> <name>upper</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>settings</name> <init>= <expr><call><name>getSettings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"DATABASE_TO_LOWER"</literal></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"DATABASE_TO_UPPER"</literal></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * INTERNAL.
     * Get the settings for the given properties (may not be null).
     *
     * @param s the settings
     * @return the settings
     */</comment>
    <function><type><specifier>static</specifier> <name>DbSettings</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DbSettings</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
