<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/ddl/AlterDomain.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiPredicate</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Domain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The base class for ALTER DOMAIN commands.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AlterDomain</name> <super_list><extends>extends <super><name>SchemaOwnerCommand</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Processes all columns and domains that use the specified domain.
     *
     * @param session
     *            the session
     * @param domain
     *            the domain to process
     * @param columnProcessor
     *            column handler
     * @param domainProcessor
     *            domain handler
     * @param recompileExpressions
     *            whether processed expressions need to be recompiled
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>forAllDependencies</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>,
            <parameter><decl><type><name><name>BiPredicate</name><argument_list type="generic">&lt;<argument><name>Domain</name></argument>, <argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnProcessor</name></decl></parameter>, <parameter><decl><type><name><name>BiPredicate</name><argument_list type="generic">&lt;<argument><name>Domain</name></argument>, <argument><name>Domain</name></argument>&gt;</argument_list></name></type> <name>domainProcessor</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>recompileExpressions</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>getAllSchemasNoMeta</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Domain</name></type> <name>targetDomain</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllDomains</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>targetDomain</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>domain</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>domainProcessor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>domainProcessor</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>targetDomain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>recompileExpressions</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>domain</name><operator>.</operator><name>prepareExpressions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>targetDomain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>forTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>columnProcessor</name></expr></argument>, <argument><expr><name>recompileExpressions</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>updateMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>forTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>columnProcessor</name></expr></argument>, <argument><expr><name>recompileExpressions</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>forTable</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name><name>BiPredicate</name><argument_list type="generic">&lt;<argument><name>Domain</name></argument>, <argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnProcessor</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>recompileExpressions</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>modified</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>targetColumn</name> <range>: <expr><call><name><name>t</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>targetColumn</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>domain</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>m</name> <init>= <expr><name>columnProcessor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>columnProcessor</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>targetColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>recompileExpressions</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>targetColumn</name><operator>.</operator><name>prepareExpressions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>modified</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>modified</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name>String</name></type> <name>domainName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>ifDomainExists</name></decl>;</decl_stmt>

    <constructor><name>AlterDomain</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setDomainName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>domainName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>domainName</name></name> <operator>=</operator> <name>domainName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setIfDomainExists</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>ifDomainExists</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>final</specifier> <name>long</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findDomain</name><argument_list>(<argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ifDomainExists</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DOMAIN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>domainName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>update</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>abstract</specifier> <name>long</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></class>
</unit>
