<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/Session.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name><operator>.</operator><name>DatabaseMeta</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>DataHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZoneProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueLob</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A local or remote session. A session represents a database connection.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Session</name> <super_list><implements>implements <super><name>CastDataProvider</name></super>, <super><name>AutoCloseable</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Static settings.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>StaticSettings</name> <block>{

        <comment type="block" format="javadoc">/**
         * Whether unquoted identifiers are converted to upper case.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>databaseToUpper</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Whether unquoted identifiers are converted to lower case.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>databaseToLower</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Whether all identifiers are case insensitive.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>caseInsensitiveIdentifiers</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates new instance of static settings.
         *
         * @param databaseToUpper
         *            whether unquoted identifiers are converted to upper case
         * @param databaseToLower
         *            whether unquoted identifiers are converted to lower case
         * @param caseInsensitiveIdentifiers
         *            whether all identifiers are case insensitive
         */</comment>
        <constructor><specifier>public</specifier> <name>StaticSettings</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>databaseToUpper</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>databaseToLower</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>caseInsensitiveIdentifiers</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseToUpper</name></name> <operator>=</operator> <name>databaseToUpper</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseToLower</name></name> <operator>=</operator> <name>databaseToLower</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name> <operator>=</operator> <name>caseInsensitiveIdentifiers</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * Dynamic settings.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DynamicSettings</name> <block>{

        <comment type="block" format="javadoc">/**
         * The database mode.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Mode</name></type> <name>mode</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The current time zone.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TimeZoneProvider</name></type> <name>timeZone</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates new instance of dynamic settings.
         *
         * @param mode
         *            the database mode
         * @param timeZone
         *            the current time zone
         */</comment>
        <constructor><specifier>public</specifier> <name>DynamicSettings</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>TimeZoneProvider</name></type> <name>timeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeZone</name></name> <operator>=</operator> <name>timeZone</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sessionState</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>sessionStateChanged</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>sessionStateUpdating</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>volatile</specifier> <name>StaticSettings</name></type> <name>staticSettings</name></decl>;</decl_stmt>

    <constructor><name>Session</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Get the list of the cluster servers for this session.
     *
     * @return A list of "ip:port" strings for the cluster servers in this
     *         session.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getClusterServers</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Parse a command and prepare it for execution.
     *
     * @param sql the SQL statement
     * @param fetchSize the number of rows to fetch in one step
     * @return the prepared command
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>CommandInterface</name></type> <name>prepareCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetchSize</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Roll back pending transactions and close the session.
     */</comment>
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the trace object
     *
     * @return the trace object
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Trace</name></type> <name>getTrace</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if close was called.
     *
     * @return if the session has been closed
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the data handler object.
     *
     * @return the data handler
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DataHandler</name></type> <name>getDataHandler</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check whether this session has a pending transaction.
     *
     * @return true if it has
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>hasPendingTransaction</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Cancel the current or next command (called when closing a connection).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this session is in auto-commit mode.
     *
     * @return true if the session is in auto-commit mode
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>getAutoCommit</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the auto-commit mode. This call doesn't commit the current
     * transaction.
     *
     * @param autoCommit the new value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setAutoCommit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>autoCommit</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Add a temporary LOB, which is closed when the session commits.
     *
     * @param v the value
     * @return the specified value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ValueLob</name></type> <name>addTemporaryLob</name><parameter_list>(<parameter><decl><type><name>ValueLob</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this session is remote or embedded.
     *
     * @return true if this session is remote
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isRemote</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set current schema.
     *
     * @param schema the schema name
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setCurrentSchemaName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schema</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get current schema.
     *
     * @return the current schema name
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getCurrentSchemaName</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the network connection information if possible.
     *
     * @param networkConnectionInfo the network connection information
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setNetworkConnectionInfo</name><parameter_list>(<parameter><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the isolation level.
     *
     * @return the isolation level
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>IsolationLevel</name></type> <name>getIsolationLevel</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the isolation level.
     *
     * @param isolationLevel the isolation level to set
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setIsolationLevel</name><parameter_list>(<parameter><decl><type><name>IsolationLevel</name></type> <name>isolationLevel</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns static settings. These settings cannot be changed during
     * lifecycle of session.
     *
     * @return static settings
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>StaticSettings</name></type> <name>getStaticSettings</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns dynamic settings. These settings can be changed during lifecycle
     * of session.
     *
     * @return dynamic settings
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DynamicSettings</name></type> <name>getDynamicSettings</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns database meta information.
     *
     * @return database meta information
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>DatabaseMeta</name></type> <name>getDatabaseMeta</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns whether INFORMATION_SCHEMA contains old-style tables.
     *
     * @return whether INFORMATION_SCHEMA contains old-style tables
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isOldInformationSchema</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Re-create the session state using the stored sessionState list.
     */</comment>
    <function><type><name>void</name></type> <name>recreateSessionState</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sessionState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sessionState</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sessionStateUpdating</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>sql</name> <range>: <expr><name>sessionState</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>CommandInterface</name></type> <name>ci</name> <init>= <expr><call><name>prepareCommand</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ci</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><name>sessionStateUpdating</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sessionStateChanged</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read the session state if necessary.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>readSessionState</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sessionStateChanged</name> <operator>||</operator> <name>sessionStateUpdating</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>sessionStateChanged</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sessionState</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CommandInterface</name></type> <name>ci</name> <init>= <expr><call><name>prepareCommand</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><call><name>isOldInformationSchema</name><argument_list>()</argument_list></call></expr>
                ?</condition><then> <expr><literal type="string">"SELECT STATE_COMMAND FROM INFORMATION_SCHEMA.SESSION_STATE"</literal></expr>
                </then><else>: <expr><literal type="string">"SELECT SQL FROM INFORMATION_SCHEMA.SESSION_STATE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>result</name> <init>= <expr><call><name><name>ci</name><operator>.</operator><name>executeQuery</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>result</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sessionState</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>currentRow</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets this session as thread local session, if this session is a local
     * session.
     *
     * @return old thread local session, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>Session</name></type> <name>setThreadLocalSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Resets old thread local session.
     *
     * @param oldSession
     *            the old thread local session, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resetThreadLocalSession</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>oldSession</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

}</block></class>
</unit>
