<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/ValueBoolean.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation of the BOOLEAN data type.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueBoolean</name> <super_list><extends>extends <super><name>Value</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The precision in digits.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRECISION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The maximum display size of a boolean.
     * Example: FALSE
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISPLAY_SIZE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TRUE value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueBoolean</name></type> <name>TRUE</name> <init>= <expr><operator>new</operator> <call><name>ValueBoolean</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * FALSE value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueBoolean</name></type> <name>FALSE</name> <init>= <expr><operator>new</operator> <call><name>ValueBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ValueBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getValueType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>BOOLEAN</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMemory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Singleton TRUE and FALSE values</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>byte</name></type> <name>getByte</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>short</name></type> <name>getShort</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getLong</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BigDecimal</name></type> <name>getBigDecimal</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name><name>BigDecimal</name><operator>.</operator><name>ONE</name></name></expr> </then><else>: <expr><name><name>BigDecimal</name><operator>.</operator><name>ZERO</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>getFloat</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1f</literal></expr> </then><else>: <expr><literal type="number">0f</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1d</literal></expr> </then><else>: <expr><literal type="number">0d</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>negate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTypeSafe</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>CompareMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ValueBoolean</name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the boolean value for the given boolean.
     *
     * @param b the boolean
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueBoolean</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// there are only ever two instances, so the instance must match</comment>
        <return>return <expr><name>this</name> <operator>==</operator> <name>other</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
