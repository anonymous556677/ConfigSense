<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/condition/Condition.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CastSpecification</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a condition returning a boolean value, or NULL.
 */</comment>
<class><specifier>abstract</specifier> class <name>Condition</name> <super_list><extends>extends <super><name>Expression</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Add a cast around the expression (if necessary) so that the type is boolean.
     *
     * @param session the session
     * @param expression the expression
     * @return the new expression
     */</comment>
    <function><type><specifier>static</specifier> <name>Expression</name></type> <name>castToBoolean</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>expression</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>expression</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>CastSpecification</name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
