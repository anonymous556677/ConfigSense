<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/ValueSmallint.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation of the SMALLINT data type.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueSmallint</name> <super_list><extends>extends <super><name>Value</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The precision in bits.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRECISION</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The approximate precision in decimal digits.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DECIMAL_PRECISION</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The maximum display size of a SMALLINT.
     * Example: -32768
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISPLAY_SIZE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>short</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ValueSmallint</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>checkRange</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name><name>other</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ValueSmallint</name></type> <name>checkRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>short</name><operator>)</operator> <name>x</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>NUMERIC_VALUE_OUT_OF_RANGE_1</name></name></expr></argument>,
                    <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getSignum</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>signum</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>negate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>checkRange</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>subtract</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>checkRange</name><argument_list>(<argument><expr><name>value</name> <operator>-</operator> <name><name>other</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>checkRange</name><argument_list>(<argument><expr><name>value</name> <operator>*</operator> <name><name>other</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>divide</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>quotientType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DIVISION_BY_ZERO_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>checkRange</name><argument_list>(<argument><expr><name>value</name> <operator>/</operator> <name><name>other</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>modulus</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DIVISION_BY_ZERO_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>%</operator> <name><name>other</name><operator>.</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sqlFlags</name> <operator>&amp;</operator> <name>NO_CASTS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"CAST("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" AS SMALLINT)"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getValueType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>SMALLINT</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>short</name></type> <name>value</name> <init>= <expr><name><name>this</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name> <block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr> }</block></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>short</name></type> <name>getShort</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getLong</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>BigDecimal</name></type> <name>getBigDecimal</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>BigDecimal</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>float</name></type> <name>getFloat</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>double</name></type> <name>getDouble</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTypeSafe</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>CompareMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get or create a SMALLINT value for the given short.
     *
     * @param i the short
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueSmallint</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <call><name><name>Value</name><operator>.</operator><name>cache</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ValueSmallint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>other</name> <operator>instanceof</operator> <name>ValueSmallint</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>ValueSmallint</name><operator>)</operator> <name>other</name><operator>)</operator><operator>.</operator><name>value</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
