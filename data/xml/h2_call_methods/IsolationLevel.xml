<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/IsolationLevel.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Level of isolation.
 */</comment>
<enum><specifier>public</specifier> enum <name>IsolationLevel</name> <block>{

    <comment type="block" format="javadoc">/**
     * Dirty reads, non-repeatable reads and phantom reads are allowed.
     */</comment>
    <decl><name>READ_UNCOMMITTED</name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_READ_UNCOMMITTED</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Dirty reads aren't allowed; non-repeatable reads and phantom reads are
     * allowed.
     */</comment>
    <decl><name>READ_COMMITTED</name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_READ_COMMITTED</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_READ_COMMITTED</name></name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Dirty reads and non-repeatable reads aren't allowed; phantom reads are
     * allowed.
     */</comment>
    <decl><name>REPEATABLE_READ</name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_REPEATABLE_READ</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE</name></name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Dirty reads, non-repeatable reads and phantom reads are'n allowed.
     */</comment>
    <decl><name>SNAPSHOT</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>TRANSACTION_SNAPSHOT</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE</name></name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * Dirty reads, non-repeatable reads and phantom reads are'n allowed.
     * Concurrent and serial execution of transactions with this isolation level
     * should have the same effect.
     */</comment>
    <decl><name>SERIALIZABLE</name><argument_list>(<argument><expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_SERIALIZABLE</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE</name></name></expr></argument>)</argument_list></decl>;

    <comment type="block" format="javadoc">/**
     * Returns the isolation level from LOCK_MODE equivalent for PageStore and
     * old versions of H2.
     *
     * @param level
     *            the LOCK_MODE value
     * @return the isolation level
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IsolationLevel</name></type> <name>fromJdbc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_READ_UNCOMMITTED</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>READ_UNCOMMITTED</name></name></expr>;</return>
        <case>case <expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_READ_COMMITTED</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>READ_COMMITTED</name></name></expr>;</return>
        <case>case <expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_REPEATABLE_READ</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>REPEATABLE_READ</name></name></expr>;</return>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>TRANSACTION_SNAPSHOT</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>SNAPSHOT</name></name></expr>;</return>
        <case>case <expr><name><name>Connection</name><operator>.</operator><name>TRANSACTION_SERIALIZABLE</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>SERIALIZABLE</name></name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"isolation level"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the isolation level from LOCK_MODE equivalent for PageStore and
     * old versions of H2.
     *
     * @param lockMode
     *            the LOCK_MODE value
     * @return the isolation level
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IsolationLevel</name></type> <name>fromLockMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>lockMode</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>READ_UNCOMMITTED</name></name></expr>;</return>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_READ_COMMITTED</name></name></expr>:</case>
        <default>default:</default>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>READ_COMMITTED</name></name></expr>;</return>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE</name></name></expr>:</case>
        <case>case <expr><name><name>Constants</name><operator>.</operator><name>LOCK_MODE_TABLE_GC</name></name></expr>:</case>
            <return>return <expr><name><name>IsolationLevel</name><operator>.</operator><name>SERIALIZABLE</name></name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the isolation level from its SQL name.
     *
     * @param sql
     *            the SQL name
     * @return the isolation level from its SQL name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IsolationLevel</name></type> <name>fromSql</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>sql</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="string">"READ UNCOMMITTED"</literal></expr>:</case>
            <return>return <expr><name>READ_UNCOMMITTED</name></expr>;</return>
        <case>case <expr><literal type="string">"READ COMMITTED"</literal></expr>:</case>
            <return>return <expr><name>READ_COMMITTED</name></expr>;</return>
        <case>case <expr><literal type="string">"REPEATABLE READ"</literal></expr>:</case>
            <return>return <expr><name>REPEATABLE_READ</name></expr>;</return>
        <case>case <expr><literal type="string">"SNAPSHOT"</literal></expr>:</case>
            <return>return <expr><name>SNAPSHOT</name></expr>;</return>
        <case>case <expr><literal type="string">"SERIALIZABLE"</literal></expr>:</case>
            <return>return <expr><name>SERIALIZABLE</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"isolation level"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>sql</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>jdbc</name></decl>, <decl><type ref="prev"/><name>lockMode</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>IsolationLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jdbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intern</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jdbc</name></name> <operator>=</operator> <name>jdbc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockMode</name></name> <operator>=</operator> <name>lockMode</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the SQL representation of this isolation level.
     *
     * @return SQL representation of this isolation level
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>sql</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the JDBC constant for this isolation level.
     *
     * @return the JDBC constant for this isolation level
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getJdbc</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>jdbc</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the LOCK_MODE equivalent for PageStore and old versions of H2.
     *
     * @return the LOCK_MODE equivalent
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLockMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lockMode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether a non-repeatable read phenomena is allowed.
     *
     * @return whether a non-repeatable read phenomena is allowed
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowNonRepeatableRead</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>ordinal</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>REPEATABLE_READ</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></enum>
</unit>
