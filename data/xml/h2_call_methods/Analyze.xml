<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/ddl/Analyze.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents the statements
 * ANALYZE and ANALYZE TABLE
 */</comment>
<class><specifier>public</specifier> class <name>Analyze</name> <super_list><extends>extends <super><name>DefineCommand</name></super></extends></super_list> <block>{

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SelectivityData</name> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>distinctCount</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The number of occupied slots, excluding the zero element (if any).
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>elements</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Whether the zero element is present.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>zeroElement</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxSize</name></decl>;</decl_stmt>

        <constructor><name>SelectivityData</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>elements</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxSize</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>currentSize</name> <init>= <expr><call><name>currentSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentSize</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>SELECTIVITY_DISTINCT_COUNT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>elements</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>zeroElement</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>distinctCount</name> <operator>+=</operator> <name>currentSize</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>zeroElement</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>maxSize</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>rehash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><name>int</name></type> <name>getSelectivity</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">100</literal> <operator>*</operator> <operator>(</operator><name>distinctCount</name> <operator>+</operator> <call><name>currentSize</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <name>count</name><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>s</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>currentSize</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>this</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>zeroElement</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>elements</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>element</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>plus</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>elements</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// found an empty record</comment>
                    <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>elements</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>element</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// existing element</comment>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>+</operator> <name>plus</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>plus</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition>;</do>
            <comment type="line">// no space, ignore</comment>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>rehash</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>oldElements</name> <init>= <expr><name>elements</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>oldElements</name><operator>.</operator><name>length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>elements</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxSize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>*</operator> <literal type="number">90L</literal> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <range>: <expr><name>oldElements</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * The sample size.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>sampleRows</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * used in ANALYZE TABLE...
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Analyze</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sampleRows</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>analyzeSample</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTable</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>checkAdmin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>sampleRows</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>getAllSchemasNoMeta</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>sampleRows</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Analyze this table.
     *
     * @param session the session
     * @param table the table
     * @param sample the number of sample rows
     * @param manual whether the command was called by the user
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>analyzeTable</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>manual</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getTableType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>TableType</name><operator>.</operator><name>TABLE</name></name> <comment type="line">//</comment>
                <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call> <comment type="line">//</comment>
                <operator>||</operator> <name>session</name> <operator>==</operator> <literal type="null">null</literal> <comment type="line">//</comment>
                <operator>||</operator> <operator>!</operator><name>manual</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSysTableLocked</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>hasSelectTrigger</name></name><argument_list>()</argument_list></call><operator>)</operator> <comment type="line">//</comment>
                <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call> <comment type="line">//</comment>
                        <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>findLocalTempTable</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <comment type="line">//</comment>
                <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>isLockedExclusively</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>table</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <operator>!</operator><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTableRight</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>Right</name><operator>.</operator><name>SELECT</name></name></expr></argument>)</argument_list></call> <comment type="line">//</comment>
                <comment type="line">// if the connection is closed and there is something to undo</comment>
                <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getCancel</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getScanIndex</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>SelectivityData</name><index>[]</index></name></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>SelectivityData</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DataType</name><operator>.</operator><name>isLargeObject</name></name><argument_list>(<argument><expr><call><name><name>col</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>SelectivityData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>long</name></type> <name>rowNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>SelectivityData</name></type> <name>selectivity</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>selectivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>selectivity</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>rowNumber</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name>sample</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>rowNumber</name> <operator>&lt;</operator> <name>sample</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>SelectivityData</name></type> <name>selectivity</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>selectivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setSelectivity</name><argument_list>(<argument><expr><call><name><name>selectivity</name><operator>.</operator><name>getSelectivity</name></name><argument_list>(<argument><expr><name>rowNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setSelectivity</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateMeta</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sampleRows</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>CommandInterface</name><operator>.</operator><name>ANALYZE</name></name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
