<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/tools/org/h2/java/lang/System.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>java</name><operator>.</operator><name>lang</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A simple java.lang.System implementation.
 */</comment>
<class><specifier>public</specifier> class <name>System</name> <block>{

    <comment type="block" format="javadoc">/**
     * The stdout stream.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>out</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Copy data from the source to the target.
     * Source and target may overlap.
     *
     * @param src the source array
     * @param srcPos the first element in the source array
     * @param dest the destination
     * @param destPos the first element in the destination
     * @param length the number of element to copy
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>arraycopy</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcPos</name></decl></parameter>, <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>dest</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>destPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="block">/* c:
        memmove(((jchar*)dest-&gt;getPointer()) + destPos,
            ((jchar*)src-&gt;getPointer()) + srcPos, sizeof(jchar) * length);
        */</comment>
        <comment type="line">// c: return;</comment>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destPos</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Copy data from the source to the target.
     * Source and target may overlap.
     *
     * @param src the source array
     * @param srcPos the first element in the source array
     * @param dest the destination
     * @param destPos the first element in the destination
     * @param length the number of element to copy
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>arraycopy</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcPos</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>dest</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>destPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="block">/* c:
        memmove(((jbyte*)dest-&gt;getPointer()) + destPos,
            ((jbyte*)src-&gt;getPointer()) + srcPos, sizeof(jbyte) * length);
        */</comment>
        <comment type="line">// c: return;</comment>
        <expr_stmt><expr><call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destPos</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the current time in milliseconds since 1970-01-01.
     *
     * @return the milliseconds
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>nanoTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="block">/* c:
        #if CLOCKS_PER_SEC == 1000000
        return (jlong) clock() * 1000;
        #else
        return (jlong) clock() * 1000000 / CLOCKS_PER_SEC;
        #endif
        */</comment>
        <comment type="line">// c: return;</comment>
        <return>return <expr><call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
