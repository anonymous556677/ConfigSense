<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/util/MathUtils.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadLocalRandom</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is a utility class with mathematical helper functions.
 */</comment>
<class><specifier>public</specifier> class <name>MathUtils</name> <block>{

    <comment type="block" format="javadoc">/**
     * The secure random object.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>SecureRandom</name></type> <name>secureRandom</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * True if the secure random object is seeded.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>seeded</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>MathUtils</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// utility class</comment>
    </block_content>}</block></constructor>


    <comment type="block" format="javadoc">/**
     * Round the value up to the next block size. The block size must be a power
     * of two. As an example, using the block size of 8, the following rounding
     * operations are done: 0 stays 0; values 1..8 results in 8, 9..16 results
     * in 16, and so on.
     *
     * @param x the value to be rounded
     * @param blockSizePowerOf2 the block size
     * @return the rounded value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>roundUpInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockSizePowerOf2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>blockSizePowerOf2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>blockSizePowerOf2</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Round the value up to the next block size. The block size must be a power
     * of two. As an example, using the block size of 8, the following rounding
     * operations are done: 0 stays 0; values 1..8 results in 8, 9..16 results
     * in 16, and so on.
     *
     * @param x the value to be rounded
     * @param blockSizePowerOf2 the block size
     * @return the rounded value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>roundUpLong</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockSizePowerOf2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>blockSizePowerOf2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>blockSizePowerOf2</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>SecureRandom</name></type> <name>getSecureRandom</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>secureRandom</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>secureRandom</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Workaround for SecureRandom problem as described in</comment>
        <comment type="line">// https://bugs.openjdk.java.net/browse/JDK-6202721</comment>
        <comment type="line">// Can not do that in a static initializer block, because</comment>
        <comment type="line">// threads are not started until after the initializer block exits</comment>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>secureRandom</name> <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// On some systems, secureRandom.generateSeed() is very slow.</comment>
            <comment type="line">// In this case it is initialized using our own seed implementation</comment>
            <comment type="line">// and afterwards (in the thread) using the regular algorithm.</comment>
            <decl_stmt><decl><type><name>Runnable</name></type> <name>runnable</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>sr</name> <init>= <expr><call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><call><name><name>sr</name><operator>.</operator><name>generateSeed</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <synchronized>synchronized <init>(<expr><name>secureRandom</name></expr>)</init> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>secureRandom</name><operator>.</operator><name>setSeed</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>seeded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></synchronized>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// NoSuchAlgorithmException</comment>
                    <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"SecureRandom"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><literal type="string">"Generate Seed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// let the process terminate even if generating the seed is</comment>
                <comment type="line">// really slow</comment>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setDaemon</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>yield</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <comment type="line">// normally, generateSeed takes less than 200 ms</comment>
                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"InterruptedException"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>seeded</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><call><name>generateAlternativeSeed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// this never reduces randomness</comment>
                    <synchronized>synchronized <init>(<expr><name>secureRandom</name></expr>)</init> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>secureRandom</name><operator>.</operator><name>setSeed</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></synchronized>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// workaround for the Google App Engine: don't use a thread</comment>
                <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>generateAlternativeSeed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// NoSuchAlgorithmException</comment>
            <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"SecureRandom"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>secureRandom</name> <operator>=</operator> <operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>secureRandom</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generate a seed value, using as much unpredictable data as possible.
     *
     * @return the seed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>generateAlternativeSeed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bout</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>bout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// milliseconds and nanoseconds</comment>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// memory</comment>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Runtime</name></type> <name>runtime</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>runtime</name><operator>.</operator><name>freeMemory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>runtime</name><operator>.</operator><name>maxMemory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>runtime</name><operator>.</operator><name>totalMemory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// environment</comment>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// can't use writeUTF, as the string</comment>
                <comment type="line">// might be larger than 64 KB</comment>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"generateAlternativeSeed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

            <comment type="line">// host name and ip addresses (if any)</comment>
            <try>try <block>{<block_content>
                <comment type="line">// workaround for the Google App Engine: don't use InetAddress</comment>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>inetAddressClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(
                        <argument><expr><literal type="string">"java.net.InetAddress"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>localHost</name> <init>= <expr><call><name><name>inetAddressClass</name><operator>.</operator><name>getMethod</name></name><argument_list>(
                        <argument><expr><literal type="string">"getLocalHost"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>hostName</name> <init>= <expr><call><name><name>inetAddressClass</name><operator>.</operator><name>getMethod</name></name><argument_list>(
                        <argument><expr><literal type="string">"getHostName"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><name>localHost</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <call><name><name>inetAddressClass</name><operator>.</operator><name>getMethod</name></name><argument_list>(
                        <argument><expr><literal type="string">"getAllByName"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Method</name></type> <name>getAddress</name> <init>= <expr><call><name><name>inetAddressClass</name><operator>.</operator><name>getMethod</name></name><argument_list>(
                        <argument><expr><literal type="string">"getAddress"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <call><name><name>getAddress</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// on some system, InetAddress is not supported</comment>
                <comment type="line">// on some system, InetAddress.getLocalHost() doesn't work</comment>
                <comment type="line">// for some reason (incorrect configuration)</comment>
            </block_content>}</block></catch></try>

            <comment type="line">// timing (a second thread is already running usually)</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>end</name> <operator>==</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>bout</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"generateAlternativeSeed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Print a message to system output if there was a problem initializing the
     * random number generator.
     *
     * @param s the message to print
     * @param t the stack trace
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>warn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// not a fatal problem, but maybe reduced security</comment>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Warning: "</literal> <operator>+</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the value that is equal to or higher than this value, and that is a
     * power of two.
     *
     * @param x the original value
     * @return the next power of two value
     * @throws IllegalArgumentException if x &amp;lt; 0 or x &amp;gt; 0x40000000
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>nextPowerOf2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0x4000_0000</literal> <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Argument out of range"</literal>
                    <operator>+</operator> <literal type="string">" [0x0-0x40000000]. Argument was: "</literal> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>&gt;&gt;&gt;</operator> <call><name><name>Integer</name><operator>.</operator><name>numberOfLeadingZeros</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a long value to an int value. Values larger than the biggest int
     * value are converted to the biggest int value, and values smaller than the
     * smallest int value are converted to the smallest int value.
     *
     * @param l the value to convert
     * @return the converted int value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertLongToInt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>l</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert an int value to a short value. Values larger than the biggest
     * short value are converted to the biggest short value, and values smaller
     * than the smallest short value are converted to the smallest short value.
     *
     * @param i the value to convert
     * @return the converted short value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>short</name></type> <name>convertIntToShort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>Short</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Short</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Short</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <name>i</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a cryptographically secure pseudo random long value.
     *
     * @return the random long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>secureRandomLong</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a number of pseudo random bytes.
     *
     * @param bytes the target array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>randomBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a number of cryptographically secure pseudo random bytes.
     *
     * @param len the number of bytes
     * @return the random bytes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>secureRandomBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buff</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getSecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>buff</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a pseudo random int value between 0 (including and the given value
     * (excluding). The value is not cryptographically secure.
     *
     * @param lowerThan the value returned will be lower than this value
     * @return the random long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>randomInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lowerThan</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name>lowerThan</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a cryptographically secure pseudo random int value between 0
     * (including and the given value (excluding).
     *
     * @param lowerThan the value returned will be lower than this value
     * @return the random long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>secureRandomInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lowerThan</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name>lowerThan</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
