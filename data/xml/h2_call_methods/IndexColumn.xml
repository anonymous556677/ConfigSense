<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/IndexColumn.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This represents a column item of an index. This is required because some
 * indexes support descending sorted columns.
 */</comment>
<class><specifier>public</specifier> class <name>IndexColumn</name> <block>{

    <comment type="block" format="javadoc">/**
     * Do not append ordering.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SQL_NO_ORDER</name> <init>= <expr><literal type="number">0x8000_0000</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The column name.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnName</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The column, or null if not set.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Column</name></type> <name>column</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The sort type. Ascending (the default) and descending are supported;
     * nulls can be sorted first or last.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>sortType</name> <init>= <expr><name><name>SortOrder</name><operator>.</operator><name>ASCENDING</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Appends the specified columns to the specified builder.
     *
     * @param builder
     *            string builder
     * @param columns
     *            index columns
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>writeColumns</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>writeColumns</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Appends the specified columns to the specified builder.
     *
     * @param builder
     *            string builder
     * @param startOffset
     *            start offset, inclusive
     * @param endOffset
     *            end offset, exclusive
     * @param columns
     *            index columns
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>writeColumns</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startOffset</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>endOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startOffset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endOffset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>startOffset</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>,  <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Appends the specified columns to the specified builder.
     *
     * @param builder
     *            string builder
     * @param columns
     *            index columns
     * @param separator
     *            separator
     * @param suffix
     *            additional SQL to append after each column
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>writeColumns</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>separator</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new instance with the specified name.
     *
     * @param columnName
     *            the column name
     */</comment>
    <constructor><specifier>public</specifier> <name>IndexColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnName</name></name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance with the specified name.
     *
     * @param columnName
     *            the column name
     * @param sortType
     *            the sort type
     */</comment>
    <constructor><specifier>public</specifier> <name>IndexColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnName</name></name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sortType</name></name> <operator>=</operator> <name>sortType</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance with the specified column.
     *
     * @param column
     *            the column
     */</comment>
    <constructor><specifier>public</specifier> <name>IndexColumn</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>columnName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Appends the SQL snippet for this index column to the specified string builder.
     *
     * @param builder
     *            string builder
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sqlFlags</name> <operator>&amp;</operator> <name>SQL_NO_ORDER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>SortOrder</name><operator>.</operator><name>typeToString</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an array of index columns from a list of columns. The default sort
     * type is used.
     *
     * @param columns the column list
     * @return the index column array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>IndexColumn</name><index>[]</index></name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>IndexColumn</name><index>[<expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Map the columns using the column names and the specified table.
     *
     * @param indexColumns the column list with column names set
     * @param table the table from where to map the column names to columns
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>col</name> <range>: <expr><name>indexColumns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>col</name><operator>.</operator><name>column</name></name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name><name>col</name><operator>.</operator><name>columnName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSQL</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"IndexColumn "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
