<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/condition/ConditionAndOrN.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0, and the
 * EPL 1.0 (https://h2database.com/html/license.html). Initial Developer: H2
 * Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An 'and' or 'or' condition as in WHERE ID=1 AND NAME=? with N operands.
 * Mostly useful for optimisation and preventing stack overflow where generated
 * SQL has tons of conditions.
 */</comment>
<class><specifier>public</specifier> class <name>ConditionAndOrN</name> <super_list><extends>extends <super><name>Condition</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>andOrType</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Use an ArrayDeque because we primarily insert at the front.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Additional conditions for index only.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>added</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ConditionAndOrN</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>andOrType</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expr1</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expr2</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>expr3</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>andOrType</name></name> <operator>=</operator> <name>andOrType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expressions</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ConditionAndOrN</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>andOrType</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>expressions</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>andOrType</name></name> <operator>=</operator> <name>andOrType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expressions</name></name> <operator>=</operator> <name>expressions</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>int</name></type> <name>getAndOrType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>andOrType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the expression at the beginning of the list.
     *
     * @param e the expression
     */</comment>
    <function><type><name>void</name></type> <name>addFirst</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>needParentheses</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>AUTO_PARENTHESES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"andOrType="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
            <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>AUTO_PARENTHESES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>andOrType</name> <operator>==</operator> <name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>added</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>added</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getNotIfPossible</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// (NOT (A OR B)): (NOT(A) AND NOT(B))</comment>
        <comment type="line">// (NOT (A AND B)): (NOT(A) OR NOT(B))</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>newList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>l</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getNotIfPossible</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionNot</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>newList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>reversed</name> <init>= <expr><ternary><condition><expr><name>andOrType</name> <operator>==</operator> <name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr> ?</condition><then> <expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr> </then><else>: <expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConditionAndOrN</name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>newList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasNull</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hasNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><ternary><condition><expr><name>hasNull</name></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hasNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><ternary><condition><expr><name>hasNull</name></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>andOrType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>COMPARE_BY_COST</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>lhs</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>rhs</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// NULL handling: see wikipedia,</comment>
        <comment type="line">// http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls</comment>

        <comment type="line">// first pass, optimize individual sub-expressions</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>COMPARE_BY_COST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// TODO we're only matching pairs so that are next to each other, so in complex expressions</comment>
        <comment type="line">//   we will miss opportunities</comment>

        <comment type="line">// second pass, optimize combinations</comment>
        <expr_stmt><expr><call><name>optimizeMerge</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>left</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>right</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>andOrType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeTwoEquals</name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// this optimization does not work in the following case,</comment>
                <comment type="line">// but NOT is optimized before:</comment>
                <comment type="line">// CREATE TABLE TEST(A INT, B INT);</comment>
                <comment type="line">// INSERT INTO TEST VALUES(1, NULL);</comment>
                <comment type="line">// SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows</comment>
                <comment type="line">// SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1,</comment>
                <comment type="line">// NULL</comment>
                <comment type="line">// try to add conditions (A=B AND B=1: add A=1)</comment>
                <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>Comparison</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// try to add conditions (A=B AND B=1: add A=1)</comment>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>added</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditionalAnd</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>added</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>added</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>added</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>added</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>added</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name><name>ConditionAndOr</name><operator>.</operator><name>OR</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>optimizeOr</name></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Expression</name></type> <name>reduced</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>Comparison</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>optimizeOr</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionIn</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionIn</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ConditionIn</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionIn</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionInConstantSet</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionInConstantSet</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ConditionInConstantSet</name> <operator>&amp;&amp;</operator> <name>left</name> <operator>instanceof</operator> <name>Comparison</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConditionInConstantSet</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>getAdditional</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>Comparison</name><operator>)</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ConditionAndOr</name> <operator>&amp;&amp;</operator> <name>right</name> <operator>instanceof</operator> <name>ConditionAndOr</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>reduced</name> <operator>=</operator> <call><name><name>ConditionAndOr</name><operator>.</operator><name>optimizeConditionAndOr</name></name><argument_list>(<argument><expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator> <name>left</name></expr></argument>, <argument><expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator> <name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// TODO optimization: convert .. OR .. to UNION if the cost</comment>
                    <comment type="line">// is lower</comment>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>reduced</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>reduced</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue> <comment type="line">// because we don't want to increment, we want to compare the new pair exposed</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></switch>

            <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>ConditionAndOr</name><operator>.</operator><name>optimizeIfConstant</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>andOrType</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue> <comment type="line">// because we don't want to increment, we want to compare the new pair exposed</comment>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>optimizeMerge</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>COMPARE_BY_COST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Condition</name><operator>.</operator><name>castToBoolean</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>optimizeMerge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// If we have a ConditionAndOrN as a sub-expression, see if we can merge it</comment>
        <comment type="line">// into this one.</comment>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>ConditionAndOrN</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ConditionAndOrN</name></type> <name>rightCondition</name> <init>= <expr><operator>(</operator><name>ConditionAndOrN</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>andOrType</name></name> <operator>==</operator> <name><name>rightCondition</name><operator>.</operator><name>andOrType</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rightCondition</name><operator>.</operator><name>expressions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>ConditionAndOr</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ConditionAndOr</name></type> <name>rightCondition</name> <init>= <expr><operator>(</operator><name>ConditionAndOr</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>andOrType</name></name> <operator>==</operator> <call><name><name>rightCondition</name><operator>.</operator><name>getAndOrType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>rightCondition</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>rightCondition</name><operator>.</operator><name>getSubexpression</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addFilterConditions</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>andOrType</name> <operator>==</operator> <name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>e</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Expression</name></type> <name>e</name> <range>: <expr><name>expressions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>cost</name> <operator>+=</operator> <call><name><name>e</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>cost</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getSubexpressionCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>expressions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getSubexpression</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>expressions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
