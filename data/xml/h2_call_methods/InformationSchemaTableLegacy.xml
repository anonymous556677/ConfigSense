<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/InformationSchemaTableLegacy.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DatabaseMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>dml</name><operator>.</operator><name>Help</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintActionType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintCheck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintDomain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintReferential</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintUnique</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>QueryStatisticsData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>RightOwner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Role</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name><operator>.</operator><name>State</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Setting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>MetaIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>FileStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Constant</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Domain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>TriggerObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>UserDefinedFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>InDoubtTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>tools</name><operator>.</operator><name>Csv</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZoneProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDouble</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueSmallint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter2</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is responsible to build the legacy variant of INFORMATION_SCHEMA
 * tables.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>InformationSchemaTableLegacy</name> <super_list><extends>extends <super><name>MetaTable</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHARACTER_SET_NAME</name> <init>= <expr><literal type="string">"Unicode"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMNS</name> <init>= <expr><name>TABLES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INDEXES</name> <init>= <expr><name>COLUMNS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_TYPES</name> <init>= <expr><name>INDEXES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TYPE_INFO</name> <init>= <expr><name>TABLE_TYPES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CATALOGS</name> <init>= <expr><name>TYPE_INFO</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SETTINGS</name> <init>= <expr><name>CATALOGS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HELP</name> <init>= <expr><name>SETTINGS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SEQUENCES</name> <init>= <expr><name>HELP</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>USERS</name> <init>= <expr><name>SEQUENCES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROLES</name> <init>= <expr><name>USERS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RIGHTS</name> <init>= <expr><name>ROLES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FUNCTION_ALIASES</name> <init>= <expr><name>RIGHTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCHEMATA</name> <init>= <expr><name>FUNCTION_ALIASES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_PRIVILEGES</name> <init>= <expr><name>SCHEMATA</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMN_PRIVILEGES</name> <init>= <expr><name>TABLE_PRIVILEGES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLLATIONS</name> <init>= <expr><name>COLUMN_PRIVILEGES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VIEWS</name> <init>= <expr><name>COLLATIONS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IN_DOUBT</name> <init>= <expr><name>VIEWS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CROSS_REFERENCES</name> <init>= <expr><name>IN_DOUBT</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FUNCTION_COLUMNS</name> <init>= <expr><name>CROSS_REFERENCES</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTRAINTS</name> <init>= <expr><name>FUNCTION_COLUMNS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANTS</name> <init>= <expr><name>CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOMAINS</name> <init>= <expr><name>CONSTANTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRIGGERS</name> <init>= <expr><name>DOMAINS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SESSIONS</name> <init>= <expr><name>TRIGGERS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LOCKS</name> <init>= <expr><name>SESSIONS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SESSION_STATE</name> <init>= <expr><name>LOCKS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>QUERY_STATISTICS</name> <init>= <expr><name>SESSION_STATE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SYNONYMS</name> <init>= <expr><name>QUERY_STATISTICS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_CONSTRAINTS</name> <init>= <expr><name>SYNONYMS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOMAIN_CONSTRAINTS</name> <init>= <expr><name>TABLE_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>KEY_COLUMN_USAGE</name> <init>= <expr><name>DOMAIN_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REFERENTIAL_CONSTRAINTS</name> <init>= <expr><name>KEY_COLUMN_USAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHECK_CONSTRAINTS</name> <init>= <expr><name>REFERENTIAL_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTRAINT_COLUMN_USAGE</name> <init>= <expr><name>CHECK_CONSTRAINTS</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of meta table types. Supported meta table types are
     * {@code 0..META_TABLE_TYPE_COUNT - 1}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>META_TABLE_TYPE_COUNT</name> <init>= <expr><name>CONSTRAINT_COLUMN_USAGE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new metadata table.
     *
     * @param schema the schema
     * @param id the object id
     * @param type the meta table type
     */</comment>
    <constructor><specifier>public</specifier> <name>InformationSchemaTableLegacy</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>cols</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>indexColumnName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TABLES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STORAGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"LAST_MODIFICATION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ROW_COUNT_ESTIMATE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_NULLABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_MAXIMUM_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_OCTET_LENGTH"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATETIME_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INTERVAL_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GENERATED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GENERATION_EXPRESSION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// extensions</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_COMPUTED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SOURCE_DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_ON_UPDATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_VISIBLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// compatibility</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>INDEXES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"INDEXES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NON_UNIQUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CARDINALITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRIMARY_KEY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GENERATED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ASC_OR_DESC"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PAGES"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FILTER_CONDITION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SORT_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_TYPES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLE_TYPES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TYPE_INFO</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TYPE_INFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PREFIX"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SUFFIX"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARAMS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AUTO_INCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MINIMUM_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"POS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CASE_SENSITIVE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEARCHABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CATALOGS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CATALOGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CATALOG_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SETTINGS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SETTINGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VALUE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>HELP</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"HELP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SECTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TOPIC"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNTAX"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TEXT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SEQUENCES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SEQUENCES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_PRECISION_RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"START_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MINIMUM_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAXIMUM_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INCREMENT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CYCLE_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_DATA_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DECLARED_NUMERIC_SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CURRENT_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GENERATED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CACHE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// compatibility</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MIN_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAX_VALUE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_CYCLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>USERS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"USERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ADMIN"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ROLES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"ROLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RIGHTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"RIGHTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEETYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEDROLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"RIGHTS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FUNCTION_ALIASES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"FUNCTION_ALIASES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_METHOD"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"RETURNS_RESULT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SOURCE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>FUNCTION_COLUMNS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"FUNCTION_COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ALIAS_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_METHOD"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"POS"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"RADIX"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NULLABLE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCHEMATA</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SCHEMATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CATALOG_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCHEMA_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCHEMA_OWNER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_CHARACTER_SET_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFAULT_COLLATION_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DEFAULT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TABLE_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLE_PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLUMN_PRIVILEGES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLUMN_PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"GRANTEE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGE_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_GRANTABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COLLATIONS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"COLLATIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"KEY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>VIEWS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"VIEWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"VIEW_DEFINITION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_UPDATABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATUS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"IN_DOUBT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CROSS_REFERENCES</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CROSS_REFERENCES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PKTABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PKTABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PKTABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PKCOLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FKTABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FKTABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FKTABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FKCOLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UPDATE_RULE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DELETE_RULE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"FK_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PK_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DEFERRABILITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"PKTABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CONSTRAINTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_EXPRESSION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_LIST"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>CONSTANTS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CONSTANTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTANT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DOMAINS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"DOMAINS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_ON_UPDATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DATA_TYPE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PRECISION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SCALE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"PARENT_DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SELECTIVITY"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <comment type="line">// compatibility</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_NULLABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TRIGGERS</name></expr>:</case>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TRIGGERS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TRIGGER_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"BEFORE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"JAVA_CLASS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"QUEUE_SIZE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"NO_WAIT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SESSIONS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SESSIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"USER_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CLIENT_ADDR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CLIENT_INFO"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_START"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ISOLATION_LEVEL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATEMENT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATEMENT_START"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONTAINS_UNCOMMITTED"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"BLOCKER_ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SLEEP_SINCE"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>LOCKS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"LOCKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SESSION_ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"LOCK_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SESSION_STATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"KEY"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>QUERY_STATISTICS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"QUERY_STATISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL_STATEMENT"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"EXECUTION_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MIN_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAX_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CUMULATIVE_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AVERAGE_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STD_DEV_EXECUTION_TIME"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MIN_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MAX_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CUMULATIVE_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"AVERAGE_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STD_DEV_ROW_COUNT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SYNONYMS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"SYNONYMS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_FOR"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SYNONYM_FOR_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TYPE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"STATUS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"SYNONYM_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TABLE_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"TABLE_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_TYPE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INITIALLY_DEFERRED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>DOMAIN_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DOMAIN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"IS_DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INITIALLY_DEFERRED"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"REMARKS"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>KEY_COLUMN_USAGE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"KEY_COLUMN_USAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"ORDINAL_POSITION"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"POSITION_IN_UNIQUE_CONSTRAINT"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"INDEX_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>REFERENTIAL_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"REFERENTIAL_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UNIQUE_CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"MATCH_OPTION"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"UPDATE_RULE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"DELETE_RULE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CHECK_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CHECK_CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CHECK_CLAUSE"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CONSTRAINT_COLUMN_USAGE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>setMetaTableName</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_COLUMN_USAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"TABLE_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"COLUMN_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_CATALOG"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_SCHEMA"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                    <expr><call><name>column</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT_NAME"</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
            }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexColumnName</name> <operator>=</operator> <literal type="string">"TABLE_NAME"</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>setColumns</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexColumnName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>indexColumn</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>metaIndex</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>indexColumn</name> <operator>=</operator> <call><name>getColumn</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>sysIdentifier</name></name><argument_list>(<argument><expr><name>indexColumnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexCols</name> <init>= <expr><call><name><name>IndexColumn</name><operator>.</operator><name>wrap</name></name><argument_list>(
                    <argument><expr><operator>new</operator> <name><name>Column</name><index>[]</index></name> <block>{ <expr><name><name>cols</name><index>[<expr><name>indexColumn</name></expr>]</index></name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>metaIndex</name> <operator>=</operator> <operator>new</operator> <call><name>MetaIndex</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexCols</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>replaceNullWithEmpty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>generateRows</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>indexFrom</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>indexTo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexColumn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>indexFrom</name> <operator>=</operator> <call><name><name>first</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>indexColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>indexTo</name> <operator>=</operator> <call><name><name>last</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>indexColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>catalog</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getShortName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>admin</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAdmin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TABLES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name>getAllTables</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>storageType</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isGlobalTemporary</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>storageType</name> <operator>=</operator> <literal type="string">"GLOBAL TEMPORARY"</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>storageType</name> <operator>=</operator> <literal type="string">"LOCAL TEMPORARY"</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>storageType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isPersistIndexes</name></name><argument_list>()</argument_list></call></expr> ?</condition><then>
                            <expr><literal type="string">"CACHED"</literal></expr> </then><else>: <expr><literal type="string">"MEMORY"</literal></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>admin</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>sql</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>DbException</name><operator>.</operator><name>HIDE_SQL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// hide the password of linked tables</comment>
                        <expr_stmt><expr><name>sql</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// TABLE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableName</name></expr></argument>,
                        <comment type="line">// TABLE_TYPE</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getTableType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// STORAGE_TYPE</comment>
                        <argument><expr><name>storageType</name></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><name>sql</name></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// LAST_MODIFICATION</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getMaxDataModificationId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// TYPE_NAME</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>,
                        <comment type="line">// TABLE_CLASS</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ROW_COUNT_ESTIMATE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getRowCountApproximation</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>COLUMNS</name></expr>:</case> <block>{<block_content>
            <comment type="line">// reduce the number of tables to scan - makes some metadata queries</comment>
            <comment type="line">// 10x faster</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tablesToList</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>indexFrom</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>indexFrom</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>indexFrom</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>tableName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>tablesToList</name> <operator>=</operator> <call><name>getTablesByName</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tablesToList</name> <operator>=</operator> <call><name>getAllTables</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><name>tablesToList</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cols</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Column</name></type> <name>c</name> <init>= <expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueInteger</name></type> <name>precision</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueInteger</name></type> <name>scale</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getSequence</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>hasDateTimePrecision</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
                    <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
                        <expr_stmt><expr><name>hasDateTimePrecision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><name>hasDateTimePrecision</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isGenerated</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isInterval</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>isIntervalType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>createSQLWithoutName</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getCreateSQLWithoutName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// TABLE_CATALOG</comment>
                            <argument><expr><name>catalog</name></expr></argument>,
                            <comment type="line">// TABLE_SCHEMA</comment>
                            <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// TABLE_NAME</comment>
                            <argument><expr><name>tableName</name></expr></argument>,
                            <comment type="line">// COLUMN_NAME</comment>
                            <argument><expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// ORDINAL_POSITION</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// COLUMN_DEFAULT</comment>
                            <argument><expr><ternary><condition><expr><name>isGenerated</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>c</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// IS_NULLABLE</comment>
                            <argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// DATA_TYPE</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// CHARACTER_MAXIMUM_LENGTH</comment>
                            <argument><expr><name>precision</name></expr></argument>,
                            <comment type="line">// CHARACTER_OCTET_LENGTH</comment>
                            <argument><expr><name>precision</name></expr></argument>,
                            <comment type="line">// NUMERIC_PRECISION</comment>
                            <argument><expr><name>precision</name></expr></argument>,
                            <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// NUMERIC_SCALE</comment>
                            <argument><expr><name>scale</name></expr></argument>,
                            <comment type="line">// DATETIME_PRECISION</comment>
                            <argument><expr><ternary><condition><expr><name>hasDateTimePrecision</name></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// INTERVAL_TYPE</comment>
                            <argument><expr><ternary><condition><expr><name>isInterval</name></expr> ?</condition><then> <expr><call><name><name>createSQLWithoutName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// INTERVAL_PRECISION</comment>
                            <argument><expr><ternary><condition><expr><name>isInterval</name></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// CHARACTER_SET_NAME</comment>
                            <argument><expr><name>CHARACTER_SET_NAME</name></expr></argument>,
                            <comment type="line">// COLLATION_NAME</comment>
                            <argument><expr><name>collation</name></expr></argument>,
                            <comment type="line">// DOMAIN_CATALOG</comment>
                            <argument><expr><ternary><condition><expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>catalog</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// DOMAIN_SCHEMA</comment>
                            <argument><expr><ternary><condition><expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// DOMAIN_NAME</comment>
                            <argument><expr><ternary><condition><expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// IS_GENERATED</comment>
                            <argument><expr><ternary><condition><expr><name>isGenerated</name></expr> ?</condition><then> <expr><literal type="string">"ALWAYS"</literal></expr> </then><else>: <expr><literal type="string">"NEVER"</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// GENERATION_EXPRESSION</comment>
                            <argument><expr><ternary><condition><expr><name>isGenerated</name></expr> ?</condition><then> <expr><call><name><name>c</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// TYPE_NAME</comment>
                            <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><ternary><condition><expr><name>isInterval</name></expr> ?</condition><then> <expr><literal type="string">"INTERVAL"</literal></expr> </then><else>: <expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// NULLABLE</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr>
                                    ?</condition><then> <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>columnNullable</name></name></expr> </then><else>: <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>columnNoNulls</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// IS_COMPUTED</comment>
                            <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>isGenerated</name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// SELECTIVITY</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getSelectivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// SEQUENCE_NAME</comment>
                            <argument><expr><ternary><condition><expr><name>sequence</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>sequence</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// REMARKS</comment>
                            <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// SOURCE_DATA_TYPE</comment>
                            <comment type="line">// SMALLINT</comment>
                            <argument><expr><literal type="null">null</literal></expr></argument>,
                            <comment type="line">// COLUMN_TYPE</comment>
                            <argument><expr><name>createSQLWithoutName</name></expr></argument>,
                            <comment type="line">// COLUMN_ON_UPDATE</comment>
                            <argument><expr><call><name><name>c</name><operator>.</operator><name>getOnUpdateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// IS_VISIBLE</comment>
                            <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getVisible</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// CHECK_CONSTRAINT</comment>
                            <argument><expr><literal type="null">null</literal></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>INDEXES</name></expr>:</case> <block>{<block_content>
            <comment type="line">// reduce the number of tables to scan - makes some metadata queries</comment>
            <comment type="line">// 10x faster</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tablesToList</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>indexFrom</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>indexFrom</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>indexFrom</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>tableName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>tablesToList</name> <operator>=</operator> <call><name>getTablesByName</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tablesToList</name> <operator>=</operator> <call><name>getAllTables</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><name>tablesToList</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>constraintName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <call><name><name>constraints</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><call><name><name>constraints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>usesIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimaryKey</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name>constraintName</name> <operator>=</operator> <call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getIndexColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>uniqueColumnCount</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getUniqueColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>indexClass</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>cols</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>IndexColumn</name></type> <name>idxCol</name> <init>= <expr><name><name>cols</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>idxCol</name><operator>.</operator><name>column</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// TABLE_CATALOG</comment>
                                <argument><expr><name>catalog</name></expr></argument>,
                                <comment type="line">// TABLE_SCHEMA</comment>
                                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// TABLE_NAME</comment>
                                <argument><expr><name>tableName</name></expr></argument>,
                                <comment type="line">// NON_UNIQUE</comment>
                                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <name>uniqueColumnCount</name></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// INDEX_NAME</comment>
                                <argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// ORDINAL_POSITION</comment>
                                <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// COLUMN_NAME</comment>
                                <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// CARDINALITY</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// PRIMARY_KEY</comment>
                                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimaryKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// INDEX_TYPE_NAME</comment>
                                <argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// IS_GENERATED</comment>
                                <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBelongsToConstraint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// INDEX_TYPE</comment>
                                <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>DatabaseMetaData</name><operator>.</operator><name>tableIndexOther</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// ASC_OR_DESC</comment>
                                <argument><expr><ternary><condition><expr><operator>(</operator><name><name>idxCol</name><operator>.</operator><name>sortType</name></name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"D"</literal></expr> </then><else>: <expr><literal type="string">"A"</literal></expr></else></ternary></expr></argument>,
                                <comment type="line">// PAGES</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// FILTER_CONDITION</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// REMARKS</comment>
                                <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// SQL</comment>
                                <argument><expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// SORT_TYPE</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>idxCol</name><operator>.</operator><name>sortType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// CONSTRAINT_NAME</comment>
                                <argument><expr><name>constraintName</name></expr></argument>,
                                <comment type="line">// INDEX_CLASS</comment>
                                <argument><expr><name>indexClass</name></expr></argument>
                            )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TABLE_TYPES</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>TableType</name><operator>.</operator><name>TABLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>TableType</name><operator>.</operator><name>TABLE_LINK</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>TableType</name><operator>.</operator><name>SYSTEM_TABLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>TableType</name><operator>.</operator><name>VIEW</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>TableType</name><operator>.</operator><name>EXTERNAL_TABLE_ENGINE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TYPE_INFO</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>DataType</name></type> <name>t</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// TYPE_NAME</comment>
                        <argument><expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// DATA_TYPE</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>sqlType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// PRECISION</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>maxPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// PREFIX</comment>
                        <argument><expr><name><name>t</name><operator>.</operator><name>prefix</name></name></expr></argument>,
                        <comment type="line">// SUFFIX</comment>
                        <argument><expr><name><name>t</name><operator>.</operator><name>suffix</name></name></expr></argument>,
                        <comment type="line">// PARAMS</comment>
                        <argument><expr><name><name>t</name><operator>.</operator><name>params</name></name></expr></argument>,
                        <comment type="line">// AUTO_INCREMENT</comment>
                        <argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>,
                        <comment type="line">// MINIMUM_SCALE</comment>
                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>minScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MAXIMUM_SCALE</comment>
                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>maxScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// RADIX</comment>
                        <argument><expr><ternary><condition><expr><call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// POS</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// CASE_SENSITIVE</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>caseSensitive</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// NULLABLE</comment>
                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>typeNullable</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SEARCHABLE</comment>
                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>typeSearchable</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CATALOGS</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SETTINGS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Setting</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSettings</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getIntValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.BUILD_ID"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>BUILD_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION_MAJOR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>VERSION_MAJOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION_MINOR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>VERSION_MINOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.VERSION"</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>FULL_VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>admin</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>settings</name> <init>= <expr><block>{
                        <expr><literal type="string">"java.runtime.version"</literal></expr>, <expr><literal type="string">"java.vm.name"</literal></expr>,
                        <expr><literal type="string">"java.vendor"</literal></expr>, <expr><literal type="string">"os.name"</literal></expr>, <expr><literal type="string">"os.arch"</literal></expr>, <expr><literal type="string">"os.version"</literal></expr>,
                        <expr><literal type="string">"sun.os.patch.level"</literal></expr>, <expr><literal type="string">"file.separator"</literal></expr>,
                        <expr><literal type="string">"path.separator"</literal></expr>, <expr><literal type="string">"line.separator"</literal></expr>, <expr><literal type="string">"user.country"</literal></expr>,
                        <expr><literal type="string">"user.language"</literal></expr>, <expr><literal type="string">"user.variant"</literal></expr>, <expr><literal type="string">"file.encoding"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>settings</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"property."</literal> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><call><name><name>Utils</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT_NULL_ORDERING"</literal></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getDefaultNullOrdering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"EXCLUSIVE"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>database</name><operator>.</operator><name>getExclusiveSession</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then>
                    <expr><literal type="string">"FALSE"</literal></expr> </then><else>: <expr><literal type="string">"TRUE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"MODE"</literal></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"QUERY_TIMEOUT"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getQueryTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"TIME ZONE"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE_LARGE_LENGTH"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isTruncateLargeLength</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"VARIABLE_BINARY"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isVariableBinary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"OLD_INFORMATION_SCHEMA"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>session</name><operator>.</operator><name>isOldInformationSchema</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>BitSet</name></type> <name>nonKeywords</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getNonKeywords</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nonKeywords</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"NON_KEYWORDS"</literal></expr></argument>, <argument><expr><call><name><name>Parser</name><operator>.</operator><name>formatNonKeywords</name></name><argument_list>(<argument><expr><name>nonKeywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"RETENTION_TIME"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getRetentionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// database settings</comment>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSortedSettings</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>Store</name></type> <name>store</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MVStore</name></type> <name>mvStore</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileStore</name></type> <name>fs</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILE_WRITE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getWriteCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILE_WRITE_BYTES"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getWriteBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILE_READ"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getReadCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILE_READ_BYTES"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getReadBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.UPDATE_FAILURE_PERCENT"</literal></expr></argument>,
                        <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f%%"</literal></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>*</operator> <call><name><name>mvStore</name><operator>.</operator><name>getUpdateFailureRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.FILL_RATE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CHUNKS_FILL_RATE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getChunksFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CHUNKS_FILL_RATE_RW"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getRewritableChunksFillRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                            <argument><expr><literal type="string">"info.FILE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="block">/**/</comment></block_content>}</block></catch></try>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CHUNK_COUNT"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getChunkCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.PAGE_COUNT"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getPageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.PAGE_COUNT_LIVE"</literal></expr></argument>, <argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getLivePageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.PAGE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getPageSplitSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CACHE_MAX_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CACHE_SIZE"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheSizeUsed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.CACHE_HIT_RATIO"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getCacheHitRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="string">"info.TOC_CACHE_HIT_RATIO"</literal></expr></argument>,
                        <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getTocCacheHitRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
                        <argument><expr><literal type="string">"info.LEAF_RATIO"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>mvStore</name><operator>.</operator><name>getLeafRatio</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>HELP</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>resource</name> <init>= <expr><literal type="string">"/org/h2/res/help.csv"</literal></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Csv</name></type> <name>csv</name> <init>= <expr><operator>new</operator> <call><name>Csv</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>csv</name><operator>.</operator><name>setLineCommentCharacter</name></name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>ResultSet</name></type> <name>rs</name> <init>= <expr><call><name><name>csv</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnCount</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <switch>switch <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// SYNTAX column</comment>
                            <comment type="line">// Strip out the special annotations we use to help build</comment>
                            <comment type="line">// the railroad/BNF diagrams</comment>
                            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Help</name><operator>.</operator><name>stripAnnotationsFromSyntax</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// TEXT column</comment>
                            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Help</name><operator>.</operator><name>processHelpText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></switch>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SECTION</comment>
                        <argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                        <comment type="line">// TOPIC</comment>
                        <argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                        <comment type="line">// SYNTAX</comment>
                        <argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
                        <comment type="line">// TEXT</comment>
                        <argument><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SEQUENCES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>SEQUENCE</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Sequence</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>Sequence</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>dataType</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>dataTypeName</name> <init>= <expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><call><name><name>dataType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ValueInteger</name></type> <name>declaredScale</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>dataType</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// SEQUENCE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// SEQUENCE_SCHEMA</comment>
                        <argument><expr><call><name><name>s</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SEQUENCE_NAME</comment>
                        <argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DATA_TYPE</comment>
                        <argument><expr><name>dataTypeName</name></expr></argument>,
                        <comment type="line">// NUMERIC_PRECISION</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getEffectivePrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// NUMERIC_PRECISION_RADIX</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// NUMERIC_SCALE</comment>
                        <argument><expr><name>declaredScale</name></expr></argument>,
                        <comment type="line">// START_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getStartValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MINIMUM_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getMinValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MAXIMUM_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// INCREMENT</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getIncrement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// CYCLE_OPTION</comment>
                        <argument><expr><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>getCycle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isCycle</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// DECLARED_DATA_TYPE</comment>
                        <argument><expr><name>dataTypeName</name></expr></argument>,
                        <comment type="line">// DECLARED_NUMERIC_PRECISION</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>dataType</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// DECLARED_NUMERIC_SCALE</comment>
                        <argument><expr><name>declaredScale</name></expr></argument>,
                        <comment type="line">// CURRENT_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCurrentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// IS_GENERATED</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getBelongsToTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// CACHE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MIN_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getMinValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// MAX_VALUE</comment>
                        <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// IS_CYCLE</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCycle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isCycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>USERS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllUsersAndRoles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>User</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>User</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>User</name><operator>)</operator> <name>rightOwner</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>admin</name> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>u</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// NAME</comment>
                                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// ADMIN</comment>
                                <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// REMARKS</comment>
                                <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>ROLES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>RightOwner</name></type> <name>rightOwner</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllUsersAndRoles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rightOwner</name> <operator>instanceof</operator> <name>Role</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Role</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>Role</name><operator>)</operator> <name>rightOwner</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>admin</name> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isRoleGranted</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// NAME</comment>
                                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// REMARKS</comment>
                                <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>RIGHTS</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>admin</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Role</name></type> <name>role</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedRole</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DbObject</name></type> <name>grantee</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>rightType</name> <init>= <expr><ternary><condition><expr><call><name><name>grantee</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr> ?</condition><then> <expr><literal type="string">"USER"</literal></expr> </then><else>: <expr><literal type="string">"ROLE"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Schema</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>schema</name> <operator>=</operator> <operator>(</operator><name>Schema</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
                            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>table</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>schemaName</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>schema</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// GRANTEE</comment>
                                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// GRANTEETYPE</comment>
                                <argument><expr><name>rightType</name></expr></argument>,
                                <comment type="line">// GRANTEDROLE</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// RIGHTS</comment>
                                <argument><expr><call><name><name>r</name><operator>.</operator><name>getRights</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// TABLE_SCHEMA</comment>
                                <argument><expr><name>schemaName</name></expr></argument>,
                                <comment type="line">// TABLE_NAME</comment>
                                <argument><expr><name>tableName</name></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// GRANTEE</comment>
                                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// GRANTEETYPE</comment>
                                <argument><expr><name>rightType</name></expr></argument>,
                                <comment type="line">// GRANTEDROLE</comment>
                                <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// RIGHTS</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// TABLE_SCHEMA</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// TABLE_NAME</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>FUNCTION_ALIASES</name></expr>:</case>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>alias</name> <init>= <expr><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                        <try>try <block>{<block_content>
                            <expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name><name>alias</name><operator>.</operator><name>getJavaMethods</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></catch></try>
                        <for>for <control>(<init><decl><type><name><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name></type> <name>method</name> <range>: <expr><name>methods</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr><name>rows</name></expr></argument>,
                                    <comment type="line">// ALIAS_CATALOG</comment>
                                    <argument><expr><name>catalog</name></expr></argument>,
                                    <comment type="line">// ALIAS_SCHEMA</comment>
                                    <argument><expr><call><name><name>alias</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                    <comment type="line">// ALIAS_NAME</comment>
                                    <argument><expr><call><name><name>alias</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <comment type="line">// JAVA_CLASS</comment>
                                    <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <comment type="line">// JAVA_METHOD</comment>
                                    <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaMethodName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <comment type="line">// DATA_TYPE</comment>
                                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <comment type="line">// TYPE_NAME</comment>
                                    <argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <comment type="line">// COLUMN_COUNT</comment>
                                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <comment type="line">// RETURNS_RESULT</comment>
                                    <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>
                                            ?</condition><then> <expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureNoResult</name></name></expr>
                                            </then><else>: <expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureReturnsResult</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                                    <comment type="line">// REMARKS</comment>
                                    <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>alias</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <comment type="line">// ID</comment>
                                    <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>alias</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <comment type="line">// SOURCE</comment>
                                    <argument><expr><call><name><name>alias</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>
                                    <comment type="line">// when adding more columns, see also below</comment>
                            )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// ALIAS_CATALOG</comment>
                                <argument><expr><name>catalog</name></expr></argument>,
                                <comment type="line">// ALIAS_SCHEMA</comment>
                                <argument><expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// ALIAS_NAME</comment>
                                <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// JAVA_CLASS</comment>
                                <argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// JAVA_METHOD</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>,
                                <comment type="line">// DATA_TYPE</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Types</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// TYPE_NAME</comment>
                                <argument><expr><literal type="string">"NULL"</literal></expr></argument>,
                                <comment type="line">// COLUMN_COUNT</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// RETURNS_RESULT</comment>
                                <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureReturnsResult</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// REMARKS</comment>
                                <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>userDefinedFunction</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// SOURCE</comment>
                                <argument><expr><literal type="string">""</literal></expr></argument>
                                <comment type="line">// when adding more columns, see also below</comment>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        <case>case <expr><name>FUNCTION_COLUMNS</name></expr>:</case>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>UserDefinedFunction</name></type> <name>userDefinedFunction</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllFunctionsAndAggregates</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>userDefinedFunction</name> <operator>instanceof</operator> <name>FunctionAlias</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>alias</name> <init>= <expr><operator>(</operator><name>FunctionAlias</name><operator>)</operator> <name>userDefinedFunction</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>JavaMethod</name><index>[]</index></name></type> <name>methods</name></decl>;</decl_stmt>
                        <try>try <block>{<block_content>
                            <expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name><name>alias</name><operator>.</operator><name>getJavaMethods</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></catch></try>
                        <for>for <control>(<init><decl><type><name><name>FunctionAlias</name><operator>.</operator><name>JavaMethod</name></name></type> <name>method</name> <range>: <expr><name>methods</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <comment type="line">// Add return column index 0</comment>
                            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>typeInfo</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                        <argument><expr><name>rows</name></expr></argument>,
                                        <comment type="line">// ALIAS_CATALOG</comment>
                                        <argument><expr><name>catalog</name></expr></argument>,
                                        <comment type="line">// ALIAS_SCHEMA</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// ALIAS_NAME</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// JAVA_CLASS</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// JAVA_METHOD</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaMethodName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_COUNT</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// POS</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_NAME</comment>
                                        <argument><expr><literal type="string">"P0"</literal></expr></argument>,
                                        <comment type="line">// DATA_TYPE</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// TYPE_NAME</comment>
                                        <argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// PRECISION</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>defaultPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// SCALE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>defaultScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// RADIX</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// NULLABLE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>columnNullableUnknown</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_TYPE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureColumnReturn</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// REMARKS</comment>
                                        <argument><expr><literal type="string">""</literal></expr></argument>,
                                        <comment type="line">// COLUMN_DEFAULT</comment>
                                        <argument><expr><literal type="null">null</literal></expr></argument>
                                )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>columnList</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getColumnClasses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>columnList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>method</name><operator>.</operator><name>hasConnectionParam</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                    <continue>continue;</continue>
                                </block_content>}</block></if></if_stmt>
                                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><name><name>columnList</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>columnTypeInfo</name> <init>= <expr><call><name><name>ValueToObjectConverter2</name><operator>.</operator><name>classToType</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><call><name><name>columnTypeInfo</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                        <argument><expr><name>rows</name></expr></argument>,
                                        <comment type="line">// ALIAS_CATALOG</comment>
                                        <argument><expr><name>catalog</name></expr></argument>,
                                        <comment type="line">// ALIAS_SCHEMA</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// ALIAS_NAME</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// JAVA_CLASS</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// JAVA_METHOD</comment>
                                        <argument><expr><call><name><name>alias</name><operator>.</operator><name>getJavaMethodName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_COUNT</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// POS</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name><name>method</name><operator>.</operator><name>hasConnectionParam</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_NAME</comment>
                                        <argument><expr><literal type="string">"P"</literal> <operator>+</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
                                        <comment type="line">// DATA_TYPE</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>columnTypeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// TYPE_NAME</comment>
                                        <argument><expr><call><name><name>columnTypeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <comment type="line">// PRECISION</comment>
                                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>defaultPrecision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// SCALE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertIntToShort</name></name><argument_list>(<argument><expr><name><name>dt</name><operator>.</operator><name>defaultScale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// RADIX</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// NULLABLE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>clazz</name><operator>.</operator><name>isPrimitive</name></name><argument_list>()</argument_list></call></expr>
                                                ?</condition><then> <expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>columnNoNulls</name></name></expr>
                                                </then><else>: <expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>columnNullable</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// COLUMN_TYPE</comment>
                                        <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>procedureColumnIn</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <comment type="line">// REMARKS</comment>
                                        <argument><expr><literal type="string">""</literal></expr></argument>,
                                        <comment type="line">// COLUMN_DEFAULT</comment>
                                        <argument><expr><literal type="null">null</literal></expr></argument>
                                )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        <case>case <expr><name>SCHEMATA</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>collation</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CATALOG_NAME</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// SCHEMA_NAME</comment>
                        <argument><expr><call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SCHEMA_OWNER</comment>
                        <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// DEFAULT_CHARACTER_SET_NAME</comment>
                        <argument><expr><name>CHARACTER_SET_NAME</name></expr></argument>,
                        <comment type="line">// DEFAULT_COLLATION_NAME</comment>
                        <argument><expr><name>collation</name></expr></argument>,
                        <comment type="line">// IS_DEFAULT</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>MAIN_SCHEMA_ID</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TABLE_PRIVILEGES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>COLUMN_PRIVILEGES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Right</name></type> <name>r</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>DbObject</name></type> <name>object</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Table</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><operator>(</operator><name>Table</name><operator>)</operator> <name>object</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>DbObject</name></type> <name>grantee</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getGrantee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>addPrivileges</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>COLLATIONS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Locale</name></type> <name>l</name> <range>: <expr><call><name><name>CompareMode</name><operator>.</operator><name>getCollationLocales</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// NAME</comment>
                        <argument><expr><call><name><name>CompareMode</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="line">// KEY</comment>
                        <argument><expr><call><name><name>l</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>VIEWS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name>getAllTables</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getTableType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>TableType</name><operator>.</operator><name>VIEW</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>TableView</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>TableView</name><operator>)</operator> <name>table</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// TABLE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableName</name></expr></argument>,
                        <comment type="line">// VIEW_DEFINITION</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CHECK_OPTION</comment>
                        <argument><expr><literal type="string">"NONE"</literal></expr></argument>,
                        <comment type="line">// IS_UPDATABLE</comment>
                        <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                        <comment type="line">// STATUS</comment>
                        <argument><expr><ternary><condition><expr><call><name><name>view</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"INVALID"</literal></expr> </then><else>: <expr><literal type="string">"VALID"</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>prepared</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getInDoubtTransactions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prepared</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>admin</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>InDoubtTransaction</name></type> <name>prep</name> <range>: <expr><name>prepared</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// TRANSACTION</comment>
                            <argument><expr><call><name><name>prep</name><operator>.</operator><name>getTransactionName</name></name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">// STATE</comment>
                            <argument><expr><call><name><name>prep</name><operator>.</operator><name>getStateDescription</name></name><argument_list>()</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CROSS_REFERENCES</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(
                    <argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>ref</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>refCols</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>getRefColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>tab</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>refTab</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>refTab</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>update</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getRefAction</name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>getUpdateAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ValueSmallint</name></type> <name>delete</name> <init>= <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getRefAction</name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>getDeleteAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cols</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// PKTABLE_CATALOG</comment>
                            <argument><expr><name>catalog</name></expr></argument>,
                            <comment type="line">// PKTABLE_SCHEMA</comment>
                            <argument><expr><call><name><name>refTab</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// PKTABLE_NAME</comment>
                            <argument><expr><call><name><name>refTab</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// PKCOLUMN_NAME</comment>
                            <argument><expr><name><name>refCols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// FKTABLE_CATALOG</comment>
                            <argument><expr><name>catalog</name></expr></argument>,
                            <comment type="line">// FKTABLE_SCHEMA</comment>
                            <argument><expr><call><name><name>tab</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// FKTABLE_NAME</comment>
                            <argument><expr><call><name><name>tab</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// FKCOLUMN_NAME</comment>
                            <argument><expr><name><name>cols</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// ORDINAL_POSITION</comment>
                            <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// UPDATE_RULE</comment>
                            <argument><expr><name>update</name></expr></argument>,
                            <comment type="line">// DELETE_RULE</comment>
                            <argument><expr><name>delete</name></expr></argument>,
                            <comment type="line">// FK_NAME</comment>
                            <argument><expr><call><name><name>ref</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// PK_NAME</comment>
                            <argument><expr><call><name><name>ref</name><operator>.</operator><name>getReferencedConstraint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// DEFERRABILITY</comment>
                            <argument><expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyNotDeferrable</name></name></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(
                    <argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>checkExpression</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>uniqueIndexName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>uniqueIndexName</name> <operator>=</operator> <call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>checkExpression</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintCheck</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getExpression</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name><name>HasSQL</name><operator>.</operator><name>DEFAULT_SQL_FLAGS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNIQUE</name></name> <operator>||</operator>
                        <name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintUnique</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>columnList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>indexColumns</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>indexColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>columnList</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_TYPE</comment>
                        <argument><expr><ternary><condition><expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr> ?</condition><then>
                                <expr><call><name><name>constraintType</name><operator>.</operator><name>getSqlName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>constraintType</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                        <comment type="line">// TABLE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableName</name></expr></argument>,
                        <comment type="line">// UNIQUE_INDEX_NAME</comment>
                        <argument><expr><name>uniqueIndexName</name></expr></argument>,
                        <comment type="line">// CHECK_EXPRESSION</comment>
                        <argument><expr><name>checkExpression</name></expr></argument>,
                        <comment type="line">// COLUMN_LIST</comment>
                        <argument><expr><name>columnList</name></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CONSTANTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(
                    <argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTANT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constant</name></type> <name>constant</name> <init>= <expr><operator>(</operator><name>Constant</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ValueExpression</name></type> <name>expr</name> <init>= <expr><call><name><name>constant</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTANT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTANT_SCHEMA</comment>
                        <argument><expr><call><name><name>constant</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTANT_NAME</comment>
                        <argument><expr><call><name><name>constant</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DATA_TYPE</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><call><name><name>expr</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>constant</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>expr</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>constant</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>DOMAINS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>DOMAIN</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><operator>(</operator><name>Domain</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Domain</name></type> <name>parentDomain</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getDataType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// DOMAIN_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// DOMAIN_SCHEMA</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DOMAIN_NAME</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DOMAIN_DEFAULT</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DOMAIN_ON_UPDATE</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getOnUpdateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DATA_TYPE</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>convertTypeToSQLType</name></name><argument_list>(<argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// PRECISION</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>convertLongToInt</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SCALE</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// TYPE_NAME</comment>
                        <argument><expr><call><name><name>typeInfo</name><operator>.</operator><name>getDeclaredTypeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// PARENT_DOMAIN_CATALOG</comment>
                        <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>catalog</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// PARENT_DOMAIN_SCHEMA</comment>
                        <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>parentDomain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// PARENT_DOMAIN_NAME</comment>
                        <argument><expr><ternary><condition><expr><name>parentDomain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>parentDomain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                        <comment type="line">// SELECTIVITY INT</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SELECTIVITY_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>domain</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>domain</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// COLUMN_DEFAULT</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getDefaultSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// IS_NULLABLE</comment>
                        <argument><expr><literal type="string">"YES"</literal></expr></argument>,
                        <comment type="line">// CHECK_CONSTRAINT</comment>
                        <argument><expr><literal type="null">null</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TRIGGERS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(
                    <argument><expr><name><name>DbObject</name><operator>.</operator><name>TRIGGER</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>TriggerObject</name></type> <name>trigger</name> <init>= <expr><operator>(</operator><name>TriggerObject</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>trigger</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// TRIGGER_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TRIGGER_SCHEMA</comment>
                        <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TRIGGER_NAME</comment>
                        <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TRIGGER_TYPE</comment>
                        <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getTypeNameList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// BEFORE</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>isBefore</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// JAVA_CLASS</comment>
                        <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getTriggerClassName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// QUEUE_SIZE</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>getQueueSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// NO_WAIT</comment>
                        <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>isNoWait</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>trigger</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>trigger</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SESSIONS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSessions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>admin</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getNetworkConnectionInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Command</name></type> <name>command</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getCurrentCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>blockingSessionId</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getBlockingSessionId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// ID</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// USER_NAME</comment>
                            <argument><expr><call><name><name>s</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// SERVER</comment>
                            <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getServer</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// CLIENT_ADDR</comment>
                            <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClient</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// CLIENT_INFO</comment>
                            <argument><expr><ternary><condition><expr><name>networkConnectionInfo</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>networkConnectionInfo</name><operator>.</operator><name>getClientInfo</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// SESSION_START</comment>
                            <argument><expr><call><name><name>s</name><operator>.</operator><name>getSessionStart</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// ISOLATION_LEVEL</comment>
                            <argument><expr><call><name><name>session</name><operator>.</operator><name>getIsolationLevel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// STATEMENT</comment>
                            <argument><expr><ternary><condition><expr><name>command</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>command</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// STATEMENT_START</comment>
                            <argument><expr><ternary><condition><expr><name>command</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>getCommandStartOrEnd</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// CONTAINS_UNCOMMITTED</comment>
                            <argument><expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>hasPendingTransaction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// STATE</comment>
                            <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// BLOCKER_ID</comment>
                            <argument><expr><ternary><condition><expr><name>blockingSessionId</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>blockingSessionId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                            <comment type="line">// SLEEP_SINCE</comment>
                            <argument><expr><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>State</name><operator>.</operator><name>SLEEP</name></name></expr> ?</condition><then> <expr><call><name><name>s</name><operator>.</operator><name>getCommandStartOrEnd</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>LOCKS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getSessions</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>admin</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>s</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                <argument><expr><name>rows</name></expr></argument>,
                                <comment type="line">// TABLE_SCHEMA</comment>
                                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// TABLE_NAME</comment>
                                <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <comment type="line">// SESSION_ID</comment>
                                <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <comment type="line">// LOCK_TYPE</comment>
                                <argument><expr><ternary><condition><expr><call><name><name>table</name><operator>.</operator><name>isLockedExclusivelyBy</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"WRITE"</literal></expr> </then><else>: <expr><literal type="string">"READ"</literal></expr></else></ternary></expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getVariableNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getVariable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"SET @"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// KEY</comment>
                        <argument><expr><literal type="string">"@"</literal> <operator>+</operator> <name>name</name></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// KEY</comment>
                        <argument><expr><literal type="string">"TABLE "</literal> <operator>+</operator> <call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>path</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getSchemaSearchPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>path</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET SCHEMA_SEARCH_PATH "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>path</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// KEY</comment>
                        <argument><expr><literal type="string">"SCHEMA_SEARCH_PATH"</literal></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>schema</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// KEY</comment>
                        <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET SCHEMA "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>currentTimeZone</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>currentTimeZone</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// KEY</comment>
                        <argument><expr><literal type="string">"TIME ZONE"</literal></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"SET TIME ZONE "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentTimeZone</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>QUERY_STATISTICS</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>QueryStatisticsData</name></type> <name>control</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getQueryStatisticsData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>control</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name><name>QueryStatisticsData</name><operator>.</operator><name>QueryEntry</name></name></type> <name>entry</name> <range>: <expr><call><name><name>control</name><operator>.</operator><name>getQueries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// SQL_STATEMENT</comment>
                            <argument><expr><name><name>entry</name><operator>.</operator><name>sqlStatement</name></name></expr></argument>,
                            <comment type="line">// EXECUTION_COUNT</comment>
                            <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// MIN_EXECUTION_TIME</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMinNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// MAX_EXECUTION_TIME</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMaxNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// CUMULATIVE_EXECUTION_TIME</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeCumulativeNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// AVERAGE_EXECUTION_TIME</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>executionTimeMeanNanos</name></name> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// STD_DEV_EXECUTION_TIME</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getExecutionTimeStandardDeviation</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1_000_000d</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// MIN_ROW_COUNT</comment>
                            <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMin</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// MAX_ROW_COUNT</comment>
                            <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMax</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// CUMULATIVE_ROW_COUNT</comment>
                            <argument><expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountCumulative</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// AVERAGE_ROW_COUNT</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>rowCountMean</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <comment type="line">// STD_DEV_ROW_COUNT</comment>
                            <argument><expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getRowCountStandardDeviation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SYNONYMS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TableSynonym</name></type> <name>synonym</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSynonyms</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// SYNONYM_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// SYNONYM_SCHEMA</comment>
                        <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SYNONYM_NAME</comment>
                        <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SYNONYM_FOR</comment>
                        <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSynonymForName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// SYNONYM_FOR_SCHEMA</comment>
                        <argument><expr><call><name><name>synonym</name><operator>.</operator><name>getSynonymForSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TYPE NAME</comment>
                        <argument><expr><literal type="string">"SYNONYM"</literal></expr></argument>,
                        <comment type="line">// STATUS</comment>
                        <argument><expr><literal type="string">"VALID"</literal></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>synonym</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>synonym</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TABLE_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_TYPE</comment>
                        <argument><expr><call><name><name>constraintType</name><operator>.</operator><name>getSqlName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// TABLE_SCHEMA</comment>
                        <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// TABLE_NAME</comment>
                        <argument><expr><name>tableName</name></expr></argument>,
                        <comment type="line">// IS_DEFERRABLE</comment>
                        <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                        <comment type="line">// INITIALLY_DEFERRED</comment>
                        <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>DOMAIN_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><call><name>getConstraintType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintDomain</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>ConstraintDomain</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Domain</name></type> <name>domain</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getDomain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DOMAIN_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// DOMAIN_SCHEMA</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DOMAIN_NAME</comment>
                        <argument><expr><call><name><name>domain</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// IS_DEFERRABLE</comment>
                        <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                        <comment type="line">// INITIALLY_DEFERRED</comment>
                        <argument><expr><literal type="string">"NO"</literal></expr></argument>,
                        <comment type="line">// REMARKS</comment>
                        <argument><expr><call><name>replaceNullWithEmpty</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <comment type="line">// SQL</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// ID</comment>
                        <argument><expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>KEY_COLUMN_USAGE</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Constraint</name><operator>.</operator><name>Type</name></name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNIQUE</name></name> <operator>||</operator> <name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintUnique</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>indexColumns</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getColumns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>indexColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintUnique</name></type> <name>referenced</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>referenced</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getReferencedConstraint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>referenced</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>IndexColumn</name></type> <name>indexColumn</name> <init>= <expr><name><name>indexColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueInteger</name></type> <name>ordinalPosition</name> <init>= <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueInteger</name></type> <name>positionInUniqueConstraint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>referenced</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Column</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>constraint</name><operator>)</operator><operator>.</operator><call><name>getRefColumns</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>column</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>refColumns</name> <init>= <expr><call><name><name>referenced</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>refColumns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>refColumns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>column</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>positionInUniqueConstraint</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                            <argument><expr><name>rows</name></expr></argument>,
                            <comment type="line">// CONSTRAINT_CATALOG</comment>
                            <argument><expr><name>catalog</name></expr></argument>,
                            <comment type="line">// CONSTRAINT_SCHEMA</comment>
                            <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// CONSTRAINT_NAME</comment>
                            <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// TABLE_CATALOG</comment>
                            <argument><expr><name>catalog</name></expr></argument>,
                            <comment type="line">// TABLE_SCHEMA</comment>
                            <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <comment type="line">// TABLE_NAME</comment>
                            <argument><expr><name>tableName</name></expr></argument>,
                            <comment type="line">// COLUMN_NAME</comment>
                            <argument><expr><name><name>indexColumn</name><operator>.</operator><name>columnName</name></name></expr></argument>,
                            <comment type="line">// ORDINAL_POSITION</comment>
                            <argument><expr><name>ordinalPosition</name></expr></argument>,
                            <comment type="line">// POSITION_IN_UNIQUE_CONSTRAINT</comment>
                            <argument><expr><name>positionInUniqueConstraint</name></expr></argument>,
                            <comment type="line">// INDEX_CATALOG</comment>
                            <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>catalog</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// INDEX_SCHEMA</comment>
                            <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                            <comment type="line">// INDEX_NAME</comment>
                            <argument><expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>REFERENTIAL_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><call><name>getConstraintType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ConstraintUnique</name></type> <name>unique</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedConstraint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// UNIQUE_CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// UNIQUE_CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>unique</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// UNIQUE_CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>unique</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// MATCH_OPTION</comment>
                        <argument><expr><literal type="string">"NONE"</literal></expr></argument>,
                        <comment type="line">// UPDATE_RULE</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getUpdateAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSqlName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// DELETE_RULE</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getDeleteAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSqlName</name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CHECK_CONSTRAINTS</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Type</name></type> <name>constraintType</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraintType</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ConstraintCheck</name></type> <name>check</name> <init>= <expr><operator>(</operator><name>ConstraintCheck</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>check</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>constraintType</name> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOMAIN</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                        <argument><expr><name>rows</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_CATALOG</comment>
                        <argument><expr><name>catalog</name></expr></argument>,
                        <comment type="line">// CONSTRAINT_SCHEMA</comment>
                        <argument><expr><call><name><name>obj</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CONSTRAINT_NAME</comment>
                        <argument><expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <comment type="line">// CHECK_CLAUSE</comment>
                        <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getExpression</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>WITHOUT_PARENTHESES</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CONSTRAINT_COLUMN_USAGE</name></expr>:</case> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>SchemaObject</name></type> <name>obj</name> <range>: <expr><call><name>getAllSchemaObjects</name><argument_list>(<argument><expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><operator>(</operator><name>Constraint</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>CHECK</name></expr>:</case>
                <case>case <expr><name>DOMAIN</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>getExpression</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEverything</name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getColumnsVisitor</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name><range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>REFERENTIAL</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedColumns</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                <comment type="line">//$FALL-THROUGH$</comment>
                <case>case <expr><name>PRIMARY_KEY</name></expr>:</case>
                <case>case <expr><name>UNIQUE</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>checkIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>indexFrom</name></expr></argument>, <argument><expr><name>indexTo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hideTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedColumns</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name>addConstraintColumnUsage</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                </block_content>}</block></switch>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>rows</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>short</name></type> <name>getRefAction</name><parameter_list>(<parameter><decl><type><name>ConstraintActionType</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>CASCADE</name></expr>:</case>
            <return>return <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyCascade</name></name></expr>;</return>
        <case>case <expr><name>RESTRICT</name></expr>:</case>
            <return>return <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeyRestrict</name></name></expr>;</return>
        <case>case <expr><name>SET_DEFAULT</name></expr>:</case>
            <return>return <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeySetDefault</name></name></expr>;</return>
        <case>case <expr><name>SET_NULL</name></expr>:</case>
            <return>return <expr><name><name>DatabaseMetaData</name><operator>.</operator><name>importedKeySetNull</name></name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"action="</literal><operator>+</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addConstraintColumnUsage</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>,
            <parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                <argument><expr><name>rows</name></expr></argument>,
                <comment type="line">// TABLE_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// TABLE_SCHEMA</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// TABLE_NAME</comment>
                <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// COLUMN_NAME</comment>
                <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_CATALOG</comment>
                <argument><expr><name>catalog</name></expr></argument>,
                <comment type="line">// CONSTRAINT_SCHEMA</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <comment type="line">// CONSTRAINT_NAME</comment>
                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivileges</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>grantee</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>SELECT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>INSERT</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>UPDATE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rightMask</name> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>DELETE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addPrivilege</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>grantee</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addPrivilege</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>grantee</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>catalog</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>isGrantable</name> <init>= <expr><literal type="string">"NO"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>grantee</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>DbObject</name><operator>.</operator><name>USER</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>User</name></type> <name>user</name> <init>= <expr><operator>(</operator><name>User</name><operator>)</operator> <name>grantee</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>user</name><operator>.</operator><name>isAdmin</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// the right is grantable if the grantee is an admin</comment>
                <expr_stmt><expr><name>isGrantable</name> <operator>=</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// GRANTOR</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>,
                    <comment type="line">// GRANTEE</comment>
                    <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// PRIVILEGE_TYPE</comment>
                    <argument><expr><name>right</name></expr></argument>,
                    <comment type="line">// IS_GRANTABLE</comment>
                    <argument><expr><name>isGrantable</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                    <argument><expr><name>rows</name></expr></argument>,
                    <comment type="line">// GRANTOR</comment>
                    <argument><expr><literal type="null">null</literal></expr></argument>,
                    <comment type="line">// GRANTEE</comment>
                    <argument><expr><call><name>identifier</name><argument_list>(<argument><expr><call><name><name>grantee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_CATALOG</comment>
                    <argument><expr><name>catalog</name></expr></argument>,
                    <comment type="line">// TABLE_SCHEMA</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// TABLE_NAME</comment>
                    <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// COLUMN_NAME</comment>
                    <argument><expr><name>column</name></expr></argument>,
                    <comment type="line">// PRIVILEGE_TYPE</comment>
                    <argument><expr><name>right</name></expr></argument>,
                    <comment type="line">// IS_GRANTABLE</comment>
                    <argument><expr><name>isGrantable</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SchemaObject</name></argument>&gt;</argument_list></name></type> <name>getAllSchemaObjects</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SchemaObject</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>schema</name><operator>.</operator><name>getAll</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all tables of this database, including local temporary tables for the
     * session.
     *
     * @param session the session
     * @return the array of tables
     */</comment>
    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getAllTables</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getLocalTempTables</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tables</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getTablesByName</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// we expect that at most one table matches, at least in most cases</comment>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getTableOrViewByName</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>findLocalTempTable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>tables</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getMaxDataModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SETTINGS</name></expr>:</case>
        <case>case <expr><name>SEQUENCES</name></expr>:</case>
        <case>case <expr><name>IN_DOUBT</name></expr>:</case>
        <case>case <expr><name>SESSIONS</name></expr>:</case>
        <case>case <expr><name>LOCKS</name></expr>:</case>
        <case>case <expr><name>SESSION_STATE</name></expr>:</case>
            <return>return <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getModificationDataId</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
