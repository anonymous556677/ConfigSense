<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/ValueVarchar.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SysProperties</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Implementation of the CHARACTER VARYING data type.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueVarchar</name> <super_list><extends>extends <super><name>ValueStringBase</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Empty string. Should not be used in places where empty string can be
     * treated as {@code NULL} depending on database mode.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueVarchar</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>ValueVarchar</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ValueVarchar</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getValueType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>VARCHAR</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get or create a VARCHAR value for the given string.
     *
     * @param s the string
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get or create a VARCHAR value for the given string.
     *
     * @param s the string
     * @param provider the cast information provider, or {@code null}
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>provider</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>treatEmptyStringsAsNull</name></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><name>EMPTY</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ValueVarchar</name></type> <name>obj</name> <init>= <expr><operator>new</operator> <call><name>ValueVarchar</name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>cache</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>SysProperties</name><operator>.</operator><name>OBJECT_CACHE_MAX_PER_ELEMENT_SIZE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>obj</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Value</name><operator>.</operator><name>cache</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// this saves memory, but is really slow</comment>
        <comment type="line">// return new ValueString(s.intern());</comment>
    </block_content>}</block></function>

}</block></class>
</unit>
