<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/TableFilter.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>AllColumnsForPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>Select</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>Comparison</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>ConditionAndOr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexCondition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexCursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueSmallint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTinyint</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A table filter represents a table that is used in a query. There is one such
 * object whenever a table (or view) is used in a query. For example the
 * following query has 2 table filters: SELECT * FROM TEST T1, TEST T2.
 */</comment>
<class><specifier>public</specifier> class <name>TableFilter</name> <super_list><implements>implements <super><name>ColumnResolver</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BEFORE_FIRST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>FOUND</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>AFTER_LAST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>NULL_ROW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Comparator that uses order in FROM clause as a sort key.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>TableFilter</name></argument>&gt;</argument_list></name></type> <name>ORDER_IN_FROM_COMPARATOR</name> <init>=
            <expr><call><name><name>Comparator</name><operator>.</operator><name>comparing</name></name><argument_list>(<argument><expr><name>TableFilter</name><operator>::</operator><name>getOrderInFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A visitor that sets joinOuterIndirect to true.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableFilterVisitor</name></type> <name>JOI_VISITOR</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>f</name><operator>.</operator><name>joinOuterIndirect</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether this is a direct or indirect (nested) outer join
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>joinOuterIndirect</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SessionLocal</name></type> <name>session</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Select</name></type> <name>select</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>alias</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Index</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexHints</name></type> <name>indexHints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>masks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>scanCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>evaluatable</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Indicates that this filter is used in the plan.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>used</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The filter used to walk through the index.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The index conditions used for direct index lookup (start or end).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IndexCondition</name></argument>&gt;</argument_list></name></type> <name>indexConditions</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Additional conditions that can't be used for index lookup, but for row
     * filter for this table (ID=ID, NAME LIKE '%X%')
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>filterCondition</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The complete join condition.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>joinCondition</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SearchRow</name></type> <name>currentSearchRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Row</name></type> <name>current</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>state</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The joined table (if there is one).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TableFilter</name></type> <name>join</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether this is an outer join.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>joinOuter</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The nested joined table (if there is one).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TableFilter</name></type> <name>nestedJoin</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Map of common join columns, used for NATURAL joins and USING clause of
     * other joins. This map preserves original order of the columns.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>commonJoinColumns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TableFilter</name></type> <name>commonJoinColumnsFilter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>commonJoinColumnsToExclude</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>foundOne</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>fullCondition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>orderInFrom</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Map of derived column names. This map preserves original order of the
     * columns.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new table filter object.
     *
     * @param session the session
     * @param table the table from where to read data
     * @param alias the alias name
     * @param rightsChecked true if rights are already checked
     * @param select the select statement
     * @param orderInFrom original order number (index) of this table filter in
     * @param indexHints the index hints to be used by the query planner
     */</comment>
    <constructor><specifier>public</specifier> <name>TableFilter</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>rightsChecked</name></decl></parameter>, <parameter><decl><type><name>Select</name></type> <name>select</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orderInFrom</name></decl></parameter>, <parameter><decl><type><name>IndexHints</name></type> <name>indexHints</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alias</name></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <operator>new</operator> <call><name>IndexCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rightsChecked</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>checkTableRight</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>Right</name><operator>.</operator><name>SELECT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>hashCode</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>nextObjectId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>orderInFrom</name></name> <operator>=</operator> <name>orderInFrom</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexHints</name></name> <operator>=</operator> <name>indexHints</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Get the order number (index) of this table filter in the "from" clause of
     * the query.
     *
     * @return the index (0, 1, 2,...)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getOrderInFrom</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>orderInFrom</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IndexCursor</name></type> <name>getIndexCursor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cursor</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Select</name></type> <name>getSelect</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>select</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lock the table. This will also lock joined tables.
     *
     * @param s the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the best plan item (index, cost) to use for the current join
     * order.
     *
     * @param s the session
     * @param filters all joined table filters
     * @param filter the current table filter index
     * @param allColumnsSet the set of all columns
     * @return the best plan item
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanItem</name></type> <name>getBestPlanItem</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>,
            <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PlanItem</name></type> <name>item1</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SortOrder</name></type> <name>sortOrder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>select</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <call><name><name>select</name><operator>.</operator><name>getSortOrder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>indexConditions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>item1</name> <operator>=</operator> <operator>new</operator> <call><name>PlanItem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>item1</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getScanIndex</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,
                    <argument><expr><name>sortOrder</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>item1</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <call><name><name>item1</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,
                    <argument><expr><name>sortOrder</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>IndexCondition</name></type> <name>condition</name> <range>: <expr><name>indexConditions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>condition</name><operator>.</operator><name>isEvaluatable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>condition</name><operator>.</operator><name>isAlwaysFalse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>masks</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>condition</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>masks</name><index>[<expr><name>id</name></expr>]</index></name> <operator>|=</operator> <call><name><name>condition</name><operator>.</operator><name>getMask</name></name><argument_list>(<argument><expr><name>indexConditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>PlanItem</name></type> <name>item</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getBestPlanItem</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>masks</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setMasks</name></name><argument_list>(<argument><expr><name>masks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// The more index conditions, the earlier the table.</comment>
        <comment type="line">// This is to ensure joins without indexes run quickly:</comment>
        <comment type="line">// x (x.a=10); y (x.b=y.b) - see issue 113</comment>
        <expr_stmt><expr><name><name>item</name><operator>.</operator><name>cost</name></name> <operator>-=</operator> <name><name>item</name><operator>.</operator><name>cost</name></name> <operator>*</operator> <call><name><name>indexConditions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">100</literal> <operator>/</operator> <operator>(</operator><name>filter</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>item1</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>item1</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>item</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>item</name> <operator>=</operator> <name>item1</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setEvaluatable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setNestedJoinPlan</name></name><argument_list>(<argument><expr><call><name><name>nestedJoin</name><operator>.</operator><name>getBestPlanItem</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO optimizer: calculate cost of a join: should use separate</comment>
            <comment type="line">// expected row number and lookup cost</comment>
            <expr_stmt><expr><name><name>item</name><operator>.</operator><name>cost</name></name> <operator>+=</operator> <name><name>item</name><operator>.</operator><name>cost</name></name> <operator>*</operator> <call><name><name>item</name><operator>.</operator><name>getNestedJoinPlan</name></name><argument_list>()</argument_list></call><operator>.</operator><name>cost</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setEvaluatable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>filter</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>!=</operator> <name>join</name></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setJoinPlan</name></name><argument_list>(<argument><expr><call><name><name>join</name><operator>.</operator><name>getBestPlanItem</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO optimizer: calculate cost of a join: should use separate</comment>
            <comment type="line">// expected row number and lookup cost</comment>
            <expr_stmt><expr><name><name>item</name><operator>.</operator><name>cost</name></name> <operator>+=</operator> <name><name>item</name><operator>.</operator><name>cost</name></name> <operator>*</operator> <call><name><name>item</name><operator>.</operator><name>getJoinPlan</name></name><argument_list>()</argument_list></call><operator>.</operator><name>cost</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>item</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set what plan item (index, cost, masks) to use.
     *
     * @param item the plan item
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlanItem</name><parameter_list>(<parameter><decl><type><name>PlanItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// invalid plan, most likely because a column wasn't found</comment>
            <comment type="line">// this will result in an exception later on</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setIndex</name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>masks</name> <operator>=</operator> <call><name><name>item</name><operator>.</operator><name>getMasks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getNestedJoinPlan</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>setPlanItem</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getNestedJoinPlan</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>setScanIndexes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getJoinPlan</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>setPlanItem</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getJoinPlan</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>setScanIndexes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set all missing indexes to scan indexes recursively.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setScanIndexes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setIndex</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getScanIndex</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>setScanIndexes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>setScanIndexes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepare reading rows. This method will remove all index conditions that
     * can not be used, and optimize the conditions.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// forget all unused index conditions</comment>
        <comment type="line">// the indexConditions list may be modified here</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>indexConditions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>IndexCondition</name></type> <name>condition</name> <init>= <expr><call><name><name>indexConditions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>condition</name><operator>.</operator><name>isAlwaysFalse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><call><name><name>condition</name><operator>.</operator><name>getColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>col</name><operator>.</operator><name>getColumnId</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>indexConditions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"self join"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>join</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"self join"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>filterCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>filterCondition</name> <operator>=</operator> <call><name><name>filterCondition</name><operator>.</operator><name>optimizeCondition</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>joinCondition</name> <operator>=</operator> <call><name><name>joinCondition</name><operator>.</operator><name>optimizeCondition</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start the query. This will reset the scan counts.
     *
     * @param s the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startQuery</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>scanCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>startQuery</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>startQuery</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reset to the current position.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>BEFORE_FIRST</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>foundOne</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if there are more rows to read.
     *
     * @return true if there are
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>AFTER_LAST</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEFORE_FIRST</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>indexConditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>isAlwaysFalse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// state == FOUND || NULL_ROW</comment>
            <comment type="line">// the last row was ok - try next row of the join</comment>
            <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>join</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// go to the next row</comment>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL_ROW</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>isAlwaysFalse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>state</name> <operator>=</operator> <name>AFTER_LAST</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>BEFORE_FIRST</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>scanCount</name> <operator>&amp;</operator> <literal type="number">4095</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>checkTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currentSearchRow</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getSearchRow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>FOUND</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>AFTER_LAST</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>FOUND</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nestedJoin</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>AFTER_LAST</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>joinOuter</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>foundOne</name></expr>)</condition> <block>{<block_content>
                        <comment type="line">// possibly null row</comment>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// if no more rows found, try the null row (for outer joins only)</comment>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>AFTER_LAST</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>joinOuter</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>foundOne</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>setNullRow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isOk</name><argument_list>(<argument><expr><name>filterCondition</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>joinConditionOk</name> <init>= <expr><call><name>isOk</name><argument_list>(<argument><expr><name>joinCondition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>FOUND</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>joinConditionOk</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>foundOne</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>join</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// check if it's ok</comment>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL_ROW</name> <operator>||</operator> <name>joinConditionOk</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>AFTER_LAST</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNullRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>state</name> <operator>==</operator> <name>NULL_ROW</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the state of this and all nested tables to the NULL row.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setNullRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>NULL_ROW</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>table</name><operator>.</operator><name>getNullRow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentSearchRow</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>TableFilter</name><operator>::</operator><name>setNullRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkTimeout</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>checkCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the current value of the condition is true, or there is no
     * condition.
     *
     * @param condition the condition (null for no condition)
     * @return true if yes
     */</comment>
    <function><type><name>boolean</name></type> <name>isOk</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>condition</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>condition</name><operator>.</operator><name>getBooleanValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the current row.
     *
     * @return the current row, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>currentSearchRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>current</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the current row.
     *
     * @param current the current row
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentSearchRow</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the table alias name. If no alias is specified, the table name is
     * returned.
     *
     * @return the alias name
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getTableAlias</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>alias</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add an index condition.
     *
     * @param condition the index condition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIndexCondition</name><parameter_list>(<parameter><decl><type><name>IndexCondition</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>indexConditions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a filter condition.
     *
     * @param condition the condition
     * @param isJoin if this is in fact a join condition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilterCondition</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isJoin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isJoin</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>joinCondition</name> <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>joinCondition</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>,
                        <argument><expr><name>joinCondition</name></expr></argument>, <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filterCondition</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>filterCondition</name> <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>filterCondition</name> <operator>=</operator> <operator>new</operator> <call><name>ConditionAndOr</name><argument_list>(<argument><expr><name><name>ConditionAndOr</name><operator>.</operator><name>AND</name></name></expr></argument>,
                        <argument><expr><name>filterCondition</name></expr></argument>, <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a joined table.
     *
     * @param filter the joined table filter
     * @param outer if this is an outer join
     * @param on the join condition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addJoin</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>outer</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>on</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>MAP_INITIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TableFilterVisitor</name></type> <name>visitor</name> <init>= <expr><operator>new</operator> <call><name>MapColumnsVisitor</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>visit</name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>join</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>filter</name><operator>.</operator><name>joinOuter</name></name> <operator>=</operator> <name>outer</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>outer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>JOI_VISITOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>on</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>mapAndAddFilter</name></name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>addJoin</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set a nested joined table.
     *
     * @param filter the joined table filter
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNestedJoin</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>nestedJoin</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Map the columns and add the join condition.
     *
     * @param on the condition
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapAndAddFilter</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>MAP_INITIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFilterCondition</name><argument_list>(<argument><expr><name>on</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>nestedJoin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>MAP_INITIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>mapAndAddFilter</name></name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create the index conditions for this filter if needed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>joinCondition</name> <operator>=</operator> <call><name><name>joinCondition</name><operator>.</operator><name>optimizeCondition</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>joinCondition</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>joinCondition</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>nestedJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>createIndexConditions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableFilter</name></type> <name>getJoin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>join</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether this is an outer joined table.
     *
     * @return true if it is
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isJoinOuter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>joinOuter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether this is indirectly an outer joined table (nested within an inner
     * join).
     *
     * @return true if it is
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isJoinOuterIndirect</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>joinOuterIndirect</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the query execution plan text to use for this table filter and append
     * it to the specified builder.
     *
     * @param builder string builder to append to
     * @param isJoin if this is a joined table
     * @param sqlFlags formatting flags
     * @return the specified builder
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getPlanSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isJoin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isJoin</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>joinOuter</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"LEFT OUTER JOIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"INNER JOIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buffNested</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>n</name> <init>= <expr><name>nestedJoin</name></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>(<argument><expr><name>buffNested</name></expr></argument>, <argument><expr><name>n</name> <operator>!=</operator> <name>nestedJoin</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getJoin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
            <decl_stmt><decl><type><name>String</name></type> <name>nested</name> <init>= <expr><call><name><name>buffNested</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>enclose</name> <init>= <expr><operator>!</operator><call><name><name>nested</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>enclose</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>nested</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>enclose</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>isJoin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// need to have a ON expression,</comment>
                    <comment type="line">// otherwise the nesting is unclear</comment>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"1=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>joinCondition</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>builder</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>instanceof</operator> <name>TableView</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>TableView</name><operator>)</operator> <name>table</name><operator>)</operator><operator>.</operator><call><name>isRecursive</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>instanceof</operator> <name>TableView</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>TableView</name><operator>)</operator> <name>table</name><operator>)</operator><operator>.</operator><call><name>isInvalid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>VIEW_IS_INVALID_2</name></name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"not compiled"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>derivedColumnMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>derivedColumnMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexHints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" USE INDEX ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>index</name> <range>: <expr><call><name><name>indexHints</name><operator>.</operator><name>getAllowedIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sqlFlags</name> <operator>&amp;</operator> <name><name>HasSQL</name><operator>.</operator><name>ADD_PLAN_INFORMATION</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>planBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"/* "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>indexConditions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>planBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>indexConditions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>planBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>planBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>indexConditions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(
                            <argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name> <operator>|</operator> <name><name>HasSQL</name><operator>.</operator><name>ADD_PLAN_INFORMATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>planBuilder</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>planBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name><name>planBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" */"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>isJoin</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// need to have a ON expression, otherwise the nesting is</comment>
                <comment type="line">// unclear</comment>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"1=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>joinCondition</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sqlFlags</name> <operator>&amp;</operator> <name><name>HasSQL</name><operator>.</operator><name>ADD_PLAN_INFORMATION</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>filterCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>condition</name> <init>= <expr><call><name><name>filterCondition</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name> <operator>|</operator> <name><name>HasSQL</name><operator>.</operator><name>ADD_PLAN_INFORMATION</name></name></expr></argument>,
                        <argument><expr><name><name>Expression</name><operator>.</operator><name>WITHOUT_PARENTHESES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>condition</name> <operator>=</operator> <literal type="string">"/* WHERE "</literal> <operator>+</operator> <name>condition</name> <operator>+</operator> <literal type="string">"\n*/"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>indent</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>condition</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>scanCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n    /* scanCount: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>scanCount</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" */"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all index conditions that are not used by the current index.
     */</comment>
    <function><type><name>void</name></type> <name>removeUnusableIndexConditions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// the indexConditions list may be modified here</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>indexConditions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>IndexCondition</name></type> <name>cond</name> <init>= <expr><call><name><name>indexConditions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cond</name><operator>.</operator><name>getMask</name></name><argument_list>(<argument><expr><name>indexConditions</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name><name>cond</name><operator>.</operator><name>isEvaluatable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>indexConditions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getMasks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>masks</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IndexCondition</name></argument>&gt;</argument_list></name></type> <name>getIndexConditions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexConditions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndex</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>used</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>used</name></name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>used</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the joined table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeJoin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>join</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getJoinCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>joinCondition</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the join condition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeJoinCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>joinCondition</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getFilterCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>filterCondition</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the filter condition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeFilterCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filterCondition</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFullCondition</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fullCondition</name></name> <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>setFullCondition</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Optimize the full condition. This will add the full condition to the
     * filter condition.
     */</comment>
    <function><type><name>void</name></type> <name>optimizeFullCondition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>joinOuter</name> <operator>&amp;&amp;</operator> <name>fullCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>fullCondition</name><operator>.</operator><name>addFilterConditions</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>optimizeFullCondition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>optimizeFullCondition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update the filter and join conditions of this and all joined tables with
     * the information that the given table filter and all nested filter can now
     * return rows or not.
     *
     * @param filter the table filter
     * @param b the new flag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>filterCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>filterCondition</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>joinCondition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>joinCondition</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nestedJoin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// don't enable / disable the nested join filters</comment>
            <comment type="line">// if enabling a filter in a joined filter</comment>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>filter</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>nestedJoin</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>nestedJoin</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>join</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>join</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>evaluatable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>evaluatable</name></name> <operator>=</operator> <name>evaluatable</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSchemaName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>alias</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>table</name> <operator>instanceof</operator> <name>VirtualTable</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Column</name><index>[]</index></name></type> <name>getColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Column</name></type> <name>findColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><name>derivedColumnMap</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>map</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>derivedColumnMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>findColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getColumnName</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><name>derivedColumnMap</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>map</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasDerivedColumnList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>derivedColumnMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the column with the given name.
     *
     * @param columnName
     *            the column name
     * @param ifExists
     *            if (@code true) return {@code null} if column does not exist
     * @return the column
     * @throws DbException
     *             if the column was not found and {@code ifExists} is
     *             {@code false}
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><name>derivedColumnMap</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>map</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Database</name></type> <name>database</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>ifExists</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>ifExists</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the system columns that this table understands. This is used for
     * compatibility with other databases. The columns are only returned if the
     * current mode supports system columns.
     *
     * @return the system columns
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Column</name><index>[]</index></name></type> <name>getSystemColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMode</name><argument_list>()</argument_list></call><operator>.</operator><name>systemColumns</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>sys</name> <init>= <expr><block>{ <comment type="line">//</comment>
                <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"oid"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">//</comment>
                <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><literal type="string">"ctid"</literal></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> <comment type="line">//</comment>
        }</block></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>sys</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Column</name></type> <name>getRowIdColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getRowIdColumn</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>currentSearchRow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnId</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getColumnId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>currentSearchRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>currentSearchRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>columnId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>v</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnId</name> <operator>==</operator> <call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMainIndexColumn</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>getDelegatedValue</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>columnId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Value</name></type> <name>getDelegatedValue</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>key</name> <init>= <expr><call><name><name>currentSearchRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>column</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueTinyint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableFilter</name></type> <name>getTableFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlias</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>alias</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alias</name></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set derived column list.
     *
     * @param derivedColumnNames names of derived columns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDerivedColumns</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>derivedColumnNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name>getColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <call><name><name>derivedColumnNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_COUNT_DOES_NOT_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name><name>derivedColumnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>alias</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>derivedColumnNames</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>derivedColumnMap</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>alias</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>alias</name></expr> </then><else>: <expr><call><name><name>table</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a column to the common join column list for a left table filter.
     *
     * @param leftColumn
     *            the column on the left side
     * @param replacementColumn
     *            the column to use instead, may be the same as column on the
     *            left side
     * @param replacementFilter
     *            the table filter for replacement columns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCommonJoinColumns</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>leftColumn</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>replacementColumn</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>replacementFilter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>commonJoinColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>commonJoinColumns</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>commonJoinColumnsFilter</name> <operator>=</operator> <name>replacementFilter</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <assert>assert <expr><name>commonJoinColumnsFilter</name> <operator>==</operator> <name>replacementFilter</name></expr>;</assert>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>commonJoinColumns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>leftColumn</name></expr></argument>, <argument><expr><name>replacementColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add an excluded column to the common join column list.
     *
     * @param columnToExclude
     *            the column to exclude
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCommonJoinColumnToExclude</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>columnToExclude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>commonJoinColumnsToExclude</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>commonJoinColumnsToExclude</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>commonJoinColumnsToExclude</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>columnToExclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns common join columns map.
     *
     * @return common join columns map, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>getCommonJoinColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>commonJoinColumns</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns common join columns table filter.
     *
     * @return common join columns table filter, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>TableFilter</name></type> <name>getCommonJoinColumnsFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>commonJoinColumnsFilter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given column is an excluded common join column.
     *
     * @param c
     *            the column to check
     * @return true if this is an excluded common join column
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCommonJoinColumnToExclude</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>commonJoinColumnsToExclude</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>commonJoinColumnsToExclude</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>hashCode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Are there any index conditions that involve IN(...).
     *
     * @return whether there are IN(...) comparisons
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasInComparisons</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IndexCondition</name></type> <name>cond</name> <range>: <expr><name>indexConditions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>compareType</name> <init>= <expr><call><name><name>cond</name><operator>.</operator><name>getCompareType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>==</operator> <name><name>Comparison</name><operator>.</operator><name>IN_QUERY</name></name> <operator>||</operator> <name>compareType</name> <operator>==</operator> <name><name>Comparison</name><operator>.</operator><name>IN_LIST</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableFilter</name></type> <name>getNestedJoin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>nestedJoin</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Visit this and all joined or nested table filters.
     *
     * @param visitor the visitor
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><name>TableFilterVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>f</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>n</name> <init>= <expr><name><name>f</name><operator>.</operator><name>nestedJoin</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>f</name><operator>.</operator><name>join</name></name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEvaluatable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>evaluatable</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SessionLocal</name></type> <name>getSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>session</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IndexHints</name></type> <name>getIndexHints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexHints</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this is a table filter with implicit DUAL table for a
     * SELECT without a FROM clause.
     *
     * @return whether this is a table filter with implicit DUAL table
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNoFromClauseFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name> <operator>instanceof</operator> <name>DualTable</name> <operator>&amp;&amp;</operator> <name>join</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>nestedJoin</name> <operator>==</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <name>joinCondition</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>filterCondition</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A visitor for table filters.
     */</comment>
    <interface><specifier>public</specifier> interface <name>TableFilterVisitor</name> <block>{

        <comment type="block" format="javadoc">/**
         * This method is called for each nested or joined table filter.
         *
         * @param f the filter
         */</comment>
        <function_decl><type><name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * A visitor that maps columns.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>MapColumnsVisitor</name> <super_list><implements>implements <super><name>TableFilterVisitor</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Expression</name></type> <name>on</name></decl>;</decl_stmt>

        <constructor><name>MapColumnsVisitor</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>on</name></name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>MAP_INITIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
