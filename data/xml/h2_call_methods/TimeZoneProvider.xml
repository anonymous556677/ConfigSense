<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/util/TimeZoneProvider.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>ZoneId</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>ZoneOffset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>ZonedDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>format</name><operator>.</operator><name>DateTimeFormatter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>zone</name><operator>.</operator><name>ZoneRules</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Provides access to time zone API.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TimeZoneProvider</name> <block>{

    <comment type="block" format="javadoc">/**
     * The UTC time zone provider.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TimeZoneProvider</name></type> <name>UTC</name> <init>= <expr><operator>new</operator> <call><name>Simple</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A small cache for timezone providers.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>TimeZoneProvider</name><index>[]</index></name></type> <name>CACHE</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of cache elements (needs to be a power of 2).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CACHE_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns the time zone provider with the specified offset.
     *
     * @param offset
     *            UTC offset in seconds
     * @return the time zone provider with the specified offset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeZoneProvider</name></type> <name>ofOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>UTC</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <operator>(</operator><operator>-</operator><literal type="number">18</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>||</operator> <name>offset</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">18</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Time zone offset "</literal> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="string">" seconds is out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>Simple</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the time zone provider with the specified name.
     *
     * @param id
     *            the ID of the time zone
     * @return the time zone provider with the specified name
     * @throws RuntimeException
     *             if time zone with specified ID isn't known
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeZoneProvider</name></type> <name>ofId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RuntimeException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>id</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>UTC</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>id</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>UTC</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>negative</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><operator>++</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><operator>++</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>hour</name> <operator>=</operator> <name>hour</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>hour</name> <operator>*</operator> <literal type="number">3_600</literal></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name>ofOffset</name><argument_list>(<argument><expr><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><operator>-</operator><name>offset</name></expr> </then><else>: <expr><name>offset</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>minute</name> <operator>=</operator> <name>minute</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>hour</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>minute</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
                                <return>return <expr><call><name>ofOffset</name><argument_list>(<argument><expr><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><operator>-</operator><name>offset</name></expr> </then><else>: <expr><name>offset</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                                        <decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
                                        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>index</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                                            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>id</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                                                <expr_stmt><expr><name>second</name> <operator>=</operator> <name>second</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                                                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                                            </block_content>}</block></if></if_stmt>
                                        </block_content>}</block></if></if_stmt>
                                        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
                                            <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>hour</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>minute</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>second</name></expr></init></decl>;</decl_stmt>
                                            <return>return <expr><call><name>ofOffset</name><argument_list>(<argument><expr><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><operator>-</operator><name>offset</name></expr> </then><else>: <expr><name>offset</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name><name>id</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>CACHE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>TimeZoneProvider</name><index>[]</index></name></type> <name>cache</name> <init>= <expr><name>CACHE</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>provider</name> <init>= <expr><name><name>cache</name><index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>provider</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>provider</name> <init>= <expr><operator>new</operator> <call><name>WithTimeZone</name><argument_list>(<argument><expr><call><name><name>ZoneId</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>ZoneId</name><operator>.</operator><name>SHORT_IDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>CACHE</name> <operator>=</operator> <name>cache</name> <operator>=</operator> <operator>new</operator> <name><name>TimeZoneProvider</name><index>[<expr><name>CACHE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>cache</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>provider</name></expr>;</expr_stmt>
        <return>return <expr><name>provider</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the time zone provider for the system default time zone.
     *
     * @return the time zone provider for the system default time zone
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeZoneProvider</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ZoneId</name></type> <name>zoneId</name> <init>= <expr><call><name><name>ZoneId</name><operator>.</operator><name>systemDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZoneOffset</name></type> <name>offset</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>zoneId</name> <operator>instanceof</operator> <name>ZoneOffset</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>ZoneOffset</name><operator>)</operator> <name>zoneId</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>ZoneRules</name></type> <name>rules</name> <init>= <expr><call><name><name>zoneId</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rules</name><operator>.</operator><name>isFixedOffset</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>WithTimeZone</name><argument_list>(<argument><expr><name>zoneId</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>rules</name><operator>.</operator><name>getOffset</name></name><argument_list>(<argument><expr><name><name>Instant</name><operator>.</operator><name>EPOCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>ofOffset</name><argument_list>(<argument><expr><call><name><name>offset</name><operator>.</operator><name>getTotalSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates the time zone offset in seconds for the specified EPOCH
     * seconds.
     *
     * @param epochSeconds
     *            seconds since EPOCH
     * @return time zone offset in minutes
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getTimeZoneOffsetUTC</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Calculates the time zone offset in seconds for the specified date value
     * and nanoseconds since midnight in local time.
     *
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @return time zone offset in minutes
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getTimeZoneOffsetLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Calculates the epoch seconds from local date and time.
     *
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @return the epoch seconds value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getEpochSecondsFromLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the ID of the time zone.
     *
     * @return the ID of the time zone
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the standard time name or daylight saving time name of the time zone.
     *
     * @param epochSeconds
     *            seconds since EPOCH
     * @return the standard time name or daylight saving time name of the time
     *         zone
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getShortId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns whether this is a simple time zone provider with a fixed offset
     * from UTC.
     *
     * @return whether this is a simple time zone provider with a fixed offset
     *         from UTC
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFixedOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Time zone provider with offset.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Simple</name> <super_list><extends>extends <super><name>TimeZoneProvider</name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>

        <constructor><name>Simple</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>offset</name> <operator>+</operator> <literal type="number">129607</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Simple</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>offset</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>Simple</name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>offset</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getTimeZoneOffsetUTC</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>offset</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getTimeZoneOffsetLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>offset</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getEpochSecondsFromLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getEpochSeconds</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>timeZoneNameFromOffsetSeconds</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>id</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getShortId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>getId</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>hasFixedOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="string">"TimeZoneProvider "</literal> <operator>+</operator> <call><name>getId</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * Time zone provider with time zone.
     */</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>WithTimeZone</name> <super_list><extends>extends <super><name>TimeZoneProvider</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Number of seconds in 400 years.
         */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>SECONDS_PER_PERIOD</name> <init>= <expr><literal type="number">146_097L</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Number of seconds per year.
         */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>SECONDS_PER_YEAR</name> <init>= <expr><name>SECONDS_PER_PERIOD</name> <operator>/</operator> <literal type="number">400</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>DateTimeFormatter</name></type> <name>TIME_ZONE_FORMATTER</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ZoneId</name></type> <name>zoneId</name></decl>;</decl_stmt>

        <constructor><name>WithTimeZone</name><parameter_list>(<parameter><decl><type><name>ZoneId</name></type> <name>timeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zoneId</name></name> <operator>=</operator> <name>timeZone</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>zoneId</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">951689</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>WithTimeZone</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>zoneId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>WithTimeZone</name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>zoneId</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getTimeZoneOffsetUTC</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="block">/*
             * Construct an Instant with EPOCH seconds within the range
             * -31,557,014,135,532,000..31,556,889,832,715,999
             * (-999999999-01-01T00:00-18:00..
             * +999999999-12-31T23:59:59.999999999+18:00). Too large and too
             * small EPOCH seconds are replaced with EPOCH seconds within the
             * range using the 400 years period of the Gregorian calendar.
             *
             * H2 has slightly wider range of EPOCH seconds than Instant, and
             * ZoneRules.getOffset(Instant) does not support all Instant values
             * in all time zones.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>epochSeconds</name> <operator>&gt;</operator> <literal type="number">31_556_889_832_715_999L</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>epochSeconds</name> <operator>-=</operator> <name>SECONDS_PER_PERIOD</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>epochSeconds</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">31_557_014_135_532_000L</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>epochSeconds</name> <operator>+=</operator> <name>SECONDS_PER_PERIOD</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>zoneId</name><operator>.</operator><name>getRules</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>(<argument><expr><call><name><name>Instant</name><operator>.</operator><name>ofEpochSecond</name></name><argument_list>(<argument><expr><name>epochSeconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTotalSeconds</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getTimeZoneOffsetLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>timeNanos</name> <operator>/</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><name>second</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>second</name> <operator>-=</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><name>minute</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>minute</name> <operator>-=</operator> <name>hour</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <return>return <expr><call><name><name>ZonedDateTime</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>LocalDateTime</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>yearForCalendar</name><argument_list>(<argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>yearFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>monthFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>dayFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hour</name></expr></argument>,
                    <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zoneId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTotalSeconds</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>long</name></type> <name>getEpochSecondsFromLocal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>timeNanos</name> <operator>/</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><name>second</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>second</name> <operator>-=</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><name>minute</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>minute</name> <operator>-=</operator> <name>hour</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>yearFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>yearForCalendar</name> <init>= <expr><call><name>yearForCalendar</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>epoch</name> <init>= <expr><call><name><name>ZonedDateTime</name>
                    <operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>LocalDateTime</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>yearForCalendar</name></expr></argument>, <argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>monthFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>dayFromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zoneId</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>toOffsetDateTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toEpochSecond</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>epoch</name> <operator>+</operator> <operator>(</operator><name>year</name> <operator>-</operator> <name>yearForCalendar</name><operator>)</operator> <operator>*</operator> <name>SECONDS_PER_YEAR</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>zoneId</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>getShortId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>epochSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>DateTimeFormatter</name></type> <name>timeZoneFormatter</name> <init>= <expr><name>TIME_ZONE_FORMATTER</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeZoneFormatter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>TIME_ZONE_FORMATTER</name> <operator>=</operator> <name>timeZoneFormatter</name> <operator>=</operator> <call><name><name>DateTimeFormatter</name><operator>.</operator><name>ofPattern</name></name><argument_list>(<argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ZonedDateTime</name><operator>.</operator><name>ofInstant</name></name><argument_list>(<argument><expr><call><name><name>Instant</name><operator>.</operator><name>ofEpochSecond</name></name><argument_list>(<argument><expr><name>epochSeconds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zoneId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>timeZoneFormatter</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns a year within the range -999,999,999..999,999,999 for the
         * given year. Too large and too small years are replaced with years
         * within the range using the 400 years period of the Gregorian
         * calendar.
         *
         * Because we need them only to calculate a time zone offset, it's safe
         * to normalize them to such range.
         *
         * @param year
         *            the year
         * @return the specified year or the replacement year within the range
         */</comment>
        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>yearForCalendar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>year</name> <operator>&gt;</operator> <literal type="number">999_999_999</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>year</name> <operator>-=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>year</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">999_999_999</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>year</name> <operator>+=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>year</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="string">"TimeZoneProvider "</literal> <operator>+</operator> <call><name><name>zoneId</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

}</block></class>
</unit>
