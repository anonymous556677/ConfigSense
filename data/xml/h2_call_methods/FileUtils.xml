<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/store/fs/FileUtils.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>fs</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>EOFException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>FileChannel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>OpenOption</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>StandardOpenOption</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>attribute</name><operator>.</operator><name>FileAttribute</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This utility class contains utility functions that use the file system
 * abstraction.
 */</comment>
<class><specifier>public</specifier> class <name>FileUtils</name> <block>{

    <comment type="block" format="javadoc">/**
     * {@link StandardOpenOption#READ}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>R</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>READ</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * {@link StandardOpenOption#READ}, {@link StandardOpenOption#WRITE}, and
     * {@link StandardOpenOption#CREATE}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>RW</name> <init>= <expr><call><name><name>Collections</name>
            <operator>.</operator><name>unmodifiableSet</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>READ</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>CREATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * {@link StandardOpenOption#READ}, {@link StandardOpenOption#WRITE},
     * {@link StandardOpenOption#CREATE}, and {@link StandardOpenOption#SYNC}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>RWS</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableSet</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>READ</name></name></expr></argument>,
            <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>SYNC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * {@link StandardOpenOption#READ}, {@link StandardOpenOption#WRITE},
     * {@link StandardOpenOption#CREATE}, and {@link StandardOpenOption#DSYNC}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>RWD</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableSet</name></name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>READ</name></name></expr></argument>,
            <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>DSYNC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * No file attributes.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name><name>FileAttribute</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>NO_ATTRIBUTES</name> <init>= <expr><operator>new</operator> <name><name>FileAttribute</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Checks if a file exists.
     * This method is similar to Java 7 &lt;code&gt;java.nio.file.Path.exists&lt;/code&gt;.
     *
     * @param fileName the file name
     * @return true if it exists
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a directory (all required parent directories must already exist).
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.createDirectory&lt;/code&gt;.
     *
     * @param directoryName the directory name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directoryName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>directoryName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new file. This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.createFile&lt;/code&gt;, but returns false instead of
     * throwing a exception if the file already existed.
     *
     * @param fileName the file name
     * @return true if creating was successful
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>createFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createFile</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Delete a file or directory if it exists.
     * Directories may only be deleted if they are empty.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.deleteIfExists&lt;/code&gt;.
     *
     * @param path the file or directory name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the canonical file or directory name. This method is similar to Java
     * 7 &lt;code&gt;java.nio.file.Path.toRealPath&lt;/code&gt;.
     *
     * @param fileName the file name
     * @return the normalized file name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toRealPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toRealPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the parent directory of a file or directory. This method returns null
     * if there is no parent. This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.getParent&lt;/code&gt;.
     *
     * @param fileName the file or directory name
     * @return the parent directory name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getParent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FilePath</name></type> <name>p</name> <init>= <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>p</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the file name includes a path. This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.isAbsolute&lt;/code&gt;.
     *
     * @param fileName the file name
     * @return if the file name is absolute
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAbsolute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAbsolute</name><argument_list>()</argument_list></call>
                <comment type="line">// Allows Windows to recognize "/path" as absolute.</comment>
                <comment type="line">// Makes the same configuration work on all platforms.</comment>
                <operator>||</operator> <call><name><name>fileName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call>
                <comment type="line">// Just in case of non-normalized path on Windows</comment>
                <operator>||</operator> <call><name><name>fileName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename a file if this is allowed. This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Files.move&lt;/code&gt;.
     *
     * @param source the old fully qualified file name
     * @param target the new fully qualified file name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>moveTo</name><argument_list>(<argument><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename a file if this is allowed, and try to atomically replace an
     * existing file. This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Files.move&lt;/code&gt;.
     *
     * @param source the old fully qualified file name
     * @param target the new fully qualified file name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>moveAtomicReplace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>moveTo</name><argument_list>(<argument><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the file or directory name (the last element of the path).
     * This method is similar to Java 7 &lt;code&gt;java.nio.file.Path.getName&lt;/code&gt;.
     *
     * @param path the directory and file name
     * @return just the file name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * List the files and directories in the given directory.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.newDirectoryStream&lt;/code&gt;.
     *
     * @param path the directory
     * @return the list of fully qualified file names
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>newDirectoryStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FilePath</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newDirectoryStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>FilePath</name></type> <name>filePath</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>filePath</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the last modified date of a file.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.attribute.Attributes.
     * readBasicFileAttributes(file).lastModified().toMillis()&lt;/code&gt;
     *
     * @param fileName the file name
     * @return the last modified date
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>lastModified</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>lastModified</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the size of a file in bytes
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.attribute.Attributes.
     * readBasicFileAttributes(file).size()&lt;/code&gt;
     *
     * @param fileName the file name
     * @return the size in bytes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if it is a file or a directory.
     * &lt;code&gt;java.nio.file.attribute.Attributes.
     * readBasicFileAttributes(file).isDirectory()&lt;/code&gt;
     *
     * @param fileName the file or directory name
     * @return true if it is a directory
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open a random access file object.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.channels.FileChannel.open&lt;/code&gt;.
     *
     * @param fileName the file name
     * @param mode the access mode. Supported are r, rw, rws, rwd
     * @return the file object
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileChannel</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an input stream to read from the file.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Files.newInputStream()&lt;/code&gt;.
     *
     * @param fileName the file name
     * @return the input stream
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InputStream</name></type> <name>newInputStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newInputStream</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a buffered reader to read from the file.
     * This method is similar to
     * &lt;code&gt;java.nio.file.Files.newBufferedReader()&lt;/code&gt;.
     *
     * @param fileName the file name
     * @param charset the charset
     * @return the buffered reader
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BufferedReader</name></type> <name>newBufferedReader</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>Charset</name></type> <name>charset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name>newInputStream</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>IO_BUFFER_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an output stream to write into the file.
     * This method is similar to
     * &lt;code&gt;java.nio.file.Files.newOutputStream()&lt;/code&gt;.
     *
     * @param fileName the file name
     * @param append if true, the file will grow, if false, the file will be
     *            truncated first
     * @return the output stream
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>OutputStream</name></type> <name>newOutputStream</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>append</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newOutputStream</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the file is writable.
     * This method is similar to Java 7
     * &lt;code&gt;java.nio.file.Path.checkAccess(AccessMode.WRITE)&lt;/code&gt;
     *
     * @param fileName the file name
     * @return if the file is writable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>canWrite</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>canWrite</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// special methods =======================================</comment>

    <comment type="block" format="javadoc">/**
     * Disable the ability to write. The file can still be deleted afterwards.
     *
     * @param fileName the file name
     * @return true if the call was successful
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>setReadOnly</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setReadOnly</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the unwrapped file name (without wrapper prefixes if wrapping /
     * delegating file systems are used).
     *
     * @param fileName the file name
     * @return the unwrapped
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>unwrap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>unwrap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// utility methods =======================================</comment>

    <comment type="block" format="javadoc">/**
     * Delete a directory or file and all subdirectories and files.
     *
     * @param path the path
     * @param tryOnly whether errors should  be ignored
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>deleteRecursive</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>tryOnly</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>exists</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name>newDirectoryStream</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>deleteRecursive</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tryOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>tryOnly</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tryDelete</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create the directory and all required parent directories.
     *
     * @param dir the directory name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createDirectories</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>exists</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// this will fail</comment>
                    <expr_stmt><expr><call><name>createDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>parent</name> <init>= <expr><call><name>getParent</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>createDirectories</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>createDirectory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Try to delete a file or directory (ignoring errors).
     *
     * @param path the file or directory name
     * @return true if it worked
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>tryDelete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new temporary file.
     *
     * @param prefix the prefix of the file name (including directory name if
     *            required)
     * @param suffix the suffix
     * @param inTempDir if the file should be stored in the temporary directory
     * @return the name of the created file
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>createTempFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>inTempDir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name><name>FilePath</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createTempFile</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>inTempDir</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fully read from the file. This will read all remaining bytes,
     * or throw an EOFException if not successful.
     *
     * @param channel the file channel
     * @param dst the byte buffer
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>FileChannel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>dst</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>channel</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>EOFException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><call><name><name>dst</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fully write to the file. This will write all remaining bytes.
     *
     * @param channel the file channel
     * @param src the byte buffer
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeFully</name><parameter_list>(<parameter><decl><type><name>FileChannel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>src</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name><name>src</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert the string representation to a set.
     *
     * @param mode the mode as a string
     * @return the set
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>modeToOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>OpenOption</name></extends></argument>&gt;</argument_list></name></type> <name>options</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="string">"r"</literal></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"rw"</literal></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>RW</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"rws"</literal></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>RWS</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="string">"rwd"</literal></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>RWD</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
