<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/TypeInfo.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Data type with parameters.
 */</comment>
<class><specifier>public</specifier> class <name>TypeInfo</name> <super_list><extends>extends <super><name>ExtTypeInfo</name></super></extends> <implements>implements <super><name>Typed</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * UNKNOWN type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_UNKNOWN</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * NULL type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_NULL</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * CHAR type with default parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_CHAR</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * CHARACTER VARYING type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_VARCHAR</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * VARCHAR_IGNORECASE type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_VARCHAR_IGNORECASE</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * CHARACTER LARGE OBJECT type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_CLOB</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * BINARY type with default parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_BINARY</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * BINARY VARYING type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_VARBINARY</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * BINARY LARGE OBJECT type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_BLOB</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * BOOLEAN type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_BOOLEAN</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TINYINT type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_TINYINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * SMALLINT type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_SMALLINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTEGER type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_INTEGER</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * BIGINT type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_BIGINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * NUMERIC type with maximum precision and scale 0.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_NUMERIC_SCALE_0</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * NUMERIC type with parameters enough to hold a BIGINT value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_NUMERIC_BIGINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * NUMERIC type that can hold values with floating point.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_NUMERIC_FLOATING_POINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * REAL type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_REAL</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * DOUBLE PRECISION type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_DOUBLE</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * DECFLOAT type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_DECFLOAT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * DECFLOAT type with parameters enough to hold a BIGINT value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_DECFLOAT_BIGINT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * DATE type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_DATE</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TIME type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_TIME</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TIME WITH TIME ZONE type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_TIME_TZ</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TIMESTAMP type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_TIMESTAMP</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * TIMESTAMP WITH TIME ZONE type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_TIMESTAMP_TZ</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTERVAL DAY type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_INTERVAL_DAY</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTERVAL YEAR TO MONTH type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_INTERVAL_YEAR_TO_MONTH</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTERVAL DAY TO SECOND type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_INTERVAL_DAY_TO_SECOND</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * INTERVAL HOUR TO SECOND type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_INTERVAL_HOUR_TO_SECOND</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * JAVA_OBJECT type with maximum parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_JAVA_OBJECT</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ENUM type with undefined parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_ENUM_UNDEFINED</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * GEOMETRY type with default parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_GEOMETRY</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * JSON type.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_JSON</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * UUID type with parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_UUID</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ARRAY type with unknown parameters.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_ARRAY_UNKNOWN</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ROW (row value) type without fields.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>TYPE_ROW_EMPTY</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TypeInfo</name><index>[]</index></name></type> <name>TYPE_INFOS_BY_VALUE_TYPE</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>valueType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>precision</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>scale</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ExtTypeInfo</name></type> <name>extTypeInfo</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name><name>TypeInfo</name><index>[]</index></name></type> <name>infos</name> <init>= <expr><operator>new</operator> <name><name>TypeInfo</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>TYPE_UNKNOWN</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// NULL</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_NULL</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// CHARACTER</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_CHAR</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_VARCHAR</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_CLOB</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_VARCHAR_IGNORECASE</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// BINARY</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_BINARY</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_VARBINARY</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_BLOB</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// BOOLEAN</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_BOOLEAN</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// NUMERIC</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_TINYINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_SMALLINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_INTEGER</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_BIGINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_NUMERIC_SCALE_0</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_NUMERIC_BIGINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name><name>ValueBigint</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_NUMERIC_FLOATING_POINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_REAL</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_DOUBLE</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_DECFLOAT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_DECFLOAT_BIGINT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>ValueBigint</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// DATETIME</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_DATE</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_TIME</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_TIME_TZ</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_TIMESTAMP</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_TIMESTAMP_TZ</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// INTERVAL</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>infos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hasSeconds</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>TYPE_INTERVAL_DAY</name> <operator>=</operator> <name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_INTERVAL_YEAR_TO_MONTH</name> <operator>=</operator> <name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_INTERVAL_DAY_TO_SECOND</name> <operator>=</operator> <name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_INTERVAL_HOUR_TO_SECOND</name> <operator>=</operator> <name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">// OTHER</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_JAVA_OBJECT</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_ENUM_UNDEFINED</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_GEOMETRY</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_JSON</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_UUID</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// COLLECTION</comment>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_ARRAY_UNKNOWN</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infos</name><index>[<expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>]</index></name> <operator>=</operator> <name>TYPE_ROW_EMPTY</name> <operator>=</operator> <operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <comment type="line">//</comment>
                <argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TYPE_INFOS_BY_VALUE_TYPE</name> <operator>=</operator> <name>infos</name></expr>;</expr_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Get the data type with parameters object for the given value type and
     * maximum parameters.
     *
     * @param type
     *            the value type
     * @return the data type with parameters object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getTypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>t</name> <init>= <expr><name><name>TYPE_INFOS_BY_VALUE_TYPE</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>t</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>TYPE_NULL</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the data type with parameters object for the given value type and the
     * specified parameters.
     *
     * @param type
     *            the value type
     * @param precision
     *            the precision or {@code -1L} for default
     * @param scale
     *            the scale or {@code -1} for default
     * @param extTypeInfo
     *            the extended type information or null
     * @return the data type with parameters object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getTypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>ExtTypeInfo</name></type> <name>extTypeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
            <return>return <expr><name><name>TYPE_INFOS_BY_VALUE_TYPE</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
            <return>return <expr><name>TYPE_UNKNOWN</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_CHAR</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>precision</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>TYPE_VARCHAR</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_CLOB</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>precision</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>TYPE_VARCHAR_IGNORECASE</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_BINARY</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>precision</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>TYPE_VARBINARY</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_BLOB</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueNumeric</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>ValueNumeric</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>extTypeInfo</name> <operator>instanceof</operator> <name>ExtTypeInfoNumeric</name></expr> ?</condition><then> <expr><name>extTypeInfo</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>TYPE_REAL</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>precision</name> <operator>&gt;=</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&lt;=</operator> <literal type="number">53</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>TYPE_DOUBLE</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_DECFLOAT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_TIME</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_TIME_TZ</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_TIMESTAMP</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_TIMESTAMP_TZ</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>scale</name> <operator>&gt;</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_JAVA_OBJECT</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>instanceof</operator> <name>ExtTypeInfoEnum</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoEnum</name><operator>)</operator> <name>extTypeInfo</name><operator>)</operator><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>TYPE_ENUM_UNDEFINED</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>instanceof</operator> <name>ExtTypeInfoGeometry</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>TYPE_GEOMETRY</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TYPE_JSON</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>extTypeInfo</name> <operator>instanceof</operator> <name>TypeInfo</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>precision</name> <operator>&gt;=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_ARRAY_CARDINALITY</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>extTypeInfo</name> <operator>instanceof</operator> <name>ExtTypeInfoRow</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>TypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>extTypeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><name>TYPE_NULL</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the higher data type of all values.
     *
     * @param values
     *            the values
     * @return the higher data type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getHigherType</name><parameter_list>(<parameter><decl><type><name><name>Typed</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cardinality</name> <init>= <expr><name><name>values</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cardinality</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasUnknown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>hasNull</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
                <expr_stmt><expr><name>hasUnknown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
                <expr_stmt><expr><name>hasNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cardinality</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>t</name> <init>= <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><call><name><name>t</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
                    <expr_stmt><expr><name>hasUnknown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
                    <expr_stmt><expr><name>hasNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>getHigherType</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name> <operator>&amp;&amp;</operator> <name>hasUnknown</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasNull</name></expr> ?</condition><then> <expr><literal type="string">"NULL, ?"</literal></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the higher data type of two data types. If values need to be
     * converted to match the other operands data type, the value with the lower
     * order is converted to the value with the higher order.
     *
     * @param type1
     *            the first data type
     * @param type2
     *            the second data type
     * @return the higher data type of the two
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getHigherType</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name><name>type1</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><call><name><name>type2</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>dataType</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"?, ?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>dataType</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>t1</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name> <init>= <expr><name>type1</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>type1</name> <operator>=</operator> <name>type2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>type2</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"?, NULL"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>type2</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"NULL, ?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>type1</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>type1</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>dataType</name> <operator>=</operator> <call><name><name>Value</name><operator>.</operator><name>getHigherOrderKnown</name></name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>dataType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><name>type1</name> <operator>=</operator> <call><name><name>type1</name><operator>.</operator><name>toNumericType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type2</name> <operator>=</operator> <call><name><name>type2</name><operator>.</operator><name>toNumericType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>precision1</name> <init>= <expr><call><name><name>type1</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>precision2</name> <init>= <expr><call><name><name>type2</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>scale1</name> <init>= <expr><call><name><name>type1</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>scale2</name> <init>= <expr><call><name><name>type2</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale1</name> <operator>&lt;</operator> <name>scale2</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>precision1</name> <operator>+=</operator> <name>scale2</name> <operator>-</operator> <name>scale1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <name>scale2</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>precision2</name> <operator>+=</operator> <name>scale1</name> <operator>-</operator> <name>scale2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>scale</name> <operator>=</operator> <name>scale1</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>precision1</name></expr></argument>, <argument><expr><name>precision2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <return>return <expr><call><name>getHigherArray</name><argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><call><name>dimensions</name><argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dimensions</name><argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><call><name>getHigherRow</name><argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>type1</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>type2</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>ExtTypeInfo</name></type> <name>ext1</name> <init>= <expr><name><name>type1</name><operator>.</operator><name>extTypeInfo</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <comment type="line">//</comment>
                <argument><expr><name>precision</name></expr></argument>, <comment type="line">//</comment>
                <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>type1</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>type2</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <comment type="line">//</comment>
                <argument><expr><ternary><condition><expr><name>dataType</name> <operator>==</operator> <name>t1</name> <operator>&amp;&amp;</operator> <name>ext1</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>ext1</name></expr> </then><else>: <expr><ternary><condition><expr><name>dataType</name> <operator>==</operator> <name>t2</name></expr> ?</condition><then> <expr><name><name>type2</name><operator>.</operator><name>extTypeInfo</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>dimensions</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>;</condition> <incr><expr><name>result</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name><name>type</name><operator>.</operator><name>extTypeInfo</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getHigherArray</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <name>d2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>d1</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>type1</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type1</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name><name>type1</name><operator>.</operator><name>extTypeInfo</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <name>d2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>d2</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><call><name><name>type2</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type2</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name><name>type2</name><operator>.</operator><name>extTypeInfo</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>d1</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>d2</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>type1</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>type2</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>type1</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name><name>type1</name><operator>.</operator><name>extTypeInfo</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>type2</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name><name>type2</name><operator>.</operator><name>extTypeInfo</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>getHigherType</name><argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getHigherArray</name><argument_list>(<argument><expr><name>type1</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>getHigherRow</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>type1</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type1</name> <operator>=</operator> <call><name>typeToRow</name><argument_list>(<argument><expr><name>type1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>type2</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type2</name> <operator>=</operator> <call><name>typeToRow</name><argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ExtTypeInfoRow</name></type> <name>ext1</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>type1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ext2</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>type2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ext1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ext2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>type1</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>m1</name> <init>= <expr><call><name><name>ext1</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><call><name><name>ext2</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><call><name><name>m1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>m2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>degree</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_COUNT_DOES_NOT_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><name>degree</name> <operator>/</operator> <literal type="number">.75</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>i1</name> <init>= <expr><call><name><name>m1</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><call><name><name>m2</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i1</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></name></type> <name>e1</name> <init>= <expr><call><name><name>i1</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>e1</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHigherType</name><argument_list>(<argument><expr><call><name><name>e1</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i2</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>typeToRow</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"C1"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtTypeInfoRow</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determines whether two specified types are the same data types without
     * taking precision or scale into account.
     *
     * @param t1
     *            first data type
     * @param t2
     *            second data type
     * @return whether types are the same
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>areSameTypes</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>valueType</name> <init>= <expr><call><name><name>t1</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>!=</operator> <call><name><name>t2</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>ExtTypeInfo</name></type> <name>ext1</name> <init>= <expr><call><name><name>t1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ext2</name> <init>= <expr><call><name><name>t2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ext1</name></expr></argument>, <argument><expr><name>ext2</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name>ext1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>TypeInfo</name><operator>)</operator> <name>ext2</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether two specified types are comparable and throws an exception
     * otherwise.
     *
     * @param t1
     *            first data type
     * @param t2
     *            second data type
     * @throws DbException
     *             if types aren't comparable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkComparable</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>areComparable</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TYPES_ARE_NOT_COMPARABLE_2</name></name></expr></argument>, <argument><expr><call><name><name>t1</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>t2</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determines whether two specified types are comparable.
     *
     * @param t1
     *            first data type
     * @param t2
     *            second data type
     * @return whether types are comparable
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>areComparable</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>vt1</name> <init>= <expr><operator>(</operator><name>t1</name> <operator>=</operator> <call><name><name>t1</name><operator>.</operator><name>unwrapRow</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>vt2</name> <init>= <expr><operator>(</operator><name>t2</name> <operator>=</operator> <call><name><name>t2</name><operator>.</operator><name>unwrapRow</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>&gt;</operator> <name>vt2</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>vt</name> <init>= <expr><name>vt1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vt1</name> <operator>=</operator> <name>vt2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vt2</name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>t</name> <init>= <expr><name>t1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>==</operator> <name>vt2</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>vt1</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
                <return>return <expr><call><name>areComparable</name><argument_list>(<argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>t1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>t2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>f1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>t1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>f2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>t2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><call><name><name>f1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>f2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>degree</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>i1</name> <init>= <expr><call><name><name>f1</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><call><name><name>f2</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>i1</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>areComparable</name><argument_list>(<argument><expr><call><name><name>i1</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i2</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block>
            <comment type="line">//$FALL-THROUGH$</comment>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>g1</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>GROUPS</name><index>[<expr><name>vt1</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g2</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>GROUPS</name><index>[<expr><name>vt2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>g1</name> <operator>==</operator> <name>g2</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>g1</name></expr>)</condition> <block>{<block_content>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_DATETIME</name></name></expr>:</case>
                <return>return <expr><name>vt1</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>DATE</name></name> <operator>||</operator> <name>vt2</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>TIME</name></name> <operator>&amp;&amp;</operator> <name>vt2</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_OTHER</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_COLLECTION</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name>g1</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_CHARACTER_STRING</name></name></expr>:</case>
            <switch>switch <condition>(<expr><name>g2</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_NUMERIC</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_DATETIME</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_INTERVAL_YM</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_INTERVAL_DT</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_OTHER</name></name></expr>:</case>
                <switch>switch <condition>(<expr><name>vt2</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                <default>default:</default>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></switch>
            <default>default:</default>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_BINARY_STRING</name></name></expr>:</case>
            <switch>switch <condition>(<expr><name>vt2</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></switch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determines whether two specified types have the same ordering rules.
     *
     * @param t1
     *            first data type
     * @param t2
     *            second data type
     * @return whether types are comparable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>haveSameOrdering</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>vt1</name> <init>= <expr><operator>(</operator><name>t1</name> <operator>=</operator> <call><name><name>t1</name><operator>.</operator><name>unwrapRow</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>vt2</name> <init>= <expr><operator>(</operator><name>t2</name> <operator>=</operator> <call><name><name>t2</name><operator>.</operator><name>unwrapRow</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>&gt;</operator> <name>vt2</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>vt</name> <init>= <expr><name>vt1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>vt1</name> <operator>=</operator> <name>vt2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vt2</name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>t</name> <init>= <expr><name>t1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>vt1</name> <operator>==</operator> <name>vt2</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>vt1</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
                <return>return <expr><call><name>haveSameOrdering</name><argument_list>(<argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>t1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>t2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>f1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>t1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>f2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>t2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><call><name><name>f1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>f2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>degree</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>i1</name> <init>= <expr><call><name><name>f1</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><call><name><name>f2</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>i1</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>haveSameOrdering</name><argument_list>(<argument><expr><call><name><name>i1</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>i2</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block>
            <comment type="line">//$FALL-THROUGH$</comment>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>g1</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>GROUPS</name><index>[<expr><name>vt1</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g2</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>GROUPS</name><index>[<expr><name>vt2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>g1</name> <operator>==</operator> <name>g2</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>g1</name></expr>)</condition> <block>{<block_content>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_CHARACTER_STRING</name></name></expr>:</case>
                <return>return <expr><operator>(</operator><name>vt1</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>vt2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name><operator>)</operator></expr>;</return>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_DATETIME</name></name></expr>:</case>
                <switch>switch <condition>(<expr><name>vt1</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
                    <return>return <expr><name>vt2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name> <operator>||</operator> <name>vt2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>;</return>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
                <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
                    <return>return <expr><name>vt2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIME</name></name> <operator>||</operator> <name>vt2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>;</return>
                <default>default:</default> <comment type="line">// TIMESTAMP TIMESTAMP_TZ</comment>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></switch>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_OTHER</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GROUP_COLLECTION</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>g1</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>GROUP_BINARY_STRING</name></name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>vt2</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>TypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>extTypeInfo</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>TypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>extTypeInfo</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>TypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extTypeInfo</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates new instance of data type with parameters.
     *
     * @param valueType
     *            the value type
     * @param precision
     *            the precision
     * @param scale
     *            the scale
     * @param extTypeInfo
     *            the extended type information, or null
     */</comment>
    <constructor><specifier>public</specifier> <name>TypeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>ExtTypeInfo</name></type> <name>extTypeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extTypeInfo</name></name> <operator>=</operator> <name>extTypeInfo</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns this type information.
     *
     * @return this
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the value type.
     *
     * @return the value type
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getValueType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>valueType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the precision.
     *
     * @return the precision
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getPrecision</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
            <return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><literal type="number">1L</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueTinyint</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueSmallint</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><name><name>ValueInteger</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueBigint</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><name><name>ValueReal</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><name><name>ValueDouble</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><name><name>ValueDate</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">9</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">14</literal></expr> </then><else>: <expr><literal type="number">15</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">19</literal></expr> </then><else>: <expr><literal type="number">20</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">25</literal></expr> </then><else>: <expr><literal type="number">26</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
            <return>return <expr><name><name>ValueUuid</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_ARRAY_CARDINALITY</name></name></expr></else></ternary></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>precision</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the precision, or {@code -1L} if not specified in data type
     * definition.
     *
     * @return the precision, or {@code -1L} if not specified in data type
     *         definition
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getDeclaredPrecision</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>precision</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the scale.
     *
     * @return the scale
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getScale</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>scale</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the scale, or {@code -1} if not specified in data type
     * definition.
     *
     * @return the scale, or {@code -1} if not specified in data type definition
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDeclaredScale</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>scale</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the display size in characters.
     *
     * @return the display size
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDisplaySize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
        <default>default:</default>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&lt;=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr> </then><else>: <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&lt;=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>/</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueTinyint</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueSmallint</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><name><name>ValueInteger</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueBigint</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name> <operator>+</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><name><name>ValueReal</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><name><name>ValueDouble</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name> <operator>+</operator> <literal type="number">12</literal></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name> <operator>+</operator> <literal type="number">12</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><name><name>ValueDate</name><operator>.</operator><name>PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">9</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">14</literal></expr> </then><else>: <expr><literal type="number">15</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">19</literal></expr> </then><else>: <expr><literal type="number">20</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">25</literal></expr> </then><else>: <expr><literal type="number">26</literal> <operator>+</operator> <name>s</name></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueInterval</name><operator>.</operator><name>getDisplaySize</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr> </then><else>: <expr><name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scale</name></expr> </then><else>: <expr><name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
            <return>return <expr><name><name>ValueUuid</name><operator>.</operator><name>DISPLAY_SIZE</name></name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the extended type information, or null.
     *
     * @return the extended type information, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>ExtTypeInfo</name></type> <name>getExtTypeInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>extTypeInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"NUMERIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>withPrecision</name> <init>= <expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>withScale</name> <init>= <expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>withPrecision</name> <operator>||</operator> <name>withScale</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>withPrecision</name></expr> ?</condition><then> <expr><name>precision</name></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>withScale</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"FLOAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"DECFLOAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" WITH TIME ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" WITH TIME ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>valueType</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypeName</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>,
                    <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ENUM"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"GEOMETRY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ROW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>extTypeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>precision</name> <operator>^</operator> <operator>(</operator><name>precision</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>extTypeInfo</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>extTypeInfo</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>TypeInfo</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>valueType</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>valueType</name></name> <operator>&amp;&amp;</operator> <name>precision</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>precision</name></name> <operator>&amp;&amp;</operator> <name>scale</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>scale</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>extTypeInfo</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>extTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert this type information to compatible NUMERIC type information.
     *
     * @return NUMERIC type information
     */</comment>
    <function><type><specifier>public</specifier> <name>TypeInfo</name></type> <name>toNumericType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><call><name>getDecimalPrecision</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name>TYPE_NUMERIC_BIGINT</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><name>this</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <comment type="line">// Smallest REAL value is 1.4E-45 with precision 2 and scale 46</comment>
            <comment type="line">// Largest REAL value is 3.4028235E+38 with precision 8 and scale</comment>
            <comment type="line">// -31</comment>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><literal type="number">85</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <comment type="line">// Smallest DOUBLE value is 4.9E-324 with precision 2 and scale 325</comment>
            <comment type="line">// Largest DOUBLE value is 1.7976931348623157E+308 with precision 17</comment>
            <comment type="line">// and scale -292</comment>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><literal type="number">634</literal></expr></argument>, <argument><expr><literal type="number">325</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TYPE_NUMERIC_FLOATING_POINT</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert this type information to compatible DECFLOAT type information.
     *
     * @return DECFLOAT type information
     */</comment>
    <function><type><specifier>public</specifier> <name>TypeInfo</name></type> <name>toDecfloatType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><call><name>getDecimalPrecision</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name>TYPE_DECFLOAT_BIGINT</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><call><name>getPrecision</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><name><name>ValueReal</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><call><name>getTypeInfo</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><name><name>ValueReal</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <return>return <expr><name>this</name></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TYPE_DECFLOAT</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns unwrapped data type if this data type is a row type with degree 1
     * or this type otherwise.
     *
     * @return unwrapped data type if this data type is a row type with degree 1
     *         or this type otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>TypeInfo</name></type> <name>unwrapRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <name>extTypeInfo</name><operator>)</operator><operator>.</operator><call><name>getFields</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>fields</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>unwrapRow</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns approximate precision in decimal digits for binary numeric data
     * types and precision for all other types.
     *
     * @return precision in decimal digits
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getDecimalPrecision</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueTinyint</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueSmallint</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><name><name>ValueInteger</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name><name>ValueBigint</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><name><name>ValueReal</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <return>return <expr><name><name>ValueDouble</name><operator>.</operator><name>DECIMAL_PRECISION</name></name></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>precision</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the declared name of this data type with precision, scale,
     * length, cardinality etc. parameters removed, excluding parameters of ENUM
     * data type, GEOMETRY data type, ARRAY elements, and ROW fields.
     *
     * @return the declared name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDeclaredTypeName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"DECIMAL"</literal></expr> </then><else>: <expr><literal type="string">"NUMERIC"</literal></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>extTypeInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"FLOAT"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><call><name>getSQL</name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name> <init>= <expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <name>extTypeInfo</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// Use full type names with parameters for elements</comment>
            <return>return <expr><call><name><name>typeInfo</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ARRAY"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><call><name><name>Value</name><operator>.</operator><name>getTypeName</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
