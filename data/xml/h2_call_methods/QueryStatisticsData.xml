<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/QueryStatisticsData.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Maintains query statistics.
 */</comment>
<class><specifier>public</specifier> class <name>QueryStatisticsData</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>QUERY_ENTRY_COMPARATOR</name> <init>=
            <expr><call><name><name>Comparator</name><operator>.</operator><name>comparingLong</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>q</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>q</name><operator>.</operator><name>lastUpdateTime</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxQueryEntries</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>QueryStatisticsData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxQueryEntries</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxQueryEntries</name></name> <operator>=</operator> <name>maxQueryEntries</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setMaxQueryEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxQueryEntries</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxQueryEntries</name></name> <operator>=</operator> <name>maxQueryEntries</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>getQueries</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// return a copy of the map so we don't have to</comment>
        <comment type="line">// worry about external synchronization</comment>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// only return the newest 100 entries</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>QUERY_ENTRY_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>list</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>maxQueryEntries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update query statistics.
     *
     * @param sqlStatement the statement being executed
     * @param executionTimeNanos the time in nanoseconds the query/update took
     *            to execute
     * @param rowCount the query or update row count
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlStatement</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>executionTimeNanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rowCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>QueryEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sqlStatement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>new</operator> <call><name>QueryEntry</name><argument_list>(<argument><expr><name>sqlStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sqlStatement</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>executionTimeNanos</name></expr></argument>, <argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Age-out the oldest entries if the map gets too big.</comment>
        <comment type="line">// Test against 1.5 x max-size so we don't do this too often</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxQueryEntries</name> <operator>*</operator> <literal type="number">1.5f</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Sort the entries by age</comment>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>QUERY_ENTRY_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Create a set of the oldest 1/3 of the entries</comment>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>oldestSet</name> <init>=
                    <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Loop over the map using the set and remove</comment>
            <comment type="line">// the oldest 1/3 of the entries.</comment>
            <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>QueryEntry</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>it</name> <init>=
                    <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>QueryEntry</name></argument>&gt;</argument_list></name></type> <name>mapEntry</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>oldestSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>mapEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The collected statistics for one query.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>QueryEntry</name> <block>{

        <comment type="block" format="javadoc">/**
         * The SQL statement.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>sqlStatement</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The number of times the statement was executed.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The last time the statistics for this entry were updated,
         * in milliseconds since 1970.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>lastUpdateTime</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The minimum execution time, in nanoseconds.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>executionTimeMinNanos</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The maximum execution time, in nanoseconds.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>executionTimeMaxNanos</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The total execution time.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>executionTimeCumulativeNanos</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The minimum number of rows.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>rowCountMin</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The maximum number of rows.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>rowCountMax</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The total number of rows.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>rowCountCumulative</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The mean execution time.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>executionTimeMeanNanos</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The mean number of rows.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>rowCountMean</name></decl>;</decl_stmt>

        <comment type="line">// Using Welford's method, see also</comment>
        <comment type="line">// https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance</comment>
        <comment type="line">// https://www.johndcook.com/blog/standard_deviation/</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>executionTimeM2Nanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rowCountM2</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>QueryEntry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sqlStatement</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Update the statistics entry.
         *
         * @param timeNanos the execution time in nanos
         * @param rows the number of rows
         */</comment>
        <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>executionTimeMinNanos</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>executionTimeMinNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>executionTimeMaxNanos</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>executionTimeMaxNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCountMin</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>rowCountMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCountMax</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>rowCountMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>rowDelta</name> <init>= <expr><name>rows</name> <operator>-</operator> <name>rowCountMean</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rowCountMean</name> <operator>+=</operator> <name>rowDelta</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCountM2</name> <operator>+=</operator> <name>rowDelta</name> <operator>*</operator> <operator>(</operator><name>rows</name> <operator>-</operator> <name>rowCountMean</name><operator>)</operator></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>timeDelta</name> <init>= <expr><name>timeNanos</name> <operator>-</operator> <name>executionTimeMeanNanos</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>executionTimeMeanNanos</name> <operator>+=</operator> <name>timeDelta</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>executionTimeM2Nanos</name> <operator>+=</operator> <name>timeDelta</name> <operator>*</operator> <operator>(</operator><name>timeNanos</name> <operator>-</operator> <name>executionTimeMeanNanos</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>executionTimeCumulativeNanos</name> <operator>+=</operator> <name>timeNanos</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCountCumulative</name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastUpdateTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getExecutionTimeStandardDeviation</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// population standard deviation</comment>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>executionTimeM2Nanos</name> <operator>/</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getRowCountStandardDeviation</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// population standard deviation</comment>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>rowCountM2</name> <operator>/</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

}</block></class>
</unit>
