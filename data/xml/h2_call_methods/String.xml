<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/tools/org/h2/java/lang/String.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>java</name><operator>.</operator><name>lang</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>java</name><operator>.</operator><name>Ignore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>java</name><operator>.</operator><name>Local</name></name>;</import>

<comment type="block">/* c:

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;wchar.h&gt;
#include &lt;stdint.h&gt;
#define __STDC_FORMAT_MACROS
#include &lt;inttypes.h&gt;

#define jvoid void
#define jboolean int8_t
#define jbyte int8_t
#define jchar wchar_t
#define jint int32_t
#define jlong int64_t
#define jfloat float
#define jdouble double
#define ujint uint32_t
#define ujlong uint64_t
#define true 1
#define false 0
#define null 0

#define STRING_REF(s) ptr&lt;java_lang_String&gt; \
    (new java_lang_String(ptr&lt; array&lt;jchar&gt; &gt; \
    (new array&lt;jchar&gt;(s, (jint) wcslen(s)))));

#define STRING_PTR(s) new java_lang_String \
    (new array&lt;jchar&gt;(s, (jint) wcslen(s)));

class RefBase {
protected:
    jint refCount;
public:
    RefBase() {
        refCount = 0;
    }
    void reference() {
        refCount++;
    }
    void release() {
        if (--refCount == 0) {
            delete this;
        }
    }
    virtual ~RefBase() {
    }
};
template &lt;class T&gt; class ptr {
    T* pointer;
public:
    explicit ptr(T* p=0) : pointer(p) {
        if (p != 0) {
            ((RefBase*)p)-&gt;reference();
        }
    }
    ptr(const ptr&lt;T&gt;&amp; p) : pointer(p.pointer) {
        if (p.pointer != 0) {
            ((RefBase*)p.pointer)-&gt;reference();
        }
    }
    ~ptr() {
        if (pointer != 0) {
            ((RefBase*)pointer)-&gt;release();
        }
    }
    ptr&lt;T&gt;&amp; operator= (const ptr&lt;T&gt;&amp; p) {
        if (this != &amp;p &amp;&amp; pointer != p.pointer) {
            if (pointer != 0) {
                ((RefBase*)pointer)-&gt;release();
            }
            pointer = p.pointer;
            if (pointer != 0) {
                ((RefBase*)pointer)-&gt;reference();
            }
        }
        return *this;
    }
    T&amp; operator*() {
        return *pointer;
    }
    T* getPointer() {
        return pointer;
    }
    T* operator-&gt;() {
        return pointer;
    }
    jboolean operator==(const ptr&lt;T&gt;&amp; p) {
        return pointer == p-&gt;pointer;
    }
    jboolean operator==(const RefBase* t) {
        return pointer == t;
    }
};
template &lt;class T&gt; class array : RefBase {
    jint len;
    T* data;
public:
    array(const T* d, jint len) {
        this-&gt;len = len;
        data = new T[len];
        memcpy(data, d, sizeof(T) * len);
    }
    array(jint len) {
        this-&gt;len = len;
        data = new T[len];
    }
    ~array() {
        delete[] data;
    }
    T* getPointer() {
        return data;
    }
    jint length() {
        return len;
    }
    T&amp; operator[](jint index) {
        if (index &lt; 0 || index &gt;= len) {
            throw "index set";
        }
        return data[index];
    }
    T&amp; at(jint index) {
        if (index &lt; 0 || index &gt;= len) {
            throw "index set";
        }
        return data[index];
    }
};

*/</comment>

<comment type="block" format="javadoc">/**
 * A java.lang.String implementation.
 */</comment>
<class><specifier>public</specifier> class <name>String</name> <block>{

    <comment type="block" format="javadoc">/**
     * The character array.
     */</comment>
    <decl_stmt><decl><annotation>@<name>Local</name></annotation>
    <type><name><name>char</name><index>[]</index></name></type> <name>chars</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>String</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><name><name>chars</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>chars</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>chars</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>String</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>chars</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>hash</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>chars</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>*</operator> <literal type="number">31</literal> <operator>+</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the length of the string.
     *
     * @return the length
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>chars</name><operator>.</operator><name>length</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The toString method.
     *
     * @return the string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toStringMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the java.lang.String.
     *
     * @return the string
     */</comment>
    <function><annotation>@<name>Ignore</name></annotation>
    <type><specifier>public</specifier> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>asString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrap a java.lang.String.
     *
     * @param x the string
     * @return the object
     */</comment>
    <function><annotation>@<name>Ignore</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
