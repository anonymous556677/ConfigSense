<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/tools/org/h2/java/lang/StringBuilder.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>java</name><operator>.</operator><name>lang</name></name>;</package>

<comment type="block" format="javadoc">/**
 * A java.lang.String implementation.
 */</comment>
<class><specifier>public</specifier> class <name>StringBuilder</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>char</name><index>[]</index></name></type> <name>buffer</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>StringBuilder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name> <init>= <expr><name><name>s</name><operator>.</operator><name>chars</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>chars</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>StringBuilder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Append the given value.
     *
     * @param x the value
     * @return this
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuilder</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ensureCapacity</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>chars</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Append the given value.
     *
     * @param x the value
     * @return this
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuilder</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureCapacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>plus</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>length</name> <operator>+</operator> <name>plus</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <name>plus</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
