<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/util/Utils.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>GarbageCollectorMXBean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>OperatingSystemMXBean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipInputStream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This utility class contains miscellaneous functions.
 */</comment>
<class><specifier>public</specifier> class <name>Utils</name> <block>{

    <comment type="block" format="javadoc">/**
     * An 0-size byte array.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EMPTY_BYTES</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * An 0-size int array.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>EMPTY_INT_ARRAY</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>RESOURCES</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Utils</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// utility class</comment>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Calculate the index of the first occurrence of the pattern in the byte
     * array, starting with the given index. This methods returns -1 if the
     * pattern has not been found, and the start position if the pattern is
     * empty.
     *
     * @param bytes the byte array
     * @param pattern the pattern
     * @param start the start index from where to search
     * @return the index
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pattern</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>start</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>pattern</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>patternLen</name> <init>= <expr><name><name>pattern</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <label><name>next</name>:</label>
        <for>for <control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>patternLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><name>start</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <continue>continue <name>next</name>;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>start</name></expr>;</return>
        </block_content>}</block></for>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the hash code of the given byte array.
     *
     * @param value the byte array
     * @return the hash code
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getByteArrayHash</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>value</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <name><name>value</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <name>step</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>h</name> <operator>+</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two byte arrays. This method will always loop over all bytes and
     * doesn't use conditional operations in the loop to make sure an attacker
     * can not use a timing attack when trying out passwords.
     *
     * @param test the first array
     * @param good the second array
     * @return true if both byte arrays contain the same bytes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>compareSecure</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>good</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>test</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>good</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>test</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>good</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>test</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>good</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// don't use conditional operations inside the loop</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// this will never reset any bits</comment>
            <expr_stmt><expr><name>bits</name> <operator>|=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>good</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Copy the contents of the source array to the target array. If the size if
     * the target array is too small, a larger array is created.
     *
     * @param source the source array
     * @param target the target array
     * @return the target array or a new one if the target array was too small
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>target</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>target</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>target</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an array of bytes with the given size. If this is not possible
     * because not enough memory is available, an OutOfMemoryError with the
     * requested size in the message is thrown.
     * &lt;p&gt;
     * This method should be used if the size of the array is user defined, or
     * stored in a file, so wrong size data can be distinguished from regular
     * out-of-memory.
     * &lt;/p&gt;
     *
     * @param len the number of bytes requested
     * @return the byte array
     * @throws OutOfMemoryError if the allocation was too large
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>newBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EMPTY_BYTES</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Error</name></type> <name>e2</name> <init>= <expr><operator>new</operator> <call><name>OutOfMemoryError</name><argument_list>(<argument><expr><literal type="string">"Requested memory: "</literal> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>e2</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e2</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a copy of array of bytes with the new size. If this is not possible
     * because not enough memory is available, an OutOfMemoryError with the
     * requested size in the message is thrown.
     * &lt;p&gt;
     * This method should be used if the size of the array is user defined, or
     * stored in a file, so wrong size data can be distinguished from regular
     * out-of-memory.
     * &lt;/p&gt;
     *
     * @param bytes source array
     * @param len the number of bytes in the new array
     * @return the byte array
     * @throws OutOfMemoryError if the allocation was too large
     * @see Arrays#copyOf(byte[], int)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>copyBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EMPTY_BYTES</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Error</name></type> <name>e2</name> <init>= <expr><operator>new</operator> <call><name>OutOfMemoryError</name><argument_list>(<argument><expr><literal type="string">"Requested memory: "</literal> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>e2</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e2</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new byte array and copy all the data. If the size of the byte
     * array is zero, the same array is returned.
     *
     * @param b the byte array (may not be null)
     * @return a new byte array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cloneByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>EMPTY_BYTES</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the used memory in KB.
     * This method possibly calls System.gc().
     *
     * @return the used memory
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMemoryUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>collectGarbage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Runtime</name></type> <name>rt</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>rt</name><operator>.</operator><name>totalMemory</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>rt</name><operator>.</operator><name>freeMemory</name></name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the free memory in KB.
     * This method possibly calls System.gc().
     *
     * @return the free memory
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMemoryFree</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>collectGarbage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>freeMemory</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the maximum memory in KB.
     *
     * @return the maximum memory
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMemoryMax</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getGarbageCollectionTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>totalGCTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>GarbageCollectorMXBean</name></type> <name>gcMXBean</name> <range>: <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getGarbageCollectorMXBeans</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>collectionTime</name> <init>= <expr><call><name><name>gcMXBean</name><operator>.</operator><name>getCollectionTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>collectionTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>totalGCTime</name> <operator>+=</operator> <name>collectionTime</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>totalGCTime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getGarbageCollectionCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>totalGCCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>poolCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>GarbageCollectorMXBean</name></type> <name>gcMXBean</name> <range>: <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getGarbageCollectorMXBeans</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>collectionCount</name> <init>= <expr><call><name><name>gcMXBean</name><operator>.</operator><name>getCollectionTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>collectionCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>totalGCCount</name> <operator>+=</operator> <name>collectionCount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>poolCount</name> <operator>+=</operator> <call><name><name>gcMXBean</name><operator>.</operator><name>getMemoryPoolNames</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>poolCount</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>poolCount</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>totalGCCount</name> <operator>+</operator> <operator>(</operator><name>poolCount</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>poolCount</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Run Java memory garbage collection.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>collectGarbage</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Runtime</name></type> <name>runtime</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>garbageCollectionCount</name> <init>= <expr><call><name>getGarbageCollectionCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>garbageCollectionCount</name> <operator>==</operator> <call><name>getGarbageCollectionCount</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>runtime</name><operator>.</operator><name>gc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>yield</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new ArrayList with an initial capacity of 4.
     *
     * @param &lt;T&gt; the type
     * @return the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newSmallArrayList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the top limit values using given comparator and place them as in a
     * full array sort, in descending order.
     *
     * @param &lt;X&gt; the type of elements
     * @param array the array.
     * @param fromInclusive the start index, inclusive
     * @param toExclusive the end index, exclusive
     * @param comp the comparator.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>X</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>sortTopN</name><parameter_list>(<parameter><decl><type><name><name>X</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromInclusive</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>toExclusive</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>X</name></super></argument>&gt;</argument_list></name></type> <name>comp</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>highInclusive</name> <init>= <expr><name><name>array</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>highInclusive</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>toExclusive</name> <operator>&gt;</operator> <name>fromInclusive</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>partialQuickSort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>highInclusive</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>fromInclusive</name></expr></argument>, <argument><expr><name>toExclusive</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>fromInclusive</name></expr></argument>, <argument><expr><name>toExclusive</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Partial quick sort.
     *
     * &lt;p&gt;
     * Works with elements from {@code low} to {@code high} indexes, inclusive.
     * &lt;/p&gt;
     * &lt;p&gt;
     * Moves smallest elements to {@code low..start-1} positions and largest
     * elements to {@code end+1..high} positions. Middle elements are placed
     * into {@code start..end} positions. All these regions aren't fully sorted.
     * &lt;/p&gt;
     *
     * @param &lt;X&gt; the type of elements
     * @param array the array to sort
     * @param low the lower index with data, inclusive
     * @param high the higher index with data, inclusive, {@code high &gt; low}
     * @param comp the comparator
     * @param start the start index of requested region, inclusive
     * @param end the end index of requested region, inclusive, {@code end &gt;= start}
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>X</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>partialQuickSort</name><parameter_list>(<parameter><decl><type><name><name>X</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>,
            <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>X</name></super></argument>&gt;</argument_list></name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>high</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Don't sort blocks entirely contained in the middle region</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>low</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>high</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// use a random pivot to protect against</comment>
        <comment type="line">// the worst case order</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>low</name> <operator>+</operator> <call><name><name>MathUtils</name><operator>.</operator><name>randomInt</name></name><argument_list>(<argument><expr><name>high</name> <operator>-</operator> <name>low</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>X</name></type> <name>pivot</name> <init>= <expr><name><name>array</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>X</name></type> <name>temp</name> <init>= <expr><name><name>array</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>pivot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>comp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <while>while <condition>(<expr><call><name><name>comp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>low</name> <operator>&lt;</operator> <name>j</name> <operator>&amp;&amp;</operator> <comment type="block">/* Intersection with middle region */</comment> <name>start</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>partialQuickSort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>high</name> <operator>&amp;&amp;</operator> <comment type="block">/* Intersection with middle region */</comment> <name>i</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>partialQuickSort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a resource from the resource map.
     *
     * @param name the name of the resource
     * @return the resource data
     * @throws IOException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>RESOURCES</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>loadResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>RESOURCES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>loadResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResourceAsStream</name></name></name><argument_list>(<argument><expr><literal type="string">"data.zip"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResourceAsStream</name></name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>IOUtils</name><operator>.</operator><name>readBytesAndClose</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <init>(<decl><type><name>ZipInputStream</name></type> <name>zipIn</name> <init>= <expr><operator>new</operator> <call><name>ZipInputStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>zipIn</name><operator>.</operator><name>getNextEntry</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>entryName</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entryName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>entryName</name> <operator>=</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>entryName</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>entryName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>IOUtils</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>zipIn</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>zipIn</name><operator>.</operator><name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>out</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>zipIn</name><operator>.</operator><name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// if this happens we have a real problem</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calls a static method via reflection. This will try to use the method
     * where the most parameter classes match exactly (this algorithm is simpler
     * than the one in the Java specification, but works well for most cases).
     *
     * @param classAndMethod a string with the entire class and method name, eg.
     *            "java.lang.System.gc"
     * @param params the method parameters
     * @return the return value from this call
     * @throws Exception on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>callStaticMethod</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classAndMethod</name></decl></parameter>,
            <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>lastDot</name> <init>= <expr><call><name><name>classAndMethod</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>classAndMethod</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastDot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>methodName</name> <init>= <expr><call><name><name>classAndMethod</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>lastDot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>callMethod</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calls an instance method via reflection. This will try to use the method
     * where the most parameter classes match exactly (this algorithm is simpler
     * than the one in the Java specification, but works well for most cases).
     *
     * @param instance the instance on which the call is done
     * @param methodName a string with the method name
     * @param params the method parameters
     * @return the return value from this call
     * @throws Exception on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>callMethod</name><parameter_list>(
            <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>methodName</name></decl></parameter>,
            <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>callMethod</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><call><name><name>instance</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Object</name></type> <name>callMethod</name><parameter_list>(
            <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>methodName</name></decl></parameter>,
            <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Method</name></type> <name>best</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bestMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isStatic</name> <init>= <expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Method</name></type> <name>m</name> <range>: <expr><call><name><name>clazz</name><operator>.</operator><name>getMethods</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Modifier</name><operator>.</operator><name>isStatic</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>isStatic</name> <operator>&amp;&amp;</operator>
                    <call><name><name>m</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>bestMatch</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>bestMatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>best</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NoSuchMethodException</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>best</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new instance. This will try to use the constructor where the
     * most parameter classes match exactly (this algorithm is simpler than the
     * one in the Java specification, but works well for most cases).
     *
     * @param className a string with the entire class, eg. "java.lang.Integer"
     * @param params the constructor parameters
     * @return the newly created object
     * @throws Exception on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>best</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bestMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> <range>: <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getConstructors</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>bestMatch</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>bestMatch</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>best</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NoSuchMethodException</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>best</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>params</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>points</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>pc</name> <init>= <expr><call><name>getNonPrimitiveClass</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>v</name> <init>= <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>vc</name> <init>= <expr><ternary><condition><expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>v</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>vc</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>points</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// can't verify</comment>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>pc</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>vc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>points</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert primitive class names to java.lang.* class names.
     *
     * @param clazz the class (for example: int)
     * @return the non-primitive class (for example: java.lang.Integer)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getNonPrimitiveClass</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clazz</name><operator>.</operator><name>isPrimitive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>clazz</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>boolean</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Boolean</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>byte</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Byte</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>char</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Character</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>double</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Double</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>float</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Float</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>int</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Integer</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>long</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Long</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>short</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Short</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>void</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Void</name><operator>.</operator><name>class</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>clazz</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the specified string to boolean value.
     *
     * @param value
     *            string to parse
     * @param defaultValue
     *            value to return if value is null or on parsing error
     * @param throwException
     *            throw exception on parsing error or return default value instead
     * @return parsed or default value
     * @throws IllegalArgumentException
     *             on parsing error if {@code throwException} is true
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>parseBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>throwException</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">5</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name>throwException</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the system property. If the system property is not set, or if a
     * security exception occurs, the default value is returned.
     *
     * @param key the key
     * @param defaultValue the default value
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>defaultValue</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the system property. If the system property is not set, or if a
     * security exception occurs, the default value is returned.
     *
     * @param key the key
     * @param defaultValue the default value
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the system property. If the system property is not set, or if a
     * security exception occurs, the default value is returned.
     *
     * @param key the key
     * @param defaultValue the default value
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getProperty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>parseBoolean</name><argument_list>(<argument><expr><call><name>getProperty</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Scale the value with the available memory. If 1 GB of RAM is available,
     * the value is returned, if 2 GB are available, then twice the value, and
     * so on.
     *
     * @param value the value to scale
     * @return the scaled value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>scaleForAvailableMemory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>maxMemory</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxMemory</name> <operator>!=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// we are limited by an -XmX parameter</comment>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>*</operator> <name>maxMemory</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>OperatingSystemMXBean</name></type> <name>mxBean</name> <init>= <expr><call><name><name>ManagementFactory</name>
                    <operator>.</operator><name>getOperatingSystemMXBean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// this method is only available on the class</comment>
            <comment type="line">// com.sun.management.OperatingSystemMXBean, which mxBean</comment>
            <comment type="line">// is an instance of under the Oracle JDK, but it is not present on</comment>
            <comment type="line">// Android and other JDK's</comment>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(
                    <argument><expr><literal type="string">"com.sun.management.OperatingSystemMXBean"</literal></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"getTotalPhysicalMemorySize"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>physicalMemorySize</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Number</name><operator>)</operator> <call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>mxBean</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>longValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>*</operator> <name>physicalMemorySize</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// ignore</comment>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Error</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current value of the high-resolution time source.
     *
     * @return time in nanoseconds, never equal to 0
     * @see System#nanoTime()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>currentNanoTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>time</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current value of the high-resolution time source plus the
     * specified offset.
     *
     * @param ms
     *            additional offset in milliseconds
     * @return time in nanoseconds, never equal to 0
     * @see System#nanoTime()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>currentNanoTimePlusMillis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>nanoTimePlusMillis</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current value of the high-resolution time source plus the
     * specified offset.
     *
     * @param nanoTime
     *            time in nanoseconds
     * @param ms
     *            additional offset in milliseconds
     * @return time in nanoseconds, never equal to 0
     * @see System#nanoTime()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>nanoTimePlusMillis</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nanoTime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><name>nanoTime</name> <operator>+</operator> <name>ms</name> <operator>*</operator> <literal type="number">1_000_000L</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>time</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The utility methods will try to use the provided class factories to
     * convert binary name of class to Class object. Used by H2 OSGi Activator
     * in order to provide a class from another bundle ClassLoader.
     */</comment>
    <interface><specifier>public</specifier> interface <name>ClassFactory</name> <block>{

        <comment type="block" format="javadoc">/**
         * Check whether the factory can return the named class.
         *
         * @param name the binary name of the class
         * @return true if this factory can return a valid class for the
         *         provided class name
         */</comment>
        <function_decl><type><name>boolean</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Load the class.
         *
         * @param name the binary name of the class
         * @return the class object
         * @throws ClassNotFoundException If the class is not handle by this
         *             factory
         */</comment>
        <function_decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>loadClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
