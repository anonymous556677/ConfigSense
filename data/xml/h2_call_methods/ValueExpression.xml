<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/ValueExpression.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>Comparison</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexCondition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An expression representing a constant value.
 */</comment>
<class><specifier>public</specifier> class <name>ValueExpression</name> <super_list><extends>extends <super><name>Operation0</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The expression represents ValueNull.INSTANCE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueExpression</name></type> <name>NULL</name> <init>= <expr><operator>new</operator> <call><name>ValueExpression</name><argument_list>(<argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This special expression represents the default value. It is used for
     * UPDATE statements of the form SET COLUMN = DEFAULT. The value is
     * ValueNull.INSTANCE, but should never be accessed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueExpression</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>ValueExpression</name><argument_list>(<argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The expression represents ValueBoolean.TRUE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueExpression</name></type> <name>TRUE</name> <init>= <expr><operator>new</operator> <call><name>ValueExpression</name><argument_list>(<argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The expression represents ValueBoolean.FALSE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValueExpression</name></type> <name>FALSE</name> <init>= <expr><operator>new</operator> <call><name>ValueExpression</name><argument_list>(<argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The value.
     */</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Value</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><name>ValueExpression</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create a new expression with the given value.
     *
     * @param value the value
     * @return the expression
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueExpression</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getBoolean</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ValueExpression</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new expression with the given boolean value.
     *
     * @param value the boolean value
     * @return the expression
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueExpression</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getBoolean</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new expression with the given boolean value.
     *
     * @param value the boolean value
     * @return the expression
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueExpression</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>value</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addIndexCondition</name></name><argument_list>(<argument><expr><call><name><name>IndexCondition</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>FALSE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getNotIfPossible</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getBoolean</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>value</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isConstant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isNullConstant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>this</name> <operator>==</operator> <name>NULL</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isValueSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>DEFAULT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
