<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/wmf/tosvg/WMFPainter.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>wmf</name><operator>.</operator><name>tosvg</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Shape</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Stroke</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>TexturePaint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>font</name><operator>.</operator><name>FontRenderContext</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>font</name><operator>.</operator><name>TextLayout</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Arc2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Line2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Point2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>RoundRectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>ImageObserver</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>AttributedCharacterIterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Polygon2D</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Polyline2D</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>wmf</name><operator>.</operator><name>WMFConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>Platform</name></name>;</import>

<comment type="block" format="javadoc">/**
  * Core class for rendering the WMF image. It is able to render a
  * WMF file in a &lt;code&gt;Graphics&lt;/code&gt; object.
  *
  * @version $Id$
  * @author &lt;a href="mailto:luano@asd.ie"&gt;Luan O'Carroll&lt;/a&gt;
  */</comment>
<class><specifier>public</specifier> class <name>WMFPainter</name> <super_list><extends>extends <super><name>AbstractWMFPainter</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/**
     * Size of the buffer used for reading input WMF files
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INPUT_BUFFER_SIZE</name> <init>= <expr><literal type="number">30720</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>INTEGER_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>scaleX</name></decl>, <decl><type ref="prev"/><name>scaleY</name></decl>, <decl><type ref="prev"/><name>conv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>xOffset</name></decl>, <decl><type ref="prev"/><name>yOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>vpX</name></decl>, <decl><type ref="prev"/><name>vpY</name></decl>, <decl><type ref="prev"/><name>vpW</name></decl>, <decl><type ref="prev"/><name>vpH</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>frgdColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>bkgdColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>opaque</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>transient</specifier> <name>boolean</name></type> <name>firstEffectivePaint</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>BasicStroke</name></type> <name>solid</name>
        <init>= <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>( <argument><expr><literal type="number">1.0f</literal></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>BasicStroke</name></type> <name>textSolid</name>
        <init>= <expr><operator>new</operator> <call><name>BasicStroke</name><argument_list>( <argument><expr><literal type="number">1.0f</literal></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>transient</specifier> <name>ImageObserver</name></type> <name>observer</name> <init>= <expr><operator>new</operator> <class><super><name>ImageObserver</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>imageUpdate</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Basic constructor.
     *  @param currentStore where the WMF records are stored
     *  @param scale the scale of the image
     */</comment>
    <constructor><specifier>public</specifier> <name>WMFPainter</name><parameter_list>(<parameter><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** Basic constructor.
     *  @param scale the scale of the image
     *  @param currentStore where the WMF records are stored
     *  @param xOffset x value for offset
     *  @param yOffset y value for offset
     */</comment>
    <constructor><specifier>public</specifier> <name>WMFPainter</name><parameter_list>(<parameter><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yOffset</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setRecordStore</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TextureFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conv</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xOffset</name></name> <operator>=</operator> <operator>-</operator><name>xOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>yOffset</name></name> <operator>=</operator> <operator>-</operator><name>yOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthUnits</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>scale</name></name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpW</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>xfactor</name>  <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>currentStore</name><operator>.</operator><name>getVpW</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call>
            <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthUnits</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>yfactor</name>  <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>currentStore</name><operator>.</operator><name>getVpH</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getHeightPixels</name></name><argument_list>()</argument_list></call>
            <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getHeightUnits</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>currentStore</name><operator>.</operator><name>getHeightPixels</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xOffset</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>xOffset</name></name> <operator>*</operator> <name>xfactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>yOffset</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>yOffset</name></name> <operator>*</operator> <name>yfactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>scaleX</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>scaleY</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Renders the WMF image(s).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>paint</name><parameter_list>( <parameter><decl><type><name>Graphics</name></type> <name>g</name></decl></parameter> )</parameter_list> <block>{<block_content>
        <comment type="line">// Objects on DC stack;</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>fontHeight</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>fontAngle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>penWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>startX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>startY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>brushObject</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>penObject</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fontObject</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastObjectIdx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stack</name></type> <name>dcStack</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>numRecords</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getNumRecords</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numObjects</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getNumObjects</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>vpX</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vpY</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpY</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vpW</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpW</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vpH</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpH</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name><name>currentStore</name><operator>.</operator><name>isReading</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GdiObject</name></type> <name>gdiObj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>gdiIndex</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" format="javadoc">/** added stroke definition for lines
             */</comment>
            <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2d</name> <init>= <expr><operator>(</operator><name>Graphics2D</name><operator>)</operator><name>g</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>solid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>fontObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>frgdColor</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bkgdColor</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>white</name></name></expr>;</expr_stmt>
            <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numObjects</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                <expr_stmt><expr><name>gdiObj</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>gdiObj</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name>vpW</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><name>vpH</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for <control>( <init><decl><type><name>int</name></type> <name>iRec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRec</name> <operator>&lt;</operator> <name>numRecords</name></expr>;</condition> <incr><expr><name>iRec</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                <decl_stmt><decl><type><name>MetaRecord</name></type> <name>mr</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getRecord</name></name><argument_list>( <argument><expr><name>iRec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                <switch>switch <condition>( <expr><name><name>mr</name><operator>.</operator><name>functionId</name></name></expr> )</condition> <block>{<block_content>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWORG</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>currentStore</name><operator>.</operator><name>setVpX</name></name><argument_list>( <argument><expr><name>vpX</name> <operator>=</operator> <operator>-</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>currentStore</name><operator>.</operator><name>setVpY</name></name><argument_list>( <argument><expr><name>vpY</name> <operator>=</operator> <operator>-</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>vpX</name> <operator>=</operator> <name>vpX</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>vpY</name> <operator>=</operator> <name>vpY</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWORG_EX</name></name></expr>:</case> <comment type="line">// ???? LOOKS SUSPICIOUS</comment>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWEXT</name></name></expr>:</case>
                    <expr_stmt><expr><name>vpW</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>vpH</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


                    <expr_stmt><expr><name>scaleX</name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>scaleY</name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>solid</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>scaleX</name><operator>*</operator><literal type="number">2</literal></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>,
                           <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                      <comment type="line">// Handled in the read function.</comment>
                      <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETVIEWPORTORG</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETVIEWPORTEXT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OFFSETWINDOWORG</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SCALEWINDOWEXT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OFFSETVIEWPORTORG</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SCALEVIEWPORTEXT</name></name></expr>:</case>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETPOLYFILLMODE</name></name></expr>:</case>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEPENINDIRECT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>penStyle</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Color</name></type> <name>newClr</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>( <expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_NULL</name></name></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><name>newClr</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>white</name></name></expr>;</expr_stmt>      <comment type="line">// (255,255,255)</comment>
                            <comment type="line">//objIndex = numObjects + 8;</comment>
                            <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>NULL_PEN</name></expr></argument>, <argument><expr><name>newClr</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>penWidth</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>setStroke</name><argument_list>(<argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>penStyle</name></expr></argument>, <argument><expr><name>penWidth</name></expr></argument>, <argument><expr><name>scaleX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>newClr</name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>PEN</name></expr></argument>, <argument><expr><name>newClr</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEBRUSHINDIRECT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>brushStyle</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Color</name></type> <name>clr</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>( <expr><name>brushStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>BS_SOLID</name></name></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>BRUSH</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>brushStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>BS_HATCHED</name></name></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>hatch</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>opaque</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>paint</name> <operator>=</operator> <call><name><name>TextureFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTexture</name><argument_list>(<argument><expr><name>hatch</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name>paint</name> <operator>=</operator> <call><name><name>TextureFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTexture</name><argument_list>(<argument><expr><name>hatch</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>bkgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>paint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>BRUSH</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>black</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>NULL_BRUSH</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>clr</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>black</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>NULL_BRUSH</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEFONTINDIRECT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name>scaleY</name> <operator>*</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>charset</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>italic</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>style</name> <init>= <expr><ternary><condition><expr><name>italic</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>Font</name><operator>.</operator><name>ITALIC</name></name></expr> </then><else>: <expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>style</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>weight</name> <operator>&gt;</operator> <literal type="number">400</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>Font</name><operator>.</operator><name>PLAIN</name></name></expr></else></ternary></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>String</name></type> <name>face</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>StringRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>text</name></expr></init></decl>;</decl_stmt>
                        <comment type="line">// management of font names</comment>
                        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <while>while   <condition>(<expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <call><name><name>face</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                                <operator>(</operator><operator>(</operator><call><name><name>Character</name><operator>.</operator><name>isLetterOrDigit</name></name><argument_list>(<argument><expr><call><name><name>face</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                                 <operator>(</operator><call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>face</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></while>
                        <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>face</name> <operator>=</operator> <call><name><name>face</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>face</name> <operator>=</operator> <literal type="string">"System"</literal></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <if_stmt><if>if <condition>( <expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>-</operator><name>size</name></expr> <comment type="block">/* * -1.3 */</comment>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>fontHeight</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>deriveFont</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>underline</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>strikeOut</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>orient</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>escape</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>WMFFont</name></type> <name>wf</name> <init>= <expr><operator>new</operator> <call><name>WMFFont</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>,
                            <argument><expr><name>strikeOut</name></expr></argument>, <argument><expr><name>italic</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name>orient</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>FONT</name></expr></argument>, <argument><expr><name>wf</name></expr></argument> , <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEBRUSH</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEPATTERNBRUSH</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEBITMAPINDIRECT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEBITMAP</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEREGION</name></name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>PALETTE</name></expr></argument>, <argument><expr><name>INTEGER_0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEPALETTE</name></name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>OBJ_REGION</name></expr></argument>, <argument><expr><name>INTEGER_0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SELECTPALETTE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_REALIZEPALETTE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ANIMATEPALETTE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETPALENTRIES</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_RESIZEPALETTE</name></name></expr>:</case>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SELECTOBJECT</name></name></expr>:</case>
                    <expr_stmt><expr><name>gdiIndex</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator> <name>gdiIndex</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content> <comment type="line">// Stock Object</comment>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>( <expr><name>gdiIndex</name> <operator>&gt;=</operator> <name>numObjects</name></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>gdiIndex</name> <operator>-=</operator> <name>numObjects</name></expr>;</expr_stmt>

                        <switch>switch <condition>( <expr><name>gdiIndex</name></expr> )</condition> <block>{<block_content>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_NULL_BRUSH</name></name></expr>:</case>
                            <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_NULL_PEN</name></name></expr>:</case>
                            <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_WHITE_BRUSH</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_LTGRAY_BRUSH</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_GRAY_BRUSH</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_DKGRAY_BRUSH</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_BLACK_BRUSH</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_WHITE_PEN</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_BLACK_PEN</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_OEM_FIXED_FONT</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_ANSI_FIXED_FONT</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_ANSI_VAR_FONT</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_SYSTEM_FONT</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_DEVICE_DEFAULT_FONT</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_DEFAULT_PALETTE</name></name></expr>:</case>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OBJ_SYSTEM_FIXED_FONT</name></name></expr>:</case>
                            <break>break;</break>
                        </block_content>}</block></switch>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>gdiObj</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>gdiIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>gdiObj</name><operator>.</operator><name>used</name></name></expr> )</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <switch>switch<condition>( <expr><name><name>gdiObj</name><operator>.</operator><name>type</name></name></expr> )</condition> <block>{<block_content>
                    <case>case <expr><name>PEN</name></expr>:</case>
                        <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><operator>(</operator><name>Color</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>penObject</name> <operator>=</operator> <name>gdiIndex</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>BRUSH</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name><name>gdiObj</name><operator>.</operator><name>obj</name></name> <operator>instanceof</operator> <name>Color</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><operator>(</operator><name>Color</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gdiObj</name><operator>.</operator><name>obj</name></name> <operator>instanceof</operator> <name>Paint</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><operator>(</operator><name>Paint</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><operator>(</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <name>gdiIndex</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>FONT</name></expr>:</case> <block>{<block_content>
                        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wmfFont</name></name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>WMFFont</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name><operator>)</operator></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> <init>= <expr><name><name>this</name><operator>.</operator><name>wmfFont</name><operator>.</operator><name>font</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>fontObject</name> <operator>=</operator> <name>gdiIndex</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><name>NULL_PEN</name></expr>:</case>
                        <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>NULL_BRUSH</name></expr>:</case>
                        <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></switch>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DELETEOBJECT</name></name></expr>:</case>
                    <expr_stmt><expr><name>gdiIndex</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>gdiObj</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>gdiIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>( <expr><name>gdiIndex</name> <operator>==</operator> <name>brushObject</name></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>gdiIndex</name> <operator>==</operator> <name>penObject</name></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>gdiIndex</name> <operator>==</operator> <name>fontObject</name></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><name>fontObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>gdiObj</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYPOLYGON</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>numPolygons</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>pts</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[ <expr><name>numPolygons</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>( <init><decl><type><name>int</name></type> <name>ip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ip</name> <operator>&lt;</operator> <name>numPolygons</name></expr>;</condition> <incr><expr><name>ip</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                            <expr_stmt><expr><name><name>pts</name><index>[ <expr><name>ip</name></expr> ]</index></name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>ip</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>numPolygons</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>List</name></type> <name>v</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>( <argument><expr><name>numPolygons</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numPolygons</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>pts</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>xpts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>ypts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                                <expr_stmt><expr><name><name>xpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator><name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>offset</name> <operator>+</operator> <name>k</name><operator>*</operator><literal type="number">2</literal></expr></argument>   )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>ypts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator><name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>offset</name> <operator>+</operator> <name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                            </block_content>}</block></for>

                            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>count</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name>Polygon2D</name></type> <name>pol</name> <init>= <expr><operator>new</operator> <call><name>Polygon2D</name><argument_list>(<argument><expr><name>xpts</name></expr></argument>, <argument><expr><name>ypts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <comment type="block">/* need to do this for POLYPOLYGON, because only
                         * GeneralPaths can handle filling for complex WMF shapes, so
                         * we need to get all the Polygons and then convert them to a GeneralPath
                         */</comment>
                        <if_stmt><if>if <condition>( <expr><name>brushObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>setBrushPaint</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>fillPolyPolygon</name><argument_list>(<argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <comment type="line">// painting with NULL PEN</comment>
                        <if_stmt><if>if <condition>(<expr><name>penObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>setPenColor</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>drawPolyPolygon</name><argument_list>(<argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <break>break;</break>
                    </block_content>}</block>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYGON</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>_xpts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[ <expr><name>count</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>_ypts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[ <expr><name>count</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                            <expr_stmt><expr><name><name>_xpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>_ypts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <decl_stmt><decl><type><name>Polygon2D</name></type> <name>pol</name> <init>= <expr><operator>new</operator> <call><name>Polygon2D</name><argument_list>(<argument><expr><name>_xpts</name></expr></argument>, <argument><expr><name>_ypts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>pol</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_MOVETO</name></name></expr>:</case>
                    <expr_stmt><expr><name>startX</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>startY</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_LINETO</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>endX</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>endY</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <comment type="line">// painting with NULL PEN</comment>
                        <decl_stmt><decl><type><name><name>Line2D</name><operator>.</operator><name>Float</name></name></type> <name>line</name> <init>= <expr><operator>new</operator> <call><name><name>Line2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>, <argument><expr><name>startY</name></expr></argument>, <argument><expr><name>endX</name></expr></argument>, <argument><expr><name>endY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>paintWithPen</name><argument_list>(<argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>startX</name> <operator>=</operator> <name>endX</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>startY</name> <operator>=</operator> <name>endY</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYLINE</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>_xpts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[ <expr><name>count</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>_ypts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[ <expr><name>count</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                            <expr_stmt><expr><name><name>_xpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>_ypts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <decl_stmt><decl><type><name>Polyline2D</name></type> <name>pol</name> <init>= <expr><operator>new</operator> <call><name>Polyline2D</name><argument_list>(<argument><expr><name>_xpts</name></expr></argument>, <argument><expr><name>_ypts</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>paintWithPen</name><argument_list>(<argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>pol</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_RECTANGLE</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>x2</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y1</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y2</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name></type> <name>rec</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name><operator>-</operator><name>x1</name></expr></argument>, <argument><expr><name>y2</name><operator>-</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ROUNDRECT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>x2</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>x3</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y1</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y2</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y3</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>RoundRectangle2D</name></type> <name>rec</name> <init>=
                            <expr><operator>new</operator> <call><name><name>RoundRectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name><operator>-</operator><name>x1</name></expr></argument>, <argument><expr><name>y2</name><operator>-</operator><name>y1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ELLIPSE</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>y1</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>y2</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name><name>Ellipse2D</name><operator>.</operator><name>Float</name></name></type> <name>el</name> <init>= <expr><operator>new</operator> <call><name><name>Ellipse2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name><operator>-</operator><name>x1</name></expr></argument>, <argument><expr><name>y2</name><operator>-</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTALIGN</name></name></expr>:</case>
                    <expr_stmt><expr><name>currentHorizAlign</name> <operator>=</operator>
                            <call><name><name>WMFUtilities</name><operator>.</operator><name>getHorizontalAlignment</name></name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currentVertAlign</name> <operator>=</operator>
                            <call><name><name>WMFUtilities</name><operator>.</operator><name>getVerticalAlignment</name></name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTCOLOR</name></name></expr>:</case>
                    <expr_stmt><expr><name>frgdColor</name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>frgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETBKCOLOR</name></name></expr>:</case>
                    <expr_stmt><expr><name>bkgdColor</name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>( <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bkgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_EXTTEXTOUT</name></name></expr>:</case>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bstr</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>sr</name> <init>= <expr><call><name><name>WMFUtilities</name><operator>.</operator><name>decodeString</name></name><argument_list>(<argument><expr><name>wmfFont</name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>( <expr><name>frgdColor</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><name>frgdColor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name><name>Point2D</name><operator>.</operator><name>Double</name></name></type> <name>pen</name> <init>= <expr><operator>new</operator> <call><name><name>Point2D</name><operator>.</operator><name>Double</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>gp</name> <init>= <expr><operator>new</operator> <call><name>GeneralPath</name><argument_list>( <argument><expr><name><name>GeneralPath</name><operator>.</operator><name>WIND_NON_ZERO</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TextLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>TextLayout</name><argument_list>( <argument><expr><name>sr</name></expr></argument>, <argument><expr><call><name><name>g2d</name><operator>.</operator><name>getFont</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>frc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>clipped</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Shape</name></type> <name>clip</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                        <comment type="line">// process clipped texts</comment>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name><name>WMFConstants</name><operator>.</operator><name>ETO_CLIPPED</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>clipped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>y2</name> <operator>=</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>clip</name> <operator>=</operator> <call><name><name>g2d</name><operator>.</operator><name>getClip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setClip</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>getVerticalAlignmentValue</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>currentVertAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>drawString</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>,
                            <argument><expr><call><name>getCharacterIterator</name><argument_list>(<argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name>wmfFont</name></expr></argument>, <argument><expr><name>currentHorizAlign</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>wmfFont</name></expr></argument>, <argument><expr><name>currentHorizAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>clipped</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setClip</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch></try>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_TEXTOUT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DRAWTEXT</name></name></expr>:</case>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bstr</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>sr</name> <init>= <expr><call><name><name>WMFUtilities</name><operator>.</operator><name>decodeString</name></name><argument_list>(<argument><expr><name>wmfFont</name></expr></argument>, <argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>( <expr><name>frgdColor</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><name>frgdColor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name><name>Point2D</name><operator>.</operator><name>Double</name></name></type> <name>pen</name> <init>= <expr><operator>new</operator> <call><name><name>Point2D</name><operator>.</operator><name>Double</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>gp</name> <init>= <expr><operator>new</operator> <call><name>GeneralPath</name><argument_list>( <argument><expr><name><name>GeneralPath</name><operator>.</operator><name>WIND_NON_ZERO</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TextLayout</name></type> <name>layout</name> <init>= <expr><operator>new</operator> <call><name>TextLayout</name><argument_list>( <argument><expr><name>sr</name></expr></argument>, <argument><expr><call><name><name>g2d</name><operator>.</operator><name>getFont</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>frc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>getVerticalAlignmentValue</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>currentVertAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>drawString</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>g2d</name></expr></argument>,
                            <argument><expr><call><name>getCharacterIterator</name><argument_list>(<argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name>wmfFont</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>wmfFont</name></expr></argument>, <argument><expr><name>currentHorizAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch></try>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ARC</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PIE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CHORD</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>double</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>xstart</name></decl>, <decl><type ref="prev"/><name>ystart</name></decl>, <decl><type ref="prev"/><name>xend</name></decl>, <decl><type ref="prev"/><name>yend</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>left</name>   <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>top</name>    <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>right</name>  <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bottom</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>xstart</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ystart</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>xend</name>   <operator>=</operator> <name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>yend</name>   <operator>=</operator> <name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setBrushPaint</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>double</name></type> <name>cx</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>cy</name> <init>= <expr><name>top</name> <operator>+</operator> <operator>(</operator><name>bottom</name> <operator>-</operator> <name>top</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>startAngle</name> <init>= <expr><operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>toDegrees</name></name><argument_list>( <argument><expr><call><name><name>Math</name><operator>.</operator><name>atan2</name></name><argument_list>(<argument><expr><name>ystart</name> <operator>-</operator> <name>cy</name></expr></argument>, <argument><expr><name>xstart</name> <operator>-</operator> <name>cx</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>endAngle</name>   <init>= <expr><operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>toDegrees</name></name><argument_list>( <argument><expr><call><name><name>Math</name><operator>.</operator><name>atan2</name></name><argument_list>(<argument><expr><name>yend</name> <operator>-</operator> <name>cy</name></expr></argument>, <argument><expr><name>xend</name> <operator>-</operator> <name>cx</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>double</name></type> <name>extentAngle</name> <init>= <expr><name>endAngle</name> <operator>-</operator> <name>startAngle</name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>extentAngle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>extentAngle</name> <operator>+=</operator> <literal type="number">360</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>startAngle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>startAngle</name> <operator>+=</operator><literal type="number">360</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>


                        <decl_stmt><decl><type><name><name>Arc2D</name><operator>.</operator><name>Double</name></name></type> <name>arc</name></decl>;</decl_stmt>
                        <switch>switch<condition>(<expr><name><name>mr</name><operator>.</operator><name>functionId</name></name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ARC</name></name></expr>:</case>
                            <expr_stmt><expr><name>arc</name> <operator>=</operator> <operator>new</operator> <call><name><name>Arc2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,
                                                   <argument><expr><name>right</name> <operator>-</operator> <name>left</name></expr></argument>, <argument><expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></argument>,
                                                   <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>extentAngle</name></expr></argument>,
                                                   <argument><expr><name><name>Arc2D</name><operator>.</operator><name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PIE</name></name></expr>:</case>
                            <expr_stmt><expr><name>arc</name> <operator>=</operator> <operator>new</operator> <call><name><name>Arc2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,
                                                   <argument><expr><name>right</name> <operator>-</operator> <name>left</name></expr></argument>, <argument><expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></argument>,
                                                   <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>extentAngle</name></expr></argument>,
                                                   <argument><expr><name><name>Arc2D</name><operator>.</operator><name>PIE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>arc</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// g2d.fill(arc);</comment>
                            <break>break;</break>
                        <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CHORD</name></name></expr>:</case>
                            <expr_stmt><expr><name>arc</name> <operator>=</operator> <operator>new</operator> <call><name><name>Arc2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>,
                                                   <argument><expr><name>right</name> <operator>-</operator> <name>left</name></expr></argument>,
                                                   <argument><expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></argument>,
                                                   <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>extentAngle</name></expr></argument>,
                                                   <argument><expr><name><name>Arc2D</name><operator>.</operator><name>CHORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>, <argument><expr><name>arc</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></switch>
                        <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SAVEDC</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>penWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>startY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>brushObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>penObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>fontObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>( <argument><expr><name>frgdColor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dcStack</name><operator>.</operator><name>push</name></name><argument_list>( <argument><expr><name>bkgdColor</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_RESTOREDC</name></name></expr>:</case>
                    <expr_stmt><expr><name>bkgdColor</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>frgdColor</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fontObject</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>startY</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>startX</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>penWidth</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <operator>(</operator><call><name><name>dcStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYBEZIER16</name></name></expr>:</case>
                    <try>try
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>setPenColor</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><name>int</name></type> <name>pointCount</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>bezierCount</name> <init>= <expr><operator>(</operator> <name>pointCount</name><operator>-</operator><literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>float</name></type> <name>_startX</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>float</name></type> <name>_startY</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>gp</name> <init>= <expr><operator>new</operator> <call><name>GeneralPath</name><argument_list>( <argument><expr><name><name>GeneralPath</name><operator>.</operator><name>WIND_NON_ZERO</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>gp</name><operator>.</operator><name>moveTo</name></name><argument_list>( <argument><expr><name>_startX</name></expr></argument>, <argument><expr><name>_startY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                            <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bezierCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                                <decl_stmt><decl><type><name>int</name></type> <name>j6</name> <init>= <expr><name>j</name><operator>*</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>float</name></type> <name>cp1X</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>float</name></type> <name>cp1Y</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>float</name></type> <name>cp2X</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>float</name></type> <name>cp2Y</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>float</name></type> <name>endX</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator> <name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>float</name></type> <name>endY</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator> <name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><name>j6</name><operator>+</operator><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><call><name><name>gp</name><operator>.</operator><name>curveTo</name></name><argument_list>( <argument><expr><name>cp1X</name></expr></argument>, <argument><expr><name>cp1Y</name></expr></argument>, <argument><expr><name>cp2X</name></expr></argument>, <argument><expr><name>cp2Y</name></expr></argument>, <argument><expr><name>endX</name></expr></argument>, <argument><expr><name>endY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>_startX</name> <operator>=</operator> <name>endX</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>_startY</name> <operator>=</operator> <name>endY</name></expr>;</expr_stmt>
                            </block_content>}</block></for>
                                <comment type="line">//gp.closePath();</comment>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>( <argument><expr><name>solid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>draw</name></name><argument_list>( <argument><expr><name>gp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        </block_content>}</block>
                    <catch>catch <parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch></try>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_EXCLUDECLIPRECT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_INTERSECTCLIPRECT</name></name></expr>:</case>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OFFSETCLIPRGN</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SELECTCLIPREGION</name></name></expr>:</case>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETMAPMODE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETRELABS</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETSTRETCHBLTMODE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTCHAREXTRA</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTJUSTIFICATION</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_FLOODFILL</name></name></expr>:</case>
                    <break>break;</break>

                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETBKMODE</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>opaque</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>OPAQUE</name></name><operator>)</operator></expr>;</expr_stmt>
                    </block_content>}</block>
                    <break>break;</break>

                    <comment type="line">//UPDATED : added SETROP2</comment>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETROP2</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>rop</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>ok</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_BLACKNESS</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>paint</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>black</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_WHITENESS</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>paint</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>white</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PATCOPY</name></name></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>( <expr><name>brushObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
                                <expr_stmt><expr><name>paint</name> <operator>=</operator> <call><name>getStoredPaint</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>paint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name>setBrushPaint</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PATBLT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>rop</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>left</name> <init>= <expr><name>scaleX</name> <operator>*</operator> <operator>(</operator><name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>top</name>  <init>= <expr><name>scaleY</name> <operator>*</operator> <operator>(</operator><name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>ok</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_BLACKNESS</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>paint</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>black</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_WHITENESS</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>paint</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>white</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rop</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PATCOPY</name></name></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>( <expr><name>brushObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
                                <expr_stmt><expr><name>paint</name> <operator>=</operator> <call><name>getStoredPaint</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>Color</name></type> <name>oldClr</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>paint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name>setBrushPaint</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>

                            <comment type="block">/* avoid to draw a huge rectangle on beginning of the drawing
                             * This is caused by the fact that a WMF file always seems to contain
                             * a META_PATBLT rectangle at its beginning.
                             */</comment>
                            <decl_stmt><decl><type><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name></type> <name>rec</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>oldClr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBSTRETCHBLT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>heightDst</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>widthDst</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>widthDst</name> <operator>=</operator> <name>widthDst</name> <operator>*</operator> <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>heightDst</name> <operator>=</operator> <name>heightDst</name> <operator>*</operator> <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>img</name> <init>= <expr><call><name>getImage</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>img</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>widthDst</name><operator>)</operator></expr></argument>,
                            <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>heightDst</name><operator>)</operator></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>width</name></expr></argument>,
                            <argument><expr><name>sy</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>bkgdColor</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                    <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_STRETCHDIB</name></name></expr>:</case>  <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator>
                            <operator>(</operator><name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator>
                            <operator>(</operator><name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator> <call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>heightDst</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>widthDst</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>elementAt</name></name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>widthDst</name> <operator>=</operator> <name>widthDst</name> <operator>*</operator> <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>heightDst</name> <operator>=</operator> <name>heightDst</name> <operator>*</operator> <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>img</name> <init>= <expr><call><name>getImage</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>img</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>widthDst</name><operator>)</operator></expr></argument>,
                                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>heightDst</name><operator>)</operator></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>width</name></expr></argument>,
                                    <argument><expr><name>sy</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>bkgdColor</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <comment type="line">//g2d.setComposite(AlphaComposite.SrcOver);</comment>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>widthDst</name><operator>)</operator></expr></argument>,
                                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>heightDst</name><operator>)</operator></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>width</name></expr></argument>,
                                    <argument><expr><name>sy</name> <operator>+</operator> <name>height</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBBITBLT</name></name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>rop</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator>
                                        <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>width</name>  <init>= <expr><operator>(</operator><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator>
                                        <name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><operator>(</operator><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpWFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator>
                                    <operator>(</operator><name>vpY</name> <operator>+</operator> <name>yOffset</name> <operator>+</operator>
                                     <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>conv</name> <operator>*</operator> <call><name><name>currentStore</name><operator>.</operator><name>getVpHFactor</name></name><argument_list>()</argument_list></call> <operator>*</operator>
                                    <operator>(</operator><name>vpX</name> <operator>+</operator> <name>xOffset</name> <operator>+</operator>
                                     <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>mr</name><operator>.</operator><name>ElementAt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mr</name> <operator>instanceof</operator> <name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>

                            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>img</name> <init>= <expr><call><name>getImage</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>img</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>int</name></type> <name>withSrc</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>int</name></type> <name>heightSrc</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr></argument>,
                                                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>width</name><operator>)</operator></expr></argument>,
                                                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>height</name><operator>)</operator></expr></argument>,
                                                  <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>,
                                                  <argument><expr><name>sx</name> <operator>+</operator> <name>withSrc</name></expr></argument>,
                                                  <argument><expr><name>sy</name> <operator>+</operator> <name>heightSrc</name></expr></argument>,
                                                  <argument><expr><name>bkgdColor</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <comment type="line">//g2d.setComposite(AlphaComposite.SrcOver);</comment>
                                    <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>dy</name></expr></argument>,
                                                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dx</name> <operator>+</operator> <name>width</name><operator>)</operator></expr></argument>,
                                                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dy</name> <operator>+</operator> <name>height</name><operator>)</operator></expr></argument>,
                                                  <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>,
                                                  <argument><expr><name>sx</name> <operator>+</operator> <name>withSrc</name></expr></argument>,
                                                  <argument><expr><name>sy</name> <operator>+</operator> <name>heightSrc</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>Color</name></type> <name>col</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bkgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>,
                                                               <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                 <break>break;</break>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBCREATEPATTERNBRUSH</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>objIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><operator>)</operator><name>mr</name><operator>)</operator><operator>.</operator><name>bstr</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>objIndex</name> <operator>=</operator> <call><name>addObjectAt</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>BRUSH</name></expr></argument>,
                                            <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>objIndex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            <break>break;</break>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETPIXEL</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_BITBLT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_STRETCHBLT</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ESCAPE</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_FILLREGION</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_FRAMEREGION</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_INVERTREGION</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PAINTREGION</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETMAPPERFLAGS</name></name></expr>:</case>
                <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETDIBTODEV</name></name></expr>:</case>
                <default>default:</default>
                    <block>{<block_content>
                    </block_content>}</block>
                    <comment type="line">//os &lt;&lt; " ------Unknown Function------";</comment>
                    <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Dimension</name></type> <name>d</name> <init>= <expr><call><name>getImageDimension</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>img</name> <init>= <expr><call><name>getImage</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>rec</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TexturePaint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>TexturePaint</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>paint</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Draw an AttributedCharacterIterator taking into account the following characteristics. :
     *  &lt;ul&gt;
     *  &lt;li&gt;the orientation (escapement) of the WMF Font&lt;/li&gt;
     *  &lt;li&gt;the aligment of the text&lt;/li&gt;
     *  &lt;/ul&gt;
     *  &lt;p&gt;The other characteristics of the text, deriving from the WMF Font, must have been
     *  collected before to constitute the AttributedCharacterIterator.&lt;/p&gt;
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>AttributedCharacterIterator</name></type> <name>ati</name></decl></parameter>,
        <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>TextLayout</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>WMFFont</name></type> <name>wmfFont</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name><name>wmfFont</name><operator>.</operator><name>escape</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fillTextBackground</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>layout</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_CENTER</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>ati</name></expr></argument>, <argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_RIGHT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>ati</name></expr></argument>, <argument><expr><name>x</name><operator>-</operator><name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>ati</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>tr</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>wmfFont</name><operator>.</operator><name>escape</name></name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">1800f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>layout</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>layout</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_CENTER</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_RIGHT</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>width</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fillTextBackground</name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Stroke</name></type> <name>_st</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>textSolid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>ati</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fillTextBackground</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>,
        <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>TextLayout</name></type> <name>layout</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>float</name></type> <name>_x</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_CENTER</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>_x</name> <operator>=</operator> <name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>align</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_RIGHT</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>_x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name><name>WMFConstants</name><operator>.</operator><name>ETO_OPAQUE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>tr</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bkgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>tr</name> <init>= <expr><call><name><name>g2d</name><operator>.</operator><name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>bkgdColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Just to be consistent with PolyPolygon filling.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawPolyPolygon</name><parameter_list>(<parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>List</name></type> <name>pols</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>pol1</name> <range>: <expr><name>pols</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Polygon2D</name></type> <name>pol</name> <init>= <expr><operator>(</operator><name>Polygon2D</name><operator>)</operator> <operator>(</operator><name>pol1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>pol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Need to do this for POLYPOLYGON, because only GeneralPaths can handle complex
     * WMF shapes.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>fillPolyPolygon</name><parameter_list>(<parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>List</name></type> <name>pols</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// if there is only one Polygon, there is no need of a path</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>pols</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><operator>(</operator><name>Polygon2D</name><operator>)</operator><operator>(</operator><call><name><name>pols</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>GeneralPath</name><argument_list>(<argument><expr><name><name>GeneralPath</name><operator>.</operator><name>WIND_EVEN_ODD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>pol1</name> <range>: <expr><name>pols</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Polygon2D</name></type> <name>pol</name> <init>= <expr><operator>(</operator><name>Polygon2D</name><operator>)</operator> <name>pol1</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>pol</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setStroke</name><parameter_list>(<parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>penStyle</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>penWidth</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>_width</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>penWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>_width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>_width</name> <operator>=</operator> <name>penWidth</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>_scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Platform</name><operator>.</operator><name>getScreenResolution</name></name><argument_list>()</argument_list></call> <operator>/</operator>
            <call><name><name>currentStore</name><operator>.</operator><name>getMetaFileUnitsPerInch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// need to do this, to put the width in sync with the general scale of the image</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><name>scale</name>  <operator>/</operator> <name>_scale</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>_width</name> <operator>=</operator> <name>_width</name> <operator>*</operator> <name>_scale</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>_scale</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1f</literal><operator>/</operator><literal type="number">350f</literal></expr>;</expr_stmt> <comment type="line">// necessary to handle dash patterns</comment>

        <decl_stmt><decl><type><name>BasicStroke</name></type> <name>stroke</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_SOLID</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_DOT</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dash</name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">5f</literal> <operator>*</operator> <name>_scale</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>, <argument><expr><literal type="number">10f</literal> <operator>*</operator> <name>_scale</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_DASH</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dash</name> <init>= <expr><block>{<expr><literal type="number">5f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>, <argument><expr><literal type="number">10f</literal> <operator>*</operator> <name>_scale</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_DASHDOT</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dash</name> <init>= <expr><block>{<expr><literal type="number">5f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">1.0f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>, <argument><expr><literal type="number">10f</literal> <operator>*</operator> <name>_scale</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>penStyle</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_PS_DASHDOTDOT</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dash</name> <init>= <expr><block>{<expr><literal type="number">5f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">1.0f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">1f</literal> <operator>*</operator> <name>_scale</name></expr>, <expr><literal type="number">2f</literal> <operator>*</operator> <name>_scale</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>, <argument><expr><literal type="number">15f</literal> <operator>*</operator> <name>_scale</name></expr></argument>, <argument><expr><name>dash</name></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>stroke</name> <operator>=</operator> <operator>new</operator> <call><name>BasicStroke</name><argument_list>(<argument><expr><name>_width</name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name><operator>.</operator><name>JOIN_ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setPenColor</name><parameter_list>( <parameter><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>penObject</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>penObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GdiObject</name></type> <name>gdiObj</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>penObject</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><operator>(</operator><name>Color</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>penObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getHorizontalAlignement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>align</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt> <comment type="line">// skip baseline alignment</comment>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>  <comment type="line">// skip bottom aligment</comment>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>WMFConstants</name><operator>.</operator><name>TA_CENTER</name></name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>WMFConstants</name><operator>.</operator><name>TA_RIGHT</name></name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><name><name>WMFConstants</name><operator>.</operator><name>TA_LEFT</name></name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setBrushPaint</name><parameter_list>( <parameter><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brushObject</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>brushObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GdiObject</name></type> <name>gdiObj</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>gdiObj</name><operator>.</operator><name>obj</name></name> <operator>instanceof</operator> <name>Color</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setColor</name></name><argument_list>( <argument><expr><operator>(</operator><name>Color</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gdiObj</name><operator>.</operator><name>obj</name></name> <operator>instanceof</operator> <name>Paint</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>( <argument><expr><operator>(</operator><name>Paint</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>brushObject</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Paint</name></type> <name>getStoredPaint</name><parameter_list>(<parameter><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>object</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>GdiObject</name></type> <name>gdiObj</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getObject</name></name><argument_list>( <argument><expr><name>object</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>gdiObj</name><operator>.</operator><name>obj</name></name> <operator>instanceof</operator> <name>Paint</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>Paint</name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>getPaint</name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><name><name>gdiObj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Draw or / and fill the Shape, depending on the pen or brush Objects selected.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>paint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>brushObject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>penObject</name></decl></parameter>, <parameter><decl><type><name>Shape</name></type> <name>shape</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>brushObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><call><name>getStoredPaint</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>firstEffectivePaint</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>paint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setBrushPaint</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>brushObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// FIXED : painting with NULL PEN</comment>
        <if_stmt><if>if <condition>(<expr><name>penObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><call><name>getStoredPaint</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>firstEffectivePaint</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>paint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setPenColor</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Draw the Shape, depending on the pen or brush Objects selected.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>paintWithPen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>penObject</name></decl></parameter>, <parameter><decl><type><name>Shape</name></type> <name>shape</name></decl></parameter>, <parameter><decl><type><name>Graphics2D</name></type> <name>g2d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>penObject</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><call><name>getStoredPaint</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>firstEffectivePaint</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>paint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setPenColor</name><argument_list>( <argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>g2d</name></expr></argument>, <argument><expr><name>penObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>firstEffectivePaint</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>float</name></type> <name>getVerticalAlignmentValue</name><parameter_list>(<parameter><decl><type><name>TextLayout</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertAlign</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>vertAlign</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_BOTTOM</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><call><name><name>layout</name><operator>.</operator><name>getDescent</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>vertAlign</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>TA_TOP</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>layout</name><operator>.</operator><name>getAscent</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the WMFRecordStore this WMFPainter renders
     */</comment>
    <function><type><specifier>public</specifier> <name>WMFRecordStore</name></type> <name>getRecordStore</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>currentStore</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>transient</specifier> <name>BufferedInputStream</name></type> <name>bufStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>
