<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/SVGAnimationEngine.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>AnimationEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>AnimationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>AnimationTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGOMDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGOMElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGStylableElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>timing</name><operator>.</operator><name>TimedDocumentRoot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>timing</name><operator>.</operator><name>TimedElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableAngleValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableAngleOrIdentValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableBooleanValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableIntegerValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableLengthValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableLengthListValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableLengthOrIdentValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableNumberValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableNumberListValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableNumberOrPercentageValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatablePathDataValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatablePointListValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatablePreserveAspectRatioValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableNumberOrIdentValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableRectValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableStringValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatableColorValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>values</name><operator>.</operator><name>AnimatablePaintValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSStylableElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>StyleMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>value</name><operator>.</operator><name>FloatValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>value</name><operator>.</operator><name>StringValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>DefaultPreserveAspectRatioHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>FloatArrayProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>DefaultLengthHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>LengthArrayProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>LengthHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>LengthListParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>LengthParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>NumberListParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>PathArrayProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>PathParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>PointsParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>PreserveAspectRatioHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>PreserveAspectRatioParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>RunnableQueue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SMILConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>constants</name><operator>.</operator><name>XMLConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>css</name><operator>.</operator><name>CSSPrimitiveValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>css</name><operator>.</operator><name>CSSStyleDeclaration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>css</name><operator>.</operator><name>CSSValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGAngle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGLength</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGPreserveAspectRatio</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An AnimationEngine for SVG documents.
 *
 * @author &lt;a href="mailto:cam%40mcc%2eid%2eau"&gt;Cameron McCormack&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>SVGAnimationEngine</name> <super_list><extends>extends <super><name>AnimationEngine</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The BridgeContext to use for value parsing.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>ctx</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The CSSEngine used for CSS value parsing.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSEngine</name></type> <name>cssEngine</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether animation processing has started.  This affects whether
     * animation element bridges add their animation on to the initial
     * bridge list, or process them immediately.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>started</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The Runnable that ticks the document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimationTickRunnable</name></type> <name>animationTickRunnable</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The initial time that will be seeked to when the animation engine starts,
     * as set by {@link #setCurrentTime}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>initialStartTime</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The factory for unparsed string values.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UncomputedAnimatableStringValueFactory</name></type>
        <name>uncomputedAnimatableStringValueFactory</name> <init>=
            <expr><operator>new</operator> <call><name>UncomputedAnimatableStringValueFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The factory for length-or-ident values.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimatableLengthOrIdentFactory</name></type>
        <name>animatableLengthOrIdentFactory</name> <init>= <expr><operator>new</operator> <call><name>AnimatableLengthOrIdentFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The factory for number-or-ident values.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimatableNumberOrIdentFactory</name></type>
        <name>animatableNumberOrIdentFactory</name> <init>=
            <expr><operator>new</operator> <call><name>AnimatableNumberOrIdentFactory</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Factories for {@link AnimatableValue} parsing.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Factory</name><index>[]</index></name></type> <name>factories</name> <init>= <expr><block>{
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_UNKNOWN</comment>
            <expr><operator>new</operator> <call><name>AnimatableIntegerValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_INTEGER</comment>
            <expr><operator>new</operator> <call><name>AnimatableNumberValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_NUMBER</comment>
            <expr><operator>new</operator> <call><name>AnimatableLengthValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_LENGTH</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_NUMBER_OPTIONAL_NUMBER</comment>
        <expr><operator>new</operator> <call><name>AnimatableAngleValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_ANGLE</comment>
        <expr><operator>new</operator> <call><name>AnimatableColorValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_COLOR</comment>
        <expr><operator>new</operator> <call><name>AnimatablePaintValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_PAINT</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_PERCENTAGE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_TRANSFORM_LIST</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_URI</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_FREQUENCY</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_TIME</comment>
            <expr><operator>new</operator> <call><name>AnimatableNumberListValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_NUMBER_LIST</comment>
            <expr><operator>new</operator> <call><name>AnimatableLengthListValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_LENGTH_LIST</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_IDENT</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_CDATA</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_LENGTH_OR_INHERIT</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_IDENT_LIST</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_CLIP_VALUE</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_URI_OR_IDENT</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_CURSOR_VALUE</comment>
            <expr><operator>new</operator> <call><name>AnimatablePathDataFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_PATH_DATA</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_ENABLE_BACKGROUND_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_TIME_VALUE_LIST</comment>
        <expr><name>animatableNumberOrIdentFactory</name></expr>, <comment type="line">// TYPE_NUMBER_OR_INHERIT</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_FONT_FAMILY_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_FONT_FACE_FONT_SIZE_VALUE</comment>
        <expr><operator>new</operator> <call><name>AnimatableNumberOrIdentFactory</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>, <comment type="line">// TYPE_FONT_WEIGHT_VALUE</comment>
        <expr><operator>new</operator> <call><name>AnimatableAngleOrIdentFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_ANGLE_OR_IDENT</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_KEY_SPLINES_VALUE</comment>
            <expr><operator>new</operator> <call><name>AnimatablePointListValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_POINTS_VALUE</comment>
            <expr><operator>new</operator> <call><name>AnimatablePreserveAspectRatioValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_PRESERVE_ASPECT_RATIO_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_URI_LIST</comment>
        <expr><name>uncomputedAnimatableStringValueFactory</name></expr>, <comment type="line">// TYPE_LENGTH_LIST_OR_IDENT</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_CHARACTER_OR_UNICODE_RANGE_LIST</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_UNICODE_RANGE_LIST</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_FONT_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_FONT_DECSRIPTOR_SRC_VALUE</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_FONT_SIZE_VALUE</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_BASELINE_SHIFT_VALUE</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_KERNING_VALUE</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_SPACING_VALUE</comment>
        <expr><name>animatableLengthOrIdentFactory</name></expr>, <comment type="line">// TYPE_LINE_HEIGHT_VALUE</comment>
        <expr><name>animatableNumberOrIdentFactory</name></expr>, <comment type="line">// TYPE_FONT_SIZE_ADJUST_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_LANG_VALUE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_LANG_LIST_VALUE</comment>
            <expr><operator>new</operator> <call><name>AnimatableNumberOrPercentageValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_NUMBER_OR_PERCENTAGE</comment>
        <expr><literal type="null">null</literal></expr>, <comment type="line">// TYPE_TIMING_SPECIFIER_LIST</comment>
            <expr><operator>new</operator> <call><name>AnimatableBooleanValueFactory</name><argument_list>()</argument_list></call></expr>, <comment type="line">// TYPE_BOOLEAN</comment>
            <expr><operator>new</operator> <call><name>AnimatableRectValueFactory</name><argument_list>()</argument_list></call></expr> <comment type="line">// TYPE_RECT</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the document is an SVG 1.2 document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isSVG12</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * List of bridges that will be initialized when the document is started.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>LinkedList</name></type> <name>initialBridges</name> <init>= <expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A StyleMap used by the {@link Factory}s when computing CSS values.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>StyleMap</name></type> <name>dummyStyleMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The thread that ticks the animation engine.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimationThread</name></type> <name>animationThread</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The animation limiting mode.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>animationLimitingMode</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The amount of animation limiting.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>animationLimitingAmount</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of SMIL animation event names for SVG 1.1.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Set</name></type> <name>animationEventNames11</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of SMIL animation event names for SVG 1.2.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Set</name></type> <name>animationEventNames12</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>eventNamesCommon</name> <init>= <expr><block>{
            <expr><literal type="string">"click"</literal></expr>, <expr><literal type="string">"mousedown"</literal></expr>, <expr><literal type="string">"mouseup"</literal></expr>, <expr><literal type="string">"mouseover"</literal></expr>, <expr><literal type="string">"mousemove"</literal></expr>,
            <expr><literal type="string">"mouseout"</literal></expr>, <expr><literal type="string">"beginEvent"</literal></expr>, <expr><literal type="string">"endEvent"</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>eventNamesSVG11</name> <init>= <expr><block>{
            <expr><literal type="string">"DOMSubtreeModified"</literal></expr>, <expr><literal type="string">"DOMNodeInserted"</literal></expr>, <expr><literal type="string">"DOMNodeRemoved"</literal></expr>,
            <expr><literal type="string">"DOMNodeRemovedFromDocument"</literal></expr>, <expr><literal type="string">"DOMNodeInsertedIntoDocument"</literal></expr>,
            <expr><literal type="string">"DOMAttrModified"</literal></expr>, <expr><literal type="string">"DOMCharacterDataModified"</literal></expr>, <expr><literal type="string">"SVGLoad"</literal></expr>,
            <expr><literal type="string">"SVGUnload"</literal></expr>, <expr><literal type="string">"SVGAbort"</literal></expr>, <expr><literal type="string">"SVGError"</literal></expr>, <expr><literal type="string">"SVGResize"</literal></expr>, <expr><literal type="string">"SVGScroll"</literal></expr>,
            <expr><literal type="string">"repeatEvent"</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>eventNamesSVG12</name> <init>= <expr><block>{
            <expr><literal type="string">"load"</literal></expr>, <expr><literal type="string">"resize"</literal></expr>, <expr><literal type="string">"scroll"</literal></expr>, <expr><literal type="string">"zoom"</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>anEventNamesCommon</name> <range>: <expr><name>eventNamesCommon</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>animationEventNames11</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>anEventNamesCommon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>animationEventNames12</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>anEventNamesCommon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>anEventNamesSVG11</name> <range>: <expr><name>eventNamesSVG11</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>animationEventNames11</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>anEventNamesSVG11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>anEventNamesSVG12</name> <range>: <expr><name>eventNamesSVG12</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>animationEventNames12</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>anEventNamesSVG12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Creates a new SVGAnimationEngine.
     */</comment>
    <constructor><specifier>public</specifier> <name>SVGAnimationEngine</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator> <name>doc</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cssEngine</name> <operator>=</operator> <call><name><name>d</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dummyStyleMap</name> <operator>=</operator> <operator>new</operator> <call><name>StyleMap</name><argument_list>(<argument><expr><call><name><name>cssEngine</name><operator>.</operator><name>getNumberOfProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isSVG12</name> <operator>=</operator> <call><name><name>d</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Disposes this animation engine.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name>pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds an animation element bridge to the list of bridges that
     * require initializing when the document is started.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInitialBridge</name><parameter_list>(<parameter><decl><type><name>SVGAnimationElementBridge</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>initialBridges</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>initialBridges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether animation processing has begun.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasStarted</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>started</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses an AnimatableValue.
     */</comment>
    <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>parseAnimatableValue</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>animElt</name></decl></parameter>,
                                                <parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>,
                                                <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>,
                                                <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGOMElement</name></type> <name>elt</name> <init>= <expr><operator>(</operator><name>SVGOMElement</name><operator>)</operator> <call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isCSS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>elt</name><operator>.</operator><name>getPropertyType</name></name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>elt</name><operator>.</operator><name>getAttributeType</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>Factory</name></type> <name>factory</name> <init>= <expr><name><name>factories</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>factory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>an</name> <init>= <expr><ternary><condition><expr><name>ns</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>ln</name></expr> </then><else>: <expr><literal type="char">'{'</literal> <operator>+</operator> <name>ns</name> <operator>+</operator> <literal type="char">'}'</literal> <operator>+</operator> <name>ln</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>animElt</name></expr></argument>, <argument><expr><literal type="string">"attribute.not.animatable"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeName</name><argument_list>()</argument_list></call></expr>, <expr><name>an</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>factories</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>createValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>isCSS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an AnimatableValue for the underlying value of a CSS property.
     */</comment>
    <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>getUnderlyingCSSValue</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>animElt</name></decl></parameter>,
                                                 <parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ValueManager</name><index>[]</index></name></type> <name>vms</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>getValueManagers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>getPropertyIndex</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>vms</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>getPropertyType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Factory</name></type> <name>factory</name> <init>= <expr><name><name>factories</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>factory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                    <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>animElt</name></expr></argument>, <argument><expr><literal type="string">"attribute.not.animatable"</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeName</name><argument_list>()</argument_list></call></expr>, <expr><name>pn</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>SVGStylableElement</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>SVGStylableElement</name><operator>)</operator> <call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CSSStyleDeclaration</name></type> <name>over</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getOverrideStyle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>oldValue</name> <init>= <expr><call><name><name>over</name><operator>.</operator><name>getPropertyValue</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>over</name><operator>.</operator><name>removeProperty</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>getComputedStyle</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>oldValue</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>over</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>oldValue</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>factories</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>createValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// XXX Doesn't handle shorthands.</comment>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Pauses the animations.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>pause</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>pause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UpdateManager</name></type> <name>um</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getUpdateManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>um</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>um</name><operator>.</operator><name>getUpdateRunnableQueue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setIdleRunnable</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Pauses the animations.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unpause</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>unpause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UpdateManager</name></type> <name>um</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getUpdateManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>um</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>um</name><operator>.</operator><name>getUpdateRunnableQueue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setIdleRunnable</name><argument_list>(<argument><expr><name>animationTickRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current document time.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getCurrentTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>p</name> <init>= <expr><name>pauseTime</name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>unpause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name><name>timedDocumentRoot</name><operator>.</operator><name>getCurrentTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the current document time.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>setCurrentTime</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>ret</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>setCurrentTime</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>animationTickRunnable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>animationTickRunnable</name><operator>.</operator><name>resume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>ret</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>initialStartTime</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new returns a new TimedDocumentRoot object for the document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>TimedDocumentRoot</name></type> <name>createDocumentRoot</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AnimationRoot</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Starts the animation engine.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>documentStartTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>documentStartTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>timedDocumentRoot</name><operator>.</operator><name>resetDocument</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>bridges</name> <init>= <expr><call><name><name>initialBridges</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>initialBridges</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>Object</name></type> <name>bridge2</name> <range>: <expr><name>bridges</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>SVGAnimationElementBridge</name></type> <name>bridge</name> <init>=
                            <expr><operator>(</operator><name>SVGAnimationElementBridge</name><operator>)</operator> <name>bridge2</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>initializeAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <for>for <control>(<init><decl><type><name>Object</name></type> <name>bridge1</name> <range>: <expr><name>bridges</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>SVGAnimationElementBridge</name></type> <name>bridge</name> <init>=
                            <expr><operator>(</operator><name>SVGAnimationElementBridge</name><operator>)</operator> <name>bridge1</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bridge</name><operator>.</operator><name>initializeTimedElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// tick(0, false);</comment>
                <comment type="line">// animationThread = new AnimationThread();</comment>
                <comment type="line">// animationThread.start();</comment>
                <decl_stmt><decl><type><name>UpdateManager</name></type> <name>um</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getUpdateManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>um</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>RunnableQueue</name></type> <name>q</name> <init>= <expr><call><name><name>um</name><operator>.</operator><name>getUpdateRunnableQueue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>animationTickRunnable</name> <operator>=</operator> <operator>new</operator> <call><name>AnimationTickRunnable</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>setIdleRunnable</name></name><argument_list>(<argument><expr><name>animationTickRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>initialStartTime</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>setCurrentTime</name><argument_list>(<argument><expr><name>initialStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AnimationException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getElement</name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>displayError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to "none".
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingNone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to a percentage of CPU.
     * @param pc the maximum percentage of CPU to use (0 &amp;lt; pc â¤ 1)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingCPU</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>animationLimitingAmount</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to a number of frames per second.
     * @param fps the maximum number of frames per second (fps &amp;gt; 0)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingFPS</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>fps</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>animationLimitingAmount</name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A class for the root time container.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimationRoot</name> <super_list><extends>extends <super><name>TimedDocumentRoot</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimationRoot object.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimationRoot</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>!</operator><name>isSVG12</name></expr></argument>, <argument><expr><name>isSVG12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Returns the namespace URI of the event that corresponds to the given
         * animation event name.
         */</comment>
        <function><type><specifier>protected</specifier> <name>String</name></type> <name>getEventNamespaceURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventName</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSVG12</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"focusin"</literal></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"focusout"</literal></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"activate"</literal></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>animationEventNames12</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>eventName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the type of the event that corresponds to the given
         * animation event name.
         */</comment>
        <function><type><specifier>protected</specifier> <name>String</name></type> <name>getEventType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventName</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"focusin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"DOMFocusIn"</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"focusout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"DOMFocusOut"</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>eventName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"activate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"DOMActivate"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>isSVG12</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>animationEventNames12</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>eventName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>eventName</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>animationEventNames11</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>eventName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>eventName</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the name of the repeat event.
         * @return "repeatEvent" for SVG
         */</comment>
        <function><type><specifier>protected</specifier> <name>String</name></type> <name>getRepeatEventName</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name><name>SMILConstants</name><operator>.</operator><name>SMIL_REPEAT_EVENT_NAME</name></name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Fires a TimeEvent of the given type on this element.
         * @param eventType the type of TimeEvent ("beginEvent", "endEvent"
         *                  or "repeatEvent"/"repeat").
         * @param time the timestamp of the event object
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>fireTimeEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventType</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>time</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>detail</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>AnimationSupport</name><operator>.</operator><name>fireTimeEvent</name></name>
                <argument_list>(<argument><expr><operator>(</operator><name>EventTarget</name><operator>)</operator> <name>document</name></expr></argument>, <argument><expr><name>eventType</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked to indicate this timed element became active at the
         * specified time.
         * @param begin the time the element became active, in document simple time
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>toActive</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>begin</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked to indicate that this timed element became inactive.
         * @param stillActive if true, indicates that the element is still
         *                    actually active, but between the end of the
         *                    computed repeat duration and the end of the
         *                    interval
         * @param isFrozen whether the element is frozen or not
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>toInactive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>stillActive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isFrozen</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked to indicate that this timed element has had its fill removed.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeFill</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked to indicate that this timed element has been sampled at the
         * given time.
         * @param simpleTime the sample time in local simple time
         * @param simpleDur the simple duration of the element
         * @param repeatIteration the repeat iteration during which the element
         *                        was sampled
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>sampledAt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>simpleTime</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>simpleDur</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>repeatIteration</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked to indicate that this timed element has been sampled
         * at the end of its active time, at an integer multiple of the
         * simple duration.  This is the "last" value that will be used
         * for filling, which cannot be sampled normally.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>sampledLastValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>repeatIteration</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the timed element with the given ID.
         */</comment>
        <function><type><specifier>protected</specifier> <name>TimedElement</name></type> <name>getTimedElementById</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>AnimationSupport</name><operator>.</operator><name>getTimedElementById</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the event target with the given ID.
         */</comment>
        <function><type><specifier>protected</specifier> <name>EventTarget</name></type> <name>getEventTargetById</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>AnimationSupport</name><operator>.</operator><name>getEventTargetById</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the target of this animation as an {@link EventTarget}.  Used
         * for eventbase timing specifiers where the element ID is omitted.
         */</comment>
        <function><type><specifier>protected</specifier> <name>EventTarget</name></type> <name>getAnimationEventTarget</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the event target that should be listened to for
         * access key events.
         */</comment>
        <function><type><specifier>protected</specifier> <name>EventTarget</name></type> <name>getRootEventTarget</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>EventTarget</name><operator>)</operator> <name>document</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the DOM element that corresponds to this timed element, if
         * such a DOM element exists.
         */</comment>
        <function><type><specifier>public</specifier> <name>Element</name></type> <name>getElement</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns whether this timed element comes before the given timed
         * element in document order.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBefore</name><parameter_list>(<parameter><decl><type><name>TimedElement</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Invoked by timed elements in this document to indicate that the
         * current interval will be re-evaluated at the next sample.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>currentIntervalWillUpdate</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>animationTickRunnable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>animationTickRunnable</name><operator>.</operator><name>resume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Idle runnable to tick the animation, that reads times from System.in.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DebugAnimationTickRunnable</name> <super_list><extends>extends <super><name>AnimationTickRunnable</name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">0f</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DebugAnimationTickRunnable</name><parameter_list>(<parameter><decl><type><name>RunnableQueue</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>SVGAnimationEngine</name></type> <name>eng</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>eng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter times."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>s</name></decl>;</decl_stmt>
                        <try>try <block>{<block_content>
                            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>DebugAnimationTickRunnable</name><operator>.</operator><name>this</name><operator>.</operator><name>resume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></function>
            }</block></class><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>resume</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>lock</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>getIteratorLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <synchronized>synchronized <init>(<expr><name>lock</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>notify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getWaitTime</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>wt</name> <init>= <expr><name>waitTime</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
            <return>return <expr><name>wt</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>SVGAnimationEngine</name></type> <name>eng</name> <init>= <expr><call><name>getAnimationEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <synchronized>synchronized <init>(<expr><name>eng</name></expr>)</init> <block>{<block_content>
                <try>try <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>tick</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AnimationException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                            <argument_list>(<argument><expr><name><name>eng</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getElement</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>eng</name><operator>.</operator><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>displayError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Idle runnable to tick the animation.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimationTickRunnable</name>
            <super_list><implements>implements <super><name><name>RunnableQueue</name><operator>.</operator><name>IdleRunnable</name></name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Calendar instance used for passing current time values to the
         * animation timing system.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Calendar</name></type> <name>time</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">//         /**</comment>
<comment type="line">//          * The current document time in seconds, truncated.</comment>
<comment type="line">//          */</comment>
<comment type="line">//         protected double second = -1.;</comment>

<comment type="line">//         /**</comment>
<comment type="line">//          * The number of frames that have been ticked so far this second.</comment>
<comment type="line">//          */</comment>
<comment type="line">//         protected int frames;</comment>

        <comment type="block" format="javadoc">/**
         * The number of milliseconds to wait until the next animation tick.
         * This is returned by {@link #getWaitTime()}.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>waitTime</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The RunnableQueue in which this is the
         * {@link RunnableQueue.IdleRunnable}.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>RunnableQueue</name></type> <name>q</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The number of past tick times to keep, for computing the average
         * time per tick.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM_TIMES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The past tick times.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>long</name><index>[]</index></name></type> <name>times</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name>NUM_TIMES</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The sum of the times in {@link #times}.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>sumTime</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The current index into {@link #times}.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>timeIndex</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * A weak reference to the SVGAnimationEngine this AnimationTickRunnable
         * is for.  We make this a WeakReference so that a ticking animation
         * engine does not prevent from being GCed.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>WeakReference</name></type> <name>engRef</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The maximum number of consecutive exceptions to allow before
         * stopping the report of them.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_EXCEPTION_COUNT</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The number of consecutive exceptions that have been thrown.  This is
         * used to detect when exceptions are occurring every tick, and to stop
         * reporting them when this happens.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>exceptionCount</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimationTickRunnable.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimationTickRunnable</name><parameter_list>(<parameter><decl><type><name>RunnableQueue</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>SVGAnimationEngine</name></type> <name>eng</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>engRef</name></name> <operator>=</operator> <operator>new</operator> <call><name>WeakReference</name><argument_list>(<argument><expr><name>eng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Initialize the past times to 100ms.</comment>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>times</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumTime</name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name>NUM_TIMES</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Forces an animation update, if the {@link RunnableQueue} is
         * currently waiting.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>resume</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>lock</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>getIteratorLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <synchronized>synchronized <init>(<expr><name>lock</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>notify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the system time that can be safely waited until before this
         * {@link Runnable} is run again.
         *
         * @return time to wait until, &lt;code&gt;0&lt;/code&gt; if no waiting can
         *         be done, or {@link Long#MAX_VALUE} if the {@link Runnable}
         *         should not be run again at this time
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>getWaitTime</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>waitTime</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Performs one tick of the animation.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>SVGAnimationEngine</name></type> <name>eng</name> <init>= <expr><call><name>getAnimationEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <synchronized>synchronized <init>(<expr><name>eng</name></expr>)</init> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>animationLimitingMode</name> <init>= <expr><name><name>eng</name><operator>.</operator><name>animationLimitingMode</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>animationLimitingAmount</name> <init>= <expr><name><name>eng</name><operator>.</operator><name>animationLimitingAmount</name></name></expr></init></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name>long</name></type> <name>before</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name><name>eng</name><operator>.</operator><name>timedDocumentRoot</name><operator>.</operator><name>convertWallclockTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//                         if (Math.floor(t) &gt; second) {</comment>
<comment type="line">//                             second = Math.floor(t);</comment>
<comment type="line">//                             System.err.println("fps: " + frames);</comment>
<comment type="line">//                             frames = 0;</comment>
<comment type="line">//                         }</comment>
                        <decl_stmt><decl><type><name>float</name></type> <name>t2</name> <init>= <expr><call><name><name>eng</name><operator>.</operator><name>tick</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>after</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>dur</name> <init>= <expr><name>after</name> <operator>-</operator> <name>before</name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>dur</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>dur</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>sumTime</name> <operator>-=</operator> <name><name>times</name><index>[<expr><name>timeIndex</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>sumTime</name> <operator>+=</operator> <name>dur</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>times</name><index>[<expr><name>timeIndex</name></expr>]</index></name> <operator>=</operator> <name>dur</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>timeIndex</name> <operator>=</operator> <operator>(</operator><name>timeIndex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>NUM_TIMES</name></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name>before</name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>t2</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>-</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>waitTime</name> <operator>&lt;</operator> <name>after</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name>after</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>animationLimitingMode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>float</name></type> <name>ave</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>sumTime</name> <operator>/</operator> <name>NUM_TIMES</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>float</name></type> <name>delay</name></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>animationLimitingMode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                    <comment type="line">// %cpu</comment>
                                    <expr_stmt><expr><name>delay</name> <operator>=</operator> <name>ave</name> <operator>/</operator> <name>animationLimitingAmount</name> <operator>-</operator> <name>ave</name></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <comment type="line">// fps</comment>
                                    <expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1000f</literal> <operator>/</operator> <name>animationLimitingAmount</name> <operator>-</operator> <name>ave</name></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                <decl_stmt><decl><type><name>long</name></type> <name>newWaitTime</name> <init>= <expr><name>after</name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>delay</name></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>newWaitTime</name> <operator>&gt;</operator> <name>waitTime</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>waitTime</name> <operator>=</operator> <name>newWaitTime</name></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
<comment type="line">//                         frames++;</comment>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AnimationException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                            <argument_list>(<argument><expr><name><name>eng</name><operator>.</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getElement</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                    <expr_stmt><expr><name>exceptionCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>exceptionCount</name> <operator>&lt;</operator> <name>MAX_EXCEPTION_COUNT</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>eng</name><operator>.</operator><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>ctx</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>displayError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></catch></try>

                <if_stmt><if>if <condition>(<expr><name>animationLimitingMode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// so we don't steal too much time from the Swing thread</comment>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the SVGAnimationEngine this AnimationTickRunnable is for.
         */</comment>
        <function><type><specifier>protected</specifier> <name>SVGAnimationEngine</name></type> <name>getAnimationEngine</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>SVGAnimationEngine</name><operator>)</operator> <call><name><name>engRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The thread that ticks the animation.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimationThread</name> <super_list><extends>extends <super><name>Thread</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The current time.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Calendar</name></type> <name>time</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The RunnableQueue to perform the animation in.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>RunnableQueue</name></type> <name>runnableQueue</name> <init>=
            <expr><call><name><name>ctx</name><operator>.</operator><name>getUpdateManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUpdateRunnableQueue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The animation ticker Runnable.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Ticker</name></type> <name>ticker</name> <init>= <expr><operator>new</operator> <call><name>Ticker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Ticks the animation over as fast as possible.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ticker</name><operator>.</operator><name>t</name></name> <operator>=</operator> <call><name><name>timedDocumentRoot</name><operator>.</operator><name>convertWallclockTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>runnableQueue</name><operator>.</operator><name>invokeAndWait</name></name><argument_list>(<argument><expr><name>ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <return>return;</return>
                    </block_content>}</block></catch></try>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>ticker</name><operator>.</operator><name>t</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <while>while <condition>(<expr><name><name>ticker</name><operator>.</operator><name>t</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch></try>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>runnableQueue</name><operator>.</operator><name>invokeAndWait</name></name><argument_list>(<argument><expr><name>ticker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <return>return;</return>
                    </block_content>}</block></catch></try>
                    <expr_stmt><expr><name><name>ticker</name><operator>.</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * A runnable that ticks the animation engine.
         */</comment>
        <class><specifier>protected</specifier> class <name>Ticker</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

            <comment type="block" format="javadoc">/**
             * The document time to tick at next.
             */</comment>
            <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>t</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Ticks the animation over.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>tick</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <comment type="line">// AnimatableValue factories</comment>

    <comment type="block" format="javadoc">/**
     * Interface for AnimatableValue factories.
     */</comment>
    <interface><specifier>protected</specifier> interface <name>Factory</name> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function_decl><type><name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function_decl><type><name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * Factory class for AnimatableValues for CSS properties.
     * XXX Shorthand properties are not supported.
     */</comment>
    <class><specifier>protected</specifier> <specifier>abstract</specifier> class <name>CSSValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// XXX Always parsing as a CSS value.</comment>
            <return>return <expr><call><name>createValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><call><name>createCSSValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>CSSStylableElement</name></type> <name>elt</name> <init>= <expr><operator>(</operator><name>CSSStylableElement</name><operator>)</operator> <call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>computeValue</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>createAnimatableValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}, after
         * computation and inheritance.
         */</comment>
        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name>
            <parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Creates a new CSS {@link Value} from a string.
         */</comment>
        <function><type><specifier>protected</specifier> <name>Value</name></type> <name>createCSSValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>CSSStylableElement</name></type> <name>elt</name> <init>= <expr><operator>(</operator><name>CSSStylableElement</name><operator>)</operator> <call><name><name>t</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>parsePropertyValue</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>computeValue</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Computes a CSS {@link Value} and performance inheritance if the
         * specified value is 'inherit'.
         */</comment>
        <function><type><specifier>protected</specifier> <name>Value</name></type> <name>computeValue</name><parameter_list>(<parameter><decl><type><name>CSSStylableElement</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                     <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ValueManager</name><index>[]</index></name></type> <name>vms</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>getValueManagers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>cssEngine</name><operator>.</operator><name>getPropertyIndex</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getCssValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CSSValue</name><operator>.</operator><name>CSS_INHERIT</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>elt</name> <operator>=</operator> <call><name><name>CSSEngine</name><operator>.</operator><name>getParentCSSStylableElement</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>elt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><call><name><name>cssEngine</name><operator>.</operator><name>getComputedStyle</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><name><name>vms</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>getDefaultValue</name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>vms</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>computeValue</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>cssEngine</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
                                          <argument><expr><name>dummyStyleMap</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>v</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableBooleanValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableBooleanValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableBooleanValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="string">"true"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableBooleanValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                              <argument><expr><literal type="string">"true"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getCssText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableIntegerValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableIntegerValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableIntegerValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableIntegerValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                              <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableNumberValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableNumberValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableNumberValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableNumberValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableNumberOrPercentageValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableNumberOrPercentageValueFactory</name>
            <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>pc</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pc</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pc</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>AnimatableNumberOrPercentageValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_PERCENTAGE</name></name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>AnimatableNumberOrPercentageValue</name>
                        <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_NUMBER</name></name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>AnimatableNumberOrPercentageValue</name>
                        <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
            <comment type="line">// XXX Do something better than returning null.</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatablePreserveAspectRatioValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatablePreserveAspectRatioValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The parsed 'align' value.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>short</name></type> <name>align</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The parsed 'meetOrSlice' value.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>short</name></type> <name>meetOrSlice</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Parser for preserveAspectRatio values.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>PreserveAspectRatioParser</name></type> <name>parser</name> <init>=
            <expr><operator>new</operator> <call><name>PreserveAspectRatioParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Handler for the preserveAspectRatio parser.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>DefaultPreserveAspectRatioHandler</name></type> <name>handler</name> <init>=
            <expr><operator>new</operator> <class><super><name>DefaultPreserveAspectRatioHandler</name></super><argument_list>()</argument_list> <block>{

            <comment type="block" format="javadoc">/**
             * Implements {@link
             * PreserveAspectRatioHandler#startPreserveAspectRatio()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>startPreserveAspectRatio</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_UNKNOWN</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>meetOrSlice</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_MEETORSLICE_UNKNOWN</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#none()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>none</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_NONE</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMaxYMax()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMaxYMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMAXYMAX</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMaxYMid()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMaxYMid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMAXYMID</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMaxYMin()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMaxYMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMAXYMIN</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMidYMax()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMidYMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMIDYMAX</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMidYMid()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMidYMid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMIDYMID</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMidYMin()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMidYMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMIDYMIN</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMinYMax()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMinYMax</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMINYMAX</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMinYMid()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMinYMid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMINYMID</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#xMinYMin()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>xMinYMin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>align</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_PRESERVEASPECTRATIO_XMINYMIN</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#meet()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>meet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>meetOrSlice</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_MEETORSLICE_MEET</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Implements {@link PreserveAspectRatioHandler#slice()}.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>slice</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>meetOrSlice</name> <operator>=</operator> <name><name>SVGPreserveAspectRatio</name><operator>.</operator><name>SVG_MEETORSLICE_SLICE</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatablePreserveAspectRatioValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatablePreserveAspectRatioValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setPreserveAspectRatioHandler</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatablePreserveAspectRatioValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>align</name></expr></argument>,
                                                              <argument><expr><name>meetOrSlice</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since preserveAspectRatio values aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableLengthValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableLengthValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The parsed length unit type.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>short</name></type> <name>type</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The parsed length value.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Parser for lengths.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>LengthParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>LengthParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Handler for the length parser.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>LengthHandler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <class><super><name>DefaultLengthHandler</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>startLength</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_NUMBER</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>lengthValue</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>em</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_EMS</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>ex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_EXS</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>in</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_IN</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>cm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_CM</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>mm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_MM</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>pc</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_PC</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>pt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_PT</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>px</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_PX</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>percentage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGLength</name><operator>.</operator><name>SVG_LENGTHTYPE_PERCENTAGE</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>endLength</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{<block_content>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableLengthValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatableLengthValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setLengthHandler</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>short</name></type> <name>pcInterp</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>getPercentageInterpretation</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>isCSS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatableLengthValue</name>
                    <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pcInterp</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableIntegerValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                              <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableLengthListValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableLengthListValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Parser for length lists.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>LengthListParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>LengthListParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The producer class that accumulates the lengths.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>LengthArrayProducer</name></type> <name>producer</name> <init>= <expr><operator>new</operator> <call><name>LengthArrayProducer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableLengthListValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatableLengthListValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setLengthListHandler</name></name><argument_list>(<argument><expr><name>producer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>short</name></type> <name>pcInterp</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>getPercentageInterpretation</name></name>
                    <argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>isCSS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatableLengthListValue</name>
                    <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>producer</name><operator>.</operator><name>getLengthTypeArray</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>producer</name><operator>.</operator><name>getLengthValueArray</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><name>pcInterp</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since point lists aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableNumberListValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableNumberListValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Parser for number lists.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>NumberListParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>NumberListParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The producer class that accumulates the numbers.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>FloatArrayProducer</name></type> <name>producer</name> <init>= <expr><operator>new</operator> <call><name>FloatArrayProducer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableNumberListValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatableNumberListValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setNumberListHandler</name></name><argument_list>(<argument><expr><name>producer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatableNumberListValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                     <argument><expr><call><name><name>producer</name><operator>.</operator><name>getFloatArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since number lists aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableNumberListValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatableRectValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Parser for number lists.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>NumberListParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>NumberListParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The producer class that accumulates the numbers.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>FloatArrayProducer</name></type> <name>producer</name> <init>= <expr><operator>new</operator> <call><name>FloatArrayProducer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableNumberListValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatableRectValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setNumberListHandler</name></name><argument_list>(<argument><expr><name>producer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>r</name> <init>= <expr><call><name><name>producer</name><operator>.</operator><name>getFloatArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// XXX Do something better than returning null.</comment>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatableRectValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since rects aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatablePointListValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatablePointListValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Parser for point lists.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>PointsParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>PointsParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The producer class that accumulates the points.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>FloatArrayProducer</name></type> <name>producer</name> <init>= <expr><operator>new</operator> <call><name>FloatArrayProducer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatablePointListValueFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatablePointListValueFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setPointsHandler</name></name><argument_list>(<argument><expr><name>producer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatablePointListValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                    <argument><expr><call><name><name>producer</name><operator>.</operator><name>getFloatArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since point lists aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatablePathDataValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AnimatablePathDataFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Parser for path data.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>PathParser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>PathParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The producer class that accumulates the path segments.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>PathArrayProducer</name></type> <name>producer</name> <init>= <expr><operator>new</operator> <call><name>PathArrayProducer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatablePathDataFactory.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatablePathDataFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setPathHandler</name></name><argument_list>(<argument><expr><name>producer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a string.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatablePathDataValue</name>
                    <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>producer</name><operator>.</operator><name>getPathCommands</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>producer</name><operator>.</operator><name>getPathParameters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// XXX Do something better than returning null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatableValue from a CSS {@link Value}.  Returns null
         * since point lists aren't used in CSS values.
         */</comment>
        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableStringValue}s.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>UncomputedAnimatableStringValueFactory</name> <super_list><implements>implements <super><name>Factory</name></super></implements></super_list> <block>{

        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name>ln</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCSS</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableStringValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>AnimatableValue</name></type> <name>createValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>,
                                           <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableStringValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getCssText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableLengthOrIdentValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableLengthOrIdentFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>StringValue</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>AnimatableLengthOrIdentValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                        <argument><expr><call><name><name>v</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>short</name></type> <name>pcInterp</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>getPercentageInterpretation</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FloatValue</name></type> <name>fv</name> <init>= <expr><operator>(</operator><name>FloatValue</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>AnimatableLengthOrIdentValue</name>
                <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>fv</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fv</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pcInterp</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableNumberOrIdentValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableNumberOrIdentFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Whether numbers are actually numeric keywords, as with the
         * font-weight property.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>numericIdents</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>AnimatableNumberOrIdentFactory</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>numericIdents</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numericIdents</name></name> <operator>=</operator> <name>numericIdents</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>StringValue</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>AnimatableNumberOrIdentValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                        <argument><expr><call><name><name>v</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>FloatValue</name></type> <name>fv</name> <init>= <expr><operator>(</operator><name>FloatValue</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>AnimatableNumberOrIdentValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>fv</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><name>numericIdents</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableAngleValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableAngleValueFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>FloatValue</name></type> <name>fv</name> <init>= <expr><operator>(</operator><name>FloatValue</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>short</name></type> <name>unit</name></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>fv</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_NUMBER</name></name></expr>:</case>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_DEG</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_DEG</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_RAD</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_RAD</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_GRAD</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_GRAD</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <comment type="line">// XXX Do something better than returning null.</comment>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></switch>
            <return>return <expr><operator>new</operator> <call><name>AnimatableAngleValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>fv</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableAngleOrIdentValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableAngleOrIdentFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>StringValue</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>AnimatableAngleOrIdentValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                       <argument><expr><call><name><name>v</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>FloatValue</name></type> <name>fv</name> <init>= <expr><operator>(</operator><name>FloatValue</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>short</name></type> <name>unit</name></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>fv</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_NUMBER</name></name></expr>:</case>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_DEG</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_DEG</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_RAD</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_RAD</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_GRAD</name></name></expr>:</case>
                    <expr_stmt><expr><name>unit</name> <operator>=</operator> <name><name>SVGAngle</name><operator>.</operator><name>SVG_ANGLETYPE_GRAD</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <comment type="line">// XXX Do something better than returning null.</comment>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></switch>
            <return>return <expr><operator>new</operator> <call><name>AnimatableAngleOrIdentValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>fv</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                   <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatableColorValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableColorValueFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> <init>= <expr><call><name><name>PaintServer</name><operator>.</operator><name>convertPaint</name></name>
                <argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>instanceof</operator> <name>Color</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>Color</name><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <call><name>AnimatableColorValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                                                <argument><expr><call><name><name>c</name><operator>.</operator><name>getRed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>,
                                                <argument><expr><call><name><name>c</name><operator>.</operator><name>getGreen</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>,
                                                <argument><expr><call><name><name>c</name><operator>.</operator><name>getBlue</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// XXX Indicate that the parsed value wasn't a Color?</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for {@link AnimatablePaintValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatablePaintValueFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new {@link AnimatablePaintValue} from a {@link Color}
         * object.
         */</comment>
        <function><type><specifier>protected</specifier> <name>AnimatablePaintValue</name></type> <name>createColorPaintValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>t</name></decl></parameter>,
                                                             <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>AnimatablePaintValue</name><operator>.</operator><name>createColorPaintValue</name></name>
                <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getRed</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getGreen</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getBlue</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">255f</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getCssValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CSSValue</name><operator>.</operator><name>CSS_PRIMITIVE_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_IDENT</name></name></expr>:</case>
                        <return>return <expr><call><name><name>AnimatablePaintValue</name><operator>.</operator><name>createNonePaintValue</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
                    <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_RGBCOLOR</name></name></expr>:</case> <block>{<block_content>
                        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> <init>= <expr><call><name><name>PaintServer</name><operator>.</operator><name>convertPaint</name></name>
                            <argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><call><name>createColorPaintValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>(</operator><name>Color</name><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block>
                    <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_URI</name></name></expr>:</case>
                        <return>return <expr><call><name><name>AnimatablePaintValue</name><operator>.</operator><name>createURIPaintValue</name></name>
                            <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><call><name><name>v1</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_RGBCOLOR</name></name></expr>:</case> <block>{<block_content>
                        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> <init>= <expr><call><name><name>PaintServer</name><operator>.</operator><name>convertPaint</name></name>
                            <argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><call><name>createColorPaintValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>(</operator><name>Color</name><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block>
                    <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_URI</name></name></expr>:</case> <block>{<block_content>
                        <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <switch>switch <condition>(<expr><call><name><name>v2</name><operator>.</operator><name>getPrimitiveType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_IDENT</name></name></expr>:</case>
                                <return>return <expr><call><name><name>AnimatablePaintValue</name><operator>.</operator><name>createURINonePaintValue</name></name>
                                    <argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v1</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                            <case>case <expr><name><name>CSSPrimitiveValue</name><operator>.</operator><name>CSS_RGBCOLOR</name></name></expr>:</case> <block>{<block_content>
                                <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> <init>= <expr><call><name><name>PaintServer</name><operator>.</operator><name>convertPaint</name></name>
                                    <argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <return>return <expr><call><name>createColorPaintValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>(</operator><name>Color</name><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</return>
                            </block_content>}</block>
                        </block_content>}</block></switch>
                    </block_content>}</block>
                </block_content>}</block></switch>
            </block_content>}</block></else></if_stmt>
            <comment type="line">// XXX Indicate that the specified Value wasn't a Color?</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Factory class for computed CSS {@link AnimatableStringValue}s.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatableStringValueFactory</name> <super_list><extends>extends <super><name>CSSValueFactory</name></super></extends></super_list> <block>{

        <function><type><specifier>protected</specifier> <name>AnimatableValue</name></type> <name>createAnimatableValue</name><parameter_list>(<parameter><decl><type><name>AnimationTarget</name></type> <name>target</name></decl></parameter>,
                                                        <parameter><decl><type><name>String</name></type> <name>pn</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AnimatableStringValue</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getCssText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
