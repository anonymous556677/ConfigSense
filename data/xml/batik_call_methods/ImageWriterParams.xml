<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-awt-util/src/main/java/org/apache/batik/ext/awt/image/spi/ImageWriterParams.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Parameters for the encoder which is accessed through the
 * ImageWriter interface.
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>ImageWriterParams</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>resolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Float</name></type> <name>jpegQuality</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>jpegForceBaseline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>compressionMethod</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>ImageWriterParams</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">//nop</comment>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the image resolution in dpi, or null if undefined
     */</comment>
    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>getResolution</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>resolution</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the quality value for encoding a JPEG image
     *          (0.0-1.0), or null if undefined
     */</comment>
    <function><type><specifier>public</specifier> <name>Float</name></type> <name>getJPEGQuality</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>jpegQuality</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the baseline quantization table is forced,
     *          or null if undefined.
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getJPEGForceBaseline</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>jpegForceBaseline</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** @return the compression method for encoding the image */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCompressionMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>compressionMethod</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the target resolution of the bitmap image to be written.
     * @param dpi the resolution in dpi
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolution</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dpi</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolution</name></name> <operator>=</operator> <name>dpi</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the quality setting for encoding JPEG images.
     * @param quality the quality setting (0.0-1.0)
     * @param forceBaseline force baseline quantization table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJPEGQuality</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forceBaseline</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jpegQuality</name></name> <operator>=</operator> <name>quality</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jpegForceBaseline</name></name> <operator>=</operator> <ternary><condition><expr><name>forceBaseline</name></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the compression method that shall be used to encode the image.
     * @param method the compression method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompressionMethod</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>method</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compressionMethod</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
