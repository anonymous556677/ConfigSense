<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/SVGUtilities.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Point2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>XLinkSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>GraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>AWTTransformProducer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>ClockHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>ClockParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>parser</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVG12Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGLangSpace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGNumberList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A collection of utility methods for SVG.
 *
 * @author &lt;a href="mailto:tkormann@apache.org"&gt;Thierry Kormann&lt;/a&gt;
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SVGUtilities</name> <super_list><implements>implements <super><name>SVGConstants</name></super>, <super><name>ErrorConstants</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * No instance of this class is required.
     */</comment>
    <constructor><specifier>protected</specifier> <name>SVGUtilities</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// common methods</comment>
    <comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns the logical parent element of the given element.
     * The parent element of a used element is the &amp;lt;use&amp;gt; element
     * which reference it.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Element</name></type> <name>getParentElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>CSSEngine</name><operator>.</operator><name>getCSSParentNode</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>CSSEngine</name><operator>.</operator><name>getCSSParentNode</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>n</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts an SVGNumberList into a float array.
     * @param l the list to convert
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>float</name><index>[]</index></name></type> <name>convertSVGNumberList</name><parameter_list>(<parameter><decl><type><name>SVGNumberList</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>l</name><operator>.</operator><name>getNumberOfItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>fl</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>fl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>l</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>fl</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts a string into a float.
     * @param s the float representation to convert
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>convertSVGNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts a string into an integer.
     * @param s the integer representation to convert
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertSVGInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the specified ratio to float number.
     * @param v the ratio value to convert
     * @exception NumberFormatException if the ratio is not a valid
     * number or percentage
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>convertRatio</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the content of the 'desc' child of the given element.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>(<parameter><decl><type><name>SVGElement</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>preserve</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>=
                <expr><ternary><condition><expr><operator>(</operator><call><name><name>n</name><operator>.</operator><name>getPrefix</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>n</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>SVG_DESC_TAG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>preserve</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SVGLangSpace</name><operator>)</operator><name>n</name><operator>)</operator><operator>.</operator><call><name>getXMLspace</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name>
                    <argument_list>(<argument><expr><name>SVG_PRESERVE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr>;</init>
                     <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
                     <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>preserve</name><operator>)</operator></expr>
            ?</condition><then> <expr><call><name><name>XMLSupport</name><operator>.</operator><name>preserveXMLSpace</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>
            </then><else>: <expr><call><name><name>XMLSupport</name><operator>.</operator><name>defaultXMLSpace</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether or not the given element match a specified user agent.
     *
     * @param elt the element to check
     * @param ua the user agent
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>matchUserAgent</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>UserAgent</name></type> <name>ua</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <label><name>test</name>:</label> <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_SYSTEM_LANGUAGE_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Tests the system languages.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>sl</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                           <argument><expr><name>SVG_SYSTEM_LANGUAGE_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>sl</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// SVG spec says empty returns false</comment>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>matchUserLanguage</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ua</name><operator>.</operator><name>getLanguages</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break <name>test</name>;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_REQUIRED_FEATURES_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Tests the system features.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>rf</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                           <argument><expr><name>SVG_REQUIRED_FEATURES_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rf</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="line">// SVG spec says empty returns false</comment>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>rf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ua</name><operator>.</operator><name>hasFeature</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_REQUIRED_EXTENSIONS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Tests the system features.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>re</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                           <argument><expr><name>SVG_REQUIRED_EXTENSIONS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>re</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="line">// SVG spec says empty returns false</comment>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ua</name><operator>.</operator><name>supportExtension</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether or not the specified language specification matches
     * the user preferences.
     *
     * @param s the langage to check
     * @param userLanguages the user langages
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>matchUserLanguage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>,
                                               <parameter><decl><type><name>String</name></type> <name>userLanguages</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>userLanguages</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>t</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>(</operator><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the value of the specified attribute specified on the
     * specified element or one of its ancestor. Ancestors are found
     * using the xlink:href attribute.
     *
     * @param element the element to start with
     * @param namespaceURI the namespace URI of the attribute to return
     * @param attrName the name of the attribute to search
     * @param ctx the bridge context
     * @return the value of the attribute or an empty string if not defined
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getChainableAttributeNS</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>element</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>attrName</name></decl></parameter>,
                                                 <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DocumentLoader</name></type> <name>loader</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getDocumentLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>e</name> <init>= <expr><name>element</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>refs</name> <init>= <expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>v</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// exit if attribute defined</comment>
                <return>return <expr><name>v</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>uriStr</name> <init>= <expr><call><name><name>XLinkSupport</name><operator>.</operator><name>getXLinkHref</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>uriStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// exit if no more xlink:href</comment>
                <return>return <expr><literal type="string">""</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>baseURI</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getBaseURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ParsedURL</name></type> <name>purl</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>, <argument><expr><name>uriStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>Object</name></type> <name>ref</name> <range>: <expr><name>refs</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>purl</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                            <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ERR_XLINK_HREF_CIRCULAR_DEPENDENCIES</name></expr></argument>,
                                    <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><name>uriStr</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>SVGDocument</name></type> <name>svgDoc</name> <init>= <expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>URIResolver</name></type> <name>resolver</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>createURIResolver</name></name><argument_list>(<argument><expr><name>svgDoc</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>resolver</name><operator>.</operator><name>getElement</name></name><argument_list>(<argument><expr><call><name><name>purl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>refs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>purl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioEx</name></decl></parameter> )</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ioEx</name></expr></argument>, <argument><expr><name>ERR_URI_IO</name></expr></argument>,
                                          <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uriStr</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch> <catch>catch<parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>secEx</name></decl></parameter> )</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>secEx</name></expr></argument>, <argument><expr><name>ERR_URI_UNSECURE</name></expr></argument>,
                                          <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uriStr</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// &lt;linearGradient&gt; and &lt;radialGradient&gt;</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns a Point2D in user units according to the specified parameters.
     *
     * @param xStr the x coordinate
     * @param xAttr the name of the attribute that represents the x coordinate
     * @param yStr the y coordinate
     * @param yAttr the name of the attribute that represents the y coordinate
     * @param unitsType the coordinate system (OBJECT_BOUNDING_BOX |
     * USER_SPACE_ON_USE)
     * @param uctx the unit processor context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Point2D</name></type> <name>convertPoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>xStr</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>xAttr</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>yStr</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>yAttr</name></decl></parameter>,
                                       <parameter><decl><type><name>short</name></type> <name>unitsType</name></decl></parameter>,
                                       <parameter><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>unitsType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OBJECT_BOUNDING_BOX</name></expr>:</case>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>xAttr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>yAttr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>USER_SPACE_ON_USE</name></expr>:</case>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>xAttr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>yAttr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid unit type"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><operator>new</operator> <call><name><name>Point2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a float in user units according to the specified parameters.
     *
     * @param length the length
     * @param attr the name of the attribute that represents the length
     * @param unitsType the coordinate system (OBJECT_BOUNDING_BOX |
     * USER_SPACE_ON_USE)
     * @param uctx the unit processor context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>convertLength</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>length</name></decl></parameter>,
                                      <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>,
                                      <parameter><decl><type><name>short</name></type> <name>unitsType</name></decl></parameter>,
                                      <parameter><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>unitsType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OBJECT_BOUNDING_BOX</name></expr>:</case>
            <return>return <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>svgOtherLengthToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>USER_SPACE_ON_USE</name></expr>:</case>
            <return>return <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>svgOtherLengthToUserSpace</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid unit type"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// &lt;mask&gt; region</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns the mask region according to the x, y, width, height,
     * and maskUnits attributes.
     *
     * @param maskElement the mask element that defines the various attributes
     * @param maskedElement the element referencing the mask
     * @param maskedNode the graphics node to mask (objectBoundingBox)
     * @param ctx the bridge context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type> <name>convertMaskRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>maskElement</name></decl></parameter>,
                                                <parameter><decl><type><name>Element</name></type> <name>maskedElement</name></decl></parameter>,
                                                <parameter><decl><type><name>GraphicsNode</name></type> <name>maskedNode</name></decl></parameter>,
                                                <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// 'x' attribute - default is -10%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xStr</name> <init>= <expr><call><name><name>maskElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>xStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>xStr</name> <operator>=</operator> <name>SVG_MASK_X_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'y' attribute - default is -10%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>yStr</name> <init>= <expr><call><name><name>maskElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>yStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>yStr</name> <operator>=</operator> <name>SVG_MASK_Y_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'width' attribute - default is 120%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>wStr</name> <init>= <expr><call><name><name>maskElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>wStr</name> <operator>=</operator> <name>SVG_MASK_WIDTH_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'height' attribute - default is 120%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>hStr</name> <init>= <expr><call><name><name>maskElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>hStr</name> <operator>=</operator> <name>SVG_MASK_HEIGHT_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'maskUnits' attribute - default is 'objectBoundingBox'</comment>
        <decl_stmt><decl><type><name>short</name></type> <name>unitsType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>units</name> <init>=
            <expr><call><name><name>maskElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_MASK_UNITS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>OBJECT_BOUNDING_BOX</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
                <argument_list>(<argument><expr><name>maskElement</name></expr></argument>, <argument><expr><name>SVG_MASK_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// resolve units in the (referenced) maskedElement's coordinate system</comment>
        <decl_stmt><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name>
            <init>= <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>createContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>maskedElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>convertRegion</name><argument_list>(<argument><expr><name>xStr</name></expr></argument>,
                             <argument><expr><name>yStr</name></expr></argument>,
                             <argument><expr><name>wStr</name></expr></argument>,
                             <argument><expr><name>hStr</name></expr></argument>,
                             <argument><expr><name>unitsType</name></expr></argument>,
                             <argument><expr><name>maskedNode</name></expr></argument>,
                             <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// &lt;pattern&gt; region</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns the pattern region according to the x, y, width, height,
     * and patternUnits attributes.
     *
     * @param patternElement the pattern element that defines the attributes
     * @param paintedElement the element referencing the pattern
     * @param paintedNode the graphics node to paint (objectBoundingBox)
     * @param ctx the bridge context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type> <name>convertPatternRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>patternElement</name></decl></parameter>,
                                                   <parameter><decl><type><name>Element</name></type> <name>paintedElement</name></decl></parameter>,
                                                   <parameter><decl><type><name>GraphicsNode</name></type> <name>paintedNode</name></decl></parameter>,
                                                   <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// 'x' attribute - default is 0%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>xStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>xStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>xStr</name> <operator>=</operator> <name>SVG_PATTERN_X_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'y' attribute - default is 0%</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>yStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>yStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>yStr</name> <operator>=</operator> <name>SVG_PATTERN_Y_DEFAULT_VALUE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'width' attribute - required</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>wStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>patternElement</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_MISSING</name></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>SVG_WIDTH_ATTRIBUTE</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'height' attribute - required</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>hStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>patternElement</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_MISSING</name></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// 'patternUnits' attribute - default is 'objectBoundingBox'</comment>
        <decl_stmt><decl><type><name>short</name></type> <name>unitsType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>units</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_PATTERN_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>OBJECT_BOUNDING_BOX</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
                <argument_list>(<argument><expr><name>patternElement</name></expr></argument>, <argument><expr><name>SVG_PATTERN_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// resolve units in the (referenced) paintedElement's coordinate system</comment>
        <decl_stmt><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name>
            <init>= <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>createContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>paintedElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>convertRegion</name><argument_list>(<argument><expr><name>xStr</name></expr></argument>,
                             <argument><expr><name>yStr</name></expr></argument>,
                             <argument><expr><name>wStr</name></expr></argument>,
                             <argument><expr><name>hStr</name></expr></argument>,
                             <argument><expr><name>unitsType</name></expr></argument>,
                             <argument><expr><name>paintedNode</name></expr></argument>,
                             <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// &lt;filter&gt; and filter primitive</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns an array of 2 float numbers that describes the filter
     * resolution of the specified filter element.
     *
     * @param filterElement the filter element
     * @param ctx the bridge context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier>
        <name><name>float</name> <index>[]</index></name></type> <name>convertFilterRes</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>filterElement</name></decl></parameter>, <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>float</name> <index>[]</index></name></type> <name>filterRes</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name>getChainableAttributeNS</name>
            <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_FILTER_RES_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Float</name> <index>[]</index></name></type> <name>vals</name> <init>= <expr><call><name>convertSVGNumberOptionalNumber</name>
            <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>SVG_FILTER_RES_ATTRIBUTE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>filterRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>filterRes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>SVG_FILTER_RES_ATTRIBUTE</name></expr>, <expr><name>s</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>filterRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>filterRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>filterRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                    <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>SVG_FILTER_RES_ATTRIBUTE</name></expr>, <expr><name>s</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>filterRes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>filterRes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>filterRes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>filterRes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                    <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>SVG_FILTER_RES_ATTRIBUTE</name></expr>, <expr><name>s</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>filterRes</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This function parses attrValue for a number followed by an optional
     * second Number. It always returns an array of two Floats.  If either
     * or both values are not provided the entries are set to null
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Float</name><index>[]</index></name></type> <name>convertSVGNumberOptionalNumber</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elem</name></decl></parameter>,
                                                         <parameter><decl><type><name>String</name></type> <name>attrName</name></decl></parameter>,
                                                         <parameter><decl><type><name>String</name></type> <name>attrValue</name></decl></parameter>,
                                                         <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>Float</name><index>[]</index></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <name><name>Float</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>attrValue</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>attrValue</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ret</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                    <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>attrName</name></expr>, <expr><name>attrValue</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>nfEx</name></decl></parameter> )</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><name>nfEx</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>attrName</name></expr>, <expr><name>attrValue</name></expr>, <expr><name>nfEx</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>


   <comment type="block" format="javadoc">/**
    * Returns the filter region according to the x, y, width, height,
    * dx, dy, dw, dh and filterUnits attributes.
    *
    * @param filterElement the filter element that defines the attributes
    * @param filteredElement the element referencing the filter
    * @param filteredNode the graphics node to filter (objectBoundingBox)
    * @param ctx the bridge context
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier>
       <name>Rectangle2D</name></type> <name>convertFilterChainRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>filterElement</name></decl></parameter>,
                                            <parameter><decl><type><name>Element</name></type> <name>filteredElement</name></decl></parameter>,
                                            <parameter><decl><type><name>GraphicsNode</name></type> <name>filteredNode</name></decl></parameter>,
                                            <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

       <comment type="line">// 'x' attribute - default is -10%</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>xStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>xStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>xStr</name> <operator>=</operator> <name>SVG_FILTER_X_DEFAULT_VALUE</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'y' attribute - default is -10%</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>yStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>yStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>yStr</name> <operator>=</operator> <name>SVG_FILTER_Y_DEFAULT_VALUE</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'width' attribute - default is 120%</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>wStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>wStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>wStr</name> <operator>=</operator> <name>SVG_FILTER_WIDTH_DEFAULT_VALUE</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'height' attribute - default is 120%</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>hStr</name> <init>= <expr><call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>hStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>hStr</name> <operator>=</operator> <name>SVG_FILTER_HEIGHT_DEFAULT_VALUE</name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'filterUnits' attribute - default is 'objectBoundingBox'</comment>
       <decl_stmt><decl><type><name>short</name></type> <name>unitsType</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>units</name> <init>= <expr><call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_FILTER_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>OBJECT_BOUNDING_BOX</name></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
               <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>SVG_FILTER_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>

       <comment type="line">// The last paragraph of section 7.11 in SVG 1.1 states that objects</comment>
       <comment type="line">// with zero width or height bounding boxes that use filters with</comment>
       <comment type="line">// filterUnits="objectBoundingBox" must not use the filter.</comment>
       <comment type="line">// TODO: Uncomment this after confirming this is the desired behaviour.</comment>
       <comment type="block">/*AbstractGraphicsNodeBridge bridge =
           (AbstractGraphicsNodeBridge) ctx.getSVGContext(filteredElement);
       if (unitsType == OBJECT_BOUNDING_BOX &amp;&amp; bridge != null) {
           Rectangle2D bbox = bridge.getBBox();
           if (bbox != null &amp;&amp; bbox.getWidth() == 0 || bbox.getHeight() == 0) {
               return null;
           }
       }*/</comment>

       <comment type="line">// resolve units in the (referenced) filteredElement's</comment>
       <comment type="line">// coordinate system</comment>
       <decl_stmt><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name>
           <init>= <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>createContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filteredElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

       <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>region</name> <init>= <expr><call><name>convertRegion</name><argument_list>(<argument><expr><name>xStr</name></expr></argument>,
                                          <argument><expr><name>yStr</name></expr></argument>,
                                          <argument><expr><name>wStr</name></expr></argument>,
                                          <argument><expr><name>hStr</name></expr></argument>,
                                          <argument><expr><name>unitsType</name></expr></argument>,
                                          <argument><expr><name>filteredNode</name></expr></argument>,
                                          <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <comment type="line">//</comment>
       <comment type="line">// Account for region padding</comment>
       <comment type="line">//</comment>
       <expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>getChainableAttributeNS</name>
           <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
            <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MARGINS_UNITS_ATTRIBUTE</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <comment type="line">// Default to user space on use for margins, not objectBoundingBox</comment>
           <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>USER_SPACE_ON_USE</name></expr>;</expr_stmt>
       </block_content>}</block></if> <else>else <block>{<block_content>
           <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
               <argument_list>(<argument><expr><name>filterElement</name></expr></argument>,
                <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MARGINS_UNITS_ATTRIBUTE</name></name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>

       <comment type="line">// 'batik:dx' attribute - default is 0</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>dxStr</name> <init>= <expr><call><name><name>filterElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                                   <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MX_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>dxStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>dxStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MX_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'batik:dy' attribute - default is 0</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>dyStr</name> <init>= <expr><call><name><name>filterElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MY_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>dyStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>dyStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MY_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'batik:dw' attribute - default is 0</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>dwStr</name> <init>= <expr><call><name><name>filterElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MW_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>dwStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>dwStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MW_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>
       <comment type="line">// 'batik:dh' attribute - default is 0</comment>
       <decl_stmt><decl><type><name>String</name></type> <name>dhStr</name> <init>= <expr><call><name><name>filterElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MH_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><call><name><name>dhStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
           <expr_stmt><expr><name>dhStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MH_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
       </block_content>}</block></if></if_stmt>

       <return>return <expr><call><name>extendRegion</name><argument_list>(<argument><expr><name>dxStr</name></expr></argument>,
                           <argument><expr><name>dyStr</name></expr></argument>,
                           <argument><expr><name>dwStr</name></expr></argument>,
                           <argument><expr><name>dhStr</name></expr></argument>,
                           <argument><expr><name>unitsType</name></expr></argument>,
                           <argument><expr><name>filteredNode</name></expr></argument>,
                           <argument><expr><name>region</name></expr></argument>,
                           <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Returns a rectangle that represents the region extended by the
    * specified differential coordinates.
    *
    * @param dxStr the differential x coordinate of the region
    * @param dyStr the differential y coordinate of the region
    * @param dwStr the differential width of the region
    * @param dhStr the differential height of the region
    * @param unitsType specifies whether the values are in userSpaceOnUse
    *        or objectBoundingBox space
    * @param region the region to extend
    * @param uctx the unit processor context (needed for userSpaceOnUse)
    */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type> <name>extendRegion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dxStr</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>dyStr</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>dwStr</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>dhStr</name></decl></parameter>,
                                              <parameter><decl><type><name>short</name></type> <name>unitsType</name></decl></parameter>,
                                              <parameter><decl><type><name>GraphicsNode</name></type> <name>filteredNode</name></decl></parameter>,
                                              <parameter><decl><type><name>Rectangle2D</name></type> <name>region</name></decl></parameter>,
                                              <parameter><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>float</name></type> <name>dx</name></decl>,<decl><type ref="prev"/><name>dy</name></decl>,<decl><type ref="prev"/><name>dw</name></decl>,<decl><type ref="prev"/><name>dh</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>unitsType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>USER_SPACE_ON_USE</name></expr>:</case>
            <expr_stmt><expr><name>dx</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>dxStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MX_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dy</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>dyStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MY_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dw</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>dwStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MW_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>dhStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MH_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_BOUNDING_BOX</name></expr>:</case>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>filteredNode</name><operator>.</operator><name>getGeometryBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>dx</name> <operator>=</operator> <name>dy</name> <operator>=</operator> <name>dw</name> <operator>=</operator> <name>dh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>dx</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToObjectBoundingBox</name></name>
                    <argument_list>(<argument><expr><name>dxStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MX_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dx</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>dy</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToObjectBoundingBox</name></name>
                    <argument_list>(<argument><expr><name>dyStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MY_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dy</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>dw</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToObjectBoundingBox</name></name>
                    <argument_list>(<argument><expr><name>dwStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MW_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dw</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToObjectBoundingBox</name></name>
                    <argument_list>(<argument><expr><name>dhStr</name></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MH_ATRIBUTE</name></name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dh</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid unit type"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name><name>region</name><operator>.</operator><name>setRect</name></name><argument_list>(<argument><expr><call><name><name>region</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>dx</name></expr></argument>,
                       <argument><expr><call><name><name>region</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>dy</name></expr></argument>,
                       <argument><expr><call><name><name>region</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>dw</name></expr></argument>,
                       <argument><expr><call><name><name>region</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>region</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type>
        <name>getBaseFilterPrimitiveRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>filterPrimitiveElement</name></decl></parameter>,
                                     <parameter><decl><type><name>Element</name></type> <name>filteredElement</name></decl></parameter>,
                                     <parameter><decl><type><name>GraphicsNode</name></type> <name>filteredNode</name></decl></parameter>,
                                     <parameter><decl><type><name>Rectangle2D</name></type> <name>defaultRegion</name></decl></parameter>,
                                     <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name></decl>;</decl_stmt>

        <comment type="line">// resolve units in the (referenced) filteredElement's</comment>
        <comment type="line">// coordinate system</comment>
        <decl_stmt><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>uctx</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>createContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filteredElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 'x' attribute - default is defaultRegion.getX()</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// 'y' attribute - default is defaultRegion.getY()</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// 'width' attribute - default is defaultRegion.getWidth()</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalLengthToUserSpace</name></name>
                <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// 'height' attribute - default is defaultRegion.getHeight()</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalLengthToUserSpace</name></name>
                <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// NOTE: it may be that dx/dy/dw/dh should be applied here</comment>
        <comment type="line">//       but since this is mostly aimed at feImage I am</comment>
        <comment type="line">//       unsure that it is really needed.</comment>
        <return>return <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the filter primitive region according to the x, y,
     * width, height, and filterUnits attributes. Processing the
     * element as the top one in the filter chain.
     *
     * @param filterPrimitiveElement the filter primitive element
     * @param filterElement the filter element
     * @param filteredElement the element referencing the filter
     * @param filteredNode the graphics node to use (objectBoundingBox)
     * @param defaultRegion the default region to filter
     * @param filterRegion the filter chain region
     * @param ctx the bridge context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type>
        <name>convertFilterPrimitiveRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>filterPrimitiveElement</name></decl></parameter>,
                                     <parameter><decl><type><name>Element</name></type> <name>filterElement</name></decl></parameter>,
                                     <parameter><decl><type><name>Element</name></type> <name>filteredElement</name></decl></parameter>,
                                     <parameter><decl><type><name>GraphicsNode</name></type> <name>filteredNode</name></decl></parameter>,
                                     <parameter><decl><type><name>Rectangle2D</name></type> <name>defaultRegion</name></decl></parameter>,
                                     <parameter><decl><type><name>Rectangle2D</name></type> <name>filterRegion</name></decl></parameter>,
                                     <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// 'primitiveUnits' - default is userSpaceOnUse</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>units</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>filterElement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>getChainableAttributeNS</name><argument_list>(<argument><expr><name>filterElement</name></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><name>SVG_PRIMITIVE_UNITS_ATTRIBUTE</name></expr></argument>,
                                            <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>unitsType</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>USER_SPACE_ON_USE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
                <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><name>SVG_FILTER_UNITS_ATTRIBUTE</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>xStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>yStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>wStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>hStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>filterPrimitiveElement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// 'x' attribute - default is defaultRegion.getX()</comment>
            <expr_stmt><expr><name>xStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                                         <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'y' attribute - default is defaultRegion.getY()</comment>
            <expr_stmt><expr><name>yStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                                         <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'width' attribute - default is defaultRegion.getWidth()</comment>
            <expr_stmt><expr><name>wStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                                         <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'height' attribute - default is defaultRegion.getHeight()</comment>
            <expr_stmt><expr><name>hStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,
                                                         <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> <init>= <expr><call><name><name>defaultRegion</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// resolve units in the (referenced) filteredElement's coordinate system</comment>
        <decl_stmt><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name>
            <init>= <expr><call><name><name>UnitProcessor</name><operator>.</operator><name>createContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filteredElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>unitsType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OBJECT_BOUNDING_BOX</name></expr>:</case>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>filteredNode</name><operator>.</operator><name>getGeometryBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>xStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToObjectBoundingBox</name></name>
                        <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>x</name><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>yStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToObjectBoundingBox</name></name>
                        <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>y</name><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>wStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalLengthToObjectBoundingBox</name></name>
                        <argument_list>(<argument><expr><name>wStr</name></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>w</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>hStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalLengthToObjectBoundingBox</name></name>
                        <argument_list>(<argument><expr><name>hStr</name></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>h</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>USER_SPACE_ON_USE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>xStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                    <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>yStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                    <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>wStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalLengthToUserSpace</name></name>
                    <argument_list>(<argument><expr><name>wStr</name></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>hStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalLengthToUserSpace</name></name>
                    <argument_list>(<argument><expr><name>hStr</name></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid unitsType:"</literal> <operator>+</operator> <name>unitsType</name></expr></argument>)</argument_list></call></expr>;</throw> <comment type="line">// can't be reached</comment>
        </block_content>}</block></switch>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>region</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Now, extend filter primitive region with dx/dy/dw/dh</comment>
        <comment type="line">// settings (Batik extension). The dx/dy/dw/dh padding is</comment>
        <comment type="line">// *always* in userSpaceOnUse space.</comment>

        <expr_stmt><expr><name>units</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>filterElement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>getChainableAttributeNS</name>
                <argument_list>(<argument><expr><name>filterElement</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                 <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_PRIMITIVE_MARGINS_UNITS_ATTRIBUTE</name></name></expr></argument>,
                 <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>units</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <name>USER_SPACE_ON_USE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>unitsType</name> <operator>=</operator> <call><name>parseCoordinateSystem</name>
                <argument_list>(<argument><expr><name>filterElement</name></expr></argument>,
                 <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_PRIMITIVE_MARGINS_UNITS_ATTRIBUTE</name></name></expr></argument>,
                 <argument><expr><name>units</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>dxStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>dyStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>dwStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>dhStr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>filterPrimitiveElement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// 'batik:dx' attribute - default is 0</comment>
            <expr_stmt><expr><name>dxStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MX_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'batik:dy' attribute - default is 0</comment>
            <expr_stmt><expr><name>dyStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MY_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'batik:dw' attribute - default is 0</comment>
            <expr_stmt><expr><name>dwStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MW_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 'batik:dh' attribute - default is 0</comment>
            <expr_stmt><expr><name>dhStr</name> <operator>=</operator> <call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVG12Constants</name><operator>.</operator><name>SVG_MH_ATRIBUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dxStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dxStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MX_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dyStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dyStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MY_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dwStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dwStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MW_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>dhStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dhStr</name> <operator>=</operator> <name><name>SVG12Constants</name><operator>.</operator><name>SVG_FILTER_MH_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>extendRegion</name><argument_list>(<argument><expr><name>dxStr</name></expr></argument>,
                              <argument><expr><name>dyStr</name></expr></argument>,
                              <argument><expr><name>dwStr</name></expr></argument>,
                              <argument><expr><name>dhStr</name></expr></argument>,
                              <argument><expr><name>unitsType</name></expr></argument>,
                              <argument><expr><name>filteredNode</name></expr></argument>,
                              <argument><expr><name>region</name></expr></argument>,
                              <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Rectangle2D</name><operator>.</operator><name>intersect</name></name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>filterRegion</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>region</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the filter primitive region according to the x, y,
     * width, height, and filterUnits attributes. Processing the
     * element as the top one in the filter chain.
     *
     * @param filterPrimitiveElement the filter primitive element
     * @param filteredElement the element referencing the filter
     * @param filteredNode the graphics node to use (objectBoundingBox)
     * @param defaultRegion the default region to filter
     * @param filterRegion the filter chain region
     * @param ctx the bridge context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type>
        <name>convertFilterPrimitiveRegion</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>filterPrimitiveElement</name></decl></parameter>,
                                     <parameter><decl><type><name>Element</name></type> <name>filteredElement</name></decl></parameter>,
                                     <parameter><decl><type><name>GraphicsNode</name></type> <name>filteredNode</name></decl></parameter>,
                                     <parameter><decl><type><name>Rectangle2D</name></type> <name>defaultRegion</name></decl></parameter>,
                                     <parameter><decl><type><name>Rectangle2D</name></type> <name>filterRegion</name></decl></parameter>,
                                     <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>Node</name></type> <name>parentNode</name> <init>= <expr><call><name><name>filterPrimitiveElement</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>filterElement</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parentNode</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
                <call><name><name>parentNode</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>filterElement</name> <operator>=</operator> <operator>(</operator><name>Element</name><operator>)</operator> <name>parentNode</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>convertFilterPrimitiveRegion</name><argument_list>(<argument><expr><name>filterPrimitiveElement</name></expr></argument>,
                                            <argument><expr><name>filterElement</name></expr></argument>,
                                            <argument><expr><name>filteredElement</name></expr></argument>,
                                            <argument><expr><name>filteredNode</name></expr></argument>,
                                            <argument><expr><name>defaultRegion</name></expr></argument>,
                                            <argument><expr><name>filterRegion</name></expr></argument>,
                                            <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// region convenient methods</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>


    <comment type="block" format="javadoc">/** The userSpaceOnUse coordinate system constants. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>short</name></type> <name>USER_SPACE_ON_USE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The objectBoundingBox coordinate system constants. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>short</name></type> <name>OBJECT_BOUNDING_BOX</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The strokeWidth coordinate system constants. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>short</name></type> <name>STROKE_WIDTH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Parses the specified coordinate system defined by the specified element.
     *
     * @param e the element that defines the coordinate system
     * @param attr the attribute which contains the coordinate system
     * @param coordinateSystem the coordinate system to parse
     * @param ctx the BridgeContext to use for error information
     * @return OBJECT_BOUNDING_BOX | USER_SPACE_ON_USE
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>short</name></type> <name>parseCoordinateSystem</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>coordinateSystem</name></decl></parameter>,
                                              <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVG_USER_SPACE_ON_USE_VALUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>coordinateSystem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>USER_SPACE_ON_USE</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>SVG_OBJECT_BOUNDING_BOX_VALUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>coordinateSystem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>OBJECT_BOUNDING_BOX</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>attr</name></expr>, <expr><name>coordinateSystem</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the specified coordinate system defined by the specified
     * marker element.
     *
     * @param e the element that defines the coordinate system
     * @param attr the attribute which contains the coordinate system
     * @param coordinateSystem the coordinate system to parse
     * @param ctx the BridgeContext to use for error information
     * @return STROKE_WIDTH | USER_SPACE_ON_USE
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>short</name></type> <name>parseMarkerCoordinateSystem</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>coordinateSystem</name></decl></parameter>,
                                                    <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVG_USER_SPACE_ON_USE_VALUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>coordinateSystem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>USER_SPACE_ON_USE</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>SVG_STROKE_WIDTH_VALUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>coordinateSystem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>STROKE_WIDTH</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>attr</name></expr>, <expr><name>coordinateSystem</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a rectangle that represents the region defined by the
     * specified coordinates.
     *
     * @param xStr the x coordinate of the region
     * @param yStr the y coordinate of the region
     * @param wStr the width of the region
     * @param hStr the height of the region
     * @param targetNode the graphics node (needed for objectBoundingBox)
     * @param uctx the unit processor context (needed for userSpaceOnUse)
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type> <name>convertRegion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>xStr</name></decl></parameter>,
                                               <parameter><decl><type><name>String</name></type> <name>yStr</name></decl></parameter>,
                                               <parameter><decl><type><name>String</name></type> <name>wStr</name></decl></parameter>,
                                               <parameter><decl><type><name>String</name></type> <name>hStr</name></decl></parameter>,
                                               <parameter><decl><type><name>short</name></type> <name>unitsType</name></decl></parameter>,
                                               <parameter><decl><type><name>GraphicsNode</name></type> <name>targetNode</name></decl></parameter>,
                                               <parameter><decl><type><name><name>UnitProcessor</name><operator>.</operator><name>Context</name></name></type> <name>uctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// construct the mask region in the appropriate coordinate system</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>unitsType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>OBJECT_BOUNDING_BOX</name></expr>:</case>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalLengthToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>wStr</name></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalLengthToObjectBoundingBox</name></name>
                <argument_list>(<argument><expr><name>hStr</name></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>targetNode</name><operator>.</operator><name>getGeometryBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>x</name><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>y</name><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>w</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>h</name> <operator>*=</operator> <call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <name>w</name> <operator>=</operator> <name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>USER_SPACE_ON_USE</name></expr>:</case>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>xStr</name></expr></argument>, <argument><expr><name>SVG_X_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalCoordinateToUserSpace</name></name>
                <argument_list>(<argument><expr><name>yStr</name></expr></argument>, <argument><expr><name>SVG_Y_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgHorizontalLengthToUserSpace</name></name>
                <argument_list>(<argument><expr><name>wStr</name></expr></argument>, <argument><expr><name>SVG_WIDTH_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>UnitProcessor</name><operator>.</operator><name>svgVerticalLengthToUserSpace</name></name>
                <argument_list>(<argument><expr><name>hStr</name></expr></argument>, <argument><expr><name>SVG_HEIGHT_ATTRIBUTE</name></expr></argument>, <argument><expr><name>uctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"invalid unitsType:"</literal> <operator>+</operator> <name>unitsType</name></expr></argument> )</argument_list></call></expr>;</throw> <comment type="line">// can't be reached</comment>
        </block_content>}</block></switch>
        <return>return <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// coordinate system and transformation support methods</comment>
    <comment type="line" format="doxygen">/////////////////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns an AffineTransform according to the specified parameters.
     *
     * @param e the element that defines the transform
     * @param attr the name of the attribute that represents the transform
     * @param transform the transform to parse
     * @param ctx the BridgeContext to use for error information
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AffineTransform</name></type> <name>convertTransform</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                                   <parameter><decl><type><name>String</name></type> <name>attr</name></decl></parameter>,
                                                   <parameter><decl><type><name>String</name></type> <name>transform</name></decl></parameter>,
                                                   <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>AWTTransformProducer</name><operator>.</operator><name>createAffineTransform</name></name><argument_list>(<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>pEx</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>pEx</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>attr</name></expr>, <expr><name>transform</name></expr>, <expr><name>pEx</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an AffineTransform to move to the objectBoundingBox
     * coordinate system.
     *
     * @param Tx the original transformation
     * @param node the graphics node that defines the coordinate
     *             system to move into
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AffineTransform</name></type> <name>toObjectBBox</name><parameter_list>(<parameter><decl><type><name>AffineTransform</name></type> <name>Tx</name></decl></parameter>,
                                               <parameter><decl><type><name>GraphicsNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>AffineTransform</name></type> <name>Mx</name> <init>= <expr><operator>new</operator> <call><name>AffineTransform</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getGeometryBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Mx</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><call><name><name>bounds</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bounds</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Mx</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Mx</name><operator>.</operator><name>concatenate</name></name><argument_list>(<argument><expr><name>Tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>Mx</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the specified a Rectangle2D move to the objectBoundingBox
     * coordinate system of the specified graphics node.
     *
     * @param r the original Rectangle2D
     * @param node the graphics node that defines the coordinate
     *             system to move into
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Rectangle2D</name></type> <name>toObjectBBox</name><parameter_list>(<parameter><decl><type><name>Rectangle2D</name></type> <name>r</name></decl></parameter>,
                                           <parameter><decl><type><name>GraphicsNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>getGeometryBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name>
                <argument_list>(<argument><expr><call><name><name>bounds</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>r</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>bounds</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>r</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call><operator>*</operator><call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>r</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>bounds</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>r</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>bounds</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Double</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the value of the 'snapshotTime' attribute on the specified
     * element as a float, or &lt;code&gt;0f&lt;/code&gt; if the attribute is missing
     * or given as &lt;code&gt;"none"&lt;/code&gt;.
     *
     * @param e the element from which to retrieve the 'snapshotTime' attribute
     * @param ctx the BridgeContext to use for error information
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>convertSnapshotTime</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>e</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_SNAPSHOT_TIME_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0f</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_SNAPSHOT_TIME_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>SVG_NONE_VALUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0f</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <class>class <name>Handler</name> <super_list><implements>implements <super><name>ClockHandler</name></super></implements></super_list> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>time</name></decl>;</decl_stmt>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>clockValue</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>time</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
        <decl_stmt><decl><type><name>ClockParser</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>ClockParser</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Handler</name></type> <name>h</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setClockHandler</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>pEx</name></decl></parameter> )</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>pEx</name></expr></argument>, <argument><expr><name>ERR_ATTRIBUTE_VALUE_MALFORMED</name></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>SVG_SNAPSHOT_TIME_ATTRIBUTE</name></expr>, <expr><name>t</name></expr>, <expr><name>pEx</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name><name>h</name><operator>.</operator><name>time</name></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
