<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-svgrasterizer/src/main/java/org/apache/batik/apps/rasterizer/DestinationType.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>apps</name><operator>.</operator><name>rasterizer</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>Transcoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>JPEGTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>PNGTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>TIFFTranscoder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Describes the type of destination for an &lt;code&gt;SVGConverter&lt;/code&gt;
 * operation.
 *
 * @author Henri Ruini
 * @author &lt;a href="mailto:vhardy@apache.org"&gt;Vincent Hardy&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DestinationType</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PNG_STR</name>  <init>= <expr><literal type="string">"image/png"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JPEG_STR</name> <init>= <expr><literal type="string">"image/jpeg"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIFF_STR</name> <init>= <expr><literal type="string">"image/tiff"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PDF_STR</name>  <init>= <expr><literal type="string">"application/pdf"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_CODE</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>JPEG_CODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIFF_CODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PDF_CODE</name>  <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PNG_EXTENSION</name>  <init>= <expr><literal type="string">".png"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JPEG_EXTENSION</name> <init>= <expr><literal type="string">".jpg"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIFF_EXTENSION</name> <init>= <expr><literal type="string">".tif"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PDF_EXTENSION</name>  <init>= <expr><literal type="string">".pdf"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DestinationType</name></type> <name>PNG</name>
        <init>= <expr><operator>new</operator> <call><name>DestinationType</name><argument_list>(<argument><expr><name>PNG_STR</name></expr></argument>, <argument><expr><name>PNG_CODE</name></expr></argument>, <argument><expr><name>PNG_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DestinationType</name></type> <name>JPEG</name>
        <init>= <expr><operator>new</operator> <call><name>DestinationType</name><argument_list>(<argument><expr><name>JPEG_STR</name></expr></argument>, <argument><expr><name>JPEG_CODE</name></expr></argument>, <argument><expr><name>JPEG_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DestinationType</name></type> <name>TIFF</name>
        <init>= <expr><operator>new</operator> <call><name>DestinationType</name><argument_list>(<argument><expr><name>TIFF_STR</name></expr></argument>, <argument><expr><name>TIFF_CODE</name></expr></argument>, <argument><expr><name>TIFF_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DestinationType</name></type> <name>PDF</name>
        <init>= <expr><operator>new</operator> <call><name>DestinationType</name><argument_list>(<argument><expr><name>PDF_STR</name></expr></argument>, <argument><expr><name>PDF_CODE</name></expr></argument>, <argument><expr><name>PDF_EXTENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>extension</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DestinationType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extension</name></name> <operator>=</operator> <name>extension</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExtension</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>extension</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>toInt</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a transcoder object of the result image type.
     *
     * @return Transcoder object or &lt;code&gt;null&lt;/code&gt; if there isn't a proper transcoder.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Transcoder</name></type> <name>getTranscoder</name><parameter_list>()</parameter_list><block>{<block_content>
        <switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>PNG_CODE</name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>PNGTranscoder</name><argument_list>()</argument_list></call></expr>;</return>
            <case>case <expr><name>JPEG_CODE</name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>JPEGTranscoder</name><argument_list>()</argument_list></call></expr>;</return>
            <case>case <expr><name>TIFF_CODE</name></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>TIFFTranscoder</name><argument_list>()</argument_list></call></expr>;</return>
            <case>case <expr><name>PDF_CODE</name></expr>:</case>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>Class</name></type> <name>pdfClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.fop.svg.PDFTranscoder"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><operator>(</operator><name>Transcoder</name><operator>)</operator><call><name><name>pdfClass</name><operator>.</operator><name>getDeclaredConstructor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></catch></try>
            <default>default:</default>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Defines valid image types.
     *
     * @return Array of valid values as strings.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>DestinationType</name><index>[]</index></name></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>DestinationType</name><index>[]</index></name><block>{<expr><name>PNG</name></expr>, <expr><name>JPEG</name></expr>, <expr><name>TIFF</name></expr>, <expr><name>PDF</name></expr>}</block></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>readResolve</name><parameter_list>()</parameter_list><block>{<block_content>
        <switch>switch<condition>(<expr><name>code</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>PNG_CODE</name></expr>:</case>
            <return>return <expr><name>PNG</name></expr>;</return>
        <case>case <expr><name>JPEG_CODE</name></expr>:</case>
            <return>return <expr><name>JPEG</name></expr>;</return>
        <case>case <expr><name>TIFF_CODE</name></expr>:</case>
            <return>return <expr><name>TIFF</name></expr>;</return>
        <case>case <expr><name>PDF_CODE</name></expr>:</case>
            <return>return <expr><name>PDF</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"unknown code:"</literal> <operator>+</operator> <name>code</name></expr></argument> )</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>
}</block></class>
</unit>
