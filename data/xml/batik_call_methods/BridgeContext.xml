<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/BridgeContext.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Dimension2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InterruptedIOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>SoftReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ListIterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>AnimatedAttributeListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>AnimatedLiveAttributeValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGDOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGOMDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGOMElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGStylableElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>svg12</name><operator>.</operator><name>SVG12BridgeContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>svg12</name><operator>.</operator><name>SVG12BridgeExtension</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngineEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngineListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSEngineUserAgent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>SVGCSSEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>SystemColorSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>AbstractNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>NodeEventTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>xbl</name><operator>.</operator><name>XBLManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>CompositeGraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>GraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>script</name><operator>.</operator><name>Interpreter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>script</name><operator>.</operator><name>InterpreterPool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>CSSConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>CleanerThread</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>Service</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>constants</name><operator>.</operator><name>XMLConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>MouseEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>MutationEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents a context used by the various bridges and the
 * builder. A bridge context is associated to a particular document
 * and cannot be reused.
 *
 * The context encapsulates the dynamic bindings between DOM elements
 * and GVT nodes, graphic contexts such as a &lt;code&gt;GraphicsNodeRenderContext&lt;/code&gt;,
 * and the different objects required by the GVT builder to interpret
 * a SVG DOM tree such as the current viewport or the user agent.
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>BridgeContext</name> <super_list><implements>implements <super><name>ErrorConstants</name></super>, <super><name>CSSContext</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The document is bridge context is dedicated to.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Document</name></type> <name>document</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the document is an SVG 1.2 document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isSVG12</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The GVT builder that might be used to create a GVT subtree.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>GVTBuilder</name></type> <name>gvtBuilder</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The interpreter cache per document.
     * key is the language -
     * value is a Interpreter
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>interpreterMap</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A Map of all the font families already matched. This is
     * to reduce the number of instances of GVTFontFamilies and to
     * hopefully reduce the time taken to search for a matching SVG font.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>fontFamilyMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The viewports.
     * key is an Element -
     * value is a Viewport
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>viewportMap</name> <init>= <expr><operator>new</operator> <call><name>WeakHashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The viewport stack. Used in building time.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>viewportStack</name> <init>= <expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The user agent.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UserAgent</name></type> <name>userAgent</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Binding Map:
     * key is an SVG Element -
     * value is a GraphicsNode
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>elementNodeMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Binding Map:
     * key is GraphicsNode -
     * value is a SVG Element.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>nodeElementMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Bridge Map:
     * Keys are namespace URI - values are HashMap (with keys are local
     * name and values are a Bridge instance).
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>namespaceURIMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default bridge.
     * When a bridge is requested for an element type that does not have a
     * bridge, and there is no other bridge for elements in the same namespace,
     * the default bridge is returned.  This is used for custom elements,
     * which all use the same bridge type.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Bridge</name></type> <name>defaultBridge</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default bridge reserved namespaces set.
     * Default bridges will not be created for elements that have a
     * namespace URI present in this set.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Set</name></type> <name>reservedNamespaceSet</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Element Data Map:
     * This is a general location for elements to 'cache'
     * data.  Such as the graphics tree for a pattern or
     * the Gradient arrays.
     *
     * This is a weak hash map and the data is referenced
     * by SoftReference so both must be referenced elsewhere
     * to stay live.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>elementDataMap</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The interpreter pool used to handle scripts.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>InterpreterPool</name></type> <name>interpreterPool</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The document loader used to load/create Document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DocumentLoader</name></type> <name>documentLoader</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The size of the document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Dimension2D</name></type> <name>documentSize</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The text painter to use. Typically, you can specify the text painter that
     * will be used be text nodes.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>TextPainter</name></type> <name>textPainter</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Indicates that no DOM listeners should be registered.  In this
     * case the generated GVT tree should be totally independent of
     * the DOM tree (in practice text holds references to the source
     * text elements for font resolution).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STATIC</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Indicates that DOM listeners should be registered to support,
     * 'interactivity' this includes anchors and cursors, but does not
     * include support for DOM modifications.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTERACTIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Indicates that all DOM listeners should be registered. This supports
     * 'interactivity' (anchors and cursors), as well as DOM modifications
     * listeners to update the GVT rendering tree.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DYNAMIC</name>     <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the bridge should support dynamic, or interactive features.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>dynamicStatus</name> <init>= <expr><name>STATIC</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The update manager.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UpdateManager</name></type> <name>updateManager</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The XBL manager.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>XBLManager</name></type> <name>xblManager</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The bridge context for the primary document, if this is a bridge
     * context for a resource document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>primaryContext</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of WeakReferences to child BridgeContexts.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>HashSet</name></type> <name>childContexts</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The animation engine for the document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>SVGAnimationEngine</name></type> <name>animationEngine</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The animation limiting mode.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>animationLimitingMode</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The amount of animation limiting.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>animationLimitingAmount</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * By default we share a unique instance of InterpreterPool.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InterpreterPool</name></type> <name>sharedPool</name> <init>= <expr><operator>new</operator> <call><name>InterpreterPool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new empty bridge context.
     */</comment>
    <constructor><specifier>protected</specifier> <name>BridgeContext</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>FontFamilyResolver</name></type> <name>getFontFamilyResolver</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userAgent</name><operator>.</operator><name>getFontFamilyResolver</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs a new bridge context.
     * @param userAgent the user agent
     */</comment>
    <constructor><specifier>public</specifier> <name>BridgeContext</name><parameter_list>(<parameter><decl><type><name>UserAgent</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>,
             <argument><expr><name>sharedPool</name></expr></argument>,
             <argument><expr><operator>new</operator> <call><name>DocumentLoader</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new bridge context.
     * @param userAgent the user agent
     * @param loader document loader
     */</comment>
    <constructor><specifier>public</specifier> <name>BridgeContext</name><parameter_list>(<parameter><decl><type><name>UserAgent</name></type> <name>userAgent</name></decl></parameter>,
                         <parameter><decl><type><name>DocumentLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>, <argument><expr><name>sharedPool</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new bridge context.
     * @param userAgent the user agent
     * @param interpreterPool the interpreter pool
     * @param documentLoader document loader
     */</comment>
    <constructor><specifier>public</specifier> <name>BridgeContext</name><parameter_list>(<parameter><decl><type><name>UserAgent</name></type> <name>userAgent</name></decl></parameter>,
                         <parameter><decl><type><name>InterpreterPool</name></type> <name>interpreterPool</name></decl></parameter>,
                         <parameter><decl><type><name>DocumentLoader</name></type> <name>documentLoader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <name>userAgent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>viewportMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UserAgentViewport</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interpreterPool</name></name> <operator>=</operator> <name>interpreterPool</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>documentLoader</name></name> <operator>=</operator> <name>documentLoader</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Calls dispose on this BridgeContext, if it is a child context.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>primaryContext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>dispose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This function creates a new 'sub' BridgeContext to associated
     * with 'newDoc' if one currently doesn't exist, otherwise it
     * returns the BridgeContext currently associated with the
     * document.
     * @param newDoc The document to get/create a BridgeContext for.
     */</comment>
    <function><type><specifier>public</specifier> <name>BridgeContext</name></type> <name>createSubBridgeContext</name><parameter_list>(<parameter><decl><type><name>SVGOMDocument</name></type> <name>newDoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BridgeContext</name></type> <name>subCtx</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CSSEngine</name></type> <name>eng</name> <init>= <expr><call><name><name>newDoc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>eng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>subCtx</name> <operator>=</operator> <operator>(</operator><name>BridgeContext</name><operator>)</operator> <call><name><name>newDoc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCSSContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>subCtx</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>subCtx</name> <operator>=</operator> <call><name>createBridgeContext</name><argument_list>(<argument><expr><name>newDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subCtx</name><operator>.</operator><name>primaryContext</name></name> <operator>=</operator> <ternary><condition><expr><name>primaryContext</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>primaryContext</name></expr> </then><else>: <expr><name>this</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>primaryContext</name><operator>.</operator><name>childContexts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WeakReference</name><argument_list>(<argument><expr><name>subCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>subCtx</name><operator>.</operator><name>dynamicStatus</name></name> <operator>=</operator> <name>dynamicStatus</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>setGVTBuilder</name></name><argument_list>(<argument><expr><call><name>getGVTBuilder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>setTextPainter</name></name><argument_list>(<argument><expr><call><name>getTextPainter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>setDocument</name></name><argument_list>(<argument><expr><name>newDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>initializeDocument</name></name><argument_list>(<argument><expr><name>newDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isInteractive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subCtx</name><operator>.</operator><name>addUIEventListeners</name></name><argument_list>(<argument><expr><name>newDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>subCtx</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This function creates a new BridgeContext, it mostly
     * exists so subclasses can provide an instance of
     * themselves when a sub BridgeContext is needed.
     */</comment>
    <function><type><specifier>public</specifier> <name>BridgeContext</name></type> <name>createBridgeContext</name><parameter_list>(<parameter><decl><type><name>SVGOMDocument</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>doc</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SVG12BridgeContext</name><argument_list>(<argument><expr><call><name>getUserAgent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDocumentLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>BridgeContext</name><argument_list>(<argument><expr><call><name>getUserAgent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDocumentLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initializes the given document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initializeDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>doc</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSSEngine</name></type> <name>eng</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>eng</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SVGDOMImplementation</name></type> <name>impl</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>(</operator><name>SVGDOMImplementation</name><operator>)</operator><call><name><name>doc</name><operator>.</operator><name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>eng</name> <operator>=</operator> <call><name><name>impl</name><operator>.</operator><name>createCSSEngine</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>setCSSEngineUserAgent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSSEngineUserAgentWrapper</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>setCSSEngine</name></name><argument_list>(<argument><expr><name>eng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>setMedia</name></name><argument_list>(<argument><expr><call><name><name>userAgent</name><operator>.</operator><name>getMedia</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>userAgent</name><operator>.</operator><name>getUserStyleSheetURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>ParsedURL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>setUserAgentStyleSheet</name></name>
                        <argument_list>(<argument><expr><call><name><name>eng</name><operator>.</operator><name>parseStyleSheet</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>eng</name><operator>.</operator><name>setAlternateStyleSheet</name></name><argument_list>(<argument><expr><call><name><name>userAgent</name><operator>.</operator><name>getAlternateStyleSheet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the CSS engine associated with given element.
     */</comment>
    <function><type><specifier>public</specifier> <name>CSSEngine</name></type> <name>getCSSEngineForElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>doc</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>doc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// properties ////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Sets the text painter that will be used by text nodes. This attributes
     * might be used by bridges (especially SVGTextElementBridge) to set the
     * text painter of each TextNode.
     *
     * @param textPainter the text painter for text nodes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextPainter</name><parameter_list>(<parameter><decl><type><name>TextPainter</name></type> <name>textPainter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>textPainter</name></name> <operator>=</operator> <name>textPainter</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the text painter that will be used be text nodes.
     */</comment>
    <function><type><specifier>public</specifier> <name>TextPainter</name></type> <name>getTextPainter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>textPainter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the document this bridge context is dedicated to.
     */</comment>
    <function><type><specifier>public</specifier> <name>Document</name></type> <name>getDocument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>document</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document this bridge context is dedicated to, to the
     * specified document.
     * @param document the document
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>document</name></name> <operator>!=</operator> <name>document</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>fontFamilyMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>document</name></name> <operator>=</operator> <name>document</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isSVG12</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SVGOMDocument</name><operator>)</operator> <name>document</name><operator>)</operator><operator>.</operator><call><name>isSVG12</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>registerSVGBridges</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the map of font families
     */</comment>
    <function><type><specifier>public</specifier> <name>Map</name></type> <name>getFontFamilyMap</name><parameter_list>()</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fontFamilyMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>fontFamilyMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>fontFamilyMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the map of font families to the specified value.
     *
     *@param fontFamilyMap the map of font families
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setFontFamilyMap</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>fontFamilyMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fontFamilyMap</name></name> <operator>=</operator> <name>fontFamilyMap</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Associates a data object with a node so it can be retrieved later.
     * This is primarily used for caching the graphics node generated from
     * a 'pattern' element.  A soft reference to the data object is used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setElementData</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elementDataMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>elementDataMap</name> <operator>=</operator> <operator>new</operator> <call><name>WeakHashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>elementDataMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SoftReference</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves a data object associated with the given node.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getElementData</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elementDataMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>elementDataMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>SoftReference</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name>SoftReference</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>sr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>elementDataMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the user agent of this bridge context.
     */</comment>
    <function><type><specifier>public</specifier> <name>UserAgent</name></type> <name>getUserAgent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>userAgent</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the user agent to the specified user agent.
     * @param userAgent the user agent
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUserAgent</name><parameter_list>(<parameter><decl><type><name>UserAgent</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <name>userAgent</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the GVT builder that is currently used to build the GVT tree.
     */</comment>
    <function><type><specifier>public</specifier> <name>GVTBuilder</name></type> <name>getGVTBuilder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>gvtBuilder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the GVT builder that uses this context.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setGVTBuilder</name><parameter_list>(<parameter><decl><type><name>GVTBuilder</name></type> <name>gvtBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gvtBuilder</name></name> <operator>=</operator> <name>gvtBuilder</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the interpreter pool used to handle scripts.
     */</comment>
    <function><type><specifier>public</specifier> <name>InterpreterPool</name></type> <name>getInterpreterPool</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>interpreterPool</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the focus manager.
     */</comment>
    <function><type><specifier>public</specifier> <name>FocusManager</name></type> <name>getFocusManager</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>focusManager</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the cursor manager
     */</comment>
    <function><type><specifier>public</specifier> <name>CursorManager</name></type> <name>getCursorManager</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cursorManager</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the interpreter pool used to handle scripts to the
     * specified interpreter pool.
     * @param interpreterPool the interpreter pool
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInterpreterPool</name><parameter_list>(<parameter><decl><type><name>InterpreterPool</name></type> <name>interpreterPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interpreterPool</name></name> <operator>=</operator> <name>interpreterPool</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a Interpreter for the specified language.
     *
     * @param language the scripting language
     */</comment>
    <function><type><specifier>public</specifier> <name>Interpreter</name></type> <name>getInterpreter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>document</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Unknown document"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Interpreter</name></type> <name>interpreter</name> <init>= <expr><operator>(</operator><name>Interpreter</name><operator>)</operator><call><name><name>interpreterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>interpreter</name> <operator>=</operator> <call><name><name>interpreterPool</name><operator>.</operator><name>createInterpreter</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, 
                                                                <argument><expr><name>language</name></expr></argument>,
                                                                <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>mimeTypes</name> <init>= <expr><call><name><name>interpreter</name><operator>.</operator><name>getMimeTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>mimeType</name> <range>: <expr><name>mimeTypes</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>interpreterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Unknown language: "</literal> <operator>+</operator> <name>language</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>interpreter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the document loader used to load external documents.
     */</comment>
    <function><type><specifier>public</specifier> <name>DocumentLoader</name></type> <name>getDocumentLoader</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>documentLoader</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document loader used to load external documents.
     * @param newDocumentLoader the new document loader
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setDocumentLoader</name><parameter_list>(<parameter><decl><type><name>DocumentLoader</name></type> <name>newDocumentLoader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>documentLoader</name></name> <operator>=</operator> <name>newDocumentLoader</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the actual size of the document or null if the document
     * has not been built yet.
     */</comment>
    <function><type><specifier>public</specifier> <name>Dimension2D</name></type> <name>getDocumentSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>documentSize</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the size of the document to the specified dimension.
     *
     * @param d the actual size of the SVG document
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setDocumentSize</name><parameter_list>(<parameter><decl><type><name>Dimension2D</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>documentSize</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the document is dynamic, false otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDynamic</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>dynamicStatus</name> <operator>==</operator> <name>DYNAMIC</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the document is interactive, false otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInteractive</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>dynamicStatus</name> <operator>!=</operator> <name>STATIC</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document as a STATIC, INTERACTIVE or DYNAMIC document.
     * Call this method before the build phase
     * (ie. before &lt;code&gt;gvtBuilder.build(...)&lt;/code&gt;)
     * otherwise, that will have no effect.
     *
     *@param status the document dynamicStatus
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>dynamicStatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document as DYNAMIC if &lt;code&gt;dynamic&lt;/code&gt; is true
     * STATIC otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamic</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>dynamic</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dynamic</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setDynamicState</name><argument_list>(<argument><expr><name>DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setDynamicState</name><argument_list>(<argument><expr><name>STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document as INTERACTIVE if &lt;code&gt;interactive&lt;/code&gt; is
     * true STATIC otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInteractive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>interactive</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setDynamicState</name><argument_list>(<argument><expr><name>INTERACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setDynamicState</name><argument_list>(<argument><expr><name>STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the update manager, if the bridge supports dynamic features.
     */</comment>
    <function><type><specifier>public</specifier> <name>UpdateManager</name></type> <name>getUpdateManager</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>updateManager</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the update manager.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUpdateManager</name><parameter_list>(<parameter><decl><type><name>UpdateManager</name></type> <name>um</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>updateManager</name> <operator>=</operator> <name>um</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the update manager on the given BridgeContext.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUpdateManager</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>UpdateManager</name></type> <name>um</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setUpdateManager</name></name><argument_list>(<argument><expr><name>um</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the xblManager variable of the given BridgeContext.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setXBLManager</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>XBLManager</name></type> <name>xm</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>xblManager</name></name> <operator>=</operator> <name>xm</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the managed document is an SVG 1.2 document.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSVG12</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isSVG12</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the primary bridge context.
     */</comment>
    <function><type><specifier>public</specifier> <name>BridgeContext</name></type> <name>getPrimaryBridgeContext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>primaryContext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>primaryContext</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an array of the child contexts.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>BridgeContext</name><index>[]</index></name></type> <name>getChildContexts</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>BridgeContext</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>BridgeContext</name><index>[<expr><call><name><name>childContexts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>childContexts</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>WeakReference</name></type> <name>wr</name> <init>= <expr><operator>(</operator><name>WeakReference</name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BridgeContext</name><operator>)</operator> <call><name><name>wr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the AnimationEngine for the document.  Creates one if
     * it doesn't exist.
     */</comment>
    <function><type><specifier>public</specifier> <name>SVGAnimationEngine</name></type> <name>getAnimationEngine</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>animationEngine</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>animationEngine</name> <operator>=</operator> <operator>new</operator> <call><name>SVGAnimationEngine</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setAnimationLimitingMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>animationEngine</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// reference management //////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns a new URIResolver object.
     */</comment>
    <function><type><specifier>public</specifier> <name>URIResolver</name></type> <name>createURIResolver</name><parameter_list>(<parameter><decl><type><name>SVGDocument</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>DocumentLoader</name></type> <name>dl</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>URIResolver</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>dl</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the node referenced by the specified element by the specified
     * uri. The referenced node can be either an element given by a fragment
     * ID, or the document node.
     * @param e the element referencing
     * @param uri the uri of the referenced node
     */</comment>
    <function><type><specifier>public</specifier> <name>Node</name></type> <name>getReferencedNode</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>SVGDocument</name></type> <name>document</name> <init>= <expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URIResolver</name></type> <name>ur</name> <init>= <expr><call><name>createURIResolver</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>documentLoader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>ref</name> <init>= <expr><call><name><name>ur</name><operator>.</operator><name>getNode</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ERR_URI_BAD_TARGET</name></expr></argument>,
                                          <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uri</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>refDoc</name> <init>=
                    <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name><name>ref</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>DOCUMENT_NODE</name></name></expr>
                                       ?</condition><then> <expr><name>ref</name></expr>
                                       </then><else>: <expr><call><name><name>ref</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                <comment type="line">// This is new rather than attaching this BridgeContext</comment>
                <comment type="line">// with the new document we now create a whole new</comment>
                <comment type="line">// BridgeContext to go with the new document.</comment>
                <comment type="line">// This means that the new document has it's own</comment>
                <comment type="line">// world of stuff and it should avoid memory leaks</comment>
                <comment type="line">// since the new document isn't 'tied into' this</comment>
                <comment type="line">// bridge context.</comment>
                <if_stmt><if>if <condition>(<expr><name>refDoc</name> <operator>!=</operator> <name>document</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>createSubBridgeContext</name><argument_list>(<argument><expr><name>refDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>ref</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ERR_URI_MALFORMED</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uri</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedIOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InterruptedBridgeException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">//ex.printStackTrace();</comment>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ERR_URI_IO</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uri</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ERR_URI_UNSECURE</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uri</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the element referenced by the specified element by the
     * specified uri. The referenced element can not be a Document.
     *
     * @param e the element referencing
     * @param uri the uri of the referenced element
     */</comment>
    <function><type><specifier>public</specifier> <name>Element</name></type> <name>getReferencedElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>ref</name> <init>= <expr><call><name>getReferencedNode</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ref</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>ERR_URI_REFERENCE_A_DOCUMENT</name></expr></argument>,
                                      <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>uri</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>ref</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Viewport //////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns the viewport of the specified element.
     *
     * @param e the element interested in its viewport
     */</comment>
    <function><type><specifier>public</specifier> <name>Viewport</name></type> <name>getViewport</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>viewportStack</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// building time</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>viewportStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// outermost svg element</comment>
                <return>return <expr><operator>(</operator><name>Viewport</name><operator>)</operator><call><name><name>viewportMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// current viewport</comment>
                <return>return <expr><operator>(</operator><name>Viewport</name><operator>)</operator><call><name><name>viewportStack</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// search the first parent which has defined a viewport</comment>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>SVGUtilities</name><operator>.</operator><name>getParentElement</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Viewport</name></type> <name>viewport</name> <init>= <expr><operator>(</operator><name>Viewport</name><operator>)</operator><call><name><name>viewportMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>viewport</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>viewport</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>SVGUtilities</name><operator>.</operator><name>getParentElement</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><operator>(</operator><name>Viewport</name><operator>)</operator><call><name><name>viewportMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Starts a new viewport from the specified element.
     *
     * @param e the element that defines a new viewport
     * @param viewport the viewport of the element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>openViewport</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>Viewport</name></type> <name>viewport</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>viewportMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>viewport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>viewportStack</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>viewportStack</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>viewportStack</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>viewport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeViewport</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>viewportMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes the viewport associated to the specified element.
     * @param e the element that closes its viewport
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>closeViewport</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//viewportMap.remove(e); FIXME: potential memory leak</comment>
        <expr_stmt><expr><call><name><name>viewportStack</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>viewportStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>viewportStack</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// Bindings //////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Binds the specified GraphicsNode to the specified Node. This method
     * automatically bind the graphics node to the element and the element to
     * the graphics node.
     *
     * @param node the DOM Node to bind to the specified graphics node
     * @param gn the graphics node to bind to the specified element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>GraphicsNode</name></type> <name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elementNodeMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>elementNodeMap</name> <operator>=</operator> <operator>new</operator> <call><name>WeakHashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nodeElementMap</name> <operator>=</operator> <operator>new</operator> <call><name>WeakHashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>elementNodeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SoftReference</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nodeElementMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>gn</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SoftReference</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the binding of the specified Node.
     *
     * @param node the DOM Node to unbind
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unbind</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elementNodeMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>gn</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SoftReference</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name>SoftReference</name><operator>)</operator><call><name><name>elementNodeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>gn</name> <operator>=</operator> <operator>(</operator><name>GraphicsNode</name><operator>)</operator><call><name><name>sr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>elementNodeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>gn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>nodeElementMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the GraphicsNode associated to the specified Node or
     * null if any.
     *
     * @param node the DOM Node associated to the graphics node to return
     */</comment>
    <function><type><specifier>public</specifier> <name>GraphicsNode</name></type> <name>getGraphicsNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elementNodeMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SoftReference</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name>SoftReference</name><operator>)</operator><call><name><name>elementNodeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><name>GraphicsNode</name><operator>)</operator><call><name><name>sr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the Node associated to the specified GraphicsNode or
     * null if any.
     *
     * @param gn the graphics node associated to the element to return
     */</comment>
    <function><type><specifier>public</specifier> <name>Element</name></type> <name>getElement</name><parameter_list>(<parameter><decl><type><name>GraphicsNode</name></type> <name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nodeElementMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SoftReference</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name>SoftReference</name><operator>)</operator><call><name><name>nodeElementMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>sr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>n</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Bridge management /////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns true if the specified element has a GraphicsNodeBridge
     * associated to it, false otherwise.
     *
     * @param element the element
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasGraphicsNodeBridge</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURIMap</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>localName</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>namespaceURI</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>namespaceURI</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>HashMap</name></type> <name>localNameMap</name> <init>= <expr><operator>(</operator><name>HashMap</name><operator>)</operator> <call><name><name>namespaceURIMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>localNameMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name><name>localNameMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localName</name></expr></argument>)</argument_list></call> <operator>instanceof</operator> <name>GraphicsNodeBridge</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the bridge for the document node.
     */</comment>
    <function><type><specifier>public</specifier> <name>DocumentBridge</name></type> <name>getDocumentBridge</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SVGDocumentBridge</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the bridge associated with the specified element.
     *
     * @param element the element
     */</comment>
    <function><type><specifier>public</specifier> <name>Bridge</name></type> <name>getBridge</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>element</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURIMap</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>element</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>localName</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>namespaceURI</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>namespaceURI</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><call><name>getBridge</name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the bridge associated with the element type
     *
     * @param namespaceURI namespace of the requested element
     * @param localName element's local name
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>Bridge</name></type> <name>getBridge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Bridge</name></type> <name>bridge</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>namespaceURIMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>HashMap</name></type> <name>localNameMap</name> <init>= <expr><operator>(</operator><name>HashMap</name><operator>)</operator> <call><name><name>namespaceURIMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>localNameMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>bridge</name> <operator>=</operator> <operator>(</operator><name>Bridge</name><operator>)</operator><call><name><name>localNameMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>bridge</name> <operator>==</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>reservedNamespaceSet</name> <operator>==</operator> <literal type="null">null</literal>
                    <operator>||</operator> <operator>!</operator><call><name><name>reservedNamespaceSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>bridge</name> <operator>=</operator> <name>defaultBridge</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isDynamic</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>bridge</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>bridge</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>bridge</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Associates the specified &lt;code&gt;Bridge&lt;/code&gt; object with the specified
     * namespace URI and local name.
     * @param namespaceURI the namespace URI
     * @param localName the local name
     * @param bridge the bridge that manages the element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>putBridge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localName</name></decl></parameter>, <parameter><decl><type><name>Bridge</name></type> <name>bridge</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// start assert</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>namespaceURI</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>bridge</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
              <operator>&amp;&amp;</operator> <call><name><name>localName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>bridge</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Invalid Bridge: "</literal><operator>+</operator>
                            <name>namespaceURI</name><operator>+</operator><literal type="string">"/"</literal><operator>+</operator><call><name><name>bridge</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" "</literal><operator>+</operator>
                            <name>localName</name><operator>+</operator><literal type="string">"/"</literal><operator>+</operator><call><name><name>bridge</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" "</literal><operator>+</operator>
                            <call><name><name>bridge</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// end assert</comment>
        <if_stmt><if>if <condition>(<expr><name>namespaceURIMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>namespaceURIMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>namespaceURI</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>HashMap</name></type> <name>localNameMap</name> <init>= <expr><operator>(</operator><name>HashMap</name><operator>)</operator> <call><name><name>namespaceURIMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>localNameMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>localNameMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>namespaceURIMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>localNameMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>localNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>localName</name></expr></argument>, <argument><expr><name>bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Associates the specified &lt;code&gt;Bridge&lt;/code&gt; object with it's
     * namespace URI and local name.
     *
     * @param bridge the bridge that manages the element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>putBridge</name><parameter_list>(<parameter><decl><type><name>Bridge</name></type> <name>bridge</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>putBridge</name><argument_list>(<argument><expr><call><name><name>bridge</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bridge</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the &lt;code&gt;Bridge&lt;/code&gt; object associated to the specified
     * namespace URI and local name.
     *
     * @param namespaceURI the namespace URI
     * @param localName the local name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeBridge</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURIMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>namespaceURI</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>HashMap</name></type> <name>localNameMap</name> <init>= <expr><operator>(</operator><name>HashMap</name><operator>)</operator> <call><name><name>namespaceURIMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>localNameMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>localNameMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>localNameMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>namespaceURIMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>namespaceURIMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>namespaceURIMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;Bridge&lt;/code&gt; object to be used for foreign
     * namespace elements.
     *
     * @param bridge the bridge that manages the element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultBridge</name><parameter_list>(<parameter><decl><type><name>Bridge</name></type> <name>bridge</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>defaultBridge</name> <operator>=</operator> <name>bridge</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds a namespace URI to avoid when creating default bridges.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>putReservedNamespaceURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>reservedNamespaceSet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>reservedNamespaceSet</name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>reservedNamespaceSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes a namespace URI to avoid when creating default bridges.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeReservedNamespaceURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>reservedNamespaceSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>reservedNamespaceSet</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>reservedNamespaceSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reservedNamespaceSet</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// dynamic support ////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * The list of all EventListener attached by bridges that need to
     * be removed on a dispose() call.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Set</name></type> <name>eventListenerSet</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener to receive 'DOMCharacterDataModified' event.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>EventListener</name></type> <name>domCharacterDataModifiedEventListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener to receive 'DOMAttrModified' event.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>EventListener</name></type> <name>domAttrModifiedEventListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener to receive 'DOMNodeInserted' event.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>EventListener</name></type> <name>domNodeInsertedEventListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener to receive 'DOMNodeRemoved' event.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>EventListener</name></type> <name>domNodeRemovedEventListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The CSSEngine listener to receive CSSEngineEvent.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSEngineListener</name></type> <name>cssPropertiesChangedListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The listener to receive notification of animated attribute changes.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimatedAttributeListener</name></type> <name>animatedAttributeListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The EventListener that is responsible of managing DOM focus event.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>FocusManager</name></type> <name>focusManager</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Manages cursors and performs caching when appropriate
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CursorManager</name></type> <name>cursorManager</name> <init>= <expr><operator>new</operator> <call><name>CursorManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Adds EventListeners to the input document to handle the cursor
     * property.
     * This is not done in the addDOMListeners method because
     * addDOMListeners is only used for dynamic content whereas
     * cursor support is provided for all content.
     * Also note that it is very important that the listeners be
     * registered for the capture phase as the 'default' behavior
     * for cursors is handled by the BridgeContext during the
     * capture phase and the 'custom' behavior (handling of 'auto'
     * on anchors, for example), is handled during the bubbling phase.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addUIEventListeners</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NodeEventTarget</name></type> <name>evtTarget</name> <init>= <expr><operator>(</operator><name>NodeEventTarget</name><operator>)</operator><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DOMMouseOverEventListener</name></type> <name>domMouseOverListener</name> <init>=
            <expr><operator>new</operator> <call><name>DOMMouseOverEventListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>evtTarget</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_EVENT_MOUSEOVER</name></name></expr></argument>,
             <argument><expr><name>domMouseOverListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storeEventListenerNS</name>
            <argument_list>(<argument><expr><name>evtTarget</name></expr></argument>,
             <argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_EVENT_MOUSEOVER</name></name></expr></argument>,
             <argument><expr><name>domMouseOverListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DOMMouseOutEventListener</name></type> <name>domMouseOutListener</name> <init>=
            <expr><operator>new</operator> <call><name>DOMMouseOutEventListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>evtTarget</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_EVENT_MOUSEOUT</name></name></expr></argument>,
             <argument><expr><name>domMouseOutListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storeEventListenerNS</name>
            <argument_list>(<argument><expr><name>evtTarget</name></expr></argument>,
             <argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_EVENT_MOUSEOUT</name></name></expr></argument>,
             <argument><expr><name>domMouseOutListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeUIEventListeners</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>EventTarget</name></type> <name>evtTarget</name> <init>= <expr><operator>(</operator><name>EventTarget</name><operator>)</operator><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>eventListenerSet</name></expr>)</init> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>anEventListenerSet</name> <range>: <expr><name>eventListenerSet</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>EventListenerMememto</name></type> <name>elm</name> <init>= <expr><operator>(</operator><name>EventListenerMememto</name><operator>)</operator> <name>anEventListenerSet</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeEventTarget</name></type> <name>et</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>et</name> <operator>==</operator> <name>evtTarget</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>EventListener</name></type> <name>el</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getListener</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>uc</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getUseCapture</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>n</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getNamespaced</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>et</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>el</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>ns</name> <init>= <expr><call><name><name>elm</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>et</name><operator>.</operator><name>removeEventListenerNS</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>et</name><operator>.</operator><name>removeEventListener</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds EventListeners to the DOM and CSSEngineListener to the
     * CSSEngine to handle any modifications on the DOM tree or style
     * properties and update the GVT tree in response.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDOMListeners</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>doc</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>domAttrModifiedEventListener</name> <operator>=</operator> <operator>new</operator> <call><name>DOMAttrModifiedEventListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><literal type="string">"DOMAttrModified"</literal></expr></argument>,
             <argument><expr><name>domAttrModifiedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>domNodeInsertedEventListener</name> <operator>=</operator> <operator>new</operator> <call><name>DOMNodeInsertedEventListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><literal type="string">"DOMNodeInserted"</literal></expr></argument>,
             <argument><expr><name>domNodeInsertedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>domNodeRemovedEventListener</name> <operator>=</operator> <operator>new</operator> <call><name>DOMNodeRemovedEventListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><literal type="string">"DOMNodeRemoved"</literal></expr></argument>,
             <argument><expr><name>domNodeRemovedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>domCharacterDataModifiedEventListener</name> <operator>=</operator>
            <operator>new</operator> <call><name>DOMCharacterDataModifiedEventListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
             <argument><expr><literal type="string">"DOMCharacterDataModified"</literal></expr></argument>,
             <argument><expr><name>domCharacterDataModifiedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>animatedAttributeListener</name> <operator>=</operator> <operator>new</operator> <call><name>AnimatedAttrListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>addAnimatedAttributeListener</name></name><argument_list>(<argument><expr><name>animatedAttributeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>focusManager</name> <operator>=</operator> <operator>new</operator> <call><name>FocusManager</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CSSEngine</name></type> <name>cssEngine</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cssPropertiesChangedListener</name> <operator>=</operator> <operator>new</operator> <call><name>CSSPropertiesChangedListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cssEngine</name><operator>.</operator><name>addCSSEngineListener</name></name><argument_list>(<argument><expr><name>cssPropertiesChangedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes event listeners from the DOM and CSS engine.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeDOMListeners</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>doc</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>removeEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><literal type="string">"DOMAttrModified"</literal></expr></argument>,
             <argument><expr><name>domAttrModifiedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>removeEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><literal type="string">"DOMNodeInserted"</literal></expr></argument>,
             <argument><expr><name>domNodeInsertedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>removeEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><literal type="string">"DOMNodeRemoved"</literal></expr></argument>,
             <argument><expr><name>domNodeRemovedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>removeEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><literal type="string">"DOMCharacterDataModified"</literal></expr></argument>,
             <argument><expr><name>domCharacterDataModifiedEventListener</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>removeAnimatedAttributeListener</name></name><argument_list>(<argument><expr><name>animatedAttributeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CSSEngine</name></type> <name>cssEngine</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cssEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>cssEngine</name><operator>.</operator><name>removeCSSEngineListener</name></name>
                <argument_list>(<argument><expr><name>cssPropertiesChangedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cssEngine</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>doc</name><operator>.</operator><name>setCSSEngine</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds to the eventListenerSet the specified event listener
     * registration.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeEventListener</name><parameter_list>(<parameter><decl><type><name>EventTarget</name></type> <name>t</name></decl></parameter>,
                                      <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>,
                                      <parameter><decl><type><name>EventListener</name></type> <name>l</name></decl></parameter>,
                                      <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>eventListenerSet</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>eventListenerSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EventListenerMememto</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds to the eventListenerSet the specified event listener
     * registration.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeEventListenerNS</name><parameter_list>(<parameter><decl><type><name>EventTarget</name></type> <name>t</name></decl></parameter>,
                                        <parameter><decl><type><name>String</name></type> <name>n</name></decl></parameter>,
                                        <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>,
                                        <parameter><decl><type><name>EventListener</name></type> <name>l</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>eventListenerSet</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>eventListenerSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EventListenerMememto</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SoftReferenceMememto</name>
        <super_list><extends>extends <super><name><name>CleanerThread</name><operator>.</operator><name>SoftReferenceCleared</name></name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>mememto</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Set</name></type>    <name>set</name></decl>;</decl_stmt>
        <comment type="line">// String refStr;</comment>
        <constructor><name>SoftReferenceMememto</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>mememto</name></decl></parameter>, <parameter><decl><type><name>Set</name></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// refStr = ref.toString();</comment>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mememto</name></name> <operator>=</operator> <name>mememto</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>set</name></name>     <operator>=</operator> <name>set</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>cleared</name><parameter_list>()</parameter_list> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>set</name></expr>)</init> <block>{<block_content>
                <comment type="line">// System.err.println("SRClear: " + refStr);</comment>
                <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mememto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mememto</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>set</name>     <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A class used to store an EventListener added to the DOM.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>EventListenerMememto</name> <block>{

        <decl_stmt><decl><type><specifier>public</specifier> <name>SoftReference</name></type> <name>target</name></decl>;</decl_stmt> <comment type="line">// Soft ref to EventTarget</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>SoftReference</name></type> <name>listener</name></decl>;</decl_stmt> <comment type="line">// Soft ref to EventListener</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>useCapture</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>namespaceURI</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>eventType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>namespaced</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>EventListenerMememto</name><parameter_list>(<parameter><decl><type><name>EventTarget</name></type> <name>t</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>,
                                    <parameter><decl><type><name>EventListener</name></type> <name>l</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>,
                                    <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Set</name></type> <name>set</name> <init>= <expr><name><name>ctx</name><operator>.</operator><name>eventListenerSet</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>target</name> <operator>=</operator> <operator>new</operator> <call><name>SoftReferenceMememto</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <operator>new</operator> <call><name>SoftReferenceMememto</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>eventType</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>useCapture</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>EventListenerMememto</name><parameter_list>(<parameter><decl><type><name>EventTarget</name></type> <name>t</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>n</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>,
                                    <parameter><decl><type><name>EventListener</name></type> <name>l</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>,
                                    <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>namespaceURI</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>namespaced</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>EventListener</name></type> <name>getListener</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>EventListener</name><operator>)</operator><call><name><name>listener</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>NodeEventTarget</name></type> <name>getTarget</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>NodeEventTarget</name><operator>)</operator><call><name><name>target</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseCapture</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>useCapture</name></expr>;</return>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getNamespaceURI</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>namespaceURI</name></expr>;</return>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getEventType</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>eventType</name></expr>;</return>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNamespaced</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>namespaced</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Adds the GVT listener for AWT event support.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addGVTListener</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>BridgeEventSupport</name><operator>.</operator><name>addGVTListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clears the list of child BridgeContexts and disposes them if there are
     * no more references to them.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>clearChildContexts</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>childContexts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Disposes this BridgeContext.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>clearChildContexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <synchronized>synchronized <init>(<expr><name>eventListenerSet</name></expr>)</init> <block>{<block_content>
            <comment type="line">// remove all listeners added by Bridges</comment>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>anEventListenerSet</name> <range>: <expr><name>eventListenerSet</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>EventListenerMememto</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>EventListenerMememto</name><operator>)</operator> <name>anEventListenerSet</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NodeEventTarget</name></type> <name>et</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>EventListener</name></type> <name>el</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getListener</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>uc</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getUseCapture</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>t</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>n</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getNamespaced</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>et</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>el</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>ns</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>et</name><operator>.</operator><name>removeEventListenerNS</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>et</name><operator>.</operator><name>removeEventListener</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></synchronized>

        <if_stmt><if>if <condition>(<expr><name>document</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>removeDOMListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>AbstractGraphicsNodeBridge</name><operator>.</operator><name>disposeTree</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>animationEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>animationEngine</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>animationEngine</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>interpreterMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Interpreter</name></type> <name>interpreter</name> <init>= <expr><operator>(</operator><name>Interpreter</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>interpreter</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>interpreterMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>focusManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>focusManager</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>elementDataMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>elementDataMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodeElementMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>nodeElementMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>elementNodeMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>elementNodeMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the SVGContext associated to the specified Node or null if
     * there is none.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>SVGContext</name></type> <name>getSVGContext</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>instanceof</operator> <name>SVGOMElement</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>SVGOMElement</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>getSVGContext</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>node</name> <operator>instanceof</operator> <name>SVGOMDocument</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>SVGOMDocument</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>getSVGContext</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the BridgeUpdateHandler associated to the specified Node
     * or null if there is none.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>BridgeUpdateHandler</name></type> <name>getBridgeUpdateHandler</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGContext</name></type> <name>ctx</name> <init>= <expr><call><name>getSVGContext</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>ctx</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>BridgeUpdateHandler</name><operator>)</operator><name>ctx</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when an attribute is modified.
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMAttrModifiedEventListener</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMAttrModifiedEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMAttrModifiedEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'DOMAttrModified' event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator><call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>= <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleDOMAttrModifiedEvent</name></name><argument_list>(<argument><expr><operator>(</operator><name>MutationEvent</name><operator>)</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when the mouse exits an element
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMMouseOutEventListener</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMMouseOutEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMMouseOutEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'mouseout' MouseEvent event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>MouseEvent</name></type> <name>me</name> <init>= <expr><operator>(</operator><name>MouseEvent</name><operator>)</operator><name>evt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Element</name></type> <name>newTarget</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator><call><name><name>me</name><operator>.</operator><name>getRelatedTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><name><name>CursorManager</name><operator>.</operator><name>DEFAULT_CURSOR</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>newTarget</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>CSSUtilities</name><operator>.</operator><name>convertCursor</name></name>
                    <argument_list>(<argument><expr><name>newTarget</name></expr></argument>, <argument><expr><name><name>BridgeContext</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>cursor</name> <operator>=</operator> <name><name>CursorManager</name><operator>.</operator><name>DEFAULT_CURSOR</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>setSVGCursor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>


    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when the mouse mouves over a new
     * element.
     *
     * Here is how cursors are handled:
     *
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMMouseOverEventListener</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMMouseOverEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMMouseOverEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'mouseover' MouseEvent event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Element</name></type> <name>target</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator><call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>CSSUtilities</name><operator>.</operator><name>convertCursor</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>BridgeContext</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>setSVGCursor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when a node is added.
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMNodeInsertedEventListener</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMNodeInsertedEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMNodeInsertedEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'DOMNodeInserted' event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>MutationEvent</name></type> <name>me</name> <init>= <expr><operator>(</operator><name>MutationEvent</name><operator>)</operator><name>evt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>=
                <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><call><name><name>me</name><operator>.</operator><name>getRelatedNode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleDOMNodeInsertedEvent</name></name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedBridgeException</name></type> <name>ibe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="block">/* do nothing */</comment>
                </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when a node is removed.
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMNodeRemovedEventListener</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMNodeRemovedEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMNodeRemovedEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'DOMNodeRemoved' event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator><call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>= <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleDOMNodeRemovedEvent</name></name><argument_list>(<argument><expr><operator>(</operator><name>MutationEvent</name><operator>)</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The DOM EventListener invoked when a character data is changed.
     */</comment>
    <class><specifier>protected</specifier> class <name>DOMCharacterDataModifiedEventListener</name>
            <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new DOMCharacterDataModifiedEventListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMCharacterDataModifiedEventListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles 'DOMCharacterDataModified' event type.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator><call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>node</name> <operator>instanceof</operator> <name>SVGOMElement</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>AbstractNode</name><operator>)</operator> <name>node</name><operator>)</operator><operator>.</operator><call><name>getParentNodeEventTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>= <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleDOMCharacterDataModified</name></name><argument_list>(<argument><expr><operator>(</operator><name>MutationEvent</name><operator>)</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The CSSEngineListener invoked when CSS properties are modified
     * on a particular element.
     */</comment>
    <class><specifier>protected</specifier> class <name>CSSPropertiesChangedListener</name> <super_list><implements>implements <super><name>CSSEngineListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new CSSPropertiesChangedListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>CSSPropertiesChangedListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles CSSEngineEvent that describes the CSS properties
         * that have changed on a particular element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>propertiesChanged</name><parameter_list>(<parameter><decl><type><name>CSSEngineEvent</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Element</name></type> <name>elem</name> <init>= <expr><call><name><name>evt</name><operator>.</operator><name>getElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SVGContext</name></type> <name>ctx</name> <init>= <expr><call><name>getSVGContext</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>pgn</name> <init>= <expr><call><name>getGraphicsNode</name><argument_list>(<argument><expr><call><name><name>elem</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pgn</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>pgn</name> <operator>instanceof</operator> <name>CompositeGraphicsNode</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Something changed in this element but we really don't</comment>
                    <comment type="line">// care since its parent isn't displayed either.</comment>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>CompositeGraphicsNode</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>CompositeGraphicsNode</name><operator>)</operator><name>pgn</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// Check if 'display' changed on this element.</comment>

                <decl_stmt><decl><type><name><name>int</name> <index>[]</index></name></type> <name>properties</name> <init>= <expr><call><name><name>evt</name><operator>.</operator><name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>property</name> <range>: <expr><name>properties</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>property</name> <operator>==</operator> <name><name>SVGCSSEngine</name><operator>.</operator><name>DISPLAY_INDEX</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>CSSUtilities</name><operator>.</operator><name>convertDisplay</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// (Still) Not displayed</comment>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <comment type="line">// build the graphics node</comment>
                        <decl_stmt><decl><type><name>GVTBuilder</name></type> <name>builder</name> <init>= <expr><call><name>getGVTBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>childNode</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name>
                                <argument_list>(<argument><expr><name><name>BridgeContext</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>childNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <comment type="line">// the added element is not a graphic element?</comment>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>Node</name></type> <name>ps</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>getPreviousSibling</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>ps</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
                             <incr><expr><name>ps</name> <operator>=</operator> <call><name><name>ps</name><operator>.</operator><name>getPreviousSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>ps</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition><block type="pseudo"><block_content>
                                <continue>continue;</continue></block_content></block></if></if_stmt>
                            <decl_stmt><decl><type><name>Element</name></type> <name>pse</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>ps</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>gn</name> <init>= <expr><call><name>getGraphicsNode</name><argument_list>(<argument><expr><name>pse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>gn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                                <continue>continue;</continue></block_content></block></if></if_stmt>
                            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                                <continue>continue;</continue></block_content></block></if></if_stmt>
                            <break>break;</break>
                        </block_content>}</block></for>
                        <comment type="line">// insert after prevSibling, if</comment>
                        <comment type="line">// it was -1 this becomes 0 (first slot)</comment>
                        <expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>childNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt> <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ctx</name> <operator>instanceof</operator> <name>BridgeUpdateHandler</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>BridgeUpdateHandler</name><operator>)</operator><name>ctx</name><operator>)</operator><operator>.</operator><call><name>handleCSSEngineEvent</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A listener class for changes to animated attributes in the document.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimatedAttrListener</name>
        <super_list><implements>implements <super><name>AnimatedAttributeListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Creates a new AnimatedAttributeListener.
         */</comment>
        <constructor><specifier>public</specifier> <name>AnimatedAttrListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Called to notify an object of a change to the animated value of
         * an animated XML attribute.
         * @param e the owner element of the changed animated attribute
         * @param alav the AnimatedLiveAttributeValue that changed
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>animatedAttributeChanged</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                             <parameter><decl><type><name>AnimatedLiveAttributeValue</name></type> <name>alav</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>= <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleAnimatedAttributeChanged</name></name><argument_list>(<argument><expr><name>alav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Called to notify an object of a change to the value of an 'other'
         * animation.
         * @param e the element being animated
         * @param type the type of animation whose value changed
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>otherAnimationChanged</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>BridgeUpdateHandler</name></type> <name>h</name> <init>= <expr><call><name>getBridgeUpdateHandler</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>handleOtherAnimationChanged</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">// CSS context ////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Returns the Value corresponding to the given system color.
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getSystemColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ident</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>SystemColorSupport</name><operator>.</operator><name>getSystemColor</name></name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the value corresponding to the default font.
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getDefaultFontFamily</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// No cache needed since the default font family is asked only</comment>
        <comment type="line">// one time on the root element (only if it does not have its</comment>
        <comment type="line">// own font-family).</comment>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type>      <name>doc</name>  <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SVGStylableElement</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>SVGStylableElement</name><operator>)</operator><call><name><name>doc</name><operator>.</operator><name>getRootElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>userAgent</name><operator>.</operator><name>getDefaultFontFamily</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>doc</name><operator>.</operator><name>getCSSEngine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>parsePropertyValue</name>
            <argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><name><name>SVGConstants</name><operator>.</operator><name>CSS_FONT_FAMILY_PROPERTY</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a lighter font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getLighterFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userAgent</name><operator>.</operator><name>getLighterFontWeight</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a bolder font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBolderFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userAgent</name><operator>.</operator><name>getBolderFontWeight</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelUnitToMillimeter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userAgent</name><operator>.</operator><name>getPixelUnitToMillimeter</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     * This will be removed after next release.
     * @see #getPixelUnitToMillimeter()
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelToMillimeter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPixelUnitToMillimeter</name><argument_list>()</argument_list></call></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the medium font size.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMediumFontSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>userAgent</name><operator>.</operator><name>getMediumFontSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the width of the block which directly contains the
     * given element.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBlockWidth</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getViewport</name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the height of the block which directly contains the
     * given element.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBlockHeight</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getViewport</name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method throws a SecurityException if the resource
     * found at url and referenced from docURL
     * should not be loaded.
     *
     * This is a convenience method to call checkLoadExternalResource
     * on the ExternalResourceSecurity strategy returned by
     * getExternalResourceSecurity.
     *
     * @param resourceURL url for the script, as defined in
     *        the resource's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the
     *        resource was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type>
        <name>checkLoadExternalResource</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>,
                                  <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>checkLoadExternalResource</name></name><argument_list>(<argument><expr><name>resourceURL</name></expr></argument>,
                                            <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Tells whether the given SVG document is dynamic.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDynamicDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>BaseScriptingEnvironment</name><operator>.</operator><name>isDynamicDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether the given SVG document is Interactive.
     * We say it is, if it has any &amp;lt;title&amp;gt;, &amp;lt;desc&amp;gt;, or &amp;lt;a&amp;gt; elements,
     * of if the 'cursor' property is anything but Auto on any element.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInteractiveDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SVGDocument</name><operator>)</operator><name>doc</name><operator>)</operator><operator>.</operator><call><name>getRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>checkInteractiveElement</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * used by isInteractiveDocument to check if document
     * contains any 'interactive' elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkInteractiveElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>checkInteractiveElement</name>
            <argument_list>(<argument><expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * used by isInteractiveDocument to check if document
     * contains any 'interactive' elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkInteractiveElement</name><parameter_list>(<parameter><decl><type><name>SVGDocument</name></type> <name>doc</name></decl></parameter>,
                                           <parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>tag</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check if it's one of our important element.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_A_TAG</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// This is a bit of a hack but don't count</comment>
        <comment type="line">// title and desc as children of root SVG since</comment>
        <comment type="line">// we don't show tool tips for them anyways.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_TITLE_TAG</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>e</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>doc</name><operator>.</operator><name>getRootElement</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_DESC_TAG</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>e</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>doc</name><operator>.</operator><name>getRootElement</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_CURSOR_TAG</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// I am well aware that this is not 100% accurate but it's</comment>
        <comment type="line">// the best I can do w/o booting the CSSEngine.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getAttribute</name></name><argument_list>(<argument><expr><name><name>CSSConstants</name><operator>.</operator><name>CSS_CURSOR_PROPERTY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* We would like to do this but the CSS Engine isn't setup when
           we want to do this.

        // Check if cursor property is set to something other than 'auto'.
        Value cursorValue = CSSUtilities.getComputedStyle
            (e, SVGCSSEngine.CURSOR_INDEX);
        if ((cursorValue != null) &amp;&amp;
            (cursorValue.getCssValueType()  == CSSValue.CSS_PRIMITIVE_VALUE) &amp;&amp;
            (cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) &amp;&amp;
            (SVGConstants.SVG_AUTO_VALUE.equals(cursorValue.getStringValue())))
            return true;
        */</comment>

        <comment type="line">// Check all the child elements for any of the above.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>svg_ns</name> <init>= <expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
             <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Element</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>svg_ns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>checkInteractiveElement</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to "none".
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingNone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>animationEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setAnimationLimitingMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to a percentage of CPU.
     * @param pc the maximum percentage of CPU to use (0 &amp;lt; pc â¤ 1)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingCPU</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>animationLimitingAmount</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>animationEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setAnimationLimitingMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the animation limiting mode to a number of frames per second.
     * @param fps the maximum number of frames per second (fps &amp;gt; 0)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnimationLimitingFPS</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>fps</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>animationLimitingMode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>animationLimitingAmount</name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>animationEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setAnimationLimitingMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the animationg limiting mode on the animation engine.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setAnimationLimitingMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>animationLimitingMode</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// unlimited</comment>
                <expr_stmt><expr><call><name><name>animationEngine</name><operator>.</operator><name>setAnimationLimitingNone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// %cpu</comment>
                <expr_stmt><expr><call><name><name>animationEngine</name><operator>.</operator><name>setAnimationLimitingCPU</name></name>
                    <argument_list>(<argument><expr><name>animationLimitingAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// fps</comment>
                <expr_stmt><expr><call><name><name>animationEngine</name><operator>.</operator><name>setAnimationLimitingFPS</name></name>
                    <argument_list>(<argument><expr><name>animationLimitingAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="line">// bridge extensions support //////////////////////////////////////////////</comment>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>extensions</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Registers the bridges to handle SVG 1.0 elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerSVGBridges</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UserAgent</name></type> <name>ua</name> <init>= <expr><call><name>getUserAgent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>ext</name> <init>= <expr><call><name>getBridgeExtensions</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Object</name></type> <name>anExt</name> <range>: <expr><name>ext</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>be</name> <init>= <expr><operator>(</operator><name>BridgeExtension</name><operator>)</operator> <name>anExt</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>be</name><operator>.</operator><name>registerTags</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ua</name><operator>.</operator><name>registerExtension</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>List</name></type> <name>getBridgeExtensions</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>doc</name><operator>)</operator><operator>.</operator><call><name>getRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ver</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeNS</name></name>
            <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_VERSION_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>svgBE</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>ver</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"1.0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>ver</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>svgBE</name> <operator>=</operator> <operator>new</operator> <call><name>SVGBridgeExtension</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>svgBE</name> <operator>=</operator> <operator>new</operator> <call><name>SVG12BridgeExtension</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>priority</name> <init>= <expr><call><name><name>svgBE</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>extensions</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>(<argument><expr><call><name>getGlobalBridgeExtensions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ListIterator</name></type> <name>li</name> <init>= <expr><call><name><name>extensions</name><operator>.</operator><name>listIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>li</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>svgBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>lbe</name> <init>= <expr><operator>(</operator><name>BridgeExtension</name><operator>)</operator><call><name><name>li</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>lbe</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>priority</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>svgBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>extensions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the extensions supported by this bridge context.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>List</name></type> <name>globalExtensions</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>List</name></type> <name>getGlobalBridgeExtensions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>globalExtensions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>globalExtensions</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>globalExtensions</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>Service</name><operator>.</operator><name>providers</name></name><argument_list>(<argument><expr><name><name>BridgeExtension</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>be</name> <init>= <expr><operator>(</operator><name>BridgeExtension</name><operator>)</operator><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>priority</name>  <init>= <expr><call><name><name>be</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListIterator</name></type> <name>li</name> <init>= <expr><call><name><name>globalExtensions</name><operator>.</operator><name>listIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>li</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>lbe</name> <init>= <expr><operator>(</operator><name>BridgeExtension</name><operator>)</operator><call><name><name>li</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>lbe</name><operator>.</operator><name>getPriority</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>priority</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>previous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>li</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></while>
        <return>return <expr><name>globalExtensions</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CSSEngineUserAgentWrapper</name> <super_list><implements>implements <super><name>CSSEngineUserAgent</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><name>UserAgent</name></type> <name>ua</name></decl>;</decl_stmt>
        <constructor><name>CSSEngineUserAgentWrapper</name><parameter_list>(<parameter><decl><type><name>UserAgent</name></type> <name>ua</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ua</name></name> <operator>=</operator> <name>ua</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Displays an error resulting from the specified Exception.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>ua</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays a message in the User Agent interface.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>displayMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>ua</name><operator>.</operator><name>displayMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    }</block></class>

}</block></class>

</unit>
