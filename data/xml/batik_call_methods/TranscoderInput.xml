<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/TranscoderInput.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>XMLReader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents a generic input of a &lt;code&gt;Transcoder&lt;/code&gt;.
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>TranscoderInput</name> <block>{

    <comment type="block" format="javadoc">/**
     * The optional XML reader to receive SAX events.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>XMLReader</name></type> <name>xmlReader</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The optional input has a byte stream.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>InputStream</name></type> <name>istream</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The optional input as a character stream.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Reader</name></type> <name>reader</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The optional input as XML Document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Document</name></type> <name>document</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The optional input as a URI.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>uri</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new empty &lt;code&gt;TranscoderInput&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;TranscoderInput&lt;/code&gt; with the specified
     * XML reader.
     * @param xmlReader the XML reader of this transcoder input
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>(<parameter><decl><type><name>XMLReader</name></type> <name>xmlReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xmlReader</name></name> <operator>=</operator> <name>xmlReader</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;TranscoderInput&lt;/code&gt; with the specified
     * byte stream input.
     * @param istream the byte stream of this transcoder input
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>istream</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>istream</name></name> <operator>=</operator> <name>istream</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;TranscoderInput&lt;/code&gt; with the specified
     * character stream.
     * @param reader the character stream of this transcoder input
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;TranscoderInput&lt;/code&gt; with the specified Document.
     * @param document the Document of this transcoder input
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>document</name></name> <operator>=</operator> <name>document</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;TranscoderInput&lt;/code&gt; with the specified uri.
     * @param uri the URI of this transcoder input
     */</comment>
    <constructor><specifier>public</specifier> <name>TranscoderInput</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Sets the input of this transcoder input with the specified
     * XML reader.
     * @param xmlReader the XML reader of this transcoder input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXMLReader</name><parameter_list>(<parameter><decl><type><name>XMLReader</name></type> <name>xmlReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xmlReader</name></name> <operator>=</operator> <name>xmlReader</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the XML reader of this transcoder or null if none was
     * supplied.
     */</comment>
    <function><type><specifier>public</specifier> <name>XMLReader</name></type> <name>getXMLReader</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>xmlReader</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the input of this transcoder input with the specified
     * byte stream.
     * @param istream the byte stream of this transcoder input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>istream</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>istream</name></name> <operator>=</operator> <name>istream</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the input of this transcoder as a byte stream or null
     * if none was supplied.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>istream</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the input of this transcoder input with the specified
     * character stream.
     * @param reader the character stream of this transcoder input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReader</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the input of this transcoder as a character stream or null
     * if none was supplied.
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>getReader</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>reader</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the input of this transcoder input with the specified
     * document.
     * @param document the document of this transcoder input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>document</name></name> <operator>=</operator> <name>document</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the input of this transcoder as a document or null if
     * none was supplied.
     */</comment>
    <function><type><specifier>public</specifier> <name>Document</name></type> <name>getDocument</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>document</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the input of this transcoder input with the specified URI.
     * @param uri the URI of this transcoder input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the input of this transcoder as a URI or null if none
     * was supplied.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURI</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
