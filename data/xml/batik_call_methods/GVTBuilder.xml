<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/GVTBuilder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>CompositeGraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>GraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>RootGraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>HaltingThread</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is responsible for creating a GVT tree using an SVG DOM tree.
 *
 * @author &lt;a href="mailto:tkormann@apache.org"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>GVTBuilder</name> <super_list><implements>implements <super><name>SVGConstants</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new builder.
     */</comment>
    <constructor><specifier>public</specifier> <name>GVTBuilder</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Builds using the specified bridge context the specified SVG document.
     *
     * @param ctx the bridge context
     * @param document the SVG document to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */</comment>
    <function><type><specifier>public</specifier> <name>GraphicsNode</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// the bridge context is now associated to one document</comment>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setDocument</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>initializeDocument</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// inform the bridge context the builder to use</comment>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setGVTBuilder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// build the GVT tree</comment>
        <decl_stmt><decl><type><name>DocumentBridge</name></type> <name>dBridge</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getDocumentBridge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RootGraphicsNode</name></type> <name>rootNode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// create the root node</comment>
            <expr_stmt><expr><name>rootNode</name> <operator>=</operator> <call><name><name>dBridge</name><operator>.</operator><name>createGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Element</name></type> <name>svgElement</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>topNode</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// get the appropriate bridge according to the specified element</comment>
            <decl_stmt><decl><type><name>Bridge</name></type> <name>bridge</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getBridge</name></name><argument_list>(<argument><expr><name>svgElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bridge</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>bridge</name> <operator>instanceof</operator> <name>GraphicsNodeBridge</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// create the associated composite graphics node</comment>
            <decl_stmt><decl><type><name>GraphicsNodeBridge</name></type> <name>gnBridge</name> <init>= <expr><operator>(</operator><name>GraphicsNodeBridge</name><operator>)</operator><name>bridge</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>topNode</name> <operator>=</operator> <call><name><name>gnBridge</name><operator>.</operator><name>createGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>svgElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>topNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>rootNode</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>topNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>buildComposite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>svgElement</name></expr></argument>, <argument><expr><operator>(</operator><name>CompositeGraphicsNode</name><operator>)</operator><name>topNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>gnBridge</name><operator>.</operator><name>buildGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>svgElement</name></expr></argument>, <argument><expr><name>topNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// finally, build the root node</comment>
            <expr_stmt><expr><call><name><name>dBridge</name><operator>.</operator><name>buildGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>document</name></expr></argument>, <argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BridgeException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// update the exception with the missing parameters</comment>
            <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>setGraphicsNode</name></name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//ex.printStackTrace();</comment>
            <throw>throw <expr><name>ex</name></expr>;</throw> <comment type="line">// re-throw the udpated exception</comment>
        </block_content>}</block></catch></try>

        <comment type="line">// For cursor handling</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>isInteractive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>addUIEventListeners</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// register GVT listeners for AWT event support</comment>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>addGVTListener</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// &lt;!&gt; FIXME: TO BE REMOVED</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>isDynamic</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// register DOM listeners for dynamic support</comment>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>addDOMListeners</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>rootNode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Builds using the specified bridge context the specified Element.
     *
     * @param ctx the bridge context
     * @param e the element to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */</comment>
    <function><type><specifier>public</specifier> <name>GraphicsNode</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// get the appropriate bridge according to the specified element</comment>
        <decl_stmt><decl><type><name>Bridge</name></type> <name>bridge</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getBridge</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bridge</name> <operator>instanceof</operator> <name>GenericBridge</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// If it is a GenericBridge just handle it and any GenericBridge</comment>
            <comment type="line">// descendents and return.</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GenericBridge</name><operator>)</operator> <name>bridge</name><operator>)</operator><operator>.</operator><call><name>handleElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bridge</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>bridge</name> <operator>instanceof</operator> <name>GraphicsNodeBridge</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// create the associated graphics node</comment>
        <decl_stmt><decl><type><name>GraphicsNodeBridge</name></type> <name>gnBridge</name> <init>= <expr><operator>(</operator><name>GraphicsNodeBridge</name><operator>)</operator><name>bridge</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// check the display property</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gnBridge</name><operator>.</operator><name>getDisplay</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>gn</name> <init>= <expr><call><name><name>gnBridge</name><operator>.</operator><name>createGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>gn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>gnBridge</name><operator>.</operator><name>isComposite</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>buildComposite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>CompositeGraphicsNode</name><operator>)</operator><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>gnBridge</name><operator>.</operator><name>buildGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// &lt;!&gt; FIXME: see build(BridgeContext, Element)</comment>
        <comment type="line">// + may load the script twice (for example</comment>
        <comment type="line">// outside 'use' is ok versus local 'use' maybe wrong).</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>isDynamic</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">//BridgeEventSupport.loadScripts(ctx, e);</comment>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>gn</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Builds a composite Element.
     *
     * @param ctx the bridge context
     * @param e the element to build
     * @param parentNode the composite graphics node, parent of the
     *                   graphics node to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>buildComposite</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>,
                                  <parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                  <parameter><decl><type><name>CompositeGraphicsNode</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>buildGraphicsNode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>Element</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>parentNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Builds a 'leaf' Element.
     *
     * @param ctx the bridge context
     * @param e the element to build
     * @param parentNode the composite graphics node, parent of the
     *                   graphics node to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>buildGraphicsNode</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>,
                                     <parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                     <parameter><decl><type><name>CompositeGraphicsNode</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Check If we should halt early.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>HaltingThread</name><operator>.</operator><name>hasBeenHalted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InterruptedBridgeException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// get the appropriate bridge according to the specified element</comment>
        <decl_stmt><decl><type><name>Bridge</name></type> <name>bridge</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getBridge</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bridge</name> <operator>instanceof</operator> <name>GenericBridge</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// If it is a GenericBridge just handle it and any GenericBridge</comment>
            <comment type="line">// descendents and return.</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GenericBridge</name><operator>)</operator> <name>bridge</name><operator>)</operator><operator>.</operator><call><name>handleElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bridge</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>bridge</name> <operator>instanceof</operator> <name>GraphicsNodeBridge</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// check the display property</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>CSSUtilities</name><operator>.</operator><name>convertDisplay</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>GraphicsNodeBridge</name></type> <name>gnBridge</name> <init>= <expr><operator>(</operator><name>GraphicsNodeBridge</name><operator>)</operator><name>bridge</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// create the associated graphics node</comment>
            <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>gn</name> <init>= <expr><call><name><name>gnBridge</name><operator>.</operator><name>createGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>gn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// attach the graphics node to the GVT tree now !</comment>
                <expr_stmt><expr><call><name><name>parentNode</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// check if the element has children to build</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>gnBridge</name><operator>.</operator><name>isComposite</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>buildComposite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>CompositeGraphicsNode</name><operator>)</operator><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// if not then still handle the GenericBridges</comment>
                    <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>gnBridge</name><operator>.</operator><name>buildGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>gn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BridgeException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// some bridge may decide that the node in error can be</comment>
            <comment type="line">// displayed (e.g. polyline, path...)</comment>
            <comment type="line">// In this case, the exception contains the GraphicsNode</comment>
            <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>errNode</name> <init>= <expr><call><name><name>ex</name><operator>.</operator><name>getGraphicsNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>errNode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>parentNode</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>errNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>gnBridge</name><operator>.</operator><name>buildGraphicsNode</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>errNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>setGraphicsNode</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">//ex.printStackTrace();</comment>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles any GenericBridge elements which are children of the
     * specified element.
     * @param ctx the bridge context
     * @param e the element whose child elements should be handled
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleGenericBridges</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>instanceof</operator> <name>Element</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Element</name></type> <name>e2</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator> <name>n</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Bridge</name></type> <name>b</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getBridge</name></name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>b</name> <operator>instanceof</operator> <name>GenericBridge</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>GenericBridge</name><operator>)</operator> <name>b</name><operator>)</operator><operator>.</operator><call><name>handleElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>handleGenericBridges</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class>
</unit>
