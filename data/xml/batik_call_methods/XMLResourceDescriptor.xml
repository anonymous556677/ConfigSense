<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-util/src/main/java/org/apache/batik/util/XMLResourceDescriptor.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>MissingResourceException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class describes the XML resources needed to use the various batik
 * modules.
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>XMLResourceDescriptor</name> <block>{

    <comment type="block" format="javadoc">/**
     * The XML parser class name key.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>XML_PARSER_CLASS_NAME_KEY</name> <init>=
        <expr><literal type="string">"org.xml.sax.driver"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The CSS parser class name key.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CSS_PARSER_CLASS_NAME_KEY</name> <init>=
        <expr><literal type="string">"org.w3c.css.sac.driver"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The resources file name
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RESOURCES</name> <init>=
        <expr><literal type="string">"resources/XMLResourceDescriptor.properties"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The resource bundle
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>Properties</name></type> <name>parserProps</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The class name of the XML parser to use.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>xmlParserClassName</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The class name of the CSS parser to use.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>cssParserClassName</name></decl>;</decl_stmt>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>Properties</name></type> <name>getParserProps</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>parserProps</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>parserProps</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>parserProps</name> <operator>=</operator> <operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Class</name></type> <name>cls</name> <init>= <expr><name><name>XMLResourceDescriptor</name><operator>.</operator><name>class</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>cls</name><operator>.</operator><name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>RESOURCES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parserProps</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>MissingResourceException</name><argument_list>(<argument><expr><call><name><name>ioe</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><name>RESOURCES</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>parserProps</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the class name of the XML parser to use.
     *
     * &lt;p&gt;This method first checks if any XML parser has been specified using
     * the &lt;code&gt;setXMLParserClassName&lt;/code&gt; method. If any, this method will
     * return the value of the property 'org.xml.sax.driver' specified in the
     * &lt;code&gt;resources/XMLResourceDescriptor.properties&lt;/code&gt; resource file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getXMLParserClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>xmlParserClassName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>xmlParserClassName</name> <operator>=</operator> <call><name>getParserProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name>
                <argument_list>(<argument><expr><name>XML_PARSER_CLASS_NAME_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>xmlParserClassName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the class name of the XML parser to use.
     *
     * @param xmlParserClassName the classname of the XML parser
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setXMLParserClassName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>xmlParserClassName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>XMLResourceDescriptor</name><operator>.</operator><name>xmlParserClassName</name></name> <operator>=</operator> <name>xmlParserClassName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the class name of the CSS parser to use.
     *
     * &lt;p&gt;This method first checks if any CSS parser has been
     * specified using the &lt;code&gt;setCSSParserClassName&lt;/code&gt; method. If
     * any, this method will return the value of the property
     * 'org.w3c.css.sac.driver' specified in the
     * &lt;code&gt;resources/XMLResourceDescriptor.properties&lt;/code&gt; resource
     * file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getCSSParserClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cssParserClassName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cssParserClassName</name> <operator>=</operator> <call><name>getParserProps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProperty</name>
                <argument_list>(<argument><expr><name>CSS_PARSER_CLASS_NAME_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cssParserClassName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the class name of the CSS parser to use.
     *
     * @param cssParserClassName the classname of the CSS parser
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCSSParserClassName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cssParserClassName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>XMLResourceDescriptor</name><operator>.</operator><name>cssParserClassName</name></name> <operator>=</operator> <name>cssParserClassName</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
