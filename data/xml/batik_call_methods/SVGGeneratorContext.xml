<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-svggen/src/main/java/org/apache/batik/svggen/SVGGeneratorContext.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>svggen</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Composite</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Shape</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Stroke</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormatSymbols</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class contains all non graphical contextual information that
 * are needed by the {@link org.apache.batik.svggen.SVGGraphics2D} to
 * generate SVG from Java 2D primitives.
 * You can subclass it to change the defaults.
 *
 * @see org.apache.batik.svggen.SVGGraphics2D#SVGGraphics2D(SVGGeneratorContext,boolean)
 * @author &lt;a href="mailto:cjolif@ilog.fr"&gt;Christophe Jolif&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>SVGGeneratorContext</name> <super_list><implements>implements <super><name>ErrorConstants</name></super></implements></super_list> <block>{
    <comment type="line">// this fields are package access for read-only purpose</comment>

    <comment type="block" format="javadoc">/**
     * Factory used by this Graphics2D to create Elements
     * that make the SVG DOM Tree
     */</comment>
    <decl_stmt><decl><type><name>Document</name></type> <name>domFactory</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Handler that defines how images are referenced in the
     * generated SVG fragment. This allows different strategies
     * to be used to handle images.
     * @see org.apache.batik.svggen.ImageHandler
     * @see org.apache.batik.svggen.ImageHandlerBase64Encoder
     * @see org.apache.batik.svggen.ImageHandlerPNGEncoder
     * @see org.apache.batik.svggen.ImageHandlerJPEGEncoder
     */</comment>
    <decl_stmt><decl><type><name>ImageHandler</name></type> <name>imageHandler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Generic image handler. This allows more sophisticated
     * image handling strategies than the &lt;code&gt;ImageHandler&lt;/code&gt;
     * interfaces.
     */</comment>
    <decl_stmt><decl><type><name>GenericImageHandler</name></type> <name>genericImageHandler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * To deal with Java 2D extension (custom java.awt.Paint for example).
     */</comment>
    <decl_stmt><decl><type><name>ExtensionHandler</name></type> <name>extensionHandler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * To generate consitent ids.
     */</comment>
    <decl_stmt><decl><type><name>SVGIDGenerator</name></type> <name>idGenerator</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * To set style.
     */</comment>
    <decl_stmt><decl><type><name>StyleHandler</name></type> <name>styleHandler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comment to insert at generation time.
     */</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>generatorComment</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The error handler.
     */</comment>
    <decl_stmt><decl><type><name>ErrorHandler</name></type> <name>errorHandler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Do we accept SVG Fonts generation?
     */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>svgFont</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * GraphicContextDefaults
     */</comment>
    <decl_stmt><decl><type><name>GraphicContextDefaults</name></type> <name>gcDefaults</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Number of decimal places to use in output values.
     * 3 decimal places are used by default.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Current double value formatter
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DecimalFormat</name></type> <name>decimalFormat</name> <init>= <expr><name><name>decimalFormats</name><index>[<expr><name>precision</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Class to describe the GraphicContext defaults to
     * be used. Note that this class does *not* contain
     * a default for the initial transform, as this
     * transform *has to be identity* for the SVGGraphics2D
     * to operate (the TransformStacks operation is based
     * on that assumption. See the DOMTreeManager class).
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>GraphicContextDefaults</name> <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Stroke</name></type> <name>stroke</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Composite</name></type> <name>composite</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Shape</name></type> <name>clip</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>RenderingHints</name></type> <name>hints</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Color</name></type> <name>background</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setStroke</name><parameter_list>(<parameter><decl><type><name>Stroke</name></type> <name>stroke</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stroke</name></name> <operator>=</operator> <name>stroke</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getStroke</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>stroke</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setComposite</name><parameter_list>(<parameter><decl><type><name>Composite</name></type> <name>composite</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>composite</name></name> <operator>=</operator> <name>composite</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Composite</name></type> <name>getComposite</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>composite</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClip</name><parameter_list>(<parameter><decl><type><name>Shape</name></type> <name>clip</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clip</name></name> <operator>=</operator> <name>clip</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getClip</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>clip</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderingHints</name><parameter_list>(<parameter><decl><type><name>RenderingHints</name></type> <name>hints</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hints</name></name> <operator>=</operator> <name>hints</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>RenderingHints</name></type> <name>getRenderingHints</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>hints</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFont</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>font</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackground</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>background</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name>background</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Color</name></type> <name>getBackground</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>background</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<parameter><decl><type><name>Paint</name></type> <name>paint</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paint</name></name> <operator>=</operator> <name>paint</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name>paint</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Builds an instance of &lt;code&gt;SVGGeneratorContext&lt;/code&gt; with the given
     * &lt;code&gt;domFactory&lt;/code&gt; but let the user set later the other contextual
     * information. Please note that none of the parameter below should be
     * &lt;code&gt;null&lt;/code&gt;.
     * @see #setIDGenerator
     * @see #setExtensionHandler
     * @see #setImageHandler
     * @see #setStyleHandler
     * @see #setErrorHandler
     */</comment>
    <constructor><specifier>protected</specifier> <name>SVGGeneratorContext</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>domFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setDOMFactory</name><argument_list>(<argument><expr><name>domFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates an instance of &lt;code&gt;SVGGeneratorContext&lt;/code&gt; with the
     * given &lt;code&gt;domFactory&lt;/code&gt; and with the default values for the
     * other information.
     * @see org.apache.batik.svggen.SVGIDGenerator
     * @see org.apache.batik.svggen.DefaultExtensionHandler
     * @see org.apache.batik.svggen.ImageHandlerBase64Encoder
     * @see org.apache.batik.svggen.DefaultStyleHandler
     * @see org.apache.batik.svggen.DefaultErrorHandler
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SVGGeneratorContext</name></type> <name>createDefault</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>domFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGGeneratorContext</name></type> <name>ctx</name> <init>= <expr><operator>new</operator> <call><name>SVGGeneratorContext</name><argument_list>(<argument><expr><name>domFactory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setIDGenerator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SVGIDGenerator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setExtensionHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultExtensionHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setImageHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageHandlerBase64Encoder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setStyleHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultStyleHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><literal type="string">"Generated by the Batik Graphics2D SVG Generator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setErrorHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultErrorHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ctx</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the set of defaults which should be used for the
     * GraphicContext.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>GraphicContextDefaults</name></type> <name>getGraphicContextDefaults</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>gcDefaults</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the default to be used for the graphic context.
     * Note that gcDefaults may be null and that any of its attributes
     * may be null.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setGraphicContextDefaults</name><parameter_list>(<parameter><decl><type><name>GraphicContextDefaults</name></type> <name>gcDefaults</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gcDefaults</name></name> <operator>=</operator> <name>gcDefaults</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link org.apache.batik.svggen.SVGIDGenerator} that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>SVGIDGenerator</name></type> <name>getIDGenerator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>idGenerator</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.SVGIDGenerator}
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setIDGenerator</name><parameter_list>(<parameter><decl><type><name>SVGIDGenerator</name></type> <name>idGenerator</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idGenerator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_ID_GENERATOR_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>idGenerator</name></name> <operator>=</operator> <name>idGenerator</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the DOM Factory that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Document</name></type> <name>getDOMFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>domFactory</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the DOM Factory
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setDOMFactory</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>domFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>domFactory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_DOM_FACTORY_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>domFactory</name></name> <operator>=</operator> <name>domFactory</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link org.apache.batik.svggen.ExtensionHandler} that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>ExtensionHandler</name></type> <name>getExtensionHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>extensionHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.ExtensionHandler}
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setExtensionHandler</name><parameter_list>(<parameter><decl><type><name>ExtensionHandler</name></type> <name>extensionHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>extensionHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_EXTENSION_HANDLER_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extensionHandler</name></name> <operator>=</operator> <name>extensionHandler</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link org.apache.batik.svggen.ImageHandler} that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>ImageHandler</name></type> <name>getImageHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>imageHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.ImageHandler}
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setImageHandler</name><parameter_list>(<parameter><decl><type><name>ImageHandler</name></type> <name>imageHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>imageHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_IMAGE_HANDLER_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHandler</name></name> <operator>=</operator> <name>imageHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>genericImageHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>SimpleImageHandler</name><argument_list>(<argument><expr><name>imageHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.GenericImageHandler}
     * to be used.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setGenericImageHandler</name><parameter_list>(<parameter><decl><type><name>GenericImageHandler</name></type> <name>genericImageHandler</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>genericImageHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_IMAGE_HANDLER_NULL</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHandler</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>genericImageHandler</name></name> <operator>=</operator> <name>genericImageHandler</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link org.apache.batik.svggen.StyleHandler} that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>StyleHandler</name></type> <name>getStyleHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>styleHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.StyleHandler}
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setStyleHandler</name><parameter_list>(<parameter><decl><type><name>StyleHandler</name></type> <name>styleHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>styleHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_STYLE_HANDLER_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>styleHandler</name></name> <operator>=</operator> <name>styleHandler</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the comment to be generated in the SVG file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>generatorComment</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the comment to be used. It can be &lt;code&gt;null&lt;/code&gt; if you
     * want to disable it.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>generatorComment</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>generatorComment</name></name> <operator>=</operator> <name>generatorComment</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link org.apache.batik.svggen.ErrorHandler} that
     * has been set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>ErrorHandler</name></type> <name>getErrorHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>errorHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the {@link org.apache.batik.svggen.ErrorHandler}
     * to be used. It should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setErrorHandler</name><parameter_list>(<parameter><decl><type><name>ErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errorHandler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGGraphics2DRuntimeException</name><argument_list>(<argument><expr><name>ERR_ERROR_HANDLER_NULL</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>errorHandler</name></name> <operator>=</operator> <name>errorHandler</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if we should generate SVG Fonts for
     * texts.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isEmbeddedFontsOn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>svgFont</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets if we should generate SVG Fonts for texts. Default value
     * is &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setEmbeddedFontsOn</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>svgFont</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>svgFont</name></name> <operator>=</operator> <name>svgFont</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current precision used by this context
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getPrecision</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>precision</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the precision used by this context. The precision controls
     * the number of decimal places used in floating point values
     * output by the SVGGraphics2D generator.
     * Note that the precision is clipped to the [0,12] range.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setPrecision</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>decimalFormat</name> <operator>=</operator> <name><name>decimalFormats</name><index>[<expr><name><name>this</name><operator>.</operator><name>precision</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the input double value to a string with a number of
     * decimal places controlled by the precision attribute.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>doubleString</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>absvalue</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// above 10e7 we do not output decimals as anyway</comment>
        <comment type="line">// in scientific notation they were not available</comment>
        <if_stmt><if>if <condition>(<expr><name>absvalue</name> <operator>&gt;=</operator> <literal type="number">10e7</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>value</name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <comment type="line">// under 10e-3 we have to put decimals</comment>
        <else>else <block>{<block_content>
            <return>return <expr><call><name><name>decimalFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>DecimalFormatSymbols</name></type> <name>dsf</name>
        <init>= <expr><operator>new</operator> <call><name>DecimalFormatSymbols</name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name><name>DecimalFormat</name><index>[]</index></name></type> <name>decimalFormats</name> <init>= <expr><operator>new</operator> <name><name>DecimalFormat</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><name><name>decimalFormats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><name>dsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>format</name> <init>= <expr><literal type="string">"#."</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>decimalFormats</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>format</name> <operator>+=</operator> <literal type="string">"#"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>decimalFormats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>dsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

}</block></class>
</unit>
