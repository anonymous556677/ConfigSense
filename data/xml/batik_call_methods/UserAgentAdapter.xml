<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/UserAgentAdapter.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Dimension2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>event</name><operator>.</operator><name>EventDispatcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGFeatureStrings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLResourceDescriptor</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGAElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An abstract user agent adaptor implementation.  It exists to simply
 * the creation of UserAgent instances.
 *
 * @author &lt;a href="mailto:thomas.deweese@kodak.com"&gt;Thomas DeWeese&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>UserAgentAdapter</name> <super_list><implements>implements <super><name>UserAgent</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Set</name></type> <name>FEATURES</name>   <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Set</name></type> <name>extensions</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The BridgeContext to use for error information.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>ctx</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the BridgeContext to be used for error information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBridgeContext</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds the standard SVG feature strings to the set of features supported
     * by this user agent.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addStdFeatures</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>SVGFeatureStrings</name><operator>.</operator><name>addSupportedFeatureStrings</name></name><argument_list>(<argument><expr><name>FEATURES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the default size of this user agent (400x400).
     */</comment>
    <function><type><specifier>public</specifier> <name>Dimension2D</name></type> <name>getViewportSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Display the specified message.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>displayMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Display the specified error message (forwards call to displayMessage).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Display the specified error (forwards call to displayError(String))
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>displayError</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows an alert dialog box.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>showAlert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows a prompt dialog box.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>showPrompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows a prompt dialog box.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>showPrompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows a confirm dialog box.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>showConfirm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelUnitToMillimeter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0.26458333333333333333333333333333f</literal></expr>;</return> <comment type="line">// 96dpi</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     * This will be removed after next release.
     * @see #getPixelUnitToMillimeter()
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelToMM</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getPixelUnitToMillimeter</name><argument_list>()</argument_list></call></expr>;</return>
            
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the default font family.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultFontFamily</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"Arial, Helvetica, sans-serif"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** 
     * Returns the  medium font size. 
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMediumFontSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// 9pt (72pt = 1in)</comment>
        <return>return <expr><literal type="number">9f</literal> <operator>*</operator> <literal type="number">25.4f</literal> <operator>/</operator> <operator>(</operator><literal type="number">72f</literal> <operator>*</operator> <call><name>getPixelUnitToMillimeter</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a lighter font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getLighterFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content> 
        <return>return <expr><call><name>getStandardLighterFontWeight</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a bolder font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBolderFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getStandardBolderFontWeight</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Returns the user language "en" (english).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLanguages</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"en"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns this user agent's CSS media.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMedia</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"all"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns this user agent's alternate style-sheet title.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAlternateStyleSheet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the user stylesheet 
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserStyleSheetURI</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the XML parser to use
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getXMLParserClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>XMLResourceDescriptor</name><operator>.</operator><name>getXMLParserClassName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns &lt;code&gt;false&lt;/code&gt;. The XML parser is not in validation mode.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isXMLParserValidating</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>EventDispatcher</name></type> <name>getEventDispatcher</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>openLink</name><parameter_list>(<parameter><decl><type><name>SVGAElement</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSVGCursor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This user agent doesn't display text selections.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextSelection</name><parameter_list>(<parameter><decl><type><name>Mark</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Mark</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This user agent doesn't display text selections so nothing to clear.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deselectAll</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>runThread</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>AffineTransform</name></type> <name>getTransform</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransform</name><parameter_list>(<parameter><decl><type><name>AffineTransform</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Do nothing.</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unsupported operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>Point</name></type> <name>getClientAreaLocationOnScreen</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether the given feature is supported by this
     * user agent.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFeature</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>FEATURES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether the given extension is supported by this
     * user agent.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportExtension</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>extensions</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lets the bridge tell the user agent that the following
     * ex   tension is supported by the bridge.  
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerExtension</name><parameter_list>(<parameter><decl><type><name>BridgeExtension</name></type> <name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>i</name> <init>= <expr><call><name><name>ext</name><operator>.</operator><name>getImplementedExtensions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>i</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>extensions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Notifies the UserAgent that the input element 
     * has been found in the document. This is sometimes
     * called, for example, to handle &amp;lt;a&amp;gt; or
     * &amp;lt;title&amp;gt; elements in a UserAgent-dependant
     * way.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the security settings for the given script
     * type, script url and document url
     * 
     * @param scriptType type of script, as found in the 
     *        type attribute of the &amp;lt;script&amp;gt; element.
     * @param scriptURL url for the script, as defined in
     *        the script's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        script was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>ScriptSecurity</name></type> <name>getScriptSecurity</name><parameter_list>(<parameter><decl><type><name>String</name></type>    <name>scriptType</name></decl></parameter>,
                                            <parameter><decl><type><name>ParsedURL</name></type> <name>scriptURL</name></decl></parameter>,
                                            <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list><block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DefaultScriptSecurity</name><argument_list>(<argument><expr><name>scriptType</name></expr></argument>, <argument><expr><name>scriptURL</name></expr></argument>, <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * This method throws a SecurityException if the script
     * of given type, found at url and referenced from docURL
     * should not be loaded.
     * 
     * This is a convenience method to call checkLoadScript
     * on the ScriptSecurity strategy returned by 
     * getScriptSecurity.
     *
     * @param scriptType type of script, as found in the 
     *        type attribute of the &amp;lt;script&amp;gt; element.
     * @param scriptURL url for the script, as defined in
     *        the script's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        script was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkLoadScript</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scriptType</name></decl></parameter>,
                                <parameter><decl><type><name>ParsedURL</name></type> <name>scriptURL</name></decl></parameter>,
                                <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ScriptSecurity</name></type> <name>s</name> <init>= <expr><call><name>getScriptSecurity</name><argument_list>(<argument><expr><name>scriptType</name></expr></argument>,
                                             <argument><expr><name>scriptURL</name></expr></argument>,
                                             <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>checkLoadScript</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the security settings for the given resource
     * url and document url
     * 
     * @param resourceURL url for the resource, as defined in
     *        the resource's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        resource was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>ExternalResourceSecurity</name></type> 
        <name>getExternalResourceSecurity</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>,
                                    <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RelaxedExternalResourceSecurity</name><argument_list>(<argument><expr><name>resourceURL</name></expr></argument>, <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * This method throws a SecurityException if the resource
     * found at url and referenced from docURL
     * should not be loaded.
     * 
     * This is a convenience method to call checkLoadExternalResource
     * on the ExternalResourceSecurity strategy returned by 
     * getExternalResourceSecurity.
     *
     * @param resourceURL url for the resource, as defined in
     *        the resource's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        resource was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> 
        <name>checkLoadExternalResource</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>,
                                  <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ExternalResourceSecurity</name></type> <name>s</name> 
            <init>=  <expr><call><name>getExternalResourceSecurity</name><argument_list>(<argument><expr><name>resourceURL</name></expr></argument>, <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>checkLoadExternalResource</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a lighter font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>getStandardLighterFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Round f to nearest 100...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f</name><operator>+</operator><literal type="number">50</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>weight</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">100</literal></expr>:</case> <return>return <expr><literal type="number">100</literal></expr>;</return>
        <case>case <expr><literal type="number">200</literal></expr>:</case> <return>return <expr><literal type="number">100</literal></expr>;</return>
        <case>case <expr><literal type="number">300</literal></expr>:</case> <return>return <expr><literal type="number">200</literal></expr>;</return>
        <case>case <expr><literal type="number">400</literal></expr>:</case> <return>return <expr><literal type="number">300</literal></expr>;</return>
        <case>case <expr><literal type="number">500</literal></expr>:</case> <return>return <expr><literal type="number">400</literal></expr>;</return>
        <case>case <expr><literal type="number">600</literal></expr>:</case> <return>return <expr><literal type="number">400</literal></expr>;</return>
        <case>case <expr><literal type="number">700</literal></expr>:</case> <return>return <expr><literal type="number">400</literal></expr>;</return>
        <case>case <expr><literal type="number">800</literal></expr>:</case> <return>return <expr><literal type="number">400</literal></expr>;</return>
        <case>case <expr><literal type="number">900</literal></expr>:</case> <return>return <expr><literal type="number">400</literal></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Bad Font Weight: "</literal> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a bolder font-weight.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>getStandardBolderFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Round f to nearest 100...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f</name><operator>+</operator><literal type="number">50</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>weight</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">100</literal></expr>:</case> <return>return <expr><literal type="number">600</literal></expr>;</return>
        <case>case <expr><literal type="number">200</literal></expr>:</case> <return>return <expr><literal type="number">600</literal></expr>;</return>
        <case>case <expr><literal type="number">300</literal></expr>:</case> <return>return <expr><literal type="number">600</literal></expr>;</return>
        <case>case <expr><literal type="number">400</literal></expr>:</case> <return>return <expr><literal type="number">600</literal></expr>;</return>
        <case>case <expr><literal type="number">500</literal></expr>:</case> <return>return <expr><literal type="number">600</literal></expr>;</return>
        <case>case <expr><literal type="number">600</literal></expr>:</case> <return>return <expr><literal type="number">700</literal></expr>;</return>
        <case>case <expr><literal type="number">700</literal></expr>:</case> <return>return <expr><literal type="number">800</literal></expr>;</return>
        <case>case <expr><literal type="number">800</literal></expr>:</case> <return>return <expr><literal type="number">900</literal></expr>;</return>
        <case>case <expr><literal type="number">900</literal></expr>:</case> <return>return <expr><literal type="number">900</literal></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Bad Font Weight: "</literal> <operator>+</operator> <name>f</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This Implementation simply throws a BridgeException.
     *
     * @param e   The &amp;lt;image&amp;gt; element that can't be loaded.
     * @param url The resolved url that can't be loaded.
     * @param message As best as can be determined the reason it can't be
     *                loaded (not available, corrupt, unknown format,...).
     */</comment>
    <function><type><specifier>public</specifier> <name>SVGDocument</name></type> <name>getBrokenLinkDocument</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, 
                                             <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, 
                                             <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>BridgeException</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>ErrorConstants</name><operator>.</operator><name>ERR_URI_IMAGE_BROKEN</name></name></expr></argument>,
                                  <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><name>url</name></expr>, <expr><name>message</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method should load a new document described by the supplied URL.
     *
     * @param url The url to be loaded as a string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Do nothing.</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the Font Family Resolver
     */</comment>
    <function><type><specifier>public</specifier> <name>FontFamilyResolver</name></type> <name>getFontFamilyResolver</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DefaultFontFamilyResolver</name><operator>.</operator><name>SINGLETON</name></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
