<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-anim/src/main/java/org/apache/batik/anim/dom/SVGOMDocument.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>MissingResourceException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSNavigableDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSNavigableDocumentListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>css</name><operator>.</operator><name>engine</name><operator>.</operator><name>CSSStylableElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>AbstractStylableDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericAttr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericAttrNS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericCDATASection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericComment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericDocumentFragment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericEntityReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericProcessingInstruction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>GenericText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>StyleSheetFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>IdContainer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>i18n</name><operator>.</operator><name>Localizable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>i18n</name><operator>.</operator><name>LocalizableSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>constants</name><operator>.</operator><name>XMLConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Attr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>CDATASection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Comment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DocumentFragment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DocumentType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>EntityReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>ProcessingInstruction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Text</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>css</name><operator>.</operator><name>CSSStyleDeclaration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>css</name><operator>.</operator><name>DocumentCSS</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>MutationEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGLangSpace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGSVGElement</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class implements {@link SVGDocument}.
 *
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>SVGOMDocument</name>
    <super_list><extends>extends    <super><name>AbstractStylableDocument</name></super></extends>
    <implements>implements <super><name>SVGDocument</name></super>,
               <super><name>SVGConstants</name></super>,
               <super><name>CSSNavigableDocument</name></super>,
               <super><name>IdContainer</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The error messages bundle class name.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RESOURCES</name> <init>=
        <expr><literal type="string">"org.apache.batik.dom.svg.resources.Messages"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The localizable support for the error messages.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>LocalizableSupport</name></type> <name>localizableSupport</name> <init>=
        <expr><operator>new</operator> <call><name>LocalizableSupport</name><argument_list>(<argument><expr><name>RESOURCES</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The string representing the referrer.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>referrer</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The URL of the document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ParsedURL</name></type> <name>url</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Is this document immutable?
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>boolean</name></type> <name>readonly</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether the document supports SVG 1.2.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isSVG12</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Map of CSSNavigableDocumentListeners to an array of wrapper
     * DOM listeners.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>HashMap</name></type> <name>cssNavigableDocumentListeners</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The main {@link AnimatedAttributeListener} that redispatches to all
     * listeners in {@link #animatedAttributeListeners}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AnimatedAttributeListener</name></type> <name>mainAnimatedAttributeListener</name> <init>=
        <expr><operator>new</operator> <call><name>AnimAttrListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * List of {@link AnimatedAttributeListener}s attached to this document.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>LinkedList</name></type> <name>animatedAttributeListeners</name> <init>= <expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The SVG context.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>SVGContext</name></type> <name>svgContext</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new uninitialized document.
     */</comment>
    <constructor><specifier>protected</specifier> <name>SVGOMDocument</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new document.
     */</comment>
    <constructor><specifier>public</specifier> <name>SVGOMDocument</name><parameter_list>(<parameter><decl><type><name>DocumentType</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>DOMImplementation</name></type> <name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Implements {@link Localizable#setLocale(Locale)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocale</name><parameter_list>(<parameter><decl><type><name>Locale</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setLocale</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>localizableSupport</name><operator>.</operator><name>setLocale</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Implements {@link Localizable#formatMessage(String,Object[])}.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>formatMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>MissingResourceException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>formatMessage</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MissingResourceException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>localizableSupport</name><operator>.</operator><name>formatMessage</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link SVGDocument#getTitle()}.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>preserve</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>getDocumentElement</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFirstChild</name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
             <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>ns</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>SVG_NAMESPACE_URI</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>SVG_TITLE_TAG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>preserve</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SVGLangSpace</name><operator>)</operator><name>n</name><operator>)</operator><operator>.</operator><call><name>getXMLspace</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr>;</init>
                         <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
                         <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>preserve</name><operator>)</operator></expr>
            ?</condition><then> <expr><call><name><name>XMLSupport</name><operator>.</operator><name>preserveXMLSpace</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>
            </then><else>: <expr><call><name><name>XMLSupport</name><operator>.</operator><name>defaultXMLSpace</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link SVGDocument#getReferrer()}.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getReferrer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>referrer</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the referrer string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReferrer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>referrer</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link SVGDocument#getDomain()}.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>url</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>url</name><operator>.</operator><name>getHost</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link SVGDocument#getRootElement()}.
     */</comment>
    <function><type><specifier>public</specifier> <name>SVGSVGElement</name></type> <name>getRootElement</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>SVGSVGElement</name><operator>)</operator><call><name>getDocumentElement</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link SVGDocument#getURL()}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>documentURI</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the URI of the document.  If the document URI cannot be
     * represented as a {@link URL} (for example if it uses a &lt;code&gt;data:&lt;/code&gt;
     * URI scheme), then &lt;code&gt;null&lt;/code&gt; will be returned.
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getURLObject</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>documentURI</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the URI of the document.
     */</comment>
    <function><type><specifier>public</specifier> <name>ParsedURL</name></type> <name>getParsedURL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>url</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the URI of the document.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURLObject</name><parameter_list>(<parameter><decl><type><name>URL</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setParsedURL</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the URI of the document.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setParsedURL</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>documentURI</name> <operator>=</operator> <ternary><condition><expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>url</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link org.w3c.dom.Document#setDocumentURI(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocumentURI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>documentURI</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>url</name> <operator>=</operator> <ternary><condition><expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createElement(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Element</name></type> <name>createElement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tagName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericElement</name><argument_list>(<argument><expr><call><name><name>tagName</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createDocumentFragment()}.
     */</comment>
    <function><type><specifier>public</specifier> <name>DocumentFragment</name></type> <name>createDocumentFragment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericDocumentFragment</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createTextNode(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Text</name></type> <name>createTextNode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericText</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createComment(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comment</name></type> <name>createComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericComment</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createCDATASection(String)}
     */</comment>
    <function><type><specifier>public</specifier> <name>CDATASection</name></type> <name>createCDATASection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericCDATASection</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link
     * Document#createProcessingInstruction(String,String)}.
     * @return a SVGStyleSheetProcessingInstruction if target is
     *         "xml-stylesheet" or a GenericProcessingInstruction otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>ProcessingInstruction</name></type> <name>createProcessingInstruction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>,
                                                             <parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="string">"xml-stylesheet"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SVGStyleSheetProcessingInstruction</name>
                <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>(</operator><name>StyleSheetFactory</name><operator>)</operator><call><name>getImplementation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>GenericProcessingInstruction</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createAttribute(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Attr</name></type> <name>createAttribute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericAttr</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createEntityReference(String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>EntityReference</name></type> <name>createEntityReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>GenericEntityReference</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createAttributeNS(String,String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Attr</name></type> <name>createAttributeNS</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>qualifiedName</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>GenericAttr</name><argument_list>(<argument><expr><call><name><name>qualifiedName</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>GenericAttrNS</name><argument_list>(<argument><expr><call><name><name>namespaceURI</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><call><name><name>qualifiedName</name><operator>.</operator><name>intern</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements {@link Document#createElementNS(String,String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Element</name></type> <name>createElementNS</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>qualifiedName</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>DOMException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGDOMImplementation</name></type> <name>impl</name> <init>= <expr><operator>(</operator><name>SVGDOMImplementation</name><operator>)</operator><name>implementation</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>impl</name><operator>.</operator><name>createElementNS</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>qualifiedName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the document supports SVG 1.2.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSVG12</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isSVG12</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets whether the document supports SVG 1.2.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIsSVG12</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>isSVG12</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the given Attr node represents an 'id'
     * for this document.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isId</name><parameter_list>(<parameter><decl><type><name>Attr</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>SVG_ID_ATTRIBUTE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>node</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>XML_ID_QNAME</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the SVG context to use to get SVG specific informations.
     *
     * @param ctx the SVG context
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSVGContext</name><parameter_list>(<parameter><decl><type><name>SVGContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>svgContext</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the SVG context used to get SVG specific informations.
     */</comment>
    <function><type><specifier>public</specifier> <name>SVGContext</name></type> <name>getSVGContext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>svgContext</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// CSSNavigableDocument ///////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Adds an event listener for mutations on the
     * CSSNavigableDocument tree.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCSSNavigableDocumentListener</name>
            <parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>DOMNodeInsertedListenerWrapper</name></type> <name>nodeInserted</name>
            <init>= <expr><operator>new</operator> <call><name>DOMNodeInsertedListenerWrapper</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMNodeRemovedListenerWrapper</name></type> <name>nodeRemoved</name>
            <init>= <expr><operator>new</operator> <call><name>DOMNodeRemovedListenerWrapper</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMSubtreeModifiedListenerWrapper</name></type> <name>subtreeModified</name>
            <init>= <expr><operator>new</operator> <call><name>DOMSubtreeModifiedListenerWrapper</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMCharacterDataModifiedListenerWrapper</name></type> <name>cdataModified</name>
            <init>= <expr><operator>new</operator> <call><name>DOMCharacterDataModifiedListenerWrapper</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMAttrModifiedListenerWrapper</name></type> <name>attrModified</name>
            <init>= <expr><operator>new</operator> <call><name>DOMAttrModifiedListenerWrapper</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>put</name></name>
            <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>EventListener</name><index>[]</index></name> <block>{ <expr><name>nodeInserted</name></expr>,
                                      <expr><name>nodeRemoved</name></expr>,
                                      <expr><name>subtreeModified</name></expr>,
                                      <expr><name>cdataModified</name></expr>,
                                      <expr><name>attrModified</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                           <argument><expr><literal type="string">"DOMNodeInserted"</literal></expr></argument>, <argument><expr><name>nodeInserted</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                           <argument><expr><literal type="string">"DOMNodeRemoved"</literal></expr></argument>, <argument><expr><name>nodeRemoved</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                           <argument><expr><literal type="string">"DOMSubtreeModified"</literal></expr></argument>, <argument><expr><name>subtreeModified</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                           <argument><expr><literal type="string">"DOMCharacterDataModified"</literal></expr></argument>, <argument><expr><name>cdataModified</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                           <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                           <argument><expr><literal type="string">"DOMAttrModified"</literal></expr></argument>, <argument><expr><name>attrModified</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes an event listener for mutations on the
     * CSSNavigableDocument tree.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeCSSNavigableDocumentListener</name>
            <parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>EventListener</name><index>[]</index></name></type> <name>listeners</name>
            <init>= <expr><operator>(</operator><name><name>EventListener</name><index>[]</index></name><operator>)</operator> <call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>listeners</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>removeEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                              <argument><expr><literal type="string">"DOMNodeInserted"</literal></expr></argument>, <argument><expr><name><name>listeners</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                              <argument><expr><literal type="string">"DOMNodeRemoved"</literal></expr></argument>, <argument><expr><name><name>listeners</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                              <argument><expr><literal type="string">"DOMSubtreeModified"</literal></expr></argument>, <argument><expr><name><name>listeners</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                              <argument><expr><literal type="string">"DOMCharacterDataModified"</literal></expr></argument>, <argument><expr><name><name>listeners</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEventListenerNS</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                              <argument><expr><literal type="string">"DOMAttrModified"</literal></expr></argument>, <argument><expr><name><name>listeners</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link AnimatedAttributeListener} for the document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AnimatedAttributeListener</name></type> <name>getAnimatedAttributeListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mainAnimatedAttributeListener</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The text of the override style declaration for this element has been
     * modified.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>overrideStyleTextChanged</name><parameter_list>(<parameter><decl><type><name>CSSStylableElement</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name> <init>=
                    <expr><operator>(</operator><name>CSSNavigableDocumentListener</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>overrideStyleTextChanged</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A property in the override style declaration has been removed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>overrideStylePropertyRemoved</name><parameter_list>(<parameter><decl><type><name>CSSStylableElement</name></type> <name>e</name></decl></parameter>,
                                                <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name> <init>=
                    <expr><operator>(</operator><name>CSSNavigableDocumentListener</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>overrideStylePropertyRemoved</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A property in the override style declaration has been changed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>overrideStylePropertyChanged</name>
            <parameter_list>(<parameter><decl><type><name>CSSStylableElement</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prio</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>cssNavigableDocumentListeners</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name> <init>=
                    <expr><operator>(</operator><name>CSSNavigableDocumentListener</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>overrideStylePropertyChanged</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds an {@link AnimatedAttributeListener} to this document, to be
     * notified of animated XML attribute changes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnimatedAttributeListener</name>
            <parameter_list>(<parameter><decl><type><name>AnimatedAttributeListener</name></type> <name>aal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>animatedAttributeListeners</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>aal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>animatedAttributeListeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>aal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes an {@link AnimatedAttributeListener} from this document.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAnimatedAttributeListener</name>
            <parameter_list>(<parameter><decl><type><name>AnimatedAttributeListener</name></type> <name>aal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>animatedAttributeListeners</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>aal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * DOM node inserted listener wrapper.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DOMNodeInsertedListenerWrapper</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The CSSNavigableDocumentListener.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSNavigableDocumentListener</name></type> <name>listener</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new DOMNodeInsertedListenerWrapper.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMNodeInsertedListenerWrapper</name><parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles the event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>evt</name> <operator>=</operator> <call><name><name>EventSupport</name><operator>.</operator><name>getUltimateOriginalEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>nodeInserted</name></name><argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * DOM node removed listener wrapper.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DOMNodeRemovedListenerWrapper</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The CSSNavigableDocumentListener.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSNavigableDocumentListener</name></type> <name>listener</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new DOMNodeRemovedListenerWrapper.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMNodeRemovedListenerWrapper</name><parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles the event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>evt</name> <operator>=</operator> <call><name><name>EventSupport</name><operator>.</operator><name>getUltimateOriginalEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>nodeToBeRemoved</name></name><argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * DOM subtree modified listener wrapper.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DOMSubtreeModifiedListenerWrapper</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The CSSNavigableDocumentListener.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSNavigableDocumentListener</name></type> <name>listener</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new DOMSubtreeModifiedListenerWrapper.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMSubtreeModifiedListenerWrapper</name>
                <parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles the event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>evt</name> <operator>=</operator> <call><name><name>EventSupport</name><operator>.</operator><name>getUltimateOriginalEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>subtreeModified</name></name><argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * DOM character data modified listener wrapper.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DOMCharacterDataModifiedListenerWrapper</name>
            <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The CSSNavigableDocumentListener.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSNavigableDocumentListener</name></type> <name>listener</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new DOMCharacterDataModifiedListenerWrapper.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMCharacterDataModifiedListenerWrapper</name>
                <parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles the event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>evt</name> <operator>=</operator> <call><name><name>EventSupport</name><operator>.</operator><name>getUltimateOriginalEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>characterDataModified</name></name><argument_list>(<argument><expr><operator>(</operator><name>Node</name><operator>)</operator> <call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * DOM attribute modified listener wrapper.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DOMAttrModifiedListenerWrapper</name> <super_list><implements>implements <super><name>EventListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The CSSNavigableDocumentListener.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>CSSNavigableDocumentListener</name></type> <name>listener</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new DOMAttrModifiedListenerWrapper.
         */</comment>
        <constructor><specifier>public</specifier> <name>DOMAttrModifiedListenerWrapper</name><parameter_list>(<parameter><decl><type><name>CSSNavigableDocumentListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Handles the event.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>evt</name> <operator>=</operator> <call><name><name>EventSupport</name><operator>.</operator><name>getUltimateOriginalEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>MutationEvent</name></type> <name>mevt</name> <init>= <expr><operator>(</operator><name>MutationEvent</name><operator>)</operator> <name>evt</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>attrModified</name></name><argument_list>(<argument><expr><operator>(</operator><name>Element</name><operator>)</operator> <call><name><name>evt</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><operator>(</operator><name>Attr</name><operator>)</operator> <call><name><name>mevt</name><operator>.</operator><name>getRelatedNode</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>mevt</name><operator>.</operator><name>getAttrChange</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>mevt</name><operator>.</operator><name>getPrevValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>mevt</name><operator>.</operator><name>getNewValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Listener class for animated attribute changes.
     */</comment>
    <class><specifier>protected</specifier> class <name>AnimAttrListener</name> <super_list><implements>implements <super><name>AnimatedAttributeListener</name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * Called to notify an object of a change to the animated value of
         * an animatable XML attribute.
         * @param e the owner element of the changed animatable attribute
         * @param alav the AnimatedLiveAttributeValue that changed
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>animatedAttributeChanged</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                             <parameter><decl><type><name>AnimatedLiveAttributeValue</name></type> <name>alav</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>animatedAttributeListener</name> <range>: <expr><name>animatedAttributeListeners</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>AnimatedAttributeListener</name></type> <name>aal</name> <init>=
                        <expr><operator>(</operator><name>AnimatedAttributeListener</name><operator>)</operator> <name>animatedAttributeListener</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>aal</name><operator>.</operator><name>animatedAttributeChanged</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>alav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Called to notify an object of a change to the value of an 'other'
         * animation.
         * @param e the element being animated
         * @param type the type of animation whose value changed
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>otherAnimationChanged</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>animatedAttributeListener</name> <range>: <expr><name>animatedAttributeListeners</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>AnimatedAttributeListener</name></type> <name>aal</name> <init>=
                        <expr><operator>(</operator><name>AnimatedAttributeListener</name><operator>)</operator> <name>animatedAttributeListener</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>aal</name><operator>.</operator><name>otherAnimationChanged</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">// DocumentCSS ////////////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;DOM&lt;/b&gt;: Implements
     * {@link DocumentCSS#getOverrideStyle(Element,String)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>CSSStyleDeclaration</name></type> <name>getOverrideStyle</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>,
                                                <parameter><decl><type><name>String</name></type> <name>pseudoElt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>elt</name> <operator>instanceof</operator> <name>SVGStylableElement</name> <operator>&amp;&amp;</operator> <name>pseudoElt</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>SVGStylableElement</name><operator>)</operator> <name>elt</name><operator>)</operator><operator>.</operator><call><name>getOverrideStyle</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// AbstractDocument ///////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Tests whether this node is readonly.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReadonly</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>readonly</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets this node readonly attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadonly</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>readonly</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new uninitialized instance of this object's class.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Node</name></type> <name>newNode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SVGOMDocument</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Copy the fields of the current node into the given node.
     * @param n a node of the type of this.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Node</name></type> <name>copyInto</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>copyInto</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>sd</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>localizableSupport</name></name> <operator>=</operator> <operator>new</operator> <call><name>LocalizableSupport</name>
            <argument_list>(<argument><expr><name>RESOURCES</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>referrer</name></name> <operator>=</operator> <name>referrer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
        <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Deeply copy the fields of the current node into the given node.
     * @param n a node of the type of this.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Node</name></type> <name>deepCopyInto</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>deepCopyInto</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>sd</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>localizableSupport</name></name> <operator>=</operator> <operator>new</operator> <call><name>LocalizableSupport</name>
            <argument_list>(<argument><expr><name>RESOURCES</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>referrer</name></name> <operator>=</operator> <name>referrer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
        <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Serialization //////////////////////////////////////////////////////</comment>

    <comment type="block" format="javadoc">/**
     * Reads the object from the given stream.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name>ObjectInputStream</name></type> <name>s</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>localizableSupport</name> <operator>=</operator> <operator>new</operator> <call><name>LocalizableSupport</name>
            <argument_list>(<argument><expr><name>RESOURCES</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
