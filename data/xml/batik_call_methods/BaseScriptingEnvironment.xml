<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/BaseScriptingEnvironment.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PushbackInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>jar</name><operator>.</operator><name>Manifest</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>AbstractElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>AbstractEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>NodeEventTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>XLinkSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>script</name><operator>.</operator><name>Interpreter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>script</name><operator>.</operator><name>InterpreterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>script</name><operator>.</operator><name>ScriptEventWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>constants</name><operator>.</operator><name>XMLConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>DocumentEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>Event</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>events</name><operator>.</operator><name>EventTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGSVGElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>EventListenerInitializer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is the base class for SVG scripting.
 *
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>BaseScriptingEnvironment</name> <block>{
    <comment type="block" format="javadoc">/**
     * Constant used to describe inline scripts.
     * &lt;pre&gt;
     * {0} - URL of document containing script.
     * {1} - Element tag
     * {2} - line number of element.
     * &lt;/pre&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INLINE_SCRIPT_DESCRIPTION</name>
        <init>= <expr><literal type="string">"BaseScriptingEnvironment.constant.inline.script.description"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constant used to describe inline scripts.
     * &lt;pre&gt;
     * {0} - URL of document containing script.
     * {1} - Event attribute name
     * {2} - line number of element.
     * &lt;/pre&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EVENT_SCRIPT_DESCRIPTION</name>
        <init>= <expr><literal type="string">"BaseScriptingEnvironment.constant.event.script.description"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Tells whether the given SVG document is dynamic.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDynamicDocument</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>elt</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>elt</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>elt</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONABORT_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONERROR_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONRESIZE_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONUNLOAD_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONSCROLL_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONZOOM_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>isDynamicElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDynamicElement</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>bridgeExtensions</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getBridgeExtensions</name></name><argument_list>(<argument><expr><call><name><name>elt</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>isDynamicElement</name><argument_list>(<argument><expr><name>elt</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bridgeExtensions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether the given SVG element is dynamic.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDynamicElement</name>
        <parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>List</name></type> <name>bridgeExtensions</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>bridgeExtension1</name> <range>: <expr><name>bridgeExtensions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>BridgeExtension</name></type> <name>bridgeExtension</name> <init>= <expr><operator>(</operator><name>BridgeExtension</name><operator>)</operator> <name>bridgeExtension1</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>bridgeExtension</name><operator>.</operator><name>isDynamicElement</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>elt</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONKEYUP_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONKEYDOWN_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONKEYPRESS_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONLOAD_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONERROR_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONACTIVATE_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONCLICK_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONFOCUSIN_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONFOCUSOUT_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONMOUSEDOWN_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONMOUSEMOVE_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONMOUSEOUT_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONMOUSEOVER_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONMOUSEUP_ATTRIBUTE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
             <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>isDynamicElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>Element</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>


    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EVENT_NAME</name> <init>= <expr><literal type="string">"event"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ALTERNATE_EVENT_NAME</name> <init>= <expr><literal type="string">"evt"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'application/ecmascript' MIME type.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>APPLICATION_ECMASCRIPT</name> <init>=
        <expr><literal type="string">"application/ecmascript"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The bridge context.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>bridgeContext</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The user-agent.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UserAgent</name></type> <name>userAgent</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The document to manage.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Document</name></type> <name>document</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The URL of the document ot manage
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ParsedURL</name></type> <name>docPURL</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>Set</name></type> <name>languages</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default Interpreter for the document
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Interpreter</name></type> <name>interpreter</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Map of {@link Interpreter} to {@link org.apache.batik.bridge.Window}
     * objects.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Map</name></type> <name>windowObjects</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of &amp;lt;script&amp;gt; elements that have already been executed.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>WeakHashMap</name></type> <name>executedScripts</name> <init>= <expr><operator>new</operator> <call><name>WeakHashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new BaseScriptingEnvironment.
     * @param ctx the bridge context
     */</comment>
    <constructor><specifier>public</specifier> <name>BaseScriptingEnvironment</name><parameter_list>(<parameter><decl><type><name>BridgeContext</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bridgeContext</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>docPURL</name> <operator>=</operator> <operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SVGDocument</name><operator>)</operator><name>document</name><operator>)</operator><operator>.</operator><call><name>getURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userAgent</name>     <operator>=</operator> <call><name><name>bridgeContext</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the Window object for the specified {@link Interpreter}.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name></type> <name>getWindow</name><parameter_list>(<parameter><decl><type><name>Interpreter</name></type> <name>interp</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name></type> <name>w</name> <init>=
            <expr><operator>(</operator><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name><operator>)</operator> <call><name><name>windowObjects</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>interp</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Window</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>
                               </then><else>: <expr><call><name>createWindow</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>windowObjects</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>w</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the Window object for scripting languages that have no
     * {@link Interpreter} object.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name></type> <name>getWindow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getWindow</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new Window object.
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name></type> <name>createWindow</name><parameter_list>(<parameter><decl><type><name>Interpreter</name></type> <name>interp</name></decl></parameter>,
                                                          <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
        
        <return>return <expr><operator>new</operator> <call><name>Window</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the default Interpreter for this document.
     */</comment>
    <function><type><specifier>public</specifier> <name>Interpreter</name></type> <name>getInterpreter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>interpreter</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>SVGSVGElement</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>SVGSVGElement</name><operator>)</operator><call><name><name>document</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lang</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getContentScriptType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getInterpreter</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Interpreter</name></type> <name>getInterpreter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>interpreter</name> <operator>=</operator> <call><name><name>bridgeContext</name><operator>.</operator><name>getInterpreter</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>languages</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Already issued warning so just return null.</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// So we know we have processed this interpreter.</comment>
            <expr_stmt><expr><call><name><name>languages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>languages</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>languages</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initializeEnvironment</name><argument_list>(<argument><expr><name>interpreter</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>interpreter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initializes the environment of the given interpreter.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initializeEnvironment</name><parameter_list>(<parameter><decl><type><name>Interpreter</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>interp</name><operator>.</operator><name>bindObject</name></name><argument_list>(<argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><call><name>getWindow</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Loads the scripts contained in the &amp;lt;script&amp;gt; elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadScripts</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NodeList</name></type> <name>scripts</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getElementsByTagNameNS</name></name>
            <argument_list>(<argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TAG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>scripts</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>AbstractElement</name></type> <name>script</name> <init>= <expr><operator>(</operator><name>AbstractElement</name><operator>)</operator> <call><name><name>scripts</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>loadScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Executes the specified &amp;lt;script&amp;gt; element, if it hasn't been
     * executed already.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadScript</name><parameter_list>(<parameter><decl><type><name>AbstractElement</name></type> <name>script</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Don't execute &lt;script&gt; elements more than once.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>executedScripts</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Don't execute a &lt;script&gt; element that has been removed from</comment>
        <comment type="line">// the document.</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><name>script</name></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Node</name><operator>.</operator><name>DOCUMENT_NODE</name></name></expr>)</condition>;</do>
        </block_content>}</block>

        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>getAttributeNS</name></name>
            <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_TYPE_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_DEFAULT_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Java code invocation.</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_JAVA</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>href</name> <init>= <expr><call><name><name>XLinkSupport</name><operator>.</operator><name>getXLinkHref</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ParsedURL</name></type> <name>purl</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>getBaseURI</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>checkCompatibleScriptURL</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>purl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>DocumentJarClassLoader</name></type> <name>cll</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>URL</name></type> <name>docURL</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>docURL</name> <operator>=</operator> <operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>docPURL</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>mue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="block">/* nothing just let docURL be null */</comment>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><name>cll</name> <operator>=</operator> <operator>new</operator> <call><name>DocumentJarClassLoader</name>
                    <argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>purl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get the 'Script-Handler' entry in the manifest.</comment>
                <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><call><name><name>cll</name><operator>.</operator><name>findResource</name></name><argument_list>(<argument><expr><literal type="string">"META-INF/MANIFEST.MF"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Manifest</name></type> <name>man</name> <init>= <expr><operator>new</operator> <call><name>Manifest</name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>sh</name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>executedScripts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name><name>man</name><operator>.</operator><name>getMainAttributes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"Script-Handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sh</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Run the script handler.</comment>
                    <decl_stmt><decl><type><name>ScriptHandler</name></type> <name>h</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>ScriptHandler</name><operator>)</operator><call><name><name>cll</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDeclaredConstructor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>h</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name><name>man</name><operator>.</operator><name>getMainAttributes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><literal type="string">"SVG-Handler-Class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>sh</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Run the initializer</comment>
                    <decl_stmt><decl><type><name>EventListenerInitializer</name></type> <name>initializer</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>initializer</name> <operator>=</operator>
                        <operator>(</operator><name>EventListenerInitializer</name><operator>)</operator><call><name><name>cll</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDeclaredConstructor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>initializer</name><operator>.</operator><name>initializeEventListeners</name></name><argument_list>(<argument><expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></catch></try>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Scripting language invocation.</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>Interpreter</name></type> <name>interpreter</name> <init>= <expr><call><name>getInterpreter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>interpreter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Can't find interpreter so just skip this script block.</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>href</name> <init>= <expr><call><name><name>XLinkSupport</name><operator>.</operator><name>getXLinkHref</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>desc</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Reader</name></type> <name>reader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>href</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>href</name></expr>;</expr_stmt>

                <comment type="line">// External script.</comment>
                <decl_stmt><decl><type><name>ParsedURL</name></type> <name>purl</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>getBaseURI</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>checkCompatibleScriptURL</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>purl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>purl</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>mediaType</name> <init>= <expr><call><name><name>purl</name><operator>.</operator><name>getContentTypeMediaType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>enc</name> <init>= <expr><call><name><name>purl</name><operator>.</operator><name>getContentTypeCharset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>enc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>uee</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>APPLICATION_ECMASCRIPT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// No encoding was specified in the MIME type, so</comment>
                        <comment type="line">// infer it according to RFC 4329.</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>purl</name><operator>.</operator><name>hasContentTypeParameter</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <comment type="line">// Future versions of application/ecmascript </comment>
                            <comment type="line">// are not supported, so skip this script </comment>
                            <comment type="line">// element if the version parameter is present.</comment>
                            <return>return;</return>
                        </block_content>}</block></if></if_stmt>

                        <decl_stmt><decl><type><name>PushbackInputStream</name></type> <name>pbis</name> <init>=
                            <expr><operator>new</operator> <call><name>PushbackInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name><name>pbis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>unread</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xff</literal> <operator>&amp;&amp;</operator>
                                        <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xfe</literal></expr>)</condition> <block>{<block_content>
                                    <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                                            <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                        <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF32-LE"</literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if> <else>else <block>{<block_content>
                                        <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF-16LE"</literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></else></if_stmt>
                                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xfe</literal> <operator>&amp;&amp;</operator>
                                        <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF-16BE"</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read</name> <operator>&gt;=</operator> <literal type="number">3</literal>
                                        <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xef</literal> 
                                        <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xbb</literal>
                                        <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xbf</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF-8"</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                                        <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                                        <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xfe</literal> <operator>&amp;&amp;</operator>
                                        <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF-32BE"</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name><name>pbis</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="string">"UTF-8"</literal></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>pbis</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>checkCompatibleScriptURL</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>docPURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DocumentLoader</name></type> <name>dl</name> <init>= <expr><call><name><name>bridgeContext</name><operator>.</operator><name>getDocumentLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Element</name></type> <name>e</name> <init>= <expr><name>script</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>SVGDocument</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name><name>dl</name><operator>.</operator><name>getLineNumber</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name><name>Messages</name><operator>.</operator><name>formatMessage</name></name>
                    <argument_list>(<argument><expr><name>INLINE_SCRIPT_DESCRIPTION</name></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>Object</name> <index>[]</index></name> <block>{<expr><call><name><name>d</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr>,
                                    <expr><literal type="string">"&lt;"</literal><operator>+</operator><call><name><name>script</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"&gt;"</literal></expr>,
                             <expr><name>line</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Inline script.</comment>
                <decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>CDATA_SECTION_NODE</name></name>
                            <operator>||</operator> <call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name><name>executedScripts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>interpreter</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterpreterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"InterpExcept: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleInterpreterException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks that the script URLs and the document url are
     * compatible. A SecurityException is thrown if loading
     * the script is not allowed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkCompatibleScriptURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scriptType</name></decl></parameter>,
                                          <parameter><decl><type><name>ParsedURL</name></type> <name>scriptPURL</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>checkLoadScript</name></name><argument_list>(<argument><expr><name>scriptType</name></expr></argument>, <argument><expr><name>scriptPURL</name></expr></argument>, <argument><expr><name>docPURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recursively dispatch the SVG 'onload' event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>dispatchSVGLoadEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGSVGElement</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>SVGSVGElement</name><operator>)</operator><call><name><name>document</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>lang</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getContentScriptType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>documentStartTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bridgeContext</name><operator>.</operator><name>getAnimationEngine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>documentStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dispatchSVGLoad</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Auxiliary method for dispatchSVGLoad.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dispatchSVGLoad</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>,
                                   <parameter><decl><type><name>boolean</name></type> <name>checkCanRun</name></decl></parameter>,
                                   <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>elt</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
             <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>dispatchSVGLoad</name><argument_list>(<argument><expr><operator>(</operator><name>Element</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>checkCanRun</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>DocumentEvent</name></type> <name>de</name> <init>= <expr><operator>(</operator><name>DocumentEvent</name><operator>)</operator><call><name><name>elt</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractEvent</name></type> <name>ev</name> <init>= <expr><operator>(</operator><name>AbstractEvent</name><operator>)</operator> <call><name><name>de</name><operator>.</operator><name>createEvent</name></name><argument_list>(<argument><expr><literal type="string">"SVGEvents"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>bridgeContext</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"load"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"SVGLoad"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>ev</name><operator>.</operator><name>initEventNS</name></name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                       <argument><expr><name>type</name></expr></argument>,
                       <argument><expr><literal type="boolean">false</literal></expr></argument>,
                       <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NodeEventTarget</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>NodeEventTarget</name><operator>)</operator><name>elt</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name> <init>=
            <expr><call><name><name>elt</name><operator>.</operator><name>getAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONLOAD_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// No script to run so just dispatch the event to DOM</comment>
            <comment type="line">// (For java presumably).</comment>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>dispatchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Interpreter</name></type> <name>interp</name> <init>= <expr><call><name>getInterpreter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>interp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Can't load interpreter so just dispatch normal event</comment>
            <comment type="line">// to the DOM (for java presumably).</comment>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>dispatchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>checkCanRun</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Check that it is ok to run embeded scripts</comment>
            <expr_stmt><expr><call><name>checkCompatibleScriptURL</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name>docPURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>checkCanRun</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// we only check once for onload handlers</comment>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>DocumentLoader</name></type> <name>dl</name> <init>= <expr><call><name><name>bridgeContext</name><operator>.</operator><name>getDocumentLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SVGDocument</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>SVGDocument</name><operator>)</operator><call><name><name>elt</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name><name>dl</name><operator>.</operator><name>getLineNumber</name></name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>desc</name> <init>= <expr><call><name><name>Messages</name><operator>.</operator><name>formatMessage</name></name>
            <argument_list>(<argument><expr><name>EVENT_SCRIPT_DESCRIPTION</name></expr></argument>,
             <argument><expr><operator>new</operator> <name><name>Object</name> <index>[]</index></name> <block>{<expr><call><name><name>d</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr>,
                            <expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_ONLOAD_ATTRIBUTE</name></name></expr>,
                     <expr><name>line</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EventListener</name></type> <name>l</name> <init>= <expr><operator>new</operator> <class><super><name>EventListener</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>handleEvent</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name>Object</name></type> <name>event</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>evt</name> <operator>instanceof</operator> <name>ScriptEventWrapper</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>event</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ScriptEventWrapper</name><operator>)</operator> <name>evt</name><operator>)</operator><operator>.</operator><call><name>getEventObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>event</name> <operator>=</operator> <name>evt</name></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>interp</name><operator>.</operator><name>bindObject</name></name><argument_list>(<argument><expr><name>EVENT_NAME</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>interp</name><operator>.</operator><name>bindObject</name></name><argument_list>(<argument><expr><name>ALTERNATE_EVENT_NAME</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>interp</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>io</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterpreterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name>handleInterpreterException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>addEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
             <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>dispatchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>removeEventListenerNS</name></name>
            <argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
             <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Method to dispatch SVG Zoom event.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dispatchSVGZoomEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>bridgeContext</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"SVGZoom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Method to dispatch SVG Scroll event.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dispatchSVGScrollEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>bridgeContext</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"scroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"SVGScroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Method to dispatch SVG Resize event.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dispatchSVGResizeEvent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>bridgeContext</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>dispatchSVGDocEvent</name><argument_list>(<argument><expr><literal type="string">"SVGResize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dispatchSVGDocEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SVGSVGElement</name></type> <name>root</name> <init>=
            <expr><operator>(</operator><name>SVGSVGElement</name><operator>)</operator><call><name><name>document</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Event is dispatched on outermost SVG element.</comment>
        <decl_stmt><decl><type><name>EventTarget</name></type> <name>t</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DocumentEvent</name></type> <name>de</name> <init>= <expr><operator>(</operator><name>DocumentEvent</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AbstractEvent</name></type> <name>ev</name> <init>= <expr><operator>(</operator><name>AbstractEvent</name><operator>)</operator> <call><name><name>de</name><operator>.</operator><name>createEvent</name></name><argument_list>(<argument><expr><literal type="string">"SVGEvents"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ev</name><operator>.</operator><name>initEventNS</name></name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_EVENTS_NAMESPACE_URI</name></name></expr></argument>,
                       <argument><expr><name>eventType</name></expr></argument>,
                       <argument><expr><literal type="boolean">false</literal></expr></argument>,
                       <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>dispatchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles the given exception.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleInterpreterException</name><parameter_list>(<parameter><decl><type><name>InterpreterException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Exception</name></type> <name>ex</name> <init>= <expr><call><name><name>ie</name><operator>.</operator><name>getException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>ex</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ie</name></expr> </then><else>: <expr><name>ex</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles the given exception.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleSecurityException</name><parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>userAgent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Represents the window object of this environment.
     */</comment>
    <class><specifier>protected</specifier> class <name>Window</name> <super_list><implements>implements <super><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name></name></super></implements></super_list> <block>{

        <comment type="block" format="javadoc">/**
         * The associated interpreter.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Interpreter</name></type> <name>interpreter</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The associated language.
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new Window.
         */</comment>
        <constructor><specifier>public</specifier> <name>Window</name><parameter_list>(<parameter><decl><type><name>Interpreter</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>lang</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>interpreter</name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>language</name> <operator>=</operator> <name>lang</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#setInterval(String,long)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setInterval</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#setInterval(Runnable,long)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setInterval</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#clearInterval(Object)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>clearInterval</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#setTimeout(String,long)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setTimeout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#setTimeout(Runnable,long)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setTimeout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Implements {@link
         * org.apache.batik.bridge.Window#clearTimeout(Object)}.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>clearTimeout</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Parses the given XML string into a DocumentFragment of the
         * given document or a new document if 'doc' is null.
         * The implementation in this class always returns 'null'
         * @return The document/document fragment or null on error.
         */</comment>
        <function><type><specifier>public</specifier> <name>Node</name></type> <name>parseXML</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Serializes the given node.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>printNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets data from the given URI.
         * @param uri The URI where the data is located.
         * @param h A handler called when the data is available.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>getURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name><operator>.</operator><name>URLResponseHandler</name></name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>getURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets data from the given URI.
         * @param uri The URI where the data is located.
         * @param h A handler called when the data is available.
         * @param enc The character encoding of the data.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>getURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                           <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name><operator>.</operator><name>URLResponseHandler</name></name></type> <name>h</name></decl></parameter>,
                           <parameter><decl><type><name>String</name></type> <name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>postURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>content</name></decl></parameter>,
                            <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name><operator>.</operator><name>URLResponseHandler</name></name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>postURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>postURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>content</name></decl></parameter>,
                            <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name><operator>.</operator><name>URLResponseHandler</name></name></type> <name>h</name></decl></parameter>,
                     <parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>postURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>postURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                            <parameter><decl><type><name>String</name></type> <name>content</name></decl></parameter>,
                            <parameter><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>Window</name><operator>.</operator><name>URLResponseHandler</name></name></type> <name>h</name></decl></parameter>,
                            <parameter><decl><type><name>String</name></type> <name>mimeType</name></decl></parameter>,
                            <parameter><decl><type><name>String</name></type> <name>fEnc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>



        <comment type="block" format="javadoc">/**
         * Displays an alert dialog box.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>alert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays a confirm dialog box.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>confirm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays an input dialog box.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>prompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays an input dialog box, given the default value.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>prompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the current BridgeContext.
         */</comment>
        <function><type><specifier>public</specifier> <name>BridgeContext</name></type> <name>getBridgeContext</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>bridgeContext</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the associated interpreter.
         */</comment>
        <function><type><specifier>public</specifier> <name>Interpreter</name></type> <name>getInterpreter</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>interpreter</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the Location.
         */</comment>
        <function><type><specifier>public</specifier> <name>Location</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the parent Window object.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Window</name></name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

    }</block></class>
}</block></class>
</unit>
