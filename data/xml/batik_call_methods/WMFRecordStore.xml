<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/wmf/tosvg/WMFRecordStore.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>wmf</name><operator>.</operator><name>tosvg</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>wmf</name><operator>.</operator><name>WMFConstants</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Reads a WMF file, including an Aldus Placable Metafile Header.
 *
 * @author &lt;a href="mailto:luano@asd.ie"&gt;Luan O'Carroll&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>WMFRecordStore</name> <super_list><extends>extends <super><name>AbstractWMFReader</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>url</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>numRecords</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>vpX</name></decl>, <decl><type ref="prev"/><name>vpY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>records</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_bext</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>WMFRecordStore</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Resets the internal storage and viewport coordinates.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list><block>{<block_content>
      <expr_stmt><expr><name>numRecords</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>vpX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>vpY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>vpW</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>vpH</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>scaleX</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>scaleY</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>scaleXY</name> <operator>=</operator> <literal type="number">1f</literal></expr>;</expr_stmt>      
      <expr_stmt><expr><name>inch</name> <operator>=</operator> <literal type="number">84</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>records</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads the WMF file from the specified Stream.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>readRecords</name><parameter_list>( <parameter><decl><type><name>DataInputStream</name></type> <name>is</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>short</name></type> <name>functionId</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>recSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>recData</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>numRecords</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <while>while <condition>( <expr><name>functionId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>recSize</name> <operator>=</operator> <call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Subtract size in 16-bit words of recSize and functionId;</comment>
            <expr_stmt><expr><name>recSize</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>functionId</name> <operator>=</operator> <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>( <expr><name>functionId</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>MetaRecord</name></type> <name>mr</name> <init>= <expr><operator>new</operator> <call><name>MetaRecord</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>( <expr><name>functionId</name></expr> )</condition> <block>{<block_content>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETMAPMODE</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>mapmode</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
                    <if_stmt><if>if <condition>(<expr><name>mapmode</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>MM_ANISOTROPIC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isotropic</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>mapmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
                <break>break;</break>                
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DRAWTEXT</name></name></expr>:</case>
                <block>{<block_content>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>recData</name> <operator>=</operator> <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>      <comment type="line">// todo shouldn't the read data be used for something??</comment>
                    <expr_stmt><expr><name>numRecords</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_EXTTEXTOUT</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>yVal</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xVal</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lenText</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt> <comment type="line">// used to track the actual size really read</comment>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>clipped</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
                    <comment type="line">// determination of clipping property</comment>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name><name>WMFConstants</name><operator>.</operator><name>ETO_CLIPPED</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>x1</name> <operator>=</operator>  <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y1</name> <operator>=</operator>  <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>x2</name> <operator>=</operator>  <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y2</name> <operator>=</operator>  <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>read</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>clipped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bstr</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>lenText</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lenText</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>bstr</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>read</name> <operator>+=</operator> <operator>(</operator><name>lenText</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
                    <comment type="block">/* must do this because WMF strings always have an even number of bytes, even
                     * if there is an odd number of characters
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><name>lenText</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <comment type="line">// if the record was not completely read, finish reading</comment>
                    <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;</operator> <name>recSize</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>read</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

                    <comment type="block">/* get the StringRecord, having decoded the String, using the current
                     * charset (which was given by the last META_CREATEFONTINDIRECT)
                     */</comment>
                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xVal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>yVal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>flag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>clipped</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>x1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>y1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>x2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>y2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_TEXTOUT</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// used to track the actual size really read</comment>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bstr</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>len</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>bstr</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <comment type="block">/* must do this because WMF strings always have an even number of bytes, even
                     * if there is an odd number of characters
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>read</name> <operator>+=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>yVal</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xVal</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>read</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    <comment type="line">// if the record was not completely read, finish reading</comment>
                    <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;</operator> <name>recSize</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>read</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

                    <comment type="block">/* get the StringRecord, having decoded the String, using the current
                     * charset (which was givben by the last META_CREATEFONTINDIRECT)
                     */</comment>
                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xVal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>yVal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>


            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEFONTINDIRECT</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfHeight</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfWidth</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfEscapement</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfOrientation</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfWeight</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>lfItalic</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfUnderline</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfStrikeOut</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfCharSet</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00ff</literal></expr></init></decl>;</decl_stmt>
                    <comment type="line">//System.out.println("lfCharSet: "+(lfCharSet &amp; 0x00ff));</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfOutPrecision</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfClipPrecision</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfQuality</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>lfPitchAndFamily</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// don't need to read the end of the record,</comment>
                    <comment type="line">// because it will always be completely used</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>recSize</name><operator>-</operator><literal type="number">9</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>lfFaceName</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>len</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>byte</name></type> <name>ch</name></decl>;</decl_stmt>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lfFaceName</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><name>lfFaceName</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>    <comment type="line">// what locale ?? ascii ?? platform ??</comment>

                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>StringRecord</name></name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfHeight</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfItalic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfWeight</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfCharSet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfUnderline</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfStrikeOut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfOrientation</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// escapement is the orientation of the text in tenth of degrees</comment>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>lfEscapement</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETVIEWPORTORG</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETVIEWPORTEXT</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWORG</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWEXT</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// inverse the values signs if they are negative</comment>
                    <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>xSign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>-</operator><name>height</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ySign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>_bext</name> <operator>&amp;&amp;</operator> <name>functionId</name> <operator>==</operator> <name><name>WMFConstants</name><operator>.</operator><name>META_SETWINDOWEXT</name></name></expr>)</condition> <block>{<block_content>
                      <expr_stmt><expr><name>vpW</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
                      <expr_stmt><expr><name>vpH</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
                      <comment type="line">// two lines below commented out due to bug BATIK-1096</comment>
                      <comment type="line">// if (! isotropic) scaleXY = (float)vpW / (float)vpH;</comment>
                      <comment type="line">// vpW = (int)(vpW * scaleXY);</comment>
                      <expr_stmt><expr><name>_bext</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="line">// sets the width, height of the image if the file does not have an APM (in this case it is retrieved</comment>
                    <comment type="line">// from the viewport)</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>isAldus</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>vpW</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>vpH</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>                            

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>width</name>  <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OFFSETVIEWPORTORG</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_OFFSETWINDOWORG</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SCALEVIEWPORTEXT</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SCALEWINDOWEXT</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>ydenom</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>ynum</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xdenom</name><init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xnum</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xdenom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>ydenom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xnum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>ynum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>scaleX</name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <name>xdenom</name> <operator>/</operator> <name>xnum</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>scaleY</name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <name>ydenom</name> <operator>/</operator> <name>ynum</name></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEBRUSHINDIRECT</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <comment type="line">// The style</comment>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>colorref</name> <init>=  <expr><call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0x3000000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>red</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>green</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(  <argument><expr><name>blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// The hatch style</comment>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEPENINDIRECT</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <comment type="line">// The style</comment>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>colorref</name> <init>=  <expr><call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block" format="javadoc">/**
                     * sometimes records generated by PPT have a
                     * recSize of 6 and not 5 =&gt; in this case only we have
                     * to read a last short element
                     **/</comment>
                    <comment type="line">//int height = readShort( is );</comment>
                    <if_stmt><if>if <condition>(<expr><name>recSize</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>    <comment type="line">// format: fff.bbbbbbbb.gggggggg.rrrrrrrr</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0x3000000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>red</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>green</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// The pen width</comment>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTALIGN</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// need to do this, because sometimes there is more than one short</comment>
                    <if_stmt><if>if <condition>(<expr><name>recSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETTEXTCOLOR</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETBKCOLOR</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>colorref</name> <init>=  <expr><call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator> <name>colorref</name> <operator>&amp;</operator> <literal type="number">0x3000000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>red</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>green</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_LINETO</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_MOVETO</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETPOLYFILLMODE</name></name></expr> :</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// need to do this, because sometimes there is more than one short</comment>
                    <if_stmt><if>if <condition>(<expr><name>recSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYPOLYGON</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// number of polygons</comment>
                    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>pts</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[ <expr><name>count</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>ptCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>pts</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// number of points for the polygon</comment>
                        <expr_stmt><expr><name>ptCount</name> <operator>+=</operator> <name><name>pts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name><name>pts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>count</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>nPoints</name> <init>= <expr><name><name>pts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nPoints</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call>  <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// x position of the polygon</comment>
                            <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// y position of the polygon</comment>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYLINE</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_POLYGON</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ELLIPSE</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_INTERSECTCLIPRECT</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_RECTANGLE</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_CREATEREGION</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ROUNDRECT</name></name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>el_height</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>el_width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>el_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>el_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_ARC</name></name></expr>:</case>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PIE</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>yend</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xend</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>ystart</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>xstart</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xstart</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>ystart</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>xend</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>yend</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <comment type="line">// META_PATBLT added</comment>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_PATBLT</name></name></expr> :</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>rop</name> <init>= <expr><call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>rop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETBKMODE</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//if (recSize &gt; 1) readShort( is );</comment>
                    <if_stmt><if>if <condition>(<expr><name>recSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>

            <comment type="line">// UPDATED : META_SETROP2 added</comment>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_SETROP2</name></name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                    <comment type="line">// rop should always be a short, but it is sometimes an int...</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>rop</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>recSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rop</name> <operator>=</operator> <call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>rop</name> <operator>=</operator> <call><name>readInt</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>rop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <comment type="line">// UPDATED : META_DIBSTRETCHBLT added</comment>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBSTRETCHBLT</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>heightSrc</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>widthSrc</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>heightDst</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>widthDst</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>  
                    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>  

                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>recSize</name> <operator>-</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>heightSrc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>widthSrc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>sy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>sx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>heightDst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>widthDst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>dy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>dx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_STRETCHDIB</name></name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>usage</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>                    
                    <decl_stmt><decl><type><name>int</name></type> <name>heightSrc</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>widthSrc</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>heightDst</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>widthDst</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>  
                    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>ySign</name></expr></init></decl>;</decl_stmt>                                        
                    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>  
                    
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>recSize</name> <operator>-</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    
                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>                    
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>heightSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>widthSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                        
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>heightDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>widthDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>                
            </block_content>}</block>
            <break>break;</break>                                                                                
            <comment type="line">// UPDATED : META_DIBBITBLT added</comment>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBBITBLT</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>hdc</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt> 
                    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>xSign</name> <operator>*</operator> <name>scaleXY</name><operator>)</operator></expr></init></decl>;</decl_stmt>   

                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>recSize</name> <operator>-</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                        <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <comment type="line">// what does this mean?? len &lt;= 0 ??</comment>
                        <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>sy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>sx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>dy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>dx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <comment type="line">// UPDATED : META_CREATEPATTERNBRUSH added</comment>
            <case>case <expr><name><name>WMFConstants</name><operator>.</operator><name>META_DIBCREATEPATTERNBRUSH</name></name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>recSize</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <expr_stmt><expr><name>mr</name> <operator>=</operator> <operator>new</operator> <call><name><name>MetaRecord</name><operator>.</operator><name>ByteRecord</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>numPoints</name></name> <operator>=</operator> <name>recSize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mr</name><operator>.</operator><name>functionId</name></name> <operator>=</operator> <name>functionId</name></expr>;</expr_stmt>

                <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>recSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>mr</name><operator>.</operator><name>addElement</name></name><argument_list>( <argument><expr><call><name>readShort</name><argument_list>( <argument><expr><name>is</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>( <argument><expr><name>mr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </block_content>}</block></switch>

            <expr_stmt><expr><name>numRecords</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="line">// sets the characteristics of the image if the file does not have an APM (in this case it is retrieved</comment>
        <comment type="line">// from the viewport). This is only useful if one wants to retrieve informations about the file after</comment>
        <comment type="line">// decoding it.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>isAldus</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vpX</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>vpX</name> <operator>+</operator> <name>vpW</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vpY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>vpY</name> <operator>+</operator> <name>vpH</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>                
        <expr_stmt><expr><call><name>setReading</name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current URL
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getUrl</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>url</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the current URL
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>( <parameter><decl><type><name>URL</name></type> <name>newUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>url</name> <operator>=</operator> <name>newUrl</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a meta record.
     */</comment>
    <function><type><specifier>public</specifier> <name>MetaRecord</name></type> <name>getRecord</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter> )</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>MetaRecord</name><operator>)</operator><call><name><name>records</name><operator>.</operator><name>get</name></name><argument_list>( <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a number of records in the image
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumRecords</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>numRecords</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the viewport x origin
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getVpX</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>vpX</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the viewport y origin
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getVpY</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>vpY</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the viewport x origin
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVpX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>newValue</name></decl></parameter> )</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>vpX</name> <operator>=</operator> <name>newValue</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the viewport y origin
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVpY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>newValue</name></decl></parameter> )</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>vpY</name> <operator>=</operator> <name>newValue</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
