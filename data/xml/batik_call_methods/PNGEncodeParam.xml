<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/png/PNGEncodeParam.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>codec</name><operator>.</operator><name>png</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>codec</name><operator>.</operator><name>util</name><operator>.</operator><name>ImageEncodeParam</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>codec</name><operator>.</operator><name>util</name><operator>.</operator><name>PropertyUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>ColorModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>IndexColorModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>RenderedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>SampleModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An instance of &lt;code&gt;ImageEncodeParam&lt;/code&gt; for encoding images in
 * the PNG format.
 *
 * &lt;p&gt;&lt;b&gt; This class is not a committed part of the JAI API.  It may
 * be removed or changed in future releases of JAI.&lt;/b&gt;
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PNGEncodeParam</name> <super_list><implements>implements <super><name>ImageEncodeParam</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/** Constant for use with the sRGB chunk. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTENT_PERCEPTUAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use with the sRGB chunk. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTENT_RELATIVE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use with the sRGB chunk. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTENT_SATURATION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use with the sRGB chunk. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTENT_ABSOLUTE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use in filtering. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_FILTER_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use in filtering. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_FILTER_SUB</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use in filtering. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_FILTER_UP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use in filtering. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_FILTER_AVERAGE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant for use in filtering. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PNG_FILTER_PAETH</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Returns an instance of &lt;code&gt;PNGEncodeParam.Palette&lt;/code&gt;,
     * &lt;code&gt;PNGEncodeParam.Gray&lt;/code&gt;, or
     * &lt;code&gt;PNGEncodeParam.RGB&lt;/code&gt; appropriate for encoding
     * the given image.
     *
     * &lt;p&gt; If the image has an &lt;code&gt;IndexColorModel&lt;/code&gt;, an
     * instance of &lt;code&gt;PNGEncodeParam.Palette&lt;/code&gt; is returned.
     * Otherwise, if the image has 1 or 2 bands an instance of
     * &lt;code&gt;PNGEncodeParam.Gray&lt;/code&gt; is returned.  In all other
     * cases an instance of &lt;code&gt;PNGEncodeParam.RGB&lt;/code&gt; is
     * returned.
     *
     * &lt;p&gt; Note that this method does not provide any guarantee that
     * the given image will be successfully encoded by the PNG
     * encoder, as it only performs a very superficial analysis of
     * the image structure.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PNGEncodeParam</name></type> <name>getDefaultEncodeParam</name><parameter_list>(<parameter><decl><type><name>RenderedImage</name></type> <name>im</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ColorModel</name></type> <name>colorModel</name> <init>= <expr><call><name><name>im</name><operator>.</operator><name>getColorModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>colorModel</name> <operator>instanceof</operator> <name>IndexColorModel</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>PNGEncodeParam</name><operator>.</operator><name>Palette</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SampleModel</name></type> <name>sampleModel</name> <init>= <expr><call><name><name>im</name><operator>.</operator><name>getSampleModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numBands</name> <init>= <expr><call><name><name>sampleModel</name><operator>.</operator><name>getNumBands</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>numBands</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>numBands</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>PNGEncodeParam</name><operator>.</operator><name>Gray</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>PNGEncodeParam</name><operator>.</operator><name>RGB</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Palette</name> <super_list><extends>extends <super><name>PNGEncodeParam</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/** Constructs an instance of &lt;code&gt;PNGEncodeParam.Palette&lt;/code&gt;. */</comment>
        <constructor><specifier>public</specifier> <name>Palette</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>backgroundSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Suppresses the 'bKGD' chunk from being output.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBackground</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if a 'bKGD' chunk will be output.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBackgroundSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>backgroundSet</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Sets the desired bit depth for a palette image.  The bit
         * depth must be one of 1, 2, 4, or 8, or else an
         * &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBitDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
                <name>bitDepth</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitDepth</name></name> <operator>=</operator> <name>bitDepth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitDepthSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// PLTE chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>palette</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>paletteSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the RGB palette of the image to be encoded.
         * The &lt;code&gt;rgb&lt;/code&gt; parameter contains alternating
         * R, G, B values for each color index used in the image.
         * The number of elements must be a multiple of 3 between
         * 3 and 3*256.
         *
         * &lt;p&gt; The 'PLTE' chunk will encode this information.
         *
         * @param rgb An array of &lt;code&gt;int&lt;/code&gt;s.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPalette</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal> <operator>||</operator> <name><name>rgb</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator>
                  <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rgb</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator>
                   <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>palette</name> <operator>=</operator> <call><name><name>rgb</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>paletteSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the current RGB palette.
         *
         * &lt;p&gt; If the palette has not previously been set, or has been
         * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the palette is not set.
         *
         * @return An array of &lt;code&gt;int&lt;/code&gt;s.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getPalette</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>paletteSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>palette</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Suppresses the 'PLTE' chunk from being output.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetPalette</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>palette</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>paletteSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if a 'PLTE' chunk will be output.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPaletteSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>paletteSet</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>backgroundPaletteIndex</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the palette index of the suggested background color.
         *
         * &lt;p&gt; The 'bKGD' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundPaletteIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>backgroundPaletteIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the palette index of the suggested background color.
         *
         * &lt;p&gt; If the background palette index has not previously been
         * set, or has been unset, an
         * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the palette index is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getBackgroundPaletteIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backgroundSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>backgroundPaletteIndex</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// tRNS chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>transparency</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the alpha values associated with each palette entry.
         * The &lt;code&gt;alpha&lt;/code&gt; parameter should have as many entries
         * as there are RGB triples in the palette.
         *
         * &lt;p&gt; The 'tRNS' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaletteTransparency</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>transparency</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>alpha</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alpha</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>transparency</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>transparencySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the alpha values associated with each palette entry.
         *
         * &lt;p&gt; If the palette transparency has not previously been
         * set, or has been unset, an
         * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the palette transparency is
         *        not set.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getPaletteTransparency</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>transparencySet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>alpha</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>transparency</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alpha</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name><name>transparency</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>alpha</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Gray</name> <super_list><extends>extends <super><name>PNGEncodeParam</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/** Constructs an instance of &lt;code&gt;PNGEncodeParam.Gray&lt;/code&gt;. */</comment>
        <constructor><specifier>public</specifier> <name>Gray</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>backgroundSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Suppresses the 'bKGD' chunk from being output.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBackground</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if a 'bKGD' chunk will be output.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBackgroundSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>backgroundSet</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Sets the desired bit depth for a grayscale image.  The bit
         * depth must be one of 1, 2, 4, 8, or 16.
         *
         * &lt;p&gt; When encoding a source image of a greater bit depth,
         * pixel values will be clamped to the smaller range after
         * shifting by the value given by &lt;code&gt;getBitShift()&lt;/code&gt;.
         * When encoding a source image of a smaller bit depth, pixel
         * values will be shifted and left-filled with zeroes.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBitDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
                <name>bitDepth</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitDepth</name></name> <operator>=</operator> <name>bitDepth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitDepthSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>backgroundPaletteGray</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the suggested gray level of the background.
         *
         * &lt;p&gt; The 'bKGD' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundGray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gray</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>backgroundPaletteGray</name> <operator>=</operator> <name>gray</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the suggested gray level of the background.
         *
         * &lt;p&gt; If the background gray level has not previously been
         * set, or has been unset, an
         * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the background gray level
         *        is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getBackgroundGray</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backgroundSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>backgroundPaletteGray</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// tRNS chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>transparency</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the gray value to be used to denote transparency.
         *
         * &lt;p&gt; Setting this attribute will cause the alpha channel
         * of the input image to be ignored.
         *
         * &lt;p&gt; The 'tRNS' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransparentGray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>transparentGray</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>transparency</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>transparency</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>transparentGray</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>transparencySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the gray value to be used to denote transparency.
         *
         * &lt;p&gt; If the transparent gray value has not previously been
         * set, or has been unset, an
         * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the transparent gray value
         *        is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getTransparentGray</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>transparencySet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>gray</name> <init>= <expr><name><name>transparency</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>gray</name></expr>;</return>
        </block_content>}</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bitShift</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>bitShiftSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the desired bit shift for a grayscale image.
         * Pixels in the source image will be shifted right by
         * the given amount prior to being clamped to the maximum
         * value given by the encoded image's bit depth.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBitShift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitShift</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bitShift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitShift</name></name> <operator>=</operator> <name>bitShift</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitShiftSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the desired bit shift for a grayscale image.
         *
         * &lt;p&gt; If the bit shift has not previously been set, or has been
         * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the bit shift is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getBitShift</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitShiftSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>bitShift</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Suppresses the setting of the bit shift of a grayscale image.
         * Pixels in the source image will not be shifted prior to encoding.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBitShift</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>bitShiftSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if the bit shift has been set.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBitShiftSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>bitShiftSet</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if the bit depth has been set.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBitDepthSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>bitDepthSet</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>RGB</name> <super_list><extends>extends <super><name>PNGEncodeParam</name></super></extends></super_list> <block>{

        <comment type="block" format="javadoc">/** Constructs an instance of &lt;code&gt;PNGEncodeParam.RGB&lt;/code&gt;. */</comment>
        <constructor><specifier>public</specifier> <name>RGB</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>backgroundSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Suppresses the 'bKGD' chunk from being output.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBackground</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if a 'bKGD' chunk will be output.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBackgroundSet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>backgroundSet</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Sets the desired bit depth for an RGB image.  The bit
         * depth must be 8 or 16.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBitDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bitDepth</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitDepth</name></name> <operator>=</operator> <name>bitDepth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitDepthSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// bKGD chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>backgroundRGB</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the RGB value of the suggested background color.
         * The &lt;code&gt;rgb&lt;/code&gt; parameter should have 3 entries.
         *
         * &lt;p&gt; The 'bKGD' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundRGB</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>backgroundRGB</name> <operator>=</operator> <name>rgb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>backgroundSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the RGB value of the suggested background color.
         *
         * &lt;p&gt; If the background color has not previously been set, or has been
         * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
         *
         * @throws IllegalStateException if the background color is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getBackgroundRGB</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backgroundSet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>backgroundRGB</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// tRNS chunk</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>transparency</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Sets the RGB value to be used to denote transparency.
         *
         * &lt;p&gt; Setting this attribute will cause the alpha channel
         * of the input image to be ignored.
         *
         * &lt;p&gt; The 'tRNS' chunk will encode this information.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransparentRGB</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>transparentRGB</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>transparency</name> <operator>=</operator> <call><name><name>transparentRGB</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transparencySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the RGB value to be used to denote transparency.
         *
         * &lt;p&gt; If the transparent color has not previously been set,
         * or has been unset, an &lt;code&gt;IllegalStateException&lt;/code&gt;
         * will be thrown.
         *
         * @throws IllegalStateException if the transparent color is not set.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getTransparentRGB</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>transparencySet</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>transparency</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>bitDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>bitDepthSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the desired bit depth of an image.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setBitDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitDepth</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the desired bit depth for a grayscale image.
     *
     * &lt;p&gt; If the bit depth has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the bit depth is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBitDepth</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitDepthSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>bitDepth</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the setting of the bit depth of a grayscale image.
     * The depth of the encoded image will be inferred from the source
     * image bit depth, rounded up to the next power of 2 between 1
     * and 16.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBitDepth</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bitDepthSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useInterlacing</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Turns Adam7 interlacing on or off.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInterlacing</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>useInterlacing</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useInterlacing</name></name> <operator>=</operator> <name>useInterlacing</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if Adam7 interlacing will be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getInterlacing</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>useInterlacing</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// bKGD chunk - delegate to subclasses</comment>

    <comment type="line">// In JAI 1.0, 'backgroundSet' was private.  The JDK 1.2 compiler</comment>
    <comment type="line">// was lenient and incorrectly allowed this variable to be</comment>
    <comment type="line">// accessed from the subclasses.  The JDK 1.3 compiler correctly</comment>
    <comment type="line">// flags this as a use of a non-static variable in a static</comment>
    <comment type="line">// context.  Changing 'backgroundSet' to protected would have</comment>
    <comment type="line">// solved the problem, but would have introduced a visible API</comment>
    <comment type="line">// change.  Thus we are forced to adopt the solution of placing a</comment>
    <comment type="line">// separate private variable in each subclass and providing</comment>
    <comment type="line">// separate implementations of 'unsetBackground' and</comment>
    <comment type="line">// 'isBackgroundSet' in each concrete subclass.</comment>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'bKGD' chunk from being output.
     * For API compatibility with JAI 1.0, the superclass
     * defines this method to throw a &lt;code&gt;RuntimeException&lt;/code&gt;;
     * accordingly, subclasses must provide their own implementations.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetBackground</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam23"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'bKGD' chunk will be output.
     * For API compatibility with JAI 1.0, the superclass
     * defines this method to throw a &lt;code&gt;RuntimeException&lt;/code&gt;;
     * accordingly, subclasses must provide their own implementations.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBackgroundSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam24"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="line">// cHRM chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>chromaticity</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>chromaticitySet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the white point and primary chromaticities in CIE (x, y)
     * space.
     *
     * &lt;p&gt; The &lt;code&gt;chromaticity&lt;/code&gt; parameter should be a
     * &lt;code&gt;float&lt;/code&gt; array of length 8 containing the white point
     * X and Y, red X and Y, green X and Y, and blue X and Y values in
     * order.
     *
     * &lt;p&gt; The 'cHRM' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChromaticity</name><parameter_list>(<parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>chromaticity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>chromaticity</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>chromaticity</name></name> <operator>=</operator> <call><name><name>chromaticity</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chromaticitySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A convenience method that calls the array version.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChromaticity</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>whitePointX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>whitePointY</name></decl></parameter>,
                                <parameter><decl><type><name>float</name></type> <name>redX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>redY</name></decl></parameter>,
                                <parameter><decl><type><name>float</name></type> <name>greenX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>greenY</name></decl></parameter>,
                                <parameter><decl><type><name>float</name></type> <name>blueX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>blueY</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>chroma</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>whitePointX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>whitePointY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>redX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>redY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>greenX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>greenY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>blueX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chroma</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>blueY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChromaticity</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the white point and primary chromaticities in
     * CIE (x, y) space.
     *
     * &lt;p&gt; See the documentation for the &lt;code&gt;setChromaticity&lt;/code&gt;
     * method for the format of the returned data.
     *
     * &lt;p&gt; If the chromaticity has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the chromaticity is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>float</name><index>[]</index></name></type> <name>getChromaticity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>chromaticitySet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>chromaticity</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'cHRM' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetChromaticity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>chromaticity</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>chromaticitySet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'cHRM' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isChromaticitySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>chromaticitySet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// gAMA chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>gamma</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>gammaSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the file gamma value for the image.
     *
     * &lt;p&gt; The 'gAMA' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gamma</name></name> <operator>=</operator> <name>gamma</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gammaSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the file gamma value for the image.
     *
     * &lt;p&gt; If the file gamma has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the gamma is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getGamma</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gammaSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam13"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>gamma</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'gAMA' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetGamma</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>gammaSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'gAMA' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGammaSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>gammaSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// hIST chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>paletteHistogram</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>paletteHistogramSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the palette histogram to be stored with this image.
     * The histogram consists of an array of integers, one per
     * palette entry.
     *
     * &lt;p&gt; The 'hIST' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaletteHistogram</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>paletteHistogram</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paletteHistogram</name></name> <operator>=</operator> <call><name><name>paletteHistogram</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>paletteHistogramSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the palette histogram to be stored with this image.
     *
     * &lt;p&gt; If the histogram has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the histogram is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getPaletteHistogram</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>paletteHistogramSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam14"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>paletteHistogram</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'hIST' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetPaletteHistogram</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>paletteHistogram</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>paletteHistogramSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'hIST' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPaletteHistogramSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>paletteHistogramSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// iCCP chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ICCProfileData</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ICCProfileDataSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the ICC profile data to be stored with this image.
     * The profile is represented in raw binary form.
     *
     * &lt;p&gt; The 'iCCP' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setICCProfileData</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ICCProfileData</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ICCProfileData</name></name> <operator>=</operator> <call><name><name>ICCProfileData</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ICCProfileDataSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the ICC profile data to be stored with this image.
     *
     * &lt;p&gt; If the ICC profile has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the ICC profile is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getICCProfileData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ICCProfileDataSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ICCProfileData</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'iCCP' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetICCProfileData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>ICCProfileData</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ICCProfileDataSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'iCCP' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isICCProfileDataSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>ICCProfileDataSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// pHYS chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>physicalDimension</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>physicalDimensionSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the physical dimension information to be stored with this
     * image.  The physicalDimension parameter should be a 3-entry
     * array containing the number of pixels per unit in the X
     * direction, the number of pixels per unit in the Y direction,
     * and the unit specifier (0 = unknown, 1 = meters).
     *
     * &lt;p&gt; The 'pHYS' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPhysicalDimension</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>physicalDimension</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>physicalDimension</name></name> <operator>=</operator> <call><name><name>physicalDimension</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>physicalDimensionSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A convenience method that calls the array version.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPhysicalDimension</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xPixelsPerUnit</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>yPixelsPerUnit</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>unitSpecifier</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>pd</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xPixelsPerUnit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yPixelsPerUnit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>unitSpecifier</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setPhysicalDimension</name><argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the physical dimension information to be stored
     * with this image.
     *
     * &lt;p&gt; If the physical dimension information has not previously
     * been set, or has been unset, an
     * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the physical dimension information
     *        is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getPhysicalDimension</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>physicalDimensionSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam16"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>physicalDimension</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'pHYS' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetPhysicalDimension</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>physicalDimension</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>physicalDimensionSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'pHYS' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPhysicalDimensionSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>physicalDimensionSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// sPLT chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>PNGSuggestedPaletteEntry</name><index>[]</index></name></type> <name>suggestedPalette</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>suggestedPaletteSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the suggested palette information to be stored with this
     * image.  The information is passed to this method as an array of
     * &lt;code&gt;PNGSuggestedPaletteEntry&lt;/code&gt; objects.
     *
     * &lt;p&gt; The 'sPLT' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuggestedPalette</name><parameter_list>(<parameter><decl><type><name><name>PNGSuggestedPaletteEntry</name><index>[]</index></name></type> <name>palette</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>suggestedPalette</name> <operator>=</operator> <call><name><name>palette</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>suggestedPaletteSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the suggested palette information to be stored with this
     * image.
     *
     * &lt;p&gt; If the suggested palette information has not previously
     * been set, or has been unset, an
     * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the suggested palette
     *        information is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PNGSuggestedPaletteEntry</name><index>[]</index></name></type> <name>getSuggestedPalette</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>suggestedPaletteSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam17"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>suggestedPalette</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'sPLT' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSuggestedPalette</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>suggestedPalette</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>suggestedPaletteSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'sPLT' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSuggestedPaletteSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>suggestedPaletteSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// sBIT chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>significantBits</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>significantBitsSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the number of significant bits for each band of the image.
     *
     * &lt;p&gt; The number of entries in the &lt;code&gt;significantBits&lt;/code&gt;
     * array must be equal to the number of output bands in the image:
     * 1 for a gray image, 2 for gray+alpha, 3 for index or truecolor,
     * and 4 for truecolor+alpha.
     *
     * &lt;p&gt; The 'sBIT' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSignificantBits</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>significantBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>significantBits</name></name> <operator>=</operator> <call><name><name>significantBits</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>significantBitsSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of significant bits for each band of the image.
     *
     * &lt;p&gt; If the significant bits values have not previously been
     * set, or have been unset, an &lt;code&gt;IllegalStateException&lt;/code&gt;
     * will be thrown.
     *
     * @throws IllegalStateException if the significant bits values are
     *        not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getSignificantBits</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>significantBitsSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam18"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>significantBits</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'sBIT' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSignificantBits</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>significantBits</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>significantBitsSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if an 'sBIT' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSignificantBitsSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>significantBitsSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// sRGB chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>SRGBIntent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>SRGBIntentSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the sRGB rendering intent to be stored with this image.
     * The legal values are 0 = Perceptual, 1 = Relative Colorimetric,
     * 2 = Saturation, and 3 = Absolute Colorimetric.  Refer to the
     * PNG specification for information on these values.
     *
     * &lt;p&gt; The 'sRGB' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSRGBIntent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>SRGBIntent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>SRGBIntent</name></name> <operator>=</operator> <name>SRGBIntent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>SRGBIntentSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the sRGB rendering intent to be stored with this image.
     *
     * &lt;p&gt; If the sRGB intent has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the sRGB intent is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSRGBIntent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>SRGBIntentSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam19"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>SRGBIntent</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'sRGB' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetSRGBIntent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>SRGBIntentSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if an 'sRGB' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSRGBIntentSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>SRGBIntentSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// tEXt chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>text</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>textSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the textual data to be stored in uncompressed form with this
     * image.  The data is passed to this method as an array of
     * &lt;code&gt;String&lt;/code&gt;s.
     *
     * &lt;p&gt; The 'tEXt' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>textSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the text strings to be stored in uncompressed form with this
     * image as an array of &lt;code&gt;String&lt;/code&gt;s.
     *
     * &lt;p&gt; If the text strings have not previously been set, or have been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the text strings are not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>textSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam20"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'tEXt' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>textSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'tEXt' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTextSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>textSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// tIME chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>modificationTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>modificationTimeSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the modification time, as a &lt;code&gt;Date&lt;/code&gt;, to be
     * stored with this image.  The internal storage format will use
     * UTC regardless of how the &lt;code&gt;modificationTime&lt;/code&gt;
     * parameter was created.
     *
     * &lt;p&gt; The 'tIME' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>modificationTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modificationTime</name></name> <operator>=</operator> <name>modificationTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>modificationTimeSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the modification time to be stored with this image.
     *
     * &lt;p&gt; If the bit depth has not previously been set, or has been
     * unset, an &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.
     *
     * @throws IllegalStateException if the bit depth is not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getModificationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>modificationTimeSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam21"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>modificationTime</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'tIME' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetModificationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modificationTime</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>modificationTimeSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'tIME' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isModificationTimeSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>modificationTimeSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// tRNS chunk</comment>

    <decl_stmt><decl><type><name>boolean</name></type> <name>transparencySet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'tRNS' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetTransparency</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>transparencySet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'tRNS' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTransparencySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>transparencySet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// zTXT chunk</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>zText</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>zTextSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the text strings to be stored in compressed form with this
     * image.  The data is passed to this method as an array of
     * &lt;code&gt;String&lt;/code&gt;s.
     *
     * &lt;p&gt; The 'zTXt' chunk will encode this information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompressedText</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zText</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zTextSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the text strings to be stored in compressed form with
     * this image as an array of &lt;code&gt;String&lt;/code&gt;s.
     *
     * &lt;p&gt; If the compressed text strings have not previously been
     * set, or have been unset, an &lt;code&gt;IllegalStateException&lt;/code&gt;
     * will be thrown.
     *
     * @throws IllegalStateException if the compressed text strings are
     *        not set.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getCompressedText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>zTextSet</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>PropertyUtil</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"PNGEncodeParam22"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>zText</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Suppresses the 'zTXt' chunk from being output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsetCompressedText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>zText</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zTextSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if a 'zTXT' chunk will be output.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompressedTextSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>zTextSet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Other chunk types</comment>

    <decl_stmt><decl><type><name>List</name></type> <name>chunkType</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name></type> <name>chunkData</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Adds a private chunk, in binary form, to the list of chunks to
     * be stored with this image.
     *
     * @param type a 4-character String giving the chunk type name.
     * @param data an array of &lt;code&gt;byte&lt;/code&gt;s containing the
     *        chunk data.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addPrivateChunk</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>chunkType</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chunkData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of private chunks to be written to the
     * output file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>getNumPrivateChunks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>chunkType</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the type of the private chunk at a given index, as a
     * 4-character &lt;code&gt;String&lt;/code&gt;.  The index must be smaller
     * than the return value of &lt;code&gt;getNumPrivateChunks&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getPrivateChunkType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>chunkType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the data associated of the private chunk at a given
     * index, as an array of &lt;code&gt;byte&lt;/code&gt;s.  The index must be
     * smaller than the return value of
     * &lt;code&gt;getNumPrivateChunks&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getPrivateChunkData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><call><name><name>chunkData</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all private chunks associated with this parameter instance
     * whose 'safe-to-copy' bit is not set.  This may be advisable when
     * transcoding PNG images.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeUnsafeToCopyPrivateChunks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>newChunkType</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>newChunkData</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>getNumPrivateChunks</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name>getPrivateChunkType</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>lastChar</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lastChar</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>lastChar</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>newChunkType</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>newChunkData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getPrivateChunkData</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>chunkType</name> <operator>=</operator> <name>newChunkType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkData</name> <operator>=</operator> <name>newChunkData</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all private chunks associated with this parameter instance.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeAllPrivateChunks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>chunkType</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunkData</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * An abs() function for use by the Paeth predictor.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The Paeth predictor routine used in PNG encoding.  This routine
     * is included as a convenience to subclasses that override the
     * &lt;code&gt;filterRow&lt;/code&gt; method.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>paethPredictor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pa</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pb</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pa</name> <operator>&lt;=</operator> <name>pb</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pa</name> <operator>&lt;=</operator> <name>pc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>a</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>b</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>c</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs filtering on a row of an image.  This method may be
     * overridden in order to provide a custom algorithm for choosing
     * the filter type for a given row.
     *
     * &lt;p&gt; The method is supplied with the current and previous rows
     * of the image.  For the first row of the image, or of an
     * interlacing pass, the previous row array will be filled with
     * zeros as required by the PNG specification.
     *
     * &lt;p&gt; The method is also supplied with five scratch arrays.
     * These arrays may be used within the method for any purpose.
     * At method exit, the array at the index given by the return
     * value of the method should contain the filtered data.  The
     * return value will also be used as the filter type.
     *
     * &lt;p&gt; The default implementation of the method performs a trial
     * encoding with each of the filter types, and computes the sum of
     * absolute values of the differences between the raw bytes of the
     * current row and the predicted values.  The index of the filter
     * producing the smallest result is returned.
     *
     * &lt;p&gt; As an example, to perform only 'sub' filtering, this method
     * could be implemented (non-optimally) as follows:
     *
     * &lt;pre&gt;
     * for (int i = bytesPerPixel; i &amp;lt; bytesPerRow + bytesPerPixel; i++) {
     *     int curr = currRow[i] &amp;amp; 0xff;
     *     int left = currRow[i - bytesPerPixel] &amp;amp; 0xff;
     *     scratchRow[PNG_FILTER_SUB][i] = (byte)(curr - left);
     * }
     * return PNG_FILTER_SUB;
     * &lt;/pre&gt;
     *
     * @param currRow The current row as an array of &lt;code&gt;byte&lt;/code&gt;s
     *        of length at least &lt;code&gt;bytesPerRow + bytesPerPixel&lt;/code&gt;.
     *        The pixel data starts at index &lt;code&gt;bytesPerPixel&lt;/code&gt;;
     *        the initial &lt;code&gt;bytesPerPixel&lt;/code&gt; bytes are zero.
     * @param prevRow The current row as an array of &lt;code&gt;byte&lt;/code&gt;s
     *        The pixel data starts at index &lt;code&gt;bytesPerPixel&lt;/code&gt;;
     *        the initial &lt;code&gt;bytesPerPixel&lt;/code&gt; bytes are zero.
     * @param scratchRows An array of 5 &lt;code&gt;byte&lt;/code&gt; arrays of
     *        length at least &lt;code&gt;bytesPerRow +
     *        bytesPerPixel&lt;/code&gt;, useable to hold temporary results.
     *        The filtered row will be returned as one of the entries
     *        of this array.  The returned filtered data should start
     *        at index &lt;code&gt;bytesPerPixel&lt;/code&gt;; The initial
     *        &lt;code&gt;bytesPerPixel&lt;/code&gt; bytes are not used.
     * @param bytesPerRow The number of bytes in the image row.
     *        This value will always be greater than 0.
     * @param bytesPerPixel The number of bytes representing a single
     *        pixel, rounded up to an integer.  This is the 'bpp' parameter
     *        described in the PNG specification.
     *
     * @return The filter type to be used.  The entry of
     *         &lt;code&gt;scratchRows[]&lt;/code&gt; at this index holds the
     *         filtered data.  */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>filterRow</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>currRow</name></decl></parameter>,
                         <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>prevRow</name></decl></parameter>,
                         <parameter><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>scratchRows</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>bytesPerRow</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>bytesPerPixel</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>int</name> <index>[]</index></name></type> <name>badness</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>curr</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>up</name></decl>, <decl><type ref="prev"/><name>upleft</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pa</name></decl>, <decl><type ref="prev"/><name>pb</name></decl>, <decl><type ref="prev"/><name>pc</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>bytesPerPixel</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytesPerRow</name> <operator>+</operator> <name>bytesPerPixel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>curr</name>   <operator>=</operator> <name><name>currRow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name>   <operator>=</operator> <name><name>currRow</name><index>[<expr><name>i</name> <operator>-</operator> <name>bytesPerPixel</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>up</name>     <operator>=</operator> <name><name>prevRow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>upleft</name> <operator>=</operator> <name><name>prevRow</name><index>[<expr><name>i</name> <operator>-</operator> <name>bytesPerPixel</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

            <comment type="line">// no filter</comment>
            <expr_stmt><expr><name><name>badness</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>curr</name></expr>;</expr_stmt>

            <comment type="line">// sub filter</comment>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scratchRows</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>badness</name>    <index>[<expr><literal type="number">1</literal></expr>]</index></name>    <operator>+=</operator>   <ternary><condition><expr><operator>(</operator><name>diff</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>diff</name></expr></then><else>:<expr><operator>-</operator><name>diff</name></expr></else></ternary></expr>;</expr_stmt>

            <comment type="line">// up filter</comment>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name> <operator>-</operator> <name>up</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scratchRows</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>badness</name>    <index>[<expr><literal type="number">2</literal></expr>]</index></name>    <operator>+=</operator>   <ternary><condition><expr><operator>(</operator><name>diff</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>diff</name></expr></then><else>:<expr><operator>-</operator><name>diff</name></expr></else></ternary></expr>;</expr_stmt>

            <comment type="line">// average filter</comment>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>left</name><operator>+</operator><name>up</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scratchRows</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>badness</name>    <index>[<expr><literal type="number">3</literal></expr>]</index></name>    <operator>+=</operator>   <ternary><condition><expr><operator>(</operator><name>diff</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>diff</name></expr></then><else>:<expr><operator>-</operator><name>diff</name></expr></else></ternary></expr>;</expr_stmt>

            <comment type="line">// paeth filter</comment>

            <comment type="line">// Original code much simplier but doesn't take full</comment>
            <comment type="line">// advantage of relationship between pa/b/c and</comment>
            <comment type="line">// information gleaned in abs operations.</comment>
            <comment type="line" format="doxygen">/// pa = up  -upleft;</comment>
            <comment type="line" format="doxygen">/// pb = left-upleft;</comment>
            <comment type="line" format="doxygen">/// pc = pa+pb;</comment>
            <comment type="line" format="doxygen">/// pa = abs(pa);</comment>
            <comment type="line" format="doxygen">/// pb = abs(pb);</comment>
            <comment type="line" format="doxygen">/// pc = abs(pc);</comment>
            <comment type="line" format="doxygen">/// if ((pa &lt;= pb) &amp;&amp; (pa &lt;= pc))</comment>
            <comment type="line" format="doxygen">///   diff = curr-left;</comment>
            <comment type="line" format="doxygen">/// else if (pb &lt;= pc)</comment>
            <comment type="line" format="doxygen">///   diff = curr-up;</comment>
            <comment type="line" format="doxygen">/// else</comment>
            <comment type="line" format="doxygen">///   diff = curr-upleft;</comment>

            <expr_stmt><expr><name>pa</name> <operator>=</operator> <name>up</name>  <operator>-</operator><name>upleft</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pb</name> <operator>=</operator> <name>left</name><operator>-</operator><name>upleft</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pa</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>pb</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// both pa &amp; pb neg so pc is always greater than or</comment>
                <comment type="line">// equal to pa or pb;</comment>
                <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&gt;=</operator> <name>pb</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// since pa &amp; pb neg check sense is reversed.</comment>
                  <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>left</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                  <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>up</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// pa neg pb pos so we must compute pc...</comment>
                <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pa</name><operator>+</operator><name>pb</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>pa</name><operator>=</operator><operator>-</operator><name>pa</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name></expr>)</condition><block type="pseudo"><block_content>     <comment type="line">// pc is positive and less than pb</comment>
                  <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>left</name></expr>;</expr_stmt></block_content></block></if>
                  <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>upleft</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
                <if type="elseif">else
                  <comment type="line">// pc is negative and less than or equal to pa,</comment>
                  <comment type="line">// but since pa is greater than pb this isn't an issue...</comment>
                  if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <operator>-</operator><name>pc</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>up</name></expr>;</expr_stmt></block_content></block></if>
                  <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>upleft</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>pb</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pb</name> <operator>=</operator><operator>-</operator><name>pb</name></expr>;</expr_stmt> <comment type="line">// make it positive...</comment>
                <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name></expr>)</condition> <block>{<block_content>
                  <comment type="line">// pc would be negative and less than or equal to pb</comment>
                  <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pb</name><operator>-</operator><name>pa</name></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>left</name></expr>;</expr_stmt></block_content></block></if>
                  <if type="elseif">else if <condition>(<expr><name>pb</name> <operator>==</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="line">// if pa is zero then pc==pb otherwise</comment>
                    <comment type="line">// pc must be less than pb.</comment>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>up</name></expr>;</expr_stmt></block_content></block></if>
                  <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>upleft</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                  <comment type="line">// pc would be positive and less than pa.</comment>
                  <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pa</name><operator>-</operator><name>pb</name></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><name>pb</name> <operator>&lt;=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>up</name></expr>;</expr_stmt></block_content></block></if>
                  <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>upleft</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// both pos so pa+pb is always greater than pa/pb</comment>
                <if_stmt><if>if <condition>(<expr><name>pa</name> <operator>&lt;=</operator> <name>pb</name></expr>)</condition><block type="pseudo"><block_content>
                  <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>left</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                  <expr_stmt><expr><name>diff</name> <operator>=</operator> <name>curr</name><operator>-</operator><name>up</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>scratchRows</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>badness</name>    <index>[<expr><literal type="number">4</literal></expr>]</index></name>    <operator>+=</operator>   <ternary><condition><expr><operator>(</operator><name>diff</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>diff</name></expr></then><else>:<expr><operator>-</operator><name>diff</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>filterType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minBadness</name> <init>= <expr><name><name>badness</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>badness</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>minBadness</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>minBadness</name> <operator>=</operator> <name><name>badness</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>filterType</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>filterType</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>currRow</name></expr></argument>, <argument><expr><name>bytesPerPixel</name></expr></argument>,
                             <argument><expr><name><name>scratchRows</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bytesPerPixel</name></expr></argument>,
                             <argument><expr><name>bytesPerRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>filterType</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
