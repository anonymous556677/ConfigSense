<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-dom/src/main/java/org/apache/batik/dom/util/DOMUtilities.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>AbstractDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>constants</name><operator>.</operator><name>XMLConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>xml</name><operator>.</operator><name>XMLUtilities</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Attr</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DocumentType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NamedNodeMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A collection of utility functions for the DOM.
 *
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>DOMUtilities</name> <super_list><extends>extends <super><name>XMLUtilities</name></super></extends> <implements>implements <super><name>XMLConstants</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Does not need to be instantiated.
     */</comment>
    <constructor><specifier>protected</specifier> <name>DOMUtilities</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>
 
    <comment type="block" format="javadoc">/**
     * A node in a linked list of prefix to namespace name mappings.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>NSMap</name> <block>{

        <comment type="block" format="javadoc">/**
         * The prefix to map.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The namespace name that the prefix maps to.
         * The empty string is used to represent no namespace.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ns</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The next namespace prefix mapping in the list.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>NSMap</name></type> <name>next</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The next number to use when generating prefixes.
         * A prefix of the form &lt;code&gt;"a" + number&lt;/code&gt; is generated when
         * serializing a node whose namespace URI does not correspond to
         * a prefix in scope.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextPrefixNumber</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Constructs a new namespace prefix mapping object with the
         * XML and XMLNS namespaces predeclared.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>NSMap</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>NSMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>declare</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_PREFIX</name></name></expr></argument>,
                                       <argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XML_NAMESPACE_URI</name></name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>declare</name><argument_list>(<argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XMLNS_PREFIX</name></name></expr></argument>,
                                       <argument><expr><name><name>XMLConstants</name><operator>.</operator><name>XMLNS_NAMESPACE_URI</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Creates a new &lt;code&gt;NSMap&lt;/code&gt; object.
         */</comment>
        <constructor><specifier>private</specifier> <name>NSMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Declares a new prefix mapping by returning a new
         * &lt;code&gt;NSMap&lt;/code&gt; object that links to this one.
         */</comment>
        <function><type><specifier>public</specifier> <name>NSMap</name></type> <name>declare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>NSMap</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>NSMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>m</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>m</name><operator>.</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>m</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>m</name><operator>.</operator><name>nextPrefixNumber</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>nextPrefixNumber</name></name></expr>;</expr_stmt>
            <return>return <expr><name>m</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns a new, generated namespace prefix.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getNewPrefix</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"a"</literal> <operator>+</operator> <name>nextPrefixNumber</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>getNamespace</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
            <return>return <expr><name>prefix</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the namespace URI that the specified prefix
         * maps to, or &lt;code&gt;null&lt;/code&gt; if the prefix has not
         * been declared.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getNamespace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>NSMap</name></type> <name>m</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name><name>m</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>m</name><operator>.</operator><name>ns</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the prefix appropriate for an element that maps to specified
         * namespace URI.  If the specified namespace is the default namespace
         * (i.e., it has an empty string prefix mapping to it), then the empty
         * string is returned.  If there is no appropriate prefix,
         * &lt;code&gt;null&lt;/code&gt; is returned.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrefixForElement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>NSMap</name></type> <name>m</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name><name>m</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>ns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>ns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>m</name><operator>.</operator><name>prefix</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the prefix appropriate for an attribute that maps to
         * specified namespace URI.  If there is no appropriate prefix,
         * &lt;code&gt;null&lt;/code&gt; is returned.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrefixForAttr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ns</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>NSMap</name></type> <name>m</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name><name>m</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>ns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>ns</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>m</name><operator>.</operator><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>m</name><operator>.</operator><name>prefix</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Serializes the specified &lt;code&gt;Document&lt;/code&gt;, writing it to the given
     * &lt;code&gt;Writer&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>Writer</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractDocument</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>AbstractDocument</name><operator>)</operator> <name>doc</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No document element"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>NSMap</name></type> <name>m</name> <init>= <expr><call><name><name>NSMap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
             <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>writeNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"1.1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getXmlVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Writer</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>NSMap</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isXML11</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>hasAttributes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>NamedNodeMap</name></type> <name>attr</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>attr</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Attr</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>Attr</name><operator>)</operator><call><name><name>attr</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"xmlns"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>declare</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>declare</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>ns</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tagName</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tagName</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">""</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getNamespace</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">" xmlns=\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>declare</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getPrefix</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>ns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getNamespace</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>tagName</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>getPrefixForElement</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>getNewPrefix</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tagName</name> <operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <call><name><name>n</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tagName</name> <operator>+</operator> <literal type="string">" xmlns:"</literal> <operator>+</operator> <name>prefix</name> <operator>+</operator> <literal type="string">"=\""</literal>
                                 <operator>+</operator> <call><name>contentToString</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>declare</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>tagName</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>tagName</name> <operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <call><name><name>n</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>hasAttributes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>NamedNodeMap</name></type> <name>attr</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>attr</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Attr</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>Attr</name><operator>)</operator><call><name><name>attr</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getPrefix</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ans</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ans</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
                            <operator>!</operator><operator>(</operator><literal type="string">"xmlns"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"xmlns"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <literal type="null">null</literal>
                                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ans</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getNamespace</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>||</operator> <name>prefix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>getPrefixForAttr</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>getNewPrefix</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>m</name><operator>.</operator><name>declare</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">" xmlns:"</literal> <operator>+</operator> <name>prefix</name> <operator>+</operator> <literal type="string">"=\""</literal>
                                         <operator>+</operator> <call><name>contentToString</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>name</name> <operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <call><name><name>a</name><operator>.</operator><name>getLocalName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">' '</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">"=\""</literal>
                             <operator>+</operator> <call><name>contentToString</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call>
                             <operator>+</operator> <literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>Node</name></type> <name>c</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>writeNode</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/"</literal> <operator>+</operator> <name>tagName</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"/&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name>contentToString</name><argument_list>(<argument><expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>CDATA_SECTION_NODE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>data</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"]]&gt;"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unserializable CDATA section node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;![CDATA["</literal>
                     <operator>+</operator> <call><name>assertValidCharacters</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>isXML11</name></expr></argument>)</argument_list></call>
                     <operator>+</operator> <literal type="string">"]]&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>ENTITY_REFERENCE_NODE</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal> <operator>+</operator> <call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>PROCESSING_INSTRUCTION_NODE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>target</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>data</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>target</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
                    <operator>||</operator> <call><name><name>data</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"?&gt;"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator>
                    <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unserializable processing instruction node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;?"</literal> <operator>+</operator> <name>target</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name>data</name> <operator>+</operator> <literal type="string">"?&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>COMMENT_NODE</name></name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;!--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>data</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal>
                    <operator>||</operator> <call><name><name>data</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unserializable comment node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"--&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Node</name><operator>.</operator><name>DOCUMENT_TYPE_NODE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>DocumentType</name></type> <name>dt</name> <init>= <expr><operator>(</operator><name>DocumentType</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"&lt;!DOCTYPE "</literal>
                     <operator>+</operator> <call><name><name>n</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocumentElement</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNodeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>pubID</name> <init>= <expr><call><name><name>dt</name><operator>.</operator><name>getPublicId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pubID</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>q</name> <init>= <expr><call><name>getUsableQuote</name><argument_list>(<argument><expr><name>pubID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unserializable DOCTYPE node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">" PUBLIC "</literal> <operator>+</operator> <name>q</name> <operator>+</operator> <name>pubID</name> <operator>+</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sysID</name> <init>= <expr><call><name><name>dt</name><operator>.</operator><name>getSystemId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sysID</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>q</name> <init>= <expr><call><name>getUsableQuote</name><argument_list>(<argument><expr><name>sysID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unserializable DOCTYPE node"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>pubID</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">" SYSTEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <name>q</name> <operator>+</operator> <name>sysID</name> <operator>+</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>subset</name> <init>= <expr><call><name><name>dt</name><operator>.</operator><name>getInternalSubset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>subset</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">'['</literal> <operator>+</operator> <name>subset</name> <operator>+</operator> <literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unknown DOM node type "</literal> <operator>+</operator> <call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a node using the given writer.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeNode</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Writer</name></type> <name>w</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>DOCUMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>writeDocument</name><argument_list>(<argument><expr><operator>(</operator><name>Document</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>AbstractDocument</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>AbstractDocument</name><operator>)</operator> <call><name><name>n</name><operator>.</operator><name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>writeNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><call><name><name>NSMap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><ternary><condition><expr><name>d</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><literal type="string">"1.1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getXmlVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the quote character to use when quoting the specified string.
     * If the string contains both single and double quotes, then 0 will be
     * returned.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>char</name></type> <name>getUsableQuote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Serializes the given DOM node using {@link #writeNode(Node,Writer)}
     * and returns the XML as a String.
     *
     * @param n The Node to serialize.
     * @return A String containing the XML serialization of the Node, or an
     *   empty String if there was a problem during serialization.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getXML</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>DOMUtilities</name><operator>.</operator><name>writeNode</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></catch></try>
        <return>return <expr><call><name><name>writer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>assertValidCharacters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isXML11</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isXML11</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isXMLCharacter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
                    <operator>||</operator> <name>isXML11</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isXML11Character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid character"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the given content value transformed to replace invalid
     * characters with entities.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>contentToString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isXML11</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isXML11</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isXMLCharacter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
                    <operator>||</operator> <name>isXML11</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isXML11Character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid character"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'"'</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'\''</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&amp;apos;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Finds and returns the index of child node in the given parent's children
     * array
     *
     * @param child
     *            The child node
     * @param parent
     *            The parent node
     * @return the index
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getChildIndex</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>child</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>parent</name>
                <operator>||</operator> <call><name><name>child</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getChildIndex</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Finds and returns the index of child node in its parent's children array
     *
     * @param child
     *            The child node
     * @return the index in children array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getChildIndex</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>NodeList</name></type> <name>children</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getChildNodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>children</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>currentChild</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>currentChild</name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>i</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if any of from the given list of nodes is an ancestor to another
     * node
     *
     * @param ancestorNodes
     *            The potential ancestor nodes
     * @param node
     *            The potential descendant node
     * @return True if at least one node is ancestor of the given node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAnyNodeAncestorOf</name><parameter_list>(<parameter><decl><type><name>ArrayList</name></type> <name>ancestorNodes</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>ancestorNodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>ancestorNode</name> <range>: <expr><name>ancestorNodes</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>ancestor</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <name>ancestorNode</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isAncestorOf</name><argument_list>(<argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether a node is ancestor of another node.
     *
     * @param node
     *            The potential ancestor node
     * @param descendant
     *            The potential descendant node
     * @return True if node is ancestor of the descendant node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAncestorOf</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>descendant</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>descendant</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>currentNode</name> <init>= <expr><call><name><name>descendant</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>currentNode</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>currentNode</name> <operator>=</operator> <call><name><name>currentNode</name>
                <operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>currentNode</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether the given node is a child of the given parent node.
     *
     * @param node
     *            The potential child node
     * @param parentNode
     *            Parent node
     * @return True if a node is a child of the given parent node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isParentOf</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>parentNode</name> <operator>==</operator> <literal type="null">null</literal>
                <operator>||</operator> <call><name><name>node</name><operator>.</operator><name>getParentNode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>parentNode</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the node can be appended on the given parent node
     *
     * @param node
     *            The given node
     * @param parentNode
     *            The given parent node
     * @return True if the given node can be appended on the parent node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>canAppend</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>parentNode</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>node</name> <operator>==</operator> <name>parentNode</name>
                <operator>||</operator> <call><name>isAncestorOf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>parentNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether any of the nodes from the list can be appended to a given
     * parentNode.
     *
     * @param children
     *            The given node list
     * @param parentNode
     *            The potential parent node
     * @return true if at least one node from a list can be appended
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>canAppendAny</name><parameter_list>(<parameter><decl><type><name>ArrayList</name></type> <name>children</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canHaveChildren</name><argument_list>(<argument><expr><name>parentNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>aChildren</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator> <name>aChildren</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>canAppend</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>parentNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the given Node can have children.
     *
     * @param parentNode The Node to test
     * @return &lt;code&gt;true&lt;/code&gt; if the node can have children,
     *   &lt;code&gt;false&lt;/code&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>canHaveChildren</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>parentNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>parentNode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><call><name><name>parentNode</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Node</name><operator>.</operator><name>DOCUMENT_NODE</name></name></expr>:</case>
            <case>case <expr><name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>:</case>
            <case>case <expr><name><name>Node</name><operator>.</operator><name>COMMENT_NODE</name></name></expr>:</case>
            <case>case <expr><name><name>Node</name><operator>.</operator><name>CDATA_SECTION_NODE</name></name></expr>:</case>
            <case>case <expr><name><name>Node</name><operator>.</operator><name>PROCESSING_INSTRUCTION_NODE</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the given XML string into a DocumentFragment of the given document
     * or a new document if 'doc' is null.
     *
     * @param text
     *            The given XML string
     * @param doc
     *            The given document
     * @param uri
     *            The document URI
     * @param prefixes
     *            The prefixes map with (prefix, namespaceURI) pairs
     * @param wrapperElementName
     *            null: Ignore the wrapper element and prefixes map and try to
     *            parse the text as a whole document otherwise: Wrap the given
     *            text with the wrapper element with prefixes specified from the
     *            prefixes map
     * @param documentFactory
     *            What document factory to use when parsing the text
     * @return The document fragment or null on error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Node</name></type> <name>parseXML</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
            <parameter><decl><type><name>Map</name></type> <name>prefixes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>wrapperElementName</name></decl></parameter>,
            <parameter><decl><type><name>SAXDocumentFactory</name></type> <name>documentFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// Create the wrapper element prefix and suffix, copying the (prefix,</comment>
        <comment type="line">// namespaceURI) pairs from the prefixes map</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>wrapperElementPrefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>wrapperElementSuffix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>wrapperElementName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>wrapperElementPrefix</name> <operator>=</operator> <literal type="string">"&lt;"</literal> <operator>+</operator> <name>wrapperElementName</name></expr>;</expr_stmt>
            <comment type="line">// Copy the prefixes from the prefixes map to the wrapper element</comment>
            <if_stmt><if>if <condition>(<expr><name>prefixes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>wrapperElementPrefix</name> <operator>+=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>Object</name></type> <name>o</name> <range>: <expr><call><name><name>prefixes</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>e</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>currentKey</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>currentValue</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>wrapperElementPrefix</name> <operator>+=</operator> <name>currentKey</name> <operator>+</operator> <literal type="string">"=\""</literal> <operator>+</operator> <name>currentValue</name>
                            <operator>+</operator> <literal type="string">"\" "</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>wrapperElementPrefix</name> <operator>+=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>wrapperElementSuffix</name> <operator>+=</operator> <literal type="string">"&lt;/"</literal> <operator>+</operator> <name>wrapperElementName</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Try and parse as a whole document, if no wrapper element is specified</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>wrapperElementPrefix</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
                <operator>&amp;&amp;</operator> <call><name><name>wrapperElementSuffix</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Document</name></type> <name>d</name> <init>= <expr><call><name><name>documentFactory</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                        <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>d</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Node</name></type> <name>result</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>createDocumentFragment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name>
                        <operator>.</operator><name>appendChild</name></name><argument_list>(<argument><expr><call><name><name>doc</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>

            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Try and parse as a document fragment</comment>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>wrapperElementPrefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call>
                <operator>+</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>wrapperElementSuffix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>wrapperElementPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>wrapperElementSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>newText</name> <init>= <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Document</name></type> <name>d</name> <init>= <expr><call><name><name>documentFactory</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(
                    <argument><expr><name>newText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>d</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFirstChild</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
                    <incr><expr><name>node</name> <operator>=</operator> <call><name><name>node</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Node</name></type> <name>result</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>createDocumentFragment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendChild</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>result</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exc</name></decl></parameter>)</parameter_list> <block>{<block_content>

        </block_content>}</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Deep clones a document using the given DOM implementation.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Document</name></type> <name>deepCloneDocument</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>DOMImplementation</name></type> <name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Document</name></type> <name>result</name> <init>= <expr><call><name><name>impl</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>getNamespaceURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>root</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>rroot</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>before</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>root</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>before</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>hasAttributes</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>NamedNodeMap</name></type> <name>attr</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>attr</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>rroot</name><operator>.</operator><name>setAttributeNode</name></name><argument_list>(<argument><expr><operator>(</operator><name>Attr</name><operator>)</operator><call><name><name>result</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><call><name><name>attr</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                       <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <for>for <control>(<init><decl><type><name>Node</name></type> <name>c</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition>
                     <incr><expr><name>c</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>rroot</name><operator>.</operator><name>appendChild</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>n</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Node</name><operator>.</operator><name>DOCUMENT_TYPE_NODE</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>insertBefore</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>appendChild</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>importNode</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether the given string is a valid name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>c</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>c</name> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME_FIRST_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> <operator>=</operator> <name>c</name> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether the given string is a valid XML 1.1 name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidName11</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>c</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>c</name> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME11_FIRST_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> <operator>=</operator> <name>c</name> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME11_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests whether the given string is a valid prefix.
     * This method assume that isValidName(s) is true.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidPrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the prefix from the given qualified name.
     * This method assume that isValidName(s) is true.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getPrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>
            ?</condition><then> <expr><literal type="null">null</literal></expr>
            </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the local name from the given qualified name.
     * This method assume that isValidName(s) is true.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>
            ?</condition><then> <expr><name>s</name></expr>
            </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a 'xml-stylesheet' processing instruction data section and
     * puts the pseudo attributes in the given table.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>parseStyleSheetPIData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// !!! Internationalization</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// Skip leading whitespaces</comment>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>XMLUtilities</name><operator>.</operator><name>isXMLSpace</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Parse the pseudo attribute name</comment>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>c</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>c</name> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME_FIRST_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>INVALID_CHARACTER_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong name initial:  "</literal> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>ident</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ident</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <name>c</name> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>NAME_CHARACTER</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>m</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>ident</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Skip whitespaces</comment>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>XMLUtilities</name><operator>.</operator><name>isXMLSpace</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// The next char must be '='</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <comment type="line">// Skip whitespaces</comment>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>XMLUtilities</name><operator>.</operator><name>isXMLSpace</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// The next char must be '\'' or '"'</comment>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>value</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                           <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator>
                                           <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                           <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator>
                                           <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>DOMException</name><argument_list>(<argument><expr><name><name>DOMException</name><operator>.</operator><name>SYNTAX_ERR</name></name></expr></argument>,
                                       <argument><expr><literal type="string">"Wrong xml-stylesheet data: "</literal> <operator>+</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>ident</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intern</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <comment type="line">// Skip whitespaces</comment>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>XMLUtilities</name><operator>.</operator><name>isXMLSpace</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * String constants representing DOM modifier strings for various all
     * key lock combinations.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>LOCK_STRINGS</name> <init>= <expr><block>{
        <expr><literal type="string">""</literal></expr>,
        <expr><literal type="string">"CapsLock"</literal></expr>,
        <expr><literal type="string">"NumLock"</literal></expr>,
        <expr><literal type="string">"NumLock CapsLock"</literal></expr>,
        <expr><literal type="string">"Scroll"</literal></expr>,
        <expr><literal type="string">"Scroll CapsLock"</literal></expr>,
        <expr><literal type="string">"Scroll NumLock"</literal></expr>,
        <expr><literal type="string">"Scroll NumLock CapsLock"</literal></expr>,
        <expr><literal type="string">"KanaMode"</literal></expr>,
        <expr><literal type="string">"KanaMode CapsLock"</literal></expr>,
        <expr><literal type="string">"KanaMode NumLock"</literal></expr>,
        <expr><literal type="string">"KanaMode NumLock CapsLock"</literal></expr>,
        <expr><literal type="string">"KanaMode Scroll"</literal></expr>,
        <expr><literal type="string">"KanaMode Scroll CapsLock"</literal></expr>,
        <expr><literal type="string">"KanaMode Scroll NumLock"</literal></expr>,
        <expr><literal type="string">"KanaMode Scroll NumLock CapsLock"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * String constants representing DOM modifier strings for various all
     * shift modifier combinations.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>MODIFIER_STRINGS</name> <init>= <expr><block>{
        <expr><literal type="string">""</literal></expr>,
        <expr><literal type="string">"Shift"</literal></expr>,
        <expr><literal type="string">"Control"</literal></expr>,
        <expr><literal type="string">"Control Shift"</literal></expr>,
        <expr><literal type="string">"Meta"</literal></expr>,
        <expr><literal type="string">"Meta Shift"</literal></expr>,
        <expr><literal type="string">"Control Meta"</literal></expr>,
        <expr><literal type="string">"Control Meta Shift"</literal></expr>,
        <expr><literal type="string">"Alt"</literal></expr>,
        <expr><literal type="string">"Alt Shift"</literal></expr>,
        <expr><literal type="string">"Alt Control"</literal></expr>,
        <expr><literal type="string">"Alt Control Shift"</literal></expr>,
        <expr><literal type="string">"Alt Meta"</literal></expr>,
        <expr><literal type="string">"Alt Meta Shift"</literal></expr>,
        <expr><literal type="string">"Alt Control Meta"</literal></expr>,
        <expr><literal type="string">"Alt Control Meta Shift"</literal></expr>,
        <expr><literal type="string">"AltGraph"</literal></expr>,
        <expr><literal type="string">"AltGraph Shift"</literal></expr>,
        <expr><literal type="string">"AltGraph Control"</literal></expr>,
        <expr><literal type="string">"AltGraph Control Shift"</literal></expr>,
        <expr><literal type="string">"AltGraph Meta"</literal></expr>,
        <expr><literal type="string">"AltGraph Meta Shift"</literal></expr>,
        <expr><literal type="string">"AltGraph Control Meta"</literal></expr>,
        <expr><literal type="string">"AltGraph Control Meta Shift"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Shift"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Control"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Control Shift"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Meta"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Meta Shift"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Control Meta"</literal></expr>,
        <expr><literal type="string">"Alt AltGraph Control Meta Shift"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets a DOM 3 modifiers string from the given lock and
     * shift bitmasks.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getModifiersList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockState</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modifiersEx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiersEx</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>modifiersEx</name> <operator>=</operator> <literal type="number">0x10</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>modifiersEx</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>modifiersEx</name> <operator>=</operator> <operator>(</operator><name>modifiersEx</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name><name>LOCK_STRINGS</name><index>[<expr><name>lockState</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>s</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name><name>MODIFIER_STRINGS</name><index>[<expr><name>modifiersEx</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>MODIFIER_STRINGS</name><index>[<expr><name>modifiersEx</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the given element has a particular attribute and that
     * it exists due to being specified explicitly, rather than being defaulted
     * from a DTD.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAttributeSpecifiedNS</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>namespaceURI</name></decl></parameter>,
                                                 <parameter><decl><type><name>String</name></type> <name>localName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Attr</name></type> <name>a</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getAttributeNodeNS</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>getSpecified</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
