<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-bridge/src/main/java/org/apache/batik/bridge/UserAgent.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Dimension2D</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>event</name><operator>.</operator><name>EventDispatcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGAElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGDocument</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An interface that provides access to the User Agent informations
 * needed by the bridge.
 *
 * @author &lt;a href="mailto:cjolif@ilog.fr"&gt;Christophe Jolif&lt;/a&gt;
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<interface><specifier>public</specifier> interface <name>UserAgent</name> <block>{

    <comment type="line">// &lt;!&gt; FIXME: TO BE REMOVED</comment>
    <comment type="block" format="javadoc">/**
     * Returns the event dispatcher to use.
     */</comment>
    <function_decl><type><name>EventDispatcher</name></type> <name>getEventDispatcher</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the default size of the viewport.
     */</comment>
    <function_decl><type><name>Dimension2D</name></type> <name>getViewportSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Displays an error resulting from the specified Exception.
     */</comment>
    <function_decl><type><name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Displays a message in the User Agent interface.
     */</comment>
    <function_decl><type><name>void</name></type> <name>displayMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Shows an alert dialog box.
     */</comment>
    <function_decl><type><name>void</name></type> <name>showAlert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Shows a prompt dialog box.
     */</comment>
    <function_decl><type><name>String</name></type> <name>showPrompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Shows a prompt dialog box.
     */</comment>
    <function_decl><type><name>String</name></type> <name>showPrompt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Shows a confirm dialog box.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>showConfirm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     */</comment>
    <function_decl><type><name>float</name></type> <name>getPixelUnitToMillimeter</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the size of a px CSS unit in millimeters.
     * This will be removed after next release.
     * @see #getPixelUnitToMillimeter()
     */</comment>
    <function_decl><type><name>float</name></type> <name>getPixelToMM</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** 
     * Returns the  medium font size. 
     */</comment>
    <function_decl><type><name>float</name></type> <name>getMediumFontSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a lighter font-weight.
     */</comment>
    <function_decl><type><name>float</name></type> <name>getLighterFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a bolder font-weight.
     */</comment>
    <function_decl><type><name>float</name></type> <name>getBolderFontWeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the default font family.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getDefaultFontFamily</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the language settings.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getLanguages</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the user stylesheet uri.
     * @return null if no user style sheet was specified.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getUserStyleSheetURI</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Opens a link.
     * @param elt The activated link element.
     */</comment>
    <function_decl><type><name>void</name></type> <name>openLink</name><parameter_list>(<parameter><decl><type><name>SVGAElement</name></type> <name>elt</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Informs the user agent to change the cursor.
     * @param cursor the new cursor
     */</comment>
    <function_decl><type><name>void</name></type> <name>setSVGCursor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Informs the user agent that the text selection has changed.
     * @param start The Mark for the start of the selection.
     * @param end   The Mark for the end of the selection.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setTextSelection</name><parameter_list>(<parameter><decl><type><name>Mark</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Mark</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Informs the user agent that the text selection should be cleared.
     */</comment>
    <function_decl><type><name>void</name></type> <name>deselectAll</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the class name of the XML parser.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getXMLParserClassName</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns true if the XML parser must be in validation mode, false
     * otherwise.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isXMLParserValidating</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the &lt;code&gt;AffineTransform&lt;/code&gt; currently
     * applied to the drawing by the UserAgent.
     */</comment>
    <function_decl><type><name>AffineTransform</name></type> <name>getTransform</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;AffineTransform&lt;/code&gt; currently
     * applied to the drawing by the UserAgent.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setTransform</name><parameter_list>(<parameter><decl><type><name>AffineTransform</name></type> <name>at</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns this user agent's CSS media.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getMedia</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns this user agent's alternate style-sheet title.
     */</comment>
    <function_decl><type><name>String</name></type> <name>getAlternateStyleSheet</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the location on the screen of the
     * client area in the UserAgent.
     */</comment>
    <function_decl><type><name>Point</name></type> <name>getClientAreaLocationOnScreen</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Tells whether the given feature is supported by this
     * user agent.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasFeature</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Tells whether the given extension is supported by this
     * user agent.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>supportExtension</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Lets the bridge tell the user agent that the following
     * extension is supported by the bridge.
     */</comment>
    <function_decl><type><name>void</name></type> <name>registerExtension</name><parameter_list>(<parameter><decl><type><name>BridgeExtension</name></type> <name>ext</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Notifies the UserAgent that the input element 
     * has been found in the document. This is sometimes
     * called, for example, to handle &amp;lt;a&amp;gt; or
     * &amp;lt;title&amp;gt; elements in a UserAgent-dependant
     * way.
     */</comment>
    <function_decl><type><name>void</name></type> <name>handleElement</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>elt</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the security settings for the given script
     * type, script url and document url
     * 
     * @param scriptType type of script, as found in the 
     *        type attribute of the &amp;lt;script&amp;gt; element.
     * @param scriptURL url for the script, as defined in
     *        the script's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        script was found.
     */</comment>
    <function_decl><type><name>ScriptSecurity</name></type> <name>getScriptSecurity</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scriptType</name></decl></parameter>,
                                     <parameter><decl><type><name>ParsedURL</name></type> <name>scriptURL</name></decl></parameter>,
                                     <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="block" format="javadoc">/**
     * This method throws a SecurityException if the script
     * of given type, found at url and referenced from docURL
     * should not be loaded.
     * 
     * This is a convenience method to call checkLoadScript
     * on the ScriptSecurity strategy returned by 
     * getScriptSecurity.
     *
     * @param scriptType type of script, as found in the 
     *        type attribute of the &amp;lt;script&amp;gt; element.
     * @param scriptURL url for the script, as defined in
     *        the script's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        script was found.
     */</comment>
    <function_decl><type><name>void</name></type> <name>checkLoadScript</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scriptType</name></decl></parameter>,
                         <parameter><decl><type><name>ParsedURL</name></type> <name>scriptURL</name></decl></parameter>,
                         <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the security settings for the given resource
     * url and document url
     * 
     * @param resourceURL url for the resource, as defined in
     *        the resource's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        resource was found.
     */</comment>
    <function_decl><type><name>ExternalResourceSecurity</name></type> 
        <name>getExternalResourceSecurity</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>,
                                    <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="block" format="javadoc">/**
     * This method throws a SecurityException if the resource
     * found at url and referenced from docURL
     * should not be loaded.
     * 
     * This is a convenience method to call checkLoadExternalResource
     * on the ExternalResourceSecurity strategy returned by 
     * getExternalResourceSecurity.
     *
     * @param resourceURL url for the resource, as defined in
     *        the resource's xlink:href attribute. If that
     *        attribute was empty, then this parameter should
     *        be null
     * @param docURL url for the document into which the 
     *        resource was found.
     */</comment>
    <function_decl><type><name>void</name></type> <name>checkLoadExternalResource</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>,
                                   <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws>;</function_decl>


    <comment type="block" format="javadoc">/**
     * This method should return an image to be displayed when an image
     * can't be loaded.  If it returns 'null' then a BridgeException will
     * be thrown.
     *
     * @param e   The &amp;lt;image&amp;gt; element that can't be loaded.
     * @param url The resolved url that can't be loaded.
     * @param message As best as can be determined the reason it can't be
     *                loaded (not available, corrupt, unknown format, ...).
     */</comment>
    <function_decl><type><name>SVGDocument</name></type> <name>getBrokenLinkDocument</name><parameter_list>(<parameter><decl><type><name>Element</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method should load a new document described by the supplied URL.
     *
     * @param url The url to be loaded as a string.
     */</comment>
    <function_decl><type><name>void</name></type> <name>loadDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns the Font Family Resolver */</comment>
    <function_decl><type><name>FontFamilyResolver</name></type> <name>getFontFamilyResolver</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>
