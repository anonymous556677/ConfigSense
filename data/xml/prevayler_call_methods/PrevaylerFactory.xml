<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/factory/src/main/java/org/prevayler/PrevaylerFactory.java"><comment type="line">//Prevayler(TM) - The Free-Software Prevalence Layer.</comment>
<comment type="line">//Copyright (C) 2001-2004 Klaus Wuestefeld</comment>
<comment type="line">//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</comment>
<comment type="line">//Contributions: Aleksey Aristov, Carlos Villela, Justin Sampson.</comment>

<package>package <name><name>org</name><operator>.</operator><name>prevayler</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>monitor</name><operator>.</operator><name>Monitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>monitor</name><operator>.</operator><name>SimpleMonitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>network</name><operator>.</operator><name>OldNetworkImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>serialization</name><operator>.</operator><name>JavaSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>serialization</name><operator>.</operator><name>Serializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>serialization</name><operator>.</operator><name>XStreamSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>PrevaylerDirectory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>PrevaylerImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>clock</name><operator>.</operator><name>MachineClock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>journal</name><operator>.</operator><name>Journal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>journal</name><operator>.</operator><name>PersistentJournal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>journal</name><operator>.</operator><name>TransientJournal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name><operator>.</operator><name>CentralPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name><operator>.</operator><name>TransactionPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>replication</name><operator>.</operator><name>ClientPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>replication</name><operator>.</operator><name>ServerListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>snapshot</name><operator>.</operator><name>GenericSnapshotManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>snapshot</name><operator>.</operator><name>NullSnapshotManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Provides easy access to all Prevayler configurations and implementations
 * available in this distribution. Static methods are also provided as
 * short-cuts for the most common configurations. &lt;br&gt;
 * &lt;br&gt;
 * By default, the Prevayler instances created by this class will write their
 * Transactions to .journal files before executing them. The
 * FileDescriptor.sync() method is called to make sure the Java file
 * write-buffers have been written to the operating system. Many operating
 * systems, including most recent versions of Linux and Windows, allow the
 * hard-drive's write-cache to be disabled. This guarantees no executed
 * Transaction will be lost in the event of a power shortage, for example. &lt;br&gt;
 * &lt;br&gt;
 * Also by default, the Prevayler instances created by this class will execute
 * deep copies of transactions, not the transactions themselves, so that
 * unrecoverable changes to the prevalent system and unrecoverable uses of
 * reference equality inside transactions fail fast as they would upon recovery.
 *
 * @param &lt;P&gt; The type of object you intend to persist as a Prevalent System.
 *        &lt;br&gt;
 * @see Prevayler
 */</comment>
<class><specifier>public</specifier> class <name><name>PrevaylerFactory</name><parameter_list>&lt;<parameter><name>P</name></parameter>&gt;</parameter_list></name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>P</name></type> <name>_prevalentSystem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Clock</name></type> <name>_clock</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_transactionDeepCopyMode</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_transientMode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_prevalenceDirectory</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>NullSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_nullSnapshotManager</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>_journalSizeThreshold</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>_journalAgeThreshold</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_journalDiskSync</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_serverPort</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_remoteServerIpAddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>_remoteServerPort</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_REPLICATION_PORT</name> <init>= <expr><literal type="number">8756</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Monitor</name></type> <name>_monitor</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Serializer</name></type> <name>_journalSerializer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_journalSuffix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Serializer</name></argument>&gt;</argument_list></name></type> <name>_snapshotSerializers</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Serializer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>_primarySnapshotSuffix</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * &lt;i&gt;Example:&lt;/i&gt; &lt;br&gt;
   * &lt;code&gt;
   * &lt;br&gt;PrevaylerFactory&amp;lt;MyObjectToPersist&amp;gt; f = new PrevaylerFactory&amp;lt;MyObjectToPersist&amp;gt;();
   * &lt;br&gt;&lt;/code&gt; &lt;br&gt;
   * Use if you want access to any configuration options not available via the
   * static method short-cuts.
   */</comment>
  <constructor><specifier>public</specifier> <name>PrevaylerFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Creates a Prevayler that will use the given prevalenceBase directory to read
   * and write its .snapshot and .journal files, using standard Java
   * serialization. This requires that the Prevalent System and all Transaction
   * implementations used by the Prevayler are Java-Serializable. &lt;br&gt;
   * &lt;br&gt;
   * &lt;i&gt;Example:&lt;/i&gt; &lt;br&gt;
   * &lt;code&gt;
   * &lt;br&gt;&lt;i&gt;//Your object:&lt;/i&gt;
   * &lt;br&gt;MyObjectToPersist newPrevalentSystem = new MyObjectToPersist();
   * &lt;br&gt;String prevalenceBase = "myDirectory";
   * &lt;br&gt;&lt;b&gt;Prevayler&amp;lt;MyObjectToPersist&amp;gt; prevayler = PrevaylerFactory.createPrevayler(newPrevalentSystem, prevalenceBase);&lt;/b&gt;
   * &lt;br&gt;&lt;/code&gt;
   *
   * @param newPrevalentSystem The newly started, "empty" prevalent system that
   *                           will be used as a starting point for every system
   *                           startup, until the first snapshot is taken.
   * @param prevalenceBase     The directory where the .snapshot files and
   *                           .journal files will be read and written.
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>createPrevayler</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prevalenceBase</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configurePrevalentSystem</name></name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configurePrevalenceDirectory</name></name><argument_list>(<argument><expr><name>prevalenceBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a Prevayler that will use a directory called "PrevalenceBase" under
   * the current directory to read and write its .snapshot and .journal files,
   * using standard Java serialization. This requires that the Prevalent System
   * and all Transaction implementations used by the Prevayler are
   * Java-Serializable.
   *
   * @param newPrevalentSystem The newly started, "empty" prevalent system that
   *                           will be used as a starting point for every system
   *                           startup, until the first snapshot is taken.
   * @see #createPrevayler(Object, String)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>createPrevayler</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name>createPrevayler</name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>, <argument><expr><literal type="string">"PrevalenceBase"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a Prevayler that will execute Transactions WITHOUT writing them to
   * disk. Snapshots will work as "checkpoints" for the system, therefore. This is
   * useful for stand-alone applications that have a "Save" button, for example.
   * The Prevayler will use standard Java serialization for reading and writing
   * its .snapshot files, which requires that the Prevalent System is
   * Java-Serializable.
   *
   * @param newPrevalentSystem The newly started, "empty" prevalent system that
   *                           will be used as a starting point for every system
   *                           startup, until the first snapshot is taken.
   * @param snapshotDirectory  The directory where the .snapshot files will be
   *                           read and written.
   * @see #createPrevayler(Object, String)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>createCheckpointPrevayler</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotDirectory</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configurePrevalentSystem</name></name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configurePrevalenceDirectory</name></name><argument_list>(<argument><expr><name>snapshotDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configureTransientMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Transient Prevayler creation should not fail.</comment>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Creates a Prevayler that will execute Transactions WITHOUT writing them to
   * disk. This is useful for running automated tests or demos MUCH faster than
   * with a regular Prevayler.
   * &lt;p/&gt;
   * Attempts to take snapshots on this transient Prevayler will throw an
   * IOException.
   *
   * @param newPrevalentSystem The newly started, "empty" prevalent system.
   * @see #createCheckpointPrevayler(Object, String)
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>createTransientPrevayler</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name><name>PrevaylerFactory</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configurePrevalentSystem</name></name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configureNullSnapshotManager</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name><name>NullSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>, <argument><expr><literal type="string">"Transient Prevaylers are unable to take snapshots."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>factory</name><operator>.</operator><name>configureTransientMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <return>return <expr><call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Transient Prevayler creation should not fail.</comment>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * @deprecated Use createCheckpointPrevayler() instead of this method.
   *             Deprecated since Prevayler2.00.001.
   */</comment>
  <function><annotation>@<name>Deprecated</name></annotation>
  <type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>P</name></parameter>&gt;</parameter_list> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>createTransientPrevayler</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotDirectory</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>createCheckpointPrevayler</name><argument_list>(<argument><expr><name>newPrevalentSystem</name></expr></argument>, <argument><expr><name>snapshotDirectory</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Clock</name></type> <name>clock</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>_clock</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>_clock</name></expr> </then><else>: <expr><operator>new</operator> <call><name>MachineClock</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures the prevalent system that will be used by the Prevayler created by
   * this factory.
   *
   * @param newPrevalentSystem If the default Serializer is used, this
   *                           prevalentSystem must be Serializable. If another
   *                           Serializer is used, this prevalentSystem must be
   *                           compatible with it.
   * @see #configureSnapshotSerializer(String, Serializer)
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configurePrevalentSystem</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>newPrevalentSystem</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_prevalentSystem</name> <operator>=</operator> <name>newPrevalentSystem</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures the directory where the created Prevayler will read and write its
   * .journal and .snapshot files. The default is a directory called
   * "PrevalenceBase" under the current directory.
   *
   * @param prevalenceDirectory Will be ignored for the .snapshot files if a
   *                            SnapshotManager is configured.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configurePrevalenceDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prevalenceDirectory</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_prevalenceDirectory</name> <operator>=</operator> <name>prevalenceDirectory</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures whether deep copies of transactions are executed instead of the
   * transactions themselves, upon calling ".execute" on the created Prevayler.
   * The default is &lt;code&gt;true&lt;/code&gt;.
   *
   * @param transactionDeepCopyMode &lt;br&gt;
   *                                &lt;br&gt;
   *                                If &lt;code&gt;false&lt;/code&gt;, references passed in to
   *                                transactions are used naturally, as they are
   *                                during ordinary Java method calls, allowing
   *                                their underlying objects to be changed inside
   *                                transactions. However, any unrecoverable
   *                                changes to the prevalent system and
   *                                unrecoverable uses of reference equality
   *                                inside transactions will not fail fast as they
   *                                would upon recovery. &lt;br&gt;
   *                                &lt;br&gt;
   *                                If &lt;code&gt;true&lt;/code&gt; (default), a deep copy of
   *                                the transaction is executed each time. This
   *                                allows any unrecoverable changes to the
   *                                prevalent system and unrecoverable uses of
   *                                reference equality inside transactions to fail
   *                                fast as they would upon recovery. However, it
   *                                only allows changes to deep copies of the
   *                                objects passed in, not the original objects.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureTransactionDeepCopy</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>transactionDeepCopyMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_transactionDeepCopyMode</name> <operator>=</operator> <name>transactionDeepCopyMode</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures the Clock that will be used by the created Prevayler. The Clock
   * interface can be implemented by the application if it requires Prevayler to
   * use a special time source other than the machine clock (default).
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureClock</name><parameter_list>(<parameter><decl><type><name>Clock</name></type> <name>clock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_clock</name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Assigns a monitor object to receive notifications from Prevayler. This is
   * useful for logging or sending eMails to system administrators, for example.
   * If this method is not called or if null is passed as a parameter, a
   * SimpleMonitor will be used to log notification on System.err.
   *
   * @param monitor the Monitor implementation to use.
   * @see org.prevayler.foundation.monitor.SimpleMonitor
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureMonitor</name><parameter_list>(<parameter><decl><type><name>Monitor</name></type> <name>monitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_monitor</name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Determines whether the Prevayler created by this factory should be transient
   * or persistent. The default is &lt;code&gt;false&lt;/code&gt; (persistent).
   *
   * @param transientMode &lt;br&gt;
   *                      &lt;br&gt;
   *                      If &lt;code&gt;true&lt;/code&gt;, a "transient" Prevayler will be
   *                      created, which will execute its Transactions WITHOUT
   *                      writing them to disk. This is useful for stand-alone
   *                      applications which have a "Save" button, for example, or
   *                      for running automated tests MUCH faster than with a
   *                      persistent Prevayler. &lt;br&gt;
   *                      &lt;br&gt;
   *                      If &lt;code&gt;false&lt;/code&gt; (default), a persistent Prevayler
   *                      will be created.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureTransientMode</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>transientMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_transientMode</name> <operator>=</operator> <name>transientMode</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Reserved for future implementation.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureReplicationClient</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>remoteServerIpAddress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remoteServerPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_remoteServerIpAddress</name> <operator>=</operator> <name>remoteServerIpAddress</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>_remoteServerPort</name> <operator>=</operator> <name>remoteServerPort</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Reserved for future implementation.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureReplicationServer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_serverPort</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>configureNullSnapshotManager</name><parameter_list>(<parameter><decl><type><name><name>NullSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>snapshotManager</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_nullSnapshotManager</name> <operator>=</operator> <name>snapshotManager</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures the size (in bytes) of the journal file. When the current journal
   * exceeds this size, a new journal is created.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalFileSizeThreshold</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sizeInBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_journalSizeThreshold</name> <operator>=</operator> <name>sizeInBytes</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the age (in milliseconds) of the journal file. When the current journal
   * expires, a new journal is created.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalFileAgeThreshold</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ageInMilliseconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_journalAgeThreshold</name> <operator>=</operator> <name>ageInMilliseconds</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures whether the journal will sync writes to disk. The default is
   * &lt;code&gt;true&lt;/code&gt;.
   *
   * @param journalDiskSync &lt;br&gt;
   *                        &lt;br&gt;
   *                        If &lt;code&gt;false&lt;/code&gt;, transactions may execute
   *                        without necessarily being written to the physical
   *                        disk. Transactions are still flushed to the operating
   *                        system before being executed, but
   *                        FileDescriptor.sync() is never called. This increases
   *                        transaction throughput dramatically, but allows
   *                        transactions to be lost if the system does not shut
   *                        down cleanly. Calling {@link Prevayler#close()} will
   *                        close the underlying journal file and therefore cause
   *                        all transactions to be written to disk. &lt;br&gt;
   *                        &lt;br&gt;
   *                        If &lt;code&gt;true&lt;/code&gt; (default), every transaction is
   *                        forced to be written to the physical disk before it is
   *                        executed (using
   *                        {@link java.io.FileDescriptor#sync()}). (Many
   *                        transactions may be written at once, but no
   *                        transaction will be executed before it is written to
   *                        disk.)
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalDiskSync</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>journalDiskSync</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_journalDiskSync</name> <operator>=</operator> <name>journalDiskSync</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalSerializer</name><parameter_list>(<parameter><decl><type><name>JavaSerializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>configureJournalSerializer</name><argument_list>(<argument><expr><literal type="string">"journal"</literal></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalSerializer</name><parameter_list>(<parameter><decl><type><name>XStreamSerializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>configureJournalSerializer</name><argument_list>(<argument><expr><literal type="string">"xstreamjournal"</literal></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configures the transaction journal Serializer to be used by the Prevayler
   * created by this factory. Only one Serializer is supported at a time. If you
   * want to change the Serializer of a system in production, you will have to
   * take a snapshot first because the journal files written by the previous
   * Serializer will not be read.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureJournalSerializer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>Serializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PrevaylerDirectory</name><operator>.</operator><name>checkValidJournalSuffix</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>_journalSerializer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Read the javadoc to this method."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>_journalSerializer</name> <operator>=</operator> <name>serializer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>_journalSuffix</name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureSnapshotSerializer</name><parameter_list>(<parameter><decl><type><name>JavaSerializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>configureSnapshotSerializer</name><argument_list>(<argument><expr><literal type="string">"snapshot"</literal></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureSnapshotSerializer</name><parameter_list>(<parameter><decl><type><name>XStreamSerializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>configureSnapshotSerializer</name><argument_list>(<argument><expr><literal type="string">"xstreamsnapshot"</literal></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Configure a serialization strategy for snapshots. This may be called any
   * number of times with different suffixes to configure different strategies for
   * reading existing snapshots. The first call to this method establishes the
   * &lt;i&gt;primary&lt;/i&gt; strategy, which will be used for writing snapshots as well as
   * for deep-copying the prevalent system whenever necessary.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>configureSnapshotSerializer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>Serializer</name></type> <name>serializer</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>PrevaylerDirectory</name><operator>.</operator><name>checkValidSnapshotSuffix</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_snapshotSerializers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>_primarySnapshotSuffix</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>_primarySnapshotSuffix</name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a Prevayler created according to what was defined by calls to the
   * configuration methods above.
   *
   * @throws IOException            If there is trouble creating the Prevalence
   *                                Base directory or reading a .journal or
   *                                .snapshot file.
   * @throws ClassNotFoundException If a class of a serialized Object is not found
   *                                when reading a .journal or .snapshot file.
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>snapshotManager</name> <init>= <expr><call><name>snapshotManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>publisher</name> <init>= <expr><call><name>publisher</name><argument_list>(<argument><expr><name>snapshotManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>_serverPort</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>new</operator> <call><name><name>ServerListener</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>publisher</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>OldNetworkImpl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_serverPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>PrevaylerImpl</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>snapshotManager</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><call><name>journalSerializer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_transactionDeepCopyMode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>prevalenceDirectory</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>_prevalenceDirectory</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>_prevalenceDirectory</name></expr> </then><else>: <expr><literal type="string">"Prevalence"</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>P</name></type> <name>prevalentSystem</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_prevalentSystem</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"The prevalent system must be configured."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>_prevalentSystem</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>publisher</name><parameter_list>(<parameter><decl><type><name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>snapshotManager</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_remoteServerIpAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>new</operator> <call><name><name>ClientPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OldNetworkImpl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>_remoteServerIpAddress</name></expr></argument>, <argument><expr><name>_remoteServerPort</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>CentralPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>clock</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>journal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>Journal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>journal</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_transientMode</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <call><name><name>TransientJournal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>PrevaylerDirectory</name></type> <name>directory</name> <init>= <expr><operator>new</operator> <call><name>PrevaylerDirectory</name><argument_list>(<argument><expr><call><name>prevalenceDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name><name>PersistentJournal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>_journalSizeThreshold</name></expr></argument>, <argument><expr><name>_journalAgeThreshold</name></expr></argument>, <argument><expr><name>_journalDiskSync</name></expr></argument>,
          <argument><expr><call><name>journalSuffix</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>monitor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Serializer</name></type> <name>journalSerializer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_journalSerializer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>_journalSerializer</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>JavaSerializer</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>journalSuffix</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>_journalSuffix</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>_journalSuffix</name></expr> </then><else>: <expr><literal type="string">"journal"</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>snapshotManager</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>_nullSnapshotManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>_nullSnapshotManager</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>PrevaylerDirectory</name></type> <name>directory</name> <init>= <expr><operator>new</operator> <call><name>PrevaylerDirectory</name><argument_list>(<argument><expr><call><name>prevalenceDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_snapshotSerializers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>new</operator> <call><name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_snapshotSerializers</name></expr></argument>, <argument><expr><name>_primarySnapshotSuffix</name></expr></argument>, <argument><expr><call><name>prevalentSystem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>,
          <argument><expr><call><name>journalSerializer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>snapshotSuffix</name> <init>= <expr><literal type="string">"snapshot"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaSerializer</name></type> <name>snapshotSerializer</name> <init>= <expr><operator>new</operator> <call><name>JavaSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name>snapshotSuffix</name></expr></argument>, <argument><expr><name>snapshotSerializer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>snapshotSuffix</name></expr></argument>,
        <argument><expr><call><name>prevalentSystem</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directory</name></expr></argument>, <argument><expr><call><name>journalSerializer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>Monitor</name></type> <name>monitor</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>_monitor</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>_monitor</name></expr> </then><else>: <expr><operator>new</operator> <call><name>SimpleMonitor</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
