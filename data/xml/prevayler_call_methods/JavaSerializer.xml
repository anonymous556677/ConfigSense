<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/core/src/main/java/org/prevayler/foundation/serialization/JavaSerializer.java"><package>package <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>serialization</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>ObjectInputStreamWithClassLoader</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Writes and reads objects using Java serialization. This serializer can be used for snapshots, journals or both.
 */</comment>
<class><specifier>public</specifier> class <name>JavaSerializer</name> <super_list><implements>implements <super><name>Serializer</name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>_loader</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>JavaSerializer</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_loader</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <constructor><specifier>public</specifier> <name>JavaSerializer</name><parameter_list>(<parameter><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>_loader</name> <operator>=</operator> <name>loader</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ObjectOutputStream</name></type> <name>objects</name> <init>= <expr><operator>new</operator> <call><name>ObjectOutputStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>objects</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>objects</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>Object</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>stream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>ObjectInputStream</name></type> <name>objects</name> <init>= <expr><operator>new</operator> <call><name>ObjectInputStreamWithClassLoader</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>_loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Object</name></type> <name>object</name> <init>= <expr><call><name><name>objects</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>objects</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>object</name></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
