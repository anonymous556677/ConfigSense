<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/core/src/main/java/org/prevayler/implementation/publishing/CentralPublisher.java"><comment type="line">//Prevayler(TM) - The Free-Software Prevalence Layer.</comment>
<comment type="line">//Copyright (C) 2001-2003 Klaus Wuestefeld</comment>
<comment type="line">//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>Clock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>TransactionBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>Cool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>Turn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>Capsule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>TransactionGuide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>TransactionTimestamp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>clock</name><operator>.</operator><name>PausableClock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>journal</name><operator>.</operator><name>Journal</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name><name>CentralPublisher</name><parameter_list>&lt;<parameter><name>P</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>AbstractPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>, <argument><name>PausableClock</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Journal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_journal</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>_pendingPublications</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>_pendingPublicationsMonitor</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>Turn</name></type> <name>_nextTurn</name> <init>= <expr><call><name><name>Turn</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>_nextTransaction</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>_nextTurnMonitor</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


  <constructor><specifier>public</specifier> <name>CentralPublisher</name><parameter_list>(<parameter><decl><type><name>Clock</name></type> <name>clock</name></decl></parameter>, <parameter><decl><type><name><name>Journal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>journal</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PausableClock</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>_journal</name> <operator>=</operator> <name>journal</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>publish</name><parameter_list>(<parameter><decl><type><name><name>Capsule</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>?</name> <extends>extends <name>TransactionBase</name></extends></argument>&gt;</argument_list></name></type> <name>capsule</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>_pendingPublicationsMonitor</name></expr>)</init> <block>{<block_content>  <comment type="line">//Blocks all new subscriptions until the publication is over.</comment>
      <if_stmt><if>if <condition>(<expr><name>_pendingPublications</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>_clock</name><operator>.</operator><name>pause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>_pendingPublications</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></synchronized>

    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name>publishWithoutWorryingAboutNewSubscriptions</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Suggestions for a better method name are welcome.  :)</comment>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <synchronized>synchronized <init>(<expr><name>_pendingPublicationsMonitor</name></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><name>_pendingPublications</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>_pendingPublications</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>_clock</name><operator>.</operator><name>resume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>_pendingPublicationsMonitor</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></synchronized>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>publishWithoutWorryingAboutNewSubscriptions</name><parameter_list>(<parameter><decl><type><name><name>Capsule</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>?</name> <extends>extends <name>TransactionBase</name></extends></argument>&gt;</argument_list></name></type> <name>capsule</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>TransactionGuide</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>guide</name> <init>= <expr><call><name>guideFor</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>_journal</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>guide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifySubscribers</name><argument_list>(<argument><expr><name>guide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>TransactionGuide</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>guideFor</name><parameter_list>(<parameter><decl><type><name><name>Capsule</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>?</name> <extends>extends <name>TransactionBase</name></extends></argument>&gt;</argument_list></name></type> <name>capsule</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>_nextTurnMonitor</name></expr>)</init> <block>{<block_content>
      <decl_stmt><decl><type><name><name>TransactionTimestamp</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>timestamp</name> <init>= <expr><operator>new</operator> <call><name><name>TransactionTimestamp</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>capsule</name></expr></argument>, <argument><expr><name>_nextTransaction</name></expr></argument>, <argument><expr><call><name><name>_clock</name><operator>.</operator><name>realTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Count this transaction</comment>
      <decl_stmt><decl><type><name>Turn</name></type> <name>turn</name> <init>= <expr><name>_nextTurn</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>_nextTurn</name> <operator>=</operator> <call><name><name>_nextTurn</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>_nextTransaction</name><operator>++</operator></expr>;</expr_stmt>

      <return>return <expr><operator>new</operator> <call><name><name>TransactionGuide</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>turn</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>notifySubscribers</name><parameter_list>(<parameter><decl><type><name><name>TransactionGuide</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>guide</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>guide</name><operator>.</operator><name>startTurn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>_clock</name><operator>.</operator><name>advanceTo</name></name><argument_list>(<argument><expr><call><name><name>guide</name><operator>.</operator><name>executionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifySubscribers</name><argument_list>(<argument><expr><call><name><name>guide</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>guide</name><operator>.</operator><name>endTurn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name><name>TransactionSubscriber</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>subscriber</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>initialTransaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <synchronized>synchronized <init>(<expr><name>_pendingPublicationsMonitor</name></expr>)</init> <block>{<block_content>
      <while>while <condition>(<expr><name>_pendingPublications</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Cool</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>_pendingPublicationsMonitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

      <expr_stmt><expr><call><name><name>_journal</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>, <argument><expr><name>initialTransaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <synchronized>synchronized <init>(<expr><name>_nextTurnMonitor</name></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><name>_nextTransaction</name> <operator>=</operator> <call><name><name>_journal</name><operator>.</operator><name>nextTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></synchronized>

      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addSubscriber</name></name><argument_list>(<argument><expr><name>subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></synchronized>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>_journal</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
