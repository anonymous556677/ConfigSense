<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/core/src/main/java/org/prevayler/implementation/journal/TransientJournal.java"><comment type="line">//Prevayler(TM) - The Free-Software Prevalence Layer.</comment>
<comment type="line">//Copyright (C) 2001-2003 Klaus Wuestefeld</comment>
<comment type="line">//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>journal</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>TransactionGuide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>TransactionTimestamp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name><operator>.</operator><name>TransactionSubscriber</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>


<class><specifier>public</specifier> class <name><name>TransientJournal</name><parameter_list>&lt;<parameter><name>P</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>Journal</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>TransactionTimestamp</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>journal</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>TransactionTimestamp</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>_initialTransaction</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_initialTransactionInitialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name><name>TransactionGuide</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>guide</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_initialTransactionInitialized</name></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Journal.update() has to be called at least once before Journal.journal()."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>guide</name><operator>.</operator><name>startTurn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content>
      <expr_stmt><expr><call><name><name>guide</name><operator>.</operator><name>checkSystemVersion</name></name><argument_list>(<argument><expr><name>_initialTransaction</name> <operator>+</operator> <call><name><name>journal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>journal</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>guide</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cleanCopy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <finally>finally <block>{<block_content>
      <expr_stmt><expr><call><name><name>guide</name><operator>.</operator><name>endTurn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></finally></try>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name><name>TransactionSubscriber</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>subscriber</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>initialTransaction</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_initialTransactionInitialized</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>_initialTransactionInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>_initialTransaction</name> <operator>=</operator> <name>initialTransaction</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>initialTransaction</name> <operator>&lt;</operator> <name>_initialTransaction</name></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unable to recover transaction "</literal> <operator>+</operator> <name>initialTransaction</name> <operator>+</operator> <literal type="string">". The oldest recoverable transaction is "</literal> <operator>+</operator> <name>_initialTransaction</name> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>initialTransaction</name> <operator>-</operator> <name>_initialTransaction</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <call><name><name>journal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"The transaction journal has not yet reached transaction "</literal> <operator>+</operator> <name>initialTransaction</name> <operator>+</operator> <literal type="string">". The last logged transaction was "</literal> <operator>+</operator> <operator>(</operator><name>_initialTransaction</name> <operator>+</operator> <call><name><name>journal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name>i</name> <operator>!=</operator> <call><name><name>journal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>TransactionTimestamp</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>journal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>recoveringTransaction</name> <init>= <expr><name>_initialTransaction</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>systemVersion</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>recoveringTransaction</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Expected "</literal> <operator>+</operator> <name>recoveringTransaction</name> <operator>+</operator> <literal type="string">" but was "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>systemVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>receive</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>nextTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_initialTransactionInitialized</name></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"update() must be called at least once"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>_initialTransaction</name> <operator>+</operator> <call><name><name>journal</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

}</block></class>
</unit>
