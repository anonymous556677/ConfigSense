<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/spikes/mirror/src/main/java/org/prevayler/implementation/replication/ServerListener.java"><comment type="line">//Prevayler(TM) - The Free-Software Prevalence Layer.</comment>
<comment type="line">//Copyright (C) 2001-2003 Klaus Wuestefeld</comment>
<comment type="line">//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>replication</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>network</name><operator>.</operator><name>ObjectServerSocket</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>network</name><operator>.</operator><name>OldNetworkImpl</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name><operator>.</operator><name>TransactionPublisher</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Reserved for future implementation.
 */</comment>
<class><specifier>public</specifier> class <name><name>ServerListener</name><parameter_list>&lt;<parameter><name>P</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name>Thread</name></super></extends></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_publisher</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ObjectServerSocket</name></type> <name>_serverSocket</name></decl>;</decl_stmt>

  <comment type="line">//TODO Close the socket when the publisher is closed (listen for it or have the Dashboard (new idea) close this when it closes the publisher).</comment>

  <constructor><specifier>public</specifier> <name>ServerListener</name><parameter_list>(<parameter><decl><type><name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>OldNetworkImpl</name></type> <name>network</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>_serverSocket</name> <operator>=</operator> <call><name><name>network</name><operator>.</operator><name>openObjectServerSocket</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>_publisher</name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDaemon</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//FIXME: Make sure this thread ends when Prevayler is closed.</comment>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>new</operator> <call><name><name>ServerConnection</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>_publisher</name></expr></argument>, <argument><expr><call><name><name>_serverSocket</name><operator>.</operator><name>accept</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>iox</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name><name>iox</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>
}</block></class>
</unit>
