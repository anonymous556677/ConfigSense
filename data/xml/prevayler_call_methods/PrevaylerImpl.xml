<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/prevayler/core/src/main/java/org/prevayler/implementation/PrevaylerImpl.java"><comment type="line">//Prevayler(TM) - The Free-Software Prevalence Layer.</comment>
<comment type="line">//Copyright (C) 2001-2003 Klaus Wuestefeld</comment>
<comment type="line">//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</comment>

<package>package <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>foundation</name><operator>.</operator><name>serialization</name><operator>.</operator><name>Serializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>publishing</name><operator>.</operator><name>TransactionPublisher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>prevayler</name><operator>.</operator><name>implementation</name><operator>.</operator><name>snapshot</name><operator>.</operator><name>GenericSnapshotManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name><name>PrevaylerImpl</name><parameter_list>&lt;<parameter><name>P</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>Prevayler</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>PrevalentSystemGuard</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_guard</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Clock</name></type> <name>_clock</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_snapshotManager</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>_publisher</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>_journalSerializer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>_transactionDeepCopyMode</name></decl>;</decl_stmt>


  <comment type="block" format="javadoc">/**
   * Creates a new Prevayler
   *
   * @param snapshotManager      The SnapshotManager that will be used for reading and writing snapshot files.
   * @param transactionPublisher The TransactionPublisher that will be used for publishing transactions executed with this PrevaylerImpl.
   * @param journalSerializer
   */</comment>
  <constructor><specifier>public</specifier> <name>PrevaylerImpl</name><parameter_list>(<parameter><decl><type><name><name>GenericSnapshotManager</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>snapshotManager</name></decl></parameter>, <parameter><decl><type><name><name>TransactionPublisher</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name></type> <name>transactionPublisher</name></decl></parameter>,
                       <parameter><decl><type><name>Serializer</name></type> <name>journalSerializer</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>transactionDeepCopyMode</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><name>_snapshotManager</name> <operator>=</operator> <name>snapshotManager</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>_guard</name> <operator>=</operator> <call><name><name>_snapshotManager</name><operator>.</operator><name>recoveredPrevalentSystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>_publisher</name> <operator>=</operator> <name>transactionPublisher</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>_clock</name> <operator>=</operator> <call><name><name>_publisher</name><operator>.</operator><name>clock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>_guard</name><operator>.</operator><name>subscribeTo</name></name><argument_list>(<argument><expr><name>_publisher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>_journalSerializer</name> <operator>=</operator> <name>journalSerializer</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>_transactionDeepCopyMode</name> <operator>=</operator> <name>transactionDeepCopyMode</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>P</name></type> <name>prevalentSystem</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>_guard</name><operator>.</operator><name>prevalentSystem</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>Clock</name></type> <name>clock</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name>_clock</name></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>Transaction</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>&gt;</argument_list></name></type> <name>transaction</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>publish</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>TransactionCapsule</name><argument_list type="generic">&lt;<argument><name>P</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><name>_journalSerializer</name></expr></argument>, <argument><expr><name>_transactionDeepCopyMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">//TODO Optimization: The Censor can use the actual given transaction if it is Immutable instead of deserializing a new one from the byte array, even if "_transactionDeepCopyMode" is "true"</comment>
  </block_content>}</block></function>


  <function><type><specifier>private</specifier> <name>void</name></type> <name>publish</name><parameter_list>(<parameter><decl><type><name><name>Capsule</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>?</name> <extends>extends <name>TransactionBase</name></extends></argument>&gt;</argument_list></name></type> <name>capsule</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>_publisher</name><operator>.</operator><name>publish</name></name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>R</name></parameter>&gt;</parameter_list> <name>R</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>Query</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>R</name></argument>&gt;</argument_list></name></type> <name>sensitiveQuery</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>_guard</name><operator>.</operator><name>executeQuery</name></name><argument_list>(<argument><expr><name>sensitiveQuery</name></expr></argument>, <argument><expr><call><name>clock</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>R</name></parameter>&gt;</parameter_list> <name>R</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>TransactionWithQuery</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>R</name></argument>&gt;</argument_list></name></type> <name>transactionWithQuery</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>TransactionWithQueryCapsule</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>R</name></argument>&gt;</argument_list></name></type> <name>capsule</name> <init>= <expr><operator>new</operator> <call><name><name>TransactionWithQueryCapsule</name><argument_list type="generic">&lt;<argument><name>P</name></argument>, <argument><name>R</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>transactionWithQuery</name></expr></argument>, <argument><expr><name>_journalSerializer</name></expr></argument>, <argument><expr><name>_transactionDeepCopyMode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>publish</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>capsule</name><operator>.</operator><name>result</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>R</name></parameter>&gt;</parameter_list> <name>R</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>SureTransactionWithQuery</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>P</name></super></argument>, <argument><name>R</name></argument>&gt;</argument_list></name></type> <name>sureTransactionWithQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <try>try <block>{<block_content>
      <return>return <expr><call><name>execute</name><argument_list>(<argument><expr><name>sureTransactionWithQuery</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>runtime</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><name>runtime</name></expr>;</throw>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Unexpected Exception thrown."</literal></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>File</name></type> <name>takeSnapshot</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <return>return <expr><call><name><name>_guard</name><operator>.</operator><name>takeSnapshot</name></name><argument_list>(<argument><expr><name>_snapshotManager</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>


  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>_publisher</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

}</block></class>
</unit>
