<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/imageio/TIFFTranscoderImageIOWriteAdapter.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>codec</name><operator>.</operator><name>imageio</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>DataBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>PixelInterleavedSampleModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>RenderedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>SampleModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>SinglePixelPackedSampleModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>GraphicsUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>rendered</name><operator>.</operator><name>FormatRed</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>TIFFTranscoder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is a helper to &lt;code&gt;TIFFTranscoder&lt;/code&gt; that writes TIFF images 
 * through the Image I/O API.
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>TIFFTranscoderImageIOWriteAdapter</name> 
    <super_list><implements>implements <super><name><name>TIFFTranscoder</name><operator>.</operator><name>WriteAdapter</name></name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * @throws TranscoderException 
     * @see org.apache.batik.transcoder.image.TIFFTranscoder.WriteAdapter#writeImage(TIFFTranscoder,
     * java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>TIFFTranscoder</name></type> <name>transcoder</name></decl></parameter>, <parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>,
            <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>TranscodingHints</name></type> <name>hints</name> <init>= <expr><call><name><name>transcoder</name><operator>.</operator><name>getTranscodingHints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ImageWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>ImageWriterRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>getWriterFor</name><argument_list>(<argument><expr><literal type="string">"image/tiff"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageWriterParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>ImageWriterParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>PixSzMM</name> <init>= <expr><call><name><name>transcoder</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPixelUnitToMillimeter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>PixSzInch</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">25.4</literal> <operator>/</operator> <name>PixSzMM</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setResolution</name></name><argument_list>(<argument><expr><name>PixSzInch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>TIFFTranscoder</name><operator>.</operator><name>KEY_COMPRESSION_METHOD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>method</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>TIFFTranscoder</name><operator>.</operator><name>KEY_COMPRESSION_METHOD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Values set here as defined in TIFFImageWriteParam of JAI Image I/O Tools</comment>
            <if_stmt><if>if <condition>(<expr><literal type="string">"packbits"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setCompressionMethod</name></name><argument_list>(<argument><expr><literal type="string">"PackBits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="string">"deflate"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setCompressionMethod</name></name><argument_list>(<argument><expr><literal type="string">"Deflate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="string">"lzw"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setCompressionMethod</name></name><argument_list>(<argument><expr><literal type="string">"LZW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="string">"jpeg"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setCompressionMethod</name></name><argument_list>(<argument><expr><literal type="string">"JPEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">//nop</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>ostream</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SinglePixelPackedSampleModel</name></type> <name>sppsm</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>sppsm</name> <operator>=</operator> <operator>(</operator><name>SinglePixelPackedSampleModel</name><operator>)</operator><call><name><name>img</name><operator>.</operator><name>getSampleModel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bands</name> <init>= <expr><call><name><name>sppsm</name><operator>.</operator><name>getNumBands</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name> <index>[]</index></name></type> <name>off</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>bands</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>off</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
            <decl_stmt><decl><type><name>SampleModel</name></type> <name>sm</name> <init>= <expr><operator>new</operator> <call><name>PixelInterleavedSampleModel</name>
                <argument_list>(<argument><expr><name><name>DataBuffer</name><operator>.</operator><name>TYPE_BYTE</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bands</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>bands</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>RenderedImage</name></type> <name>rimg</name> <init>= <expr><operator>new</operator> <call><name>FormatRed</name><argument_list>(<argument><expr><call><name><name>GraphicsUtil</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>writeImage</name></name><argument_list>(<argument><expr><name>rimg</name></expr></argument>, <argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ostream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

}</block></class>
</unit>
