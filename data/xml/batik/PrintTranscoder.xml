<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/print/PrintTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>print</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Shape</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>Paper</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>Printable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PrinterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>print</name><operator>.</operator><name>PrinterJob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>BridgeContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>RenderingHintsKeyExt</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>SVGAbstractTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>Transcoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>LengthKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>StringKey</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is a &lt;code&gt;Transcoder&lt;/code&gt; that prints SVG images.
 * This class works as follows: any-time the transcode method
 * is invoked, the corresponding input is cached and nothing
 * else happens. &lt;br&gt;
 * However, the &lt;code&gt;PrintTranscoder&lt;/code&gt; is also a Printable. If used
 * in a print operation, it will print each of the input
 * it cached, one input per page.
 * &lt;br&gt;
 * The &lt;code&gt;PrintTranscoder&lt;/code&gt; uses several different hints that
 * guide its printing:&lt;br&gt;
 * &lt;ul&gt;
 *   &lt;li&gt;&lt;code&gt;KEY_LANGUAGE, KEY_USER_STYLESHEET_URI, KEY_PIXEL_TO_MM,
 *       KEY_XML_PARSER_CLASSNAME&lt;/code&gt; can be used to set the defaults for
 *       the various SVG properties.&lt;/li&gt;
 *   &lt;li&gt;&lt;code&gt;KEY_PAGE_WIDTH, KEY_PAGE_HEIGHT, KEY_MARGIN_TOP, KEY_MARGIN_BOTTOM,
 *       KEY_MARGIN_LEFT, KEY_MARGIN_RIGHT&lt;/code&gt; and &lt;code&gt;KEY_PAGE_ORIENTATION&lt;/code&gt;
 *       can be used to specify the printing page characteristics.&lt;/li&gt;
 *   &lt;li&gt;&lt;code&gt;KEY_WIDTH, KEY_HEIGHT&lt;/code&gt; can be used to specify how to scale the
 *       SVG image&lt;/li&gt;
 *   &lt;li&gt;&lt;code&gt;KEY_SCALE_TO_PAGE&lt;/code&gt; can be used to specify whether or not the
 *       SVG image should be scaled uniformly to fit into the printed page or
 *       if it should just be centered into the printed page.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @author &lt;a href="mailto:vincent.hardy@eng.sun.com"&gt;Vincent Hardy&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>PrintTranscoder</name> <super_list><extends>extends <super><name>SVGAbstractTranscoder</name></super></extends>
    <implements>implements <super><name>Printable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_AOI_STR</name> <init>= <expr><literal type="string">"aoi"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_HEIGHT_STR</name> <init>= <expr><literal type="string">"height"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_LANGUAGE_STR</name> <init>= <expr><literal type="string">"language"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_MARGIN_BOTTOM_STR</name> <init>= <expr><literal type="string">"marginBottom"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_MARGIN_LEFT_STR</name> <init>= <expr><literal type="string">"marginLeft"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_MARGIN_RIGHT_STR</name> <init>= <expr><literal type="string">"marginRight"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_MARGIN_TOP_STR</name> <init>= <expr><literal type="string">"marginTop"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PAGE_HEIGHT_STR</name> <init>= <expr><literal type="string">"pageHeight"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PAGE_ORIENTATION_STR</name>         <init>= <expr><literal type="string">"pageOrientation"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PAGE_WIDTH_STR</name> <init>= <expr><literal type="string">"pageWidth"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PIXEL_TO_MM_STR</name> <init>= <expr><literal type="string">"pixelToMm"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_SCALE_TO_PAGE_STR</name>         <init>= <expr><literal type="string">"scaleToPage"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_SHOW_PAGE_DIALOG_STR</name> <init>= <expr><literal type="string">"showPageDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_SHOW_PRINTER_DIALOG_STR</name> <init>= <expr><literal type="string">"showPrinterDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_USER_STYLESHEET_URI_STR</name> <init>= <expr><literal type="string">"userStylesheet"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_WIDTH_STR</name> <init>= <expr><literal type="string">"width"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_XML_PARSER_CLASSNAME_STR</name> <init>= <expr><literal type="string">"xmlParserClassName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUE_MEDIA_PRINT</name> <init>= <expr><literal type="string">"print"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUE_PAGE_ORIENTATION_LANDSCAPE</name> <init>= <expr><literal type="string">"landscape"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUE_PAGE_ORIENTATION_PORTRAIT</name>  <init>= <expr><literal type="string">"portrait"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUE_PAGE_ORIENTATION_REVERSE_LANDSCAPE</name> <init>= <expr><literal type="string">"reverseLandscape"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of inputs this transcoder has been requested to
     * transcode so far.
     * Purpose is not really clear: some data is added, and it is copied into
     * printedInputs. But it is never read or cleared...
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>inputs</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Currently printing set of pages. This vector is
     * created as a clone of inputs when the first page is printed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>printedInputs</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Index of the page corresponding to root
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>curIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Place to cache BridgeContext so we can dispose of it when
     * it is appropriate.  The Baseclass would dispose of it too
     * soon.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BridgeContext</name></type> <name>theCtx</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new transcoder that prints images.
     */</comment>
    <constructor><specifier>public</specifier> <name>PrintTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_MEDIA</name></expr></argument>,
                  <argument><expr><name>VALUE_MEDIA_PRINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>in</name></decl></parameter>,
                          <parameter><decl><type><name>TranscoderOutput</name></type> <name>out</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>in</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>inputs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified Document as an image in the specified output.
     *
     * @param document the document to transcode
     * @param uri the uri of the document or null if any
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>,
                             <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                             <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We do this to hide 'ctx' from the SVGAbstractTranscoder</comment>
        <comment type="line">// otherwise it will dispose of the context before we can</comment>
        <comment type="line">// print the document.</comment>
        <expr_stmt><expr><name>theCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Convenience method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>print</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>PrinterException</name></expr></argument></throws><block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Now, request the transcoder to actually perform the</comment>
        <comment type="line">// printing job.</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>PrinterJob</name></type> <name>printerJob</name> <init>= <expr><call><name><name>PrinterJob</name><operator>.</operator><name>getPrinterJob</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PageFormat</name></type> <name>pageFormat</name> <init>= <expr><call><name><name>printerJob</name><operator>.</operator><name>defaultPage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Set the page parameters from the hints</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>Paper</name></type> <name>paper</name> <init>= <expr><call><name><name>pageFormat</name><operator>.</operator><name>getPaper</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Float</name></type> <name>pageWidth</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_PAGE_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Float</name></type> <name>pageHeight</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_PAGE_HEIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>pageWidth</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>paper</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>pageWidth</name></expr></argument>,
                          <argument><expr><call><name><name>paper</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>pageHeight</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>paper</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><call><name><name>paper</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>pageHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>=<expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paper</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>height</name><init>=<expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paper</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Float</name></type> <name>leftMargin</name>   <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MARGIN_LEFT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Float</name></type> <name>topMargin</name>    <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MARGIN_TOP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Float</name></type> <name>rightMargin</name>  <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MARGIN_RIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Float</name></type> <name>bottomMargin</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MARGIN_BOTTOM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>leftMargin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>x</name>      <operator>=</operator> <name>leftMargin</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>width</name> <operator>-=</operator> <name>leftMargin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>topMargin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>y</name>       <operator>=</operator> <name>topMargin</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>-=</operator> <name>topMargin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>rightMargin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>-=</operator> <name>rightMargin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>bottomMargin</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>height</name> <operator>-=</operator> <name>bottomMargin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>paper</name><operator>.</operator><name>setImageableArea</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>pageOrientation</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_PAGE_ORIENTATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>VALUE_PAGE_ORIENTATION_PORTRAIT</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>pageOrientation</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>pageFormat</name><operator>.</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>PageFormat</name><operator>.</operator><name>PORTRAIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><call><name><name>VALUE_PAGE_ORIENTATION_LANDSCAPE</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>pageOrientation</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>pageFormat</name><operator>.</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>PageFormat</name><operator>.</operator><name>LANDSCAPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><call><name><name>VALUE_PAGE_ORIENTATION_REVERSE_LANDSCAPE</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>pageOrientation</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>pageFormat</name><operator>.</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>PageFormat</name><operator>.</operator><name>REVERSE_LANDSCAPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>pageFormat</name><operator>.</operator><name>setPaper</name></name><argument_list>(<argument><expr><name>paper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pageFormat</name> <operator>=</operator> <call><name><name>printerJob</name><operator>.</operator><name>validatePage</name></name><argument_list>(<argument><expr><name>pageFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// If required, pop up a dialog to adjust the page format</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>showPageFormat</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_SHOW_PAGE_DIALOG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>showPageFormat</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>showPageFormat</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PageFormat</name></type> <name>tmpPageFormat</name> <init>= <expr><call><name><name>printerJob</name><operator>.</operator><name>pageDialog</name></name><argument_list>(<argument><expr><name>pageFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>tmpPageFormat</name> <operator>==</operator> <name>pageFormat</name></expr>)</condition><block>{<block_content>
                <comment type="line">// Dialog was cancelled, meaning that the print process should</comment>
                <comment type="line">// be stopped.</comment>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>pageFormat</name> <operator>=</operator> <name>tmpPageFormat</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set printable before showing printer dialog so</comment>
        <comment type="line">// it can update the pageFormat if it wishes...</comment>
        <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>setPrintable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pageFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// If required, pop up a dialog to select the printer</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>showPrinterDialog</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>showPrinterDialog</name> <operator>=</operator> <operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_SHOW_PRINTER_DIALOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>showPrinterDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>showPrinterDialog</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>printerJob</name><operator>.</operator><name>printDialog</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <comment type="line">// Dialog was cancelled, meaning that the print process</comment>
                <comment type="line">// should be stopped.</comment>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Print now</comment>
        <expr_stmt><expr><call><name><name>printerJob</name><operator>.</operator><name>print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Printable implementation
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>_g</name></decl></parameter>, <parameter><decl><type><name>PageFormat</name></type> <name>pageFormat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageIndex</name></decl></parameter>)</parameter_list><block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// On the first page, take a snapshot of the vector of</comment>
        <comment type="line">// TranscodeInputs.</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if<condition>(<expr><name>printedInputs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>printedInputs</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>( <argument><expr><name>inputs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// If we have already printed each page, return</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if<condition>(<expr><name>pageIndex</name> <operator>&gt;=</operator> <call><name><name>printedInputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>curIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>theCtx</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>theCtx</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayMessage</name></name><argument_list>(<argument><expr><literal type="string">"Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NO_SUCH_PAGE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Load a new document now if we are printing a new page</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if<condition>(<expr><name>curIndex</name> <operator>!=</operator> <name>pageIndex</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>theCtx</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>theCtx</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// The following call will invoke this class' transcode</comment>
            <comment type="line">// method which takes a document as an input. That method</comment>
            <comment type="line">// builds the GVT root tree.{</comment>
            <try>try<block>{<block_content>
                <expr_stmt><expr><name>width</name>  <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>pageFormat</name><operator>.</operator><name>getImageableWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>pageFormat</name><operator>.</operator><name>getImageableHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>transcode</name></name>
                    <argument_list>(<argument><expr><operator>(</operator><name>TranscoderInput</name><operator>)</operator><call><name><name>printedInputs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>pageIndex</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>curIndex</name> <operator>=</operator> <name>pageIndex</name></expr>;</expr_stmt>
            </block_content>}</block><catch>catch<parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                <expr_stmt><expr><call><name>drawError</name><argument_list>(<argument><expr><name>_g</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PAGE_EXISTS</name></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Cast to Graphics2D to access Java 2D features</comment>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>Graphics2D</name><operator>)</operator><name>_g</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name><operator>.</operator><name>KEY_ANTIALIASING</name></name></expr></argument>,
                           <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name><operator>.</operator><name>KEY_INTERPOLATION</name></name></expr></argument>,
                           <argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_INTERPOLATION_BILINEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setRenderingHint</name></name><argument_list>(<argument><expr><name><name>RenderingHintsKeyExt</name><operator>.</operator><name>KEY_TRANSCODING</name></name></expr></argument>,
                           <argument><expr><name><name>RenderingHintsKeyExt</name><operator>.</operator><name>VALUE_TRANSCODING_PRINTING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Compute transform so that the SVG document fits on one page</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>AffineTransform</name></type> <name>t</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>clip</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// System.err.println("X/Y: " + pageFormat.getImageableX() + ", " +</comment>
        <comment type="line">//                    pageFormat.getImageableY());</comment>
        <comment type="line">// System.err.println("W/H: " + width + ", " + height);</comment>
        <comment type="line">// System.err.println("Clip: " + clip.getBounds2D());</comment>

        <comment type="line">// Offset 0,0 to the start of the imageable Area.</comment>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><call><name><name>pageFormat</name><operator>.</operator><name>getImageableX</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>pageFormat</name><operator>.</operator><name>getImageableY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//</comment>
        <comment type="line">// Append transform to selected area</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>curTxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Delegate rendering to painter</comment>
        <comment type="line">//</comment>
        <try>try<block>{<block_content>
            <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>paint</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block><catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setClip</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawError</name><argument_list>(<argument><expr><name>_g</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">//</comment>
        <comment type="line">// Restore transform and clip</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setClip</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// g.setPaint(Color.black);</comment>
        <comment type="line">// g.drawString(uris[pageIndex], 30, 30);</comment>


        <comment type="line">//</comment>
        <comment type="line">// Return status indicated that we did paint a page</comment>
        <comment type="line">//</comment>
        <return>return <expr><name>PAGE_EXISTS</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setImageSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>docWidth</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>docHeight</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Check hint to know if scaling is really needed</comment>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>scaleToPage</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_SCALE_TO_PAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>scaleToPage</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>scaleToPage</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name>docWidth</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><name>docHeight</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_AOI</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>aoi</name> <init>= <expr><operator>(</operator><name>Rectangle2D</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_AOI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>aoi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>aoi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setImageSize</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prints an error on the output page
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawError</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>userAgent</name><operator>.</operator><name>displayError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Should also probably draw exception on page.</comment>
    </block_content>}</block></function>

    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * The showPageDialog key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_SHOW_PAGE_DIALOG&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;false&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specifies whether or not the transcoder
     *       should pop up a dialog box for selecting
     *       the page format.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_SHOW_PAGE_DIALOG</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The showPrinterDialog key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_SHOW_PAGE_DIALOG&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;false&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specifies whether or not the transcoder
     *       should pop up a dialog box for selecting
     *       the printer. If the dialog box is not
     *       shown, the transcoder will use the default
     *       printer.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_SHOW_PRINTER_DIALOG</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * The pageWidth key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_PAGE_WIDTH&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Length&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;None&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The width of the print page&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PAGE_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The pageHeight key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_PAGE_HEIGHT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Length&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;none&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The height of the print page&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt; 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PAGE_HEIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The marginTop key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MARGIN_TOP&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Length&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;None&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The print page top margin&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt; */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MARGIN_TOP</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The marginRight key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MARGIN_RIGHT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Length&lt;/TD&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;None&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The print page right margin&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MARGIN_RIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The marginBottom key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MARGIN_BOTTOM&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Length&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;None&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The print page bottom margin&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MARGIN_BOTTOM</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The marginLeft key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     * &lt;tr&gt;
     * &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     * &lt;td valign="top"&gt;KEY_MARGIN_LEFT&lt;/td&gt;&lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     * &lt;td valign="top"&gt;Length&lt;/td&gt;&lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     * &lt;td valign="top"&gt;None&lt;/td&gt;&lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     * &lt;td valign="top"&gt;No&lt;/td&gt;&lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     * &lt;td valign="top"&gt;The print page left margin&lt;/td&gt;&lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MARGIN_LEFT</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The pageOrientation key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_PAGE_ORIENTATION&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;VALUE_PAGE_ORIENTATION_PORTRAIT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The print page's orientation&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PAGE_ORIENTATION</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * The scaleToPage key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_SCALE_TO_PAGE&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;true&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specifies whether or not the SVG images are scaled to
     *       fit into the printed page&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_SCALE_TO_PAGE</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USAGE</name> <init>= <expr><literal type="string">"java org.apache.batik.transcoder.print.PrintTranscoder &lt;svgFileToPrint&gt;"</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Builds a PrintTranscoder</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>PrintTranscoder</name></type> <name>transcoder</name> <init>= <expr><operator>new</operator> <call><name>PrintTranscoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Set the hints, from the command line arguments</comment>
        <comment type="line">//</comment>

        <comment type="line">// Language</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_LANGUAGE_STR</name></expr></argument>,
                               <argument><expr><name>KEY_LANGUAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// User stylesheet</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_USER_STYLESHEET_URI_STR</name></expr></argument>,
                               <argument><expr><name>KEY_USER_STYLESHEET_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// XML parser</comment>
        <expr_stmt><expr><call><name>setTranscoderStringHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                 <argument><expr><name>KEY_XML_PARSER_CLASSNAME_STR</name></expr></argument>,
                                 <argument><expr><name>KEY_XML_PARSER_CLASSNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Scale to page</comment>
        <expr_stmt><expr><call><name>setTranscoderBooleanHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                 <argument><expr><name>KEY_SCALE_TO_PAGE_STR</name></expr></argument>,
                                 <argument><expr><name>KEY_SCALE_TO_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// AOI</comment>
        <expr_stmt><expr><call><name>setTranscoderRectangleHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                   <argument><expr><name>KEY_AOI_STR</name></expr></argument>,
                                   <argument><expr><name>KEY_AOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Image size</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_WIDTH_STR</name></expr></argument>,
                               <argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_HEIGHT_STR</name></expr></argument>,
                               <argument><expr><name>KEY_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pixel to millimeter</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_PIXEL_TO_MM_STR</name></expr></argument>,
                               <argument><expr><name>KEY_PIXEL_UNIT_TO_MILLIMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Page orientation</comment>
        <expr_stmt><expr><call><name>setTranscoderStringHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                <argument><expr><name>KEY_PAGE_ORIENTATION_STR</name></expr></argument>,
                                <argument><expr><name>KEY_PAGE_ORIENTATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Page size</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_PAGE_WIDTH_STR</name></expr></argument>,
                               <argument><expr><name>KEY_PAGE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_PAGE_HEIGHT_STR</name></expr></argument>,
                               <argument><expr><name>KEY_PAGE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Margins</comment>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_TOP_STR</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_RIGHT_STR</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_BOTTOM_STR</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTranscoderFloatHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_LEFT_STR</name></expr></argument>,
                               <argument><expr><name>KEY_MARGIN_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Dialog options</comment>
        <expr_stmt><expr><call><name>setTranscoderBooleanHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                 <argument><expr><name>KEY_SHOW_PAGE_DIALOG_STR</name></expr></argument>,
                                 <argument><expr><name>KEY_SHOW_PAGE_DIALOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setTranscoderBooleanHint</name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                 <argument><expr><name>KEY_SHOW_PRINTER_DIALOG_STR</name></expr></argument>,
                                 <argument><expr><name>KEY_SHOW_PRINTER_DIALOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// First, request the transcoder to transcode</comment>
        <comment type="line">// each of the input files</comment>
        <comment type="line">//</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>arg</name> <range>: <expr><name>args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderInput</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toURI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toURL</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//</comment>
        <comment type="line">// Now, print...</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTranscoderFloatHint</name><parameter_list>(<parameter><decl><type><name>Transcoder</name></type> <name>transcoder</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>,
                                              <parameter><decl><type><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>key</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <try>try<block>{<block_content>
                <decl_stmt><decl><type><name>Float</name></type> <name>value</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block><catch>catch<parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                <expr_stmt><expr><call><name>handleValueError</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTranscoderRectangleHint</name><parameter_list>(<parameter><decl><type><name>Transcoder</name></type> <name>transcoder</name></decl></parameter>,
                                                  <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>key</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">" ,"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>countTokens</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>handleValueError</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <try>try<block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>x</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>y</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>width</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>height</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block><catch>catch<parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                <expr_stmt><expr><call><name>handleValueError</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTranscoderBooleanHint</name><parameter_list>(<parameter><decl><type><name>Transcoder</name></type> <name>transcoder</name></decl></parameter>,
                                                <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>,
                                                <parameter><decl><type><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>key</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><ternary><condition><expr><literal type="string">"true"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTranscoderStringHint</name><parameter_list>(<parameter><decl><type><name>Transcoder</name></type> <name>transcoder</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>,
                                              <parameter><decl><type><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>key</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>addTranscodingHint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>handleValueError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>,
                                        <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Invalid "</literal> <operator>+</operator> <name>property</name> <operator>+</operator> <literal type="string">" value : "</literal> <operator>+</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>





</unit>
