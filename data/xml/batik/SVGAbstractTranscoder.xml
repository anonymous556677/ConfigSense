<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/SVGAbstractTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Dimension2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SAXSVGDocumentFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGDOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGOMDocument</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>BaseScriptingEnvironment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>BridgeContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>BridgeException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>DefaultScriptSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>ExternalResourceSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>GVTBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>NoLoadScriptSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>NoLoadExternalResourceSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>RelaxedScriptSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>SVGUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>ScriptSecurity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>UserAgent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>UserAgentAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>ViewBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>svg12</name><operator>.</operator><name>SVG12BridgeContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>DocumentFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>CanvasGraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>CompositeGraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>GraphicsNode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>FloatKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>LengthKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>Rectangle2DKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>StringKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>svg</name><operator>.</operator><name>SVGSVGElement</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class may be the base class of all transcoders which take an
 * SVG document as input and which need to build a DOM tree. The
 * &lt;code&gt;SVGAbstractTranscoder&lt;/code&gt; uses several different hints that
 * guide it's behaviour:&lt;br&gt;
 *
 * &lt;ul&gt;
 *   &lt;li&gt;&lt;code&gt;KEY_WIDTH, KEY_HEIGHT&lt;/code&gt; can be used to specify how to scale the
 *       SVG image&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SVGAbstractTranscoder</name> <super_list><extends>extends <super><name>XMLAbstractTranscoder</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/**
     * Value used as a default for the default font-family hint
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DEFAULT_FONT_FAMILY</name>
        <init>= <expr><literal type="string">"Arial, Helvetica, sans-serif"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Current area of interest.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>curAOI</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Transform needed to render the current area of interest
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>AffineTransform</name></type> <name>curTxf</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Current GVT Tree, i.e., the GVT tree representing the page
     * being printed currently.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>GraphicsNode</name></type> <name>root</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Current bridge context
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>ctx</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Current gvt builder
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>GVTBuilder</name></type> <name>builder</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Image's width and height (init to 400x400).
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>width</name><init>=<expr><literal type="number">400</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name><init>=<expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The user agent dedicated to an SVG Transcoder. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UserAgent</name></type> <name>userAgent</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>SVGAbstractTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>userAgent</name> <operator>=</operator> <call><name>createUserAgent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_DOCUMENT_ELEMENT_NAMESPACE_URI</name></expr></argument>,
                  <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_NAMESPACE_URI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_DOCUMENT_ELEMENT</name></expr></argument>,
                  <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_SVG_TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_DOM_IMPLEMENTATION</name></expr></argument>,
                  <argument><expr><call><name><name>SVGDOMImplementation</name><operator>.</operator><name>getDOMImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_MEDIA</name></expr></argument>,
                  <argument><expr><literal type="string">"screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_DEFAULT_FONT_FAMILY</name></expr></argument>,
                  <argument><expr><name>DEFAULT_DEFAULT_FONT_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_EXECUTE_ONLOAD</name></expr></argument>,
                  <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_ALLOWED_SCRIPT_TYPES</name></expr></argument>,
                  <argument><expr><name>DEFAULT_ALLOWED_SCRIPT_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>


    <function><type><specifier>protected</specifier> <name>UserAgent</name></type> <name>createUserAgent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SVGAbstractTranscoderUserAgent</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a &lt;code&gt;DocumentFactory&lt;/code&gt; that is used to create an SVG DOM
     * tree. The specified DOM Implementation is ignored and the Batik
     * SVG DOM Implementation is automatically used.
     *
     * @param domImpl the DOM Implementation (not used)
     * @param parserClassname the XML parser classname
     */</comment>
    <function><type><specifier>protected</specifier> <name>DocumentFactory</name></type> <name>createDocumentFactory</name><parameter_list>(<parameter><decl><type><name>DOMImplementation</name></type> <name>domImpl</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>parserClassname</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SAXSVGDocumentFactory</name><argument_list>(<argument><expr><name>parserClassname</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Transcodes the specified Document as an image in the specified output.
     *
     * @param document the document to transcode
     * @param uri the uri of the document or null if any
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>,
                             <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                             <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>document</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>!</operator><operator>(</operator><call><name><name>document</name><operator>.</operator><name>getImplementation</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>SVGDOMImplementation</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>DOMImplementation</name></type> <name>impl</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>impl</name> <operator>=</operator> <operator>(</operator><name>DOMImplementation</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOM_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// impl = SVGDOMImplementation.getDOMImplementation();</comment>
            <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>DOMUtilities</name><operator>.</operator><name>deepCloneDocument</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ParsedURL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name><operator>)</operator><operator>.</operator><call><name>setParsedURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_HEIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


        <decl_stmt><decl><type><name>SVGOMDocument</name></type> <name>svgDoc</name> <init>= <expr><operator>(</operator><name>SVGOMDocument</name><operator>)</operator><name>document</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SVGSVGElement</name></type> <name>root</name> <init>= <expr><call><name><name>svgDoc</name><operator>.</operator><name>getRootElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>createBridgeContext</name><argument_list>(<argument><expr><name>svgDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// build the GVT tree</comment>
        <expr_stmt><expr><name>builder</name> <operator>=</operator> <operator>new</operator> <call><name>GVTBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// flag that indicates if the document is dynamic</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDynamic</name> <init>=
            <expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_EXECUTE_ONLOAD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_EXECUTE_ONLOAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GraphicsNode</name></type> <name>gvtRoot</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isDynamic</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>setDynamicState</name></name><argument_list>(<argument><expr><name><name>BridgeContext</name><operator>.</operator><name>DYNAMIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>gvtRoot</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>svgDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// dispatch an 'onload' event if needed</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>isDynamic</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>BaseScriptingEnvironment</name></type> <name>se</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>se</name> <operator>=</operator> <operator>new</operator> <call><name>BaseScriptingEnvironment</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>loadScripts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>dispatchSVGLoadEvent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_SNAPSHOT_TIME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>=
                            <expr><operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_SNAPSHOT_TIME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>getAnimationEngine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCurrentTime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name><name>SVGUtilities</name><operator>.</operator><name>convertSnapshotTime</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>getAnimationEngine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCurrentTime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BridgeException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <comment type="line">// get the 'width' and 'height' attributes of the SVG document</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>docWidth</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>ctx</name><operator>.</operator><name>getDocumentSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>docHeight</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>ctx</name><operator>.</operator><name>getDocumentSize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setImageSize</name><argument_list>(<argument><expr><name>docWidth</name></expr></argument>, <argument><expr><name>docHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// compute the preserveAspectRatio matrix</comment>
        <decl_stmt><decl><type><name>AffineTransform</name></type> <name>Px</name></decl>;</decl_stmt>

        <comment type="line">// take the AOI into account if any</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_AOI</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>aoi</name> <init>= <expr><operator>(</operator><name>Rectangle2D</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_AOI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// transform the AOI into the image's coordinate system</comment>
            <expr_stmt><expr><name>Px</name> <operator>=</operator> <operator>new</operator> <call><name>AffineTransform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>sx</name> <init>= <expr><name>width</name> <operator>/</operator> <call><name><name>aoi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>sy</name> <init>= <expr><name>height</name> <operator>/</operator> <call><name><name>aoi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>sx</name></expr></argument>,<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Px</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>tx</name> <init>= <expr><operator>-</operator><call><name><name>aoi</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>width</name><operator>/</operator><name>scale</name> <operator>-</operator> <call><name><name>aoi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ty</name> <init>= <expr><operator>-</operator><call><name><name>aoi</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>height</name><operator>/</operator><name>scale</name> <operator>-</operator><call><name><name>aoi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Px</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// take the AOI transformation matrix into account</comment>
            <comment type="line">// we apply first the preserveAspectRatio matrix</comment>
            <expr_stmt><expr><name>curAOI</name> <operator>=</operator> <name>aoi</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>ref</name> <init>= <expr><operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// XXX Update this to use the animated value of 'viewBox' and</comment>
            <comment type="line">//     'preserveAspectRatio'.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>viewBox</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeNS</name></name>
                <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_VIEW_BOX_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ref</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>ref</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>Px</name> <operator>=</operator> <call><name><name>ViewBox</name><operator>.</operator><name>getViewTransform</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>viewBox</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>viewBox</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>aspectRatio</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>getAttributeNS</name></name>
                    <argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>Px</name> <operator>=</operator> <call><name><name>ViewBox</name><operator>.</operator><name>getPreserveAspectRatioTransform</name></name>
                    <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>viewBox</name></expr></argument>, <argument><expr><name>aspectRatio</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// no viewBox has been specified, create a scale transform</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>xscale</name></decl>, <decl><type ref="prev"/><name>yscale</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>xscale</name> <operator>=</operator> <name>width</name><operator>/</operator><name>docWidth</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>yscale</name> <operator>=</operator> <name>height</name><operator>/</operator><name>docHeight</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>xscale</name></expr></argument>,<argument><expr><name>yscale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>Px</name> <operator>=</operator> <call><name><name>AffineTransform</name><operator>.</operator><name>getScaleInstance</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>curAOI</name> <operator>=</operator> <operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>CanvasGraphicsNode</name></type> <name>cgn</name> <init>= <expr><call><name>getCanvasGraphicsNode</name><argument_list>(<argument><expr><name>gvtRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cgn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>cgn</name><operator>.</operator><name>setViewingTransform</name></name><argument_list>(<argument><expr><name>Px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>curTxf</name> <operator>=</operator> <operator>new</operator> <call><name>AffineTransform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>curTxf</name> <operator>=</operator> <name>Px</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>gvtRoot</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>CanvasGraphicsNode</name></type> <name>getCanvasGraphicsNode</name><parameter_list>(<parameter><decl><type><name>GraphicsNode</name></type> <name>gn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>gn</name> <operator>instanceof</operator> <name>CompositeGraphicsNode</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>CompositeGraphicsNode</name></type> <name>cgn</name> <init>= <expr><operator>(</operator><name>CompositeGraphicsNode</name><operator>)</operator><name>gn</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>children</name> <init>= <expr><call><name><name>cgn</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>gn</name> <operator>=</operator> <operator>(</operator><name>GraphicsNode</name><operator>)</operator><call><name><name>children</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>gn</name> <operator>instanceof</operator> <name>CanvasGraphicsNode</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>CanvasGraphicsNode</name><operator>)</operator><name>gn</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Factory method for constructing an configuring a
     * BridgeContext so subclasses can insert new/modified
     * bridges in the context.
     * @param doc the SVG document to create the BridgeContext for
     * @return the newly instantiated BridgeContext
     */</comment>
    <function><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>createBridgeContext</name><parameter_list>(<parameter><decl><type><name>SVGOMDocument</name></type> <name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createBridgeContext</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>doc</name><operator>.</operator><name>isSVG12</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"1.2"</literal></expr> </then><else>: <expr><literal type="string">"1.x"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates the default SVG 1.0/1.1 BridgeContext. Subclass this method to provide
     * customized bridges. This method is provided for historical reasons. New applications
     * should use {@link #createBridgeContext(String)} instead.
     * @return the newly instantiated BridgeContext
     * @see #createBridgeContext(String)
     */</comment>
    <function><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>createBridgeContext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createBridgeContext</name><argument_list>(<argument><expr><literal type="string">"1.x"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates the BridgeContext. Subclass this method to provide customized bridges. For example,
     * Apache FOP uses this method to register special bridges for optimized text painting.
     * @param svgVersion the SVG version in use (ex. "1.0", "1.x" or "1.2")
     * @return the newly instantiated BridgeContext
     */</comment>
    <function><type><specifier>protected</specifier> <name>BridgeContext</name></type> <name>createBridgeContext</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>svgVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="string">"1.2"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>svgVersion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SVG12BridgeContext</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>BridgeContext</name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setImageSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>docWidth</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>docHeight</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// Compute the image's width and height according the hints</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>imgWidth</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>imgWidth</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>imgHeight</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_HEIGHT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>imgHeight</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>imgWidth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imgHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>imgWidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>imgHeight</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>imgHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>docWidth</name> <operator>*</operator> <name>imgHeight</name><operator>)</operator> <operator>/</operator> <name>docHeight</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>imgHeight</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>imgWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>imgWidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>docHeight</name> <operator>*</operator> <name>imgWidth</name><operator>)</operator> <operator>/</operator> <name>docWidth</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>docWidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>docHeight</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Limit image size according to the maximuxm size hints.</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>imgMaxWidth</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_MAX_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>imgMaxWidth</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MAX_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>imgMaxHeight</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>imgMaxHeight</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>imgMaxHeight</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&gt;</operator> <name>imgMaxHeight</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>docWidth</name> <operator>*</operator> <name>imgMaxHeight</name><operator>)</operator> <operator>/</operator> <name>docHeight</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>imgMaxHeight</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>imgMaxWidth</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>width</name> <operator>&gt;</operator> <name>imgMaxWidth</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>imgMaxWidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>docHeight</name> <operator>*</operator> <name>imgMaxWidth</name><operator>)</operator> <operator>/</operator> <name>docWidth</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * The image width key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_WIDTH&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The width of the topmost svg element&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the width of the image to create.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt; */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The image height key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_HEIGHT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The height of the topmost svg element&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the height of the image to create.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_HEIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The maximum width of the image key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MAX_WIDTH&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The width of the topmost svg element&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the maximum width of the image to create.
     *       The value will set the maximum width of the image even when a
     *       bigger width is specified in a document or set with KEY_WIDTH.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MAX_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The maximux height of the image key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MAX_HEIGHT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The height of the topmost svg element&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the maximum height of the image to create.
     *       The value will set the maximum height of the image even when
     *       bigger height is specified in a document or set with KEY_HEIGHT.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MAX_HEIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>LengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The area of interest key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_AOI&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Rectangle2D&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;The document's size&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the area of interest to render. The
     *       rectangle coordinates must be specified in pixels and in the
     *       document coordinates system.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_AOI</name>
        <init>= <expr><operator>new</operator> <call><name>Rectangle2DKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The language key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_LANGUAGE&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;"en"&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the preferred language of the document.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_LANGUAGE</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The media key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_MEDIA&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;"screen"&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the media to use with CSS.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_MEDIA</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default font-family key.
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_DEFAULT_FONT_FAMILY&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;"Arial, Helvetica, sans-serif"&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Controls the default
     *       value used by the CSS engine for the font-family property
     *       when that property is unspecified.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DEFAULT_FONT_FAMILY</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The alternate stylesheet key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_ALTERNATE_STYLESHEET&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the alternate style sheet title.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_ALTERNATE_STYLESHEET</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The user stylesheet URI key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_USER_STYLESHEET_URI&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the user style sheet.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_USER_STYLESHEET_URI</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of millimeters in each pixel key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_PIXEL_UNIT_TO_MILLIMETER&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;0.264583&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the size of a px CSS unit in millimeters.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PIXEL_UNIT_TO_MILLIMETER</name>
        <init>= <expr><operator>new</operator> <call><name>FloatKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The pixel to millimeter conversion factor key.
     * @deprecated As of Batik Version 1.5b3
     * @see #KEY_PIXEL_UNIT_TO_MILLIMETER
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_PIXEL_TO_MM&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;0.264583&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the size of a px CSS unit in millimeters.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PIXEL_TO_MM</name>
        <init>= <expr><name>KEY_PIXEL_UNIT_TO_MILLIMETER</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The 'onload' execution key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_EXECUTE_ONLOAD&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;false&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify if scripts added on the 'onload' event
     *       attribute must be invoked.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_EXECUTE_ONLOAD</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The snapshot time key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_SNAPSHOT_TIME&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;0&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specifies the document time to seek to before
     *       rasterization.  Only applies if {@link #KEY_EXECUTE_ONLOAD} is
     *       set to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_SNAPSHOT_TIME</name>
        <init>= <expr><operator>new</operator> <call><name>FloatKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The set of supported script languages (i.e., the set of possible
     * values for the &amp;lt;script&amp;gt; tag's type attribute).
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_ALLOWED_SCRIPT_TYPES&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String (Comma separated values)&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;text/ecmascript, application/java-archive&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specifies the allowed values for the type attribute
     *       in the &amp;lt;script&amp;gt; element. This is a comma separated list. The
     *       special value '*' means that all script types are allowed.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_ALLOWED_SCRIPT_TYPES</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default value for the KEY_ALLOWED_SCRIPT_TYPES key
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_ALLOWED_SCRIPT_TYPES</name>
        <init>= <expr><name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_ECMASCRIPT</name></name> <operator>+</operator> <literal type="string">", "</literal>
        <operator>+</operator> <name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_APPLICATION_ECMASCRIPT</name></name> <operator>+</operator> <literal type="string">", "</literal>
        <operator>+</operator> <name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_JAVASCRIPT</name></name> <operator>+</operator> <literal type="string">", "</literal>
        <operator>+</operator> <name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_APPLICATION_JAVASCRIPT</name></name> <operator>+</operator> <literal type="string">", "</literal>
        <operator>+</operator> <name><name>SVGConstants</name><operator>.</operator><name>SVG_SCRIPT_TYPE_JAVA</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Controls whether or not scripts can only be loaded from the
     * same location as the document which references them.
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_CONSTRAIN_SCRIPT_ORIGIN&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;true&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;When set to true, script elements referencing
     *       files from a different origin (server) than the document containing
     *       the script element will not be loaded. When set to true, script elements
     *       may reference script files from any origin.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_CONSTRAIN_SCRIPT_ORIGIN</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_ALLOW_EXTERNAL_RESOURCES</name>
            <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A user agent implementation for &lt;code&gt;PrintTranscoder&lt;/code&gt;.
     */</comment>
    <class><specifier>protected</specifier> class <name>SVGAbstractTranscoderUserAgent</name> <super_list><extends>extends <super><name>UserAgentAdapter</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/**
         * Vector containing the allowed script types
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>scripts</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SVGAbstractTranscoderUserAgent</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>addStdFeatures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Return the rendering transform.
         */</comment>
        <function><type><specifier>public</specifier> <name>AffineTransform</name></type> <name>getTransform</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>curTxf</name></name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Return the rendering transform.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransform</name><parameter_list>(<parameter><decl><type><name>AffineTransform</name></type> <name>at</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>curTxf</name></name> <operator>=</operator> <name>at</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the default size of this user agent (400x400).
         */</comment>
        <function><type><specifier>public</specifier> <name>Dimension2D</name></type> <name>getViewportSize</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>width</name></name></expr></argument>,
                                 <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays the specified error message using the &lt;code&gt;ErrorHandler&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>handler</name><operator>.</operator><name>error</name></name>
                    <argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays the specified error using the &lt;code&gt;ErrorHandler&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>displayError</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>handler</name><operator>.</operator><name>error</name></name>
                    <argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Displays the specified message using the &lt;code&gt;ErrorHandler&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>displayMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>handler</name><operator>.</operator><name>warning</name></name>
                    <argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>( <argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the pixel to millimeter conversion factor specified in the
         * &lt;code&gt;TranscodingHints&lt;/code&gt; or 0.26458333 if not specified.
         */</comment>
        <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelUnitToMillimeter</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name>KEY_PIXEL_UNIT_TO_MILLIMETER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>Float</name><operator>)</operator> <name>obj</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getPixelUnitToMillimeter</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the user language specified in the
         * &lt;code&gt;TranscodingHints&lt;/code&gt; or "en" (english) if any.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getLanguages</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_LANGUAGE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                    <argument_list>(<argument><expr><name>KEY_LANGUAGE</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getLanguages</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns this user agent's CSS media.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getMedia</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_MEDIA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getMedia</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the default font family.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultFontFamily</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DEFAULT_FONT_FAMILY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getDefaultFontFamily</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns this user agent's alternate style-sheet title.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getAlternateStyleSheet</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_ALTERNATE_STYLESHEET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getAlternateStyleSheet</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the user stylesheet specified in the
         * &lt;code&gt;TranscodingHints&lt;/code&gt; or null if any.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserStyleSheetURI</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name>KEY_USER_STYLESHEET_URI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getUserStyleSheetURI</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the XML parser to use from the TranscodingHints.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getXMLParserClassName</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name>KEY_XML_PARSER_CLASSNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getXMLParserClassName</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns true if the XML parser must be in validation mode, false
         * otherwise.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isXMLParserValidating</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Boolean</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name>KEY_XML_PARSER_VALIDATING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>super</name><operator>.</operator><name>isXMLParserValidating</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns the security settings for the given script
         * type, script url and document url
         *
         * @param scriptType type of script, as found in the
         *        type attribute of the &amp;lt;script&amp;gt; element.
         * @param scriptPURL url for the script, as defined in
         *        the script's xlink:href attribute. If that
         *        attribute was empty, then this parameter should
         *        be null
         * @param docPURL url for the document into which the
         *        script was found.
         */</comment>
        <function><type><specifier>public</specifier> <name>ScriptSecurity</name></type> <name>getScriptSecurity</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>scriptType</name></decl></parameter>,
                                                <parameter><decl><type><name>ParsedURL</name></type> <name>scriptPURL</name></decl></parameter>,
                                                <parameter><decl><type><name>ParsedURL</name></type> <name>docPURL</name></decl></parameter>)</parameter_list><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>scripts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>computeAllowedScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scripts</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>scriptType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>NoLoadScriptSecurity</name><argument_list>(<argument><expr><name>scriptType</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>


            <decl_stmt><decl><type><name>boolean</name></type> <name>constrainOrigin</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>containsKey</name></name>
                <argument_list>(<argument><expr><name>KEY_CONSTRAIN_SCRIPT_ORIGIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>constrainOrigin</name> <operator>=</operator>
                        <operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                                <argument_list>(<argument><expr><name>KEY_CONSTRAIN_SCRIPT_ORIGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>constrainOrigin</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>DefaultScriptSecurity</name>
                    <argument_list>(<argument><expr><name>scriptType</name></expr></argument>,<argument><expr><name>scriptPURL</name></expr></argument>,<argument><expr><name>docPURL</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>RelaxedScriptSecurity</name>
                    <argument_list>(<argument><expr><name>scriptType</name></expr></argument>,<argument><expr><name>scriptPURL</name></expr></argument>,<argument><expr><name>docPURL</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Helper method. Builds a Vector containing the allowed
         * values for the &amp;lt;script&amp;gt; element's type attribute.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>computeAllowedScripts</name><parameter_list>()</parameter_list><block>{<block_content>
            <expr_stmt><expr><name>scripts</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>containsKey</name></name>
                <argument_list>(<argument><expr><name>KEY_ALLOWED_SCRIPT_TYPES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>allowedScripts</name>
                <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name>
                <argument_list>(<argument><expr><name>KEY_ALLOWED_SCRIPT_TYPES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>allowedScripts</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>st</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>scripts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ExternalResourceSecurity</name></type> <name>getExternalResourceSecurity</name><parameter_list>(<parameter><decl><type><name>ParsedURL</name></type> <name>resourceURL</name></decl></parameter>, <parameter><decl><type><name>ParsedURL</name></type> <name>docURL</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isAllowExternalResources</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>super</name><operator>.</operator><name>getExternalResourceSecurity</name></name><argument_list>(<argument><expr><name>resourceURL</name></expr></argument>, <argument><expr><name>docURL</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>NoLoadExternalResourceSecurity</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAllowExternalResources</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Boolean</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>SVGAbstractTranscoder</name><operator>.</operator><name>this</name><operator>.</operator><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_ALLOW_EXTERNAL_RESOURCES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>b</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
