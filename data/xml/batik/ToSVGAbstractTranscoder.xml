<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/ToSVGAbstractTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLConnection</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>anim</name><operator>.</operator><name>dom</name><operator>.</operator><name>SVGDOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>svggen</name><operator>.</operator><name>SVGGraphics2D</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>FloatKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>IntegerKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>Platform</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>SVGConstants</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>XMLFilter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>

<comment type="block" format="javadoc">/** This class allows to simplify the creation of a transcoder which transcodes to
 *  SVG content.
 *  To use this class, you just have to implement the &lt;i&gt;transcode&lt;/i&gt; method of
 *  the &lt;i&gt;AbstractTranscoder&lt;/i&gt; class :
 *  first get  the associated Document from the &lt;i&gt;TranscoderOutput&lt;/i&gt; :
 *  {@link #createDocument(TranscoderOutput)}, then create a new
 *  {@link org.apache.batik.svggen.SVGGraphics2D} with this Document
 *  &lt;pre&gt;
 *    Document doc = this.createDocument(output);
 *    svgGenerator = new SVGGraphics2D(doc);
 *  &lt;/pre&gt;
 *  Perform the effective transcoding, using the
 *  {@link org.apache.batik.svggen.SVGGraphics2D} previously created
 *  then call the
 *  {@link #writeSVGToOutput(SVGGraphics2D, Element, TranscoderOutput)} to create the
 *  effective output file (if the output is set to be a File or URI)
 *  &lt;pre&gt;
 *    Element svgRoot = svgGenerator.getRoot();
 *    writeSVGToOutput(svgGenerator, svgRoot, output);
 *  &lt;/pre&gt;
 *
 *  &lt;p&gt;Several transcoding hints are defined for this abstract transcoder, but no default
 *  implementation is provided. Subclasses must implement which keys are relevant to them :&lt;/p&gt;
 *  &lt;ul&gt;
 *  &lt;li&gt;KEY_INPUT_WIDTH, KEY_INPUT_HEIGHT, KEY_XOFFSET, KEY_YOFFSET : this Integer keys allows to
 *  set the  portion of the image to transcode, defined by the width, height, and offset
 *  of this portion in Metafile units.&lt;/li&gt;
 *  &lt;li&gt;KEY_ESCAPED : this Boolean ley allow to escape XML characters in the output&lt;/li&gt;
 *  &lt;/ul&gt;
 *  &lt;pre&gt;
 *     transcoder.addTranscodingHint(ToSVGAbstractTranscoder.KEY_INPUT_WIDTH, Integer.valueOf(input_width));
 *  &lt;/pre&gt;
 *
 *  KEY_WIDTH, KEY_HEIGHT : this Float values allows to force the width and height of the output:
 *
 *  &lt;pre&gt;
 *     transcoder.addTranscodingHint(ToSVGAbstractTranscoder.KEY_WIDTH, Float.valueOf(width));
 *  &lt;/pre&gt;
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ToSVGAbstractTranscoder</name> <super_list><extends>extends <super><name>AbstractTranscoder</name></super></extends>
    <implements>implements <super><name>SVGConstants</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>PIXEL_TO_MILLIMETERS</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>PIXEL_PER_INCH</name></decl>;</decl_stmt>
    <static>static <block>{<block_content>
        <expr_stmt><expr><name>PIXEL_TO_MILLIMETERS</name> <operator>=</operator> <literal type="number">25.4f</literal> <operator>/</operator> <call><name><name>Platform</name><operator>.</operator><name>getScreenResolution</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>PIXEL_PER_INCH</name> <operator>=</operator> <call><name><name>Platform</name><operator>.</operator><name>getScreenResolution</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRANSCODER_ERROR_BASE</name> <init>= <expr><literal type="number">0xff00</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERROR_NULL_INPUT</name> <init>= <expr><name>TRANSCODER_ERROR_BASE</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERROR_INCOMPATIBLE_INPUT_TYPE</name> <init>= <expr><name>TRANSCODER_ERROR_BASE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERROR_INCOMPATIBLE_OUTPUT_TYPE</name> <init>= <expr><name>TRANSCODER_ERROR_BASE</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : width value for the output (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>FloatKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : height value for the output (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_HEIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>FloatKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : width value for the input (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_INPUT_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : height value for the input (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_INPUT_HEIGHT</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : x offset value for the output (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_XOFFSET</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : y offset value for the output (in pixels).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_YOFFSET</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Keys definition : Define if the characters will be escaped in the output.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_ESCAPED</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier>  <name>SVGGraphics2D</name></type> <name>svgGenerator</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Create an empty Document from a TranscoderOutput.
     *  &lt;ul&gt;
     *  &lt;li&gt;If the TranscoderOutput already contains an empty Document : returns this
     *  Document&lt;/li&gt;
     *  &lt;li&gt;else create a new empty DOM Document&lt;/li&gt;
     *  &lt;/ul&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>Document</name></type> <name>createDocument</name><parameter_list>(<parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Use SVGGraphics2D to generate SVG content</comment>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
           <decl_stmt><decl><type><name>DOMImplementation</name></type> <name>domImpl</name> <init>= <expr><call><name><name>SVGDOMImplementation</name><operator>.</operator><name>getDOMImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

           <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>domImpl</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>SVG_NAMESPACE_URI</name></expr></argument>, <argument><expr><name>SVG_SVG_TAG</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>doc</name> <operator>=</operator> <call><name><name>output</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>doc</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Get the {@link org.apache.batik.svggen.SVGGraphics2D} associated
     *  with this transcoder.
     */</comment>
    <function><type><specifier>public</specifier> <name>SVGGraphics2D</name></type> <name>getGraphics2D</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>svgGenerator</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Writes the SVG content held by the svgGenerator to the
     * &lt;code&gt;TranscoderOutput&lt;/code&gt;. This method does nothing if the output already
     * contains a Document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>writeSVGToOutput</name><parameter_list>(<parameter><decl><type><name>SVGGraphics2D</name></type> <name>svgGenerator</name></decl></parameter>, <parameter><decl><type><name>Element</name></type> <name>svgRoot</name></decl></parameter>,
        <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// XMLFilter</comment>
        <decl_stmt><decl><type><name>XMLFilter</name></type> <name>xmlFilter</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getXMLFilter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>xmlFilter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>ERROR_INCOMPATIBLE_OUTPUT_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>escaped</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_ESCAPED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>escaped</name> <operator>=</operator> <operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_ESCAPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Output stream</comment>
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>svgGenerator</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>svgRoot</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Writer</comment>
            <decl_stmt><decl><type><name>Writer</name></type> <name>wr</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>wr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>svgGenerator</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>svgRoot</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// URI</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>( <expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><block>{<block_content>
                <try>try<block>{<block_content>
                    <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>URLConnection</name></type> <name>urlCnx</name> <init>= <expr><call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>os</name> <operator>=</operator> <call><name><name>urlCnx</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>svgGenerator</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>svgRoot</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>ERROR_INCOMPATIBLE_OUTPUT_TYPE</name></expr></argument>)</argument_list></call></expr>;</throw>

    </block_content>}</block></function>
}</block></class>
</unit>
