<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-svgrasterizer/src/main/java/org/apache/batik/apps/rasterizer/SVGConverter.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>apps</name><operator>.</operator><name>rasterizer</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>Transcoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>ImageTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>JPEGTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>PNGTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>ParsedURL</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This application can be used to convert SVG images to raster images.
 * &lt;br&gt;
 * Possible result raster image formats are PNG, JPEG, TIFF, and PDF.
 * The Batik Transcoder API is used to execute the conversion. FOP is
 * needed to be able to transcode to the PDF format&lt;br&gt;
 *
 * The source has to be list of files or URL (set by the &lt;code&gt;setSources&lt;/code&gt;
 * method). &lt;br&gt;
 *
 * The destination can be:&lt;br&gt;&lt;ul&gt;
 * &lt;li&gt;&lt;b&gt;unspecified&lt;/b&gt;. In that case, only file sources can be converted and
 * a file in the same directory as the source will be created.&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;a directory&lt;/b&gt;, set by the &lt;code&gt;setDst&lt;/code&gt; method. In that case,
 * the output files are created in that destination directory&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;a file&lt;/b&gt;. In case there is a &lt;i&gt;single
 * source&lt;/i&gt;, the destination can be a single named file
 * (set with the &lt;code&gt;setDst&lt;/code&gt; method.)&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;hr&gt;
 *
 * There are a number of options which control the way the image is
 * converted to the destination format:&lt;br&gt;&lt;ul&gt;
 * &lt;li&gt;destinationType: controls the type of conversion which should be done.
 *     see the {@link DestinationType} documentation.&lt;/li&gt;
 * &lt;li&gt;width/height: they control the desired width and height, in user space,
 *     for the output image.&lt;/li&gt;
 * &lt;li&gt;maxWidth/maxHeight: control the maximum width and height,
 *     in user space, of the output image.&lt;/li&gt;
 * &lt;li&gt;area: controls the specific sub-area of the image which should be
 *     rendered.&lt;/li&gt;
 * &lt;li&gt;backgroundColor: controls the color which is used to fill the
 *     background before rendering the image&lt;/li&gt;
 * &lt;li&gt;quality: relevant only for JPEG destinations, this controls the
 *     encoding quality.&lt;/li&gt;
 * &lt;li&gt;indexed: relevant only for PNG, controls the number of bits
 *              used in writting of a palletized files.&lt;/li&gt;
 * &lt;li&gt;mediaType: controls the CSS media, or list of media, for which the
 *     image should be rendered.&lt;/li&gt;
 * &lt;li&gt;alternate: controls the alternate CSS stylesheet to activate,
 *     if any.&lt;/li&gt;
 * &lt;li&gt;language: controls the user language with which the SVG document
 *     should be converted.&lt;/li&gt;
 * &lt;li&gt;userStylesheet: defines the user stylesheet to apply to SVG documents
 *     in addition to other stylesheets referenced by or embedded in the
 *     SVG documents.&lt;/li&gt;
 * &lt;li&gt;pixelUnitToMillimeter: defines the size of a pixel in millimeters
 *     to use when processing the SVG documents.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @version $Id$
 * @author &lt;a href="mailto:Henri.Ruini@nokia.com"&gt;Henri Ruini&lt;/a&gt;
 * @author &lt;a href="mailto:vhardy@apache.org"&gt;Vincent Hardy&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>SVGConverter</name> <block>{
    <comment type="line">//</comment>
    <comment type="line">// Error codes reported by the SVGConverter</comment>
    <comment type="line">//</comment>

    <comment type="line">//</comment>
    <comment type="line">// Reported when no source file has been specified.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_SOURCES_SPECIFIED</name>
        <init>= <expr><literal type="string">"SVGConverter.error.no.sources.specified"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when there is more than one valid input source</comment>
    <comment type="line">// and no output directory has been set and the source is</comment>
    <comment type="line">// not a file.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_COMPUTE_DESTINATION</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.compute.destination"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when the dst is a file and there are multiple</comment>
    <comment type="line">// sources.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_USE_DST_FILE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.use.dst.file"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when the &lt;code&gt;Transcoder&lt;/code&gt; for the requested</comment>
    <comment type="line">// &lt;code&gt;destinationType&lt;/code&gt; cannot be found.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_ACCESS_TRANSCODER</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.access.transcoder"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when the source is found to be the same as</comment>
    <comment type="line">// the destination. Note that it is not guaranteed that</comment>
    <comment type="line">// this error condition will always be detected.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_SOURCE_SAME_AS_DESTINATION</name>
        <init>= <expr><literal type="string">"SVGConverter.error.source.same.as.destination"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when one of the sources cannot be read.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_READ_SOURCE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.read.source"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when an error happens while opening a source</comment>
    <comment type="line">// file.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_OPEN_SOURCE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.open.source"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported if the output is not writeable. This may</comment>
    <comment type="line">// happen if the output file already exists and does not</comment>
    <comment type="line">// have write permission.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_OUTPUT_NOT_WRITEABLE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.output.not.writeable"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when an error happens while trying to open</comment>
    <comment type="line">// the output file for writing.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_CANNOT_OPEN_OUTPUT_FILE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.cannot.open.output.file"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when the converter was not able to create</comment>
    <comment type="line">// the destination directory for the files.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_UNABLE_TO_CREATE_OUTPUT_DIR</name>
        <init>= <expr><literal type="string">"SVGConverter.error.unable.to.create.output.dir"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Reported when an error occurs while convertion the</comment>
    <comment type="line">// source file.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_WHILE_RASTERIZING_FILE</name>
        <init>= <expr><literal type="string">"SVGConverter.error.while.rasterizing.file"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Class variables and constants</comment>
    <comment type="line">//</comment>

    <comment type="block" format="javadoc">/** SVG file extension */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SVG_EXTENSION</name> <init>= <expr><literal type="string">".svg"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default quality value.  A value of -1 means disabled. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_QUALITY</name>
        <init>= <expr><operator>-</operator><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Maximum quality value */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>MAXIMUM_QUALITY</name>
        <init>= <expr><literal type="number">.99F</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default result type */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DestinationType</name></type> <name>DEFAULT_RESULT_TYPE</name>
        <init>= <expr><name><name>DestinationType</name><operator>.</operator><name>PNG</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default width */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_WIDTH</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default height */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_HEIGHT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Result type */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DestinationType</name></type> <name>destinationType</name> <init>= <expr><name>DEFAULT_RESULT_TYPE</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Output image height. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>height</name> <init>= <expr><name>DEFAULT_HEIGHT</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Output image width. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>width</name> <init>= <expr><name>DEFAULT_WIDTH</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Maximum output image height. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>maxHeight</name> <init>= <expr><name>DEFAULT_HEIGHT</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Maximum output image width. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>maxWidth</name> <init>= <expr><name>DEFAULT_WIDTH</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Output image quality. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>quality</name> <init>= <expr><name>DEFAULT_QUALITY</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Should output Image be indexed . */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>indexed</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Output AOI area. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>area</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Language */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>language</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** User stylesheet */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>userStylesheet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Millimeters Per Pixel */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>pixelUnitToMillimeter</name> <init>= <expr><operator>-</operator><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Validation flag */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>validate</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Execute the 'onload' scripts flag */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>executeOnload</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Document time to seek to. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>float</name></type> <name>snapshotTime</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NaN</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Set of allowed script types. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>allowedScriptTypes</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Controls whether scripts can only have the same origin as
        the document which references them. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>constrainScriptOrigin</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>allowExternalResources</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Controls whether scripts should be run securely or not */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>securityOff</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Sources files or URLs */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>sources</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Destination image path. Can be a file (for single source) or
     *  a directory
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>dst</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Background color for the output images. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Color</name></type> <name>backgroundColor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Media type for which the SVG image should be rendered */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>mediaType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Default value for the font-family when it is unspecified */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>defaultFontFamily</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Alternate stylesheet for which should be applied to the SVG */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>alternateStylesheet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Contents of &lt;code&gt;fileset&lt;/code&gt; elements. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Controls some aspects of the converter's operation,
     *  such as whether or not it should proceed in some
     *  error situations. See {@link SVGConverterController}
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>SVGConverterController</name></type> <name>controller</name></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Default constructor</comment>
    <comment type="line">//</comment>
    <constructor><specifier>public</specifier> <name>SVGConverter</name><parameter_list>()</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultSVGConverterController</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">//</comment>
    <comment type="line">// Constructor</comment>
    <comment type="line">//</comment>
    <constructor><specifier>public</specifier> <name>SVGConverter</name><parameter_list>(<parameter><decl><type><name>SVGConverterController</name></type> <name>controller</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>controller</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>controller</name></name> <operator>=</operator> <name>controller</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">//</comment>
    <comment type="line">// Property get/set methods</comment>
    <comment type="line">//</comment>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;destinationType&lt;/code&gt; attribute value.
     * Should not be null.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestinationType</name><parameter_list>(<parameter><decl><type><name>DestinationType</name></type> <name>destinationType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>destinationType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>destinationType</name></name> <operator>=</operator> <name>destinationType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DestinationType</name></type> <name>getDestinationType</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>destinationType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * In less than or equal to zero, the height is not
     * constrained on the output image. The height is in
     * user space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getHeight</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>height</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * In less than or equal to zero, the width is not
     * constrained on the output image. The width is in
     * user space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWidth</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getWidth</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>width</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If less than or equal to zero, the maximum height
     * does not have any effect on the output image.
     * The maximum height is in user space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxHeight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxHeight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMaxHeight</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>maxHeight</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If less than or equal to zero, the maximum width
     * does not have any effect on the output image.
     * The maximum width is in user space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxWidth</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxWidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMaxWidth</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>maxWidth</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the JPEG encoding quality. The value should be strictly
     * less than 1. If the value is less than zero, then the maximum
     * encoding quality is used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuality</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>quality</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>quality</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quality</name></name> <operator>=</operator> <name>quality</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getQuality</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>quality</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tells the PNG encoder to reduce the image to 256 colors, so the
     * PNG file is indexed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndexed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexed</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexed</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>indexed</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the user language. If the value is null, then the default (see
     * {@link org.apache.batik.bridge.UserAgent#getLanguages})
     * is used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLanguage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLanguage</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>language</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the user stylesheet. May be null.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserStylesheet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userStylesheet</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userStylesheet</name></name> <operator>=</operator> <name>userStylesheet</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserStylesheet</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>userStylesheet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the millimeters per pixel constant. A negative
     * value will cause the default value
     * (see {@link org.apache.batik.bridge.UserAgent#getPixelUnitToMillimeter})
     * to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPixelUnitToMillimeter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pixelUnitToMillimeter</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pixelUnitToMillimeter</name></name> <operator>=</operator> <name>pixelUnitToMillimeter</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPixelUnitToMillimeter</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>pixelUnitToMillimeter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;area&lt;/code&gt; as a Rectangle. This value can
     * be null in which case the whole image will be rendered. If the
     * area is not null, then only the portion of the image it
     * defines will be rendered.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArea</name><parameter_list>(<parameter><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>area</name></name> <operator>=</operator> <name>area</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getArea</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>area</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the list of individual SVG sources. The strings
     * can be either URLs or file names. Note that invalid
     * sources (e.g., read-protected files or invalid URLs)
     * will cause &lt;code&gt;SVGConverterExceptions&lt;/code&gt; to be
     * thrown during the transcoding process (see {@link #execute});
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSources</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>sources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>sources</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sources</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sources</name></name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>source</name> <range>: <expr><name>sources</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>source</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>sources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sources</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>List</name></type> <name>getSources</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>sources</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * When converting a single source, dst can be a file.
     * Othewise, it should be a directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDst</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDst</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>dst</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;backgroundColor&lt;/code&gt; value. This can be
     * null in which case no color will be used to fill the
     * background before rendering this SVG image.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundColor</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>backgroundColor</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundColor</name></name> <operator>=</operator> <name>backgroundColor</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getBackgroundColor</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>backgroundColor</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;mediaType&lt;/code&gt; value. This value controls
     * the CSS media for which the image should be rendered. It
     * can be null, in which case no specific media selectors will
     * apply. If it is not null, it can contain space separated values
     * of the medias for which the image should be rendered. For example,
     * "screen", "print" or "scree projection" are valid values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMediaType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mediaType</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaType</name></name> <operator>=</operator> <name>mediaType</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMediaType</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>mediaType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;defaultFontFamily&lt;/code&gt; value. This value controls
     * the default value for the font-family CSS property when that
     * property is unspecified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultFontFamily</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>defaultFontFamily</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultFontFamily</name></name> <operator>=</operator> <name>defaultFontFamily</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultFontFamily</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultFontFamily</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the &lt;code&gt;alternateStyleSheet&lt;/code&gt; value. This value
     * controls the CSS alternate stylesheet to select in the
     * rendered SVG file(s). It may be null, in which case no alternate
     * stylesheet will be selected.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlternateStylesheet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>alternateStylesheet</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alternateStylesheet</name></name> <operator>=</operator> <name>alternateStylesheet</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAlternateStylesheet</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>alternateStylesheet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Defines whether or not input sources should be validated in
     * the conversion process
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValidate</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>validate</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>validate</name></name> <operator>=</operator> <name>validate</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getValidate</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>validate</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets whether or not scripts attached to the DOM using 'onload'
     * event attribute must be executed before rasterizing.
     *
     * @param b true means scripts will be executed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecuteOnload</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executeOnload</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the scripts attached to the DOM using 'onload'
     * event attribute is going to be executed before rasterizing,
     * false otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getExecuteOnload</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>executeOnload</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the document time to seek to before rasterizing.
     *
     * @param t the document time, in seconds
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSnapshotTime</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>snapshotTime</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the document to to seek to before rasterizing.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getSnapshotTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>snapshotTime</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the set of allowed script types (i.e., the set of possible
     * values for the type attribute in the &amp;lt;script&amp;gt; element),
     * as a comma separated list of allowed values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowedScriptTypes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>allowedScriptTypes</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowedScriptTypes</name></name> <operator>=</operator> <name>allowedScriptTypes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the list of allowed script types.
     *
     * @see #setAllowedScriptTypes
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAllowedScriptTypes</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>allowedScriptTypes</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets whether scripts should only be loaded from the same
     * location as the documents referencing them.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConstrainScriptOrigin</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>constrainScriptOrigin</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>constrainScriptOrigin</name></name> <operator>=</operator> <name>constrainScriptOrigin</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether scripts can only be loaded from the same
     * origin as the documents referencing them.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getConstrainScriptOrigin</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>constrainScriptOrigin</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets whether or not scripts should be run securely
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSecurityOff</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>securityOff</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>securityOff</name></name> <operator>=</operator> <name>securityOff</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether or not scripts will be run securely
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSecurityOff</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><name>securityOff</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if f is a File. &lt;code&gt;f&lt;/code&gt; is found to be a file if
     * it exists and is a file. If it does not exist, it is declared
     * to be a file if it has the same extension as the DestinationType.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>f</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>f</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name><name>f</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>f</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><call><name><name>destinationType</name><operator>.</operator><name>getExtension</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Starts the conversion process.
     * @throws SVGConverterException thrown if parameters are not set correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SVGConverterException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// Compute the set of SVGConverterSource from the source properties</comment>
        <comment type="line">// (srcDir and srcFile);</comment>
        <comment type="line">// This throws an exception if there is not at least one src file.</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>sources</name> <init>= <expr><call><name>computeSources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Compute the destination files from dest</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>dstFiles</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isFile</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>dstFiles</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dstFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><name>dstFiles</name> <operator>=</operator> <call><name>computeDstFiles</name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Now, get the transcoder to use for the operation</comment>
        <decl_stmt><decl><type><name>Transcoder</name></type> <name>transcoder</name> <init>= <expr><call><name><name>destinationType</name><operator>.</operator><name>getTranscoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>transcoder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_ACCESS_TRANSCODER</name></expr></argument>,
                                             <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><call><name><name>destinationType</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>,
                                             <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* fatal error */</comment>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Now, compute the set of transcoding hints to use</comment>
        <decl_stmt><decl><type><name>Map</name></type> <name>hints</name> <init>= <expr><call><name>computeTranscodingHints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>setTranscodingHints</name></name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Notify listener that task has been computed</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>controller</name><operator>.</operator><name>proceedWithComputedTask</name></name><argument_list>(<argument><expr><name>transcoder</name></expr></argument>,
                                               <argument><expr><name>hints</name></expr></argument>,
                                               <argument><expr><name>sources</name></expr></argument>,
                                               <argument><expr><name>dstFiles</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Convert files one by one</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// Get the file from the vector.</comment>
            <decl_stmt><decl><type><name>SVGConverterSource</name></type> <name>currentFile</name>
                <init>= <expr><operator>(</operator><name>SVGConverterSource</name><operator>)</operator><call><name><name>sources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>outputFile</name>  <init>= <expr><operator>(</operator><name>File</name><operator>)</operator><call><name><name>dstFiles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>createOutputDir</name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>transcode</name><argument_list>(<argument><expr><name>currentFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>transcoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Populates a vector with destination files names
     * computed from the names of the files in the sources vector
     * and the value of the dst property
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>computeDstFiles</name><parameter_list>(<parameter><decl><type><name>List</name></type> <name>sources</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>SVGConverterException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>dstFiles</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dst</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dst</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_USE_DST_FILE</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//</comment>
            <comment type="line">// Either dst exist and is a directory or dst does not</comment>
            <comment type="line">// exist and we may fail later on in createOutputDir</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>source</name> <range>: <expr><name>sources</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>SVGConverterSource</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>SVGConverterSource</name><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// Generate output filename from input filename.</comment>
                <decl_stmt><decl><type><name>File</name></type> <name>outputName</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>dst</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name>getDestinationFile</name><argument_list>(<argument><expr><call><name><name>src</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dstFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">//</comment>
            <comment type="line">// No destination directory has been specified.</comment>
            <comment type="line">// Try and create files in the same directory as the</comment>
            <comment type="line">// sources. This only work if sources are files.</comment>
            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>source</name> <range>: <expr><name>sources</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>SVGConverterSource</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>SVGConverterSource</name><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>instanceof</operator> <name>SVGConverterFileSource</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_COMPUTE_DESTINATION</name></expr></argument>,
                            <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><name>src</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Generate output filename from input filename.</comment>
                <decl_stmt><decl><type><name>SVGConverterFileSource</name></type> <name>fs</name> <init>= <expr><operator>(</operator><name>SVGConverterFileSource</name><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>outputName</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParent</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name>getDestinationFile</name><argument_list>(<argument><expr><call><name><name>src</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dstFiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>dstFiles</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Populates a vector with the set of SVG files from the
     * srcDir if it is not null and with the sources (files or URLs)
     * if any.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>computeSources</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SVGConverterException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name>List</name></type> <name>sources</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check that at least one source has been specified.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>sources</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_NO_SOURCES_SPECIFIED</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>sources</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Object</name></type> <name>source</name> <range>: <expr><name><name>this</name><operator>.</operator><name>sources</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>sourceString</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>sourceString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SVGConverterFileSource</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>fileNRef</name> <init>= <expr><call><name>getFileNRef</name><argument_list>(<argument><expr><name>sourceString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>fileNRef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SVGConverterFileSource</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>fileNRef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sources</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SVGConverterURLSource</name><argument_list>(<argument><expr><name>sourceString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>sources</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getFileNRef</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>fileName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>result</name> <init>= <expr><block>{<expr><name>fileName</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>fileName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// -----------------------------------------------------------------------</comment>
    <comment type="line">//   Internal methods</comment>
    <comment type="line">// -----------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * Computes the set of transcoding hints to use for the operation
     */</comment>
    <function><type><specifier>protected</specifier> <name>Map</name></type> <name>computeTranscodingHints</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set AOI. ----------------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>area</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_AOI</name></name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set image quality. ------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>JPEGTranscoder</name><operator>.</operator><name>KEY_QUALITY</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set image indexed. ------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>indexed</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_INDEXED</name></name></expr></argument>, <argument><expr><name>indexed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set image background color -----------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>backgroundColor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_BACKGROUND_COLOR</name></name></expr></argument>, <argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set image height and width. ----------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_HEIGHT</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_WIDTH</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set maximum height and width ---------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>maxHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_MAX_HEIGHT</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_MAX_WIDTH</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set CSS Media</comment>
        <if_stmt><if>if <condition>(<expr><name>mediaType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_MEDIA</name></name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set default font-family</comment>
        <if_stmt><if>if <condition>(<expr><name>defaultFontFamily</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_DEFAULT_FONT_FAMILY</name></name></expr></argument>, <argument><expr><name>defaultFontFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set alternateStylesheet</comment>
        <if_stmt><if>if <condition>(<expr><name>alternateStylesheet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_ALTERNATE_STYLESHEET</name></name></expr></argument>, <argument><expr><name>alternateStylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set user stylesheet</comment>
        <if_stmt><if>if <condition>(<expr><name>userStylesheet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>userStylesheetURL</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>URL</name></type> <name>userDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toURI</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toURL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>userStylesheetURL</name> <operator>=</operator> <operator>new</operator> <call><name>ParsedURL</name><argument_list>(<argument><expr><name>userDir</name></expr></argument>, <argument><expr><name>userStylesheet</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>userStylesheetURL</name> <operator>=</operator> <name>userStylesheet</name></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_USER_STYLESHEET_URI</name></name></expr></argument>, <argument><expr><name>userStylesheetURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set the user language</comment>
        <if_stmt><if>if <condition>(<expr><name>language</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_LANGUAGE</name></name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Sets the millimeters per pixel</comment>
        <if_stmt><if>if <condition>(<expr><name>pixelUnitToMillimeter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_PIXEL_UNIT_TO_MILLIMETER</name></name></expr></argument>,
                    <argument><expr><name>pixelUnitToMillimeter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set validation</comment>
        <if_stmt><if>if <condition>(<expr><name>validate</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_XML_PARSER_VALIDATING</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set onload</comment>
        <if_stmt><if>if <condition>(<expr><name>executeOnload</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_EXECUTE_ONLOAD</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set snapshot time</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>snapshotTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_SNAPSHOT_TIME</name></name></expr></argument>, <argument><expr><name>snapshotTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set allowed scripts</comment>
        <if_stmt><if>if <condition>(<expr><name>allowedScriptTypes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_ALLOWED_SCRIPT_TYPES</name></name></expr></argument>, <argument><expr><name>allowedScriptTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set constrain script origin</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>constrainScriptOrigin</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_CONSTRAIN_SCRIPT_ORIGIN</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowExternalResources</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_ALLOW_EXTERNAL_RESOURCES</name></name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the input image to the result image.
     * with the given transcoder. If a failure happens, the
     * controller is notified and decides whether to proceed
     * or not. If it decides to proceed, the converter will
     * continue processing other files. Otherwise, it will
     * throw an exception.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>SVGConverterSource</name></type> <name>inputFile</name></decl></parameter>,
                             <parameter><decl><type><name>File</name></type> <name>outputFile</name></decl></parameter>,
                             <parameter><decl><type><name>Transcoder</name></type> <name>transcoder</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>SVGConverterException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>TranscoderInput</name></type> <name>input</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TranscoderOutput</name></type> <name>output</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>controller</name><operator>.</operator><name>proceedWithSourceTranscoding</name></name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>,
                                                     <argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>inputFile</name><operator>.</operator><name>isSameAs</name></name><argument_list>(<argument><expr><call><name><name>outputFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_SOURCE_SAME_AS_DESTINATION</name></expr></argument>,
                                                 <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* fatal error */</comment>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Compute transcoder input.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>inputFile</name><operator>.</operator><name>isReadable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_READ_SOURCE</name></expr></argument>,
                                                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><call><name><name>inputFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>inputFile</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_OPEN_SOURCE</name></expr></argument>,
                                                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>inputFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>,
                                                               <expr><call><name><name>ioe</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
                                                               </block_content>}</block></catch></try>

            <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>new</operator> <call><name>TranscoderInput</name><argument_list>(<argument><expr><call><name><name>inputFile</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Compute transcoder output.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isWriteable</name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_OUTPUT_NOT_WRITEABLE</name></expr></argument>,
                                                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>outputFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>outputStream</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>fnfe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_CANNOT_OPEN_OUTPUT_FILE</name></expr></argument>,
                                                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>outputFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>new</operator> <call><name>TranscoderOutput</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>SVGConverterException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>proceed</name> <init>= <expr><call><name><name>controller</name><operator>.</operator><name>proceedOnSourceTranscodingFailure</name></name>
                <argument_list>(<argument><expr><name>inputFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>proceed</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Transcode now</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>te</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>

            <comment type="line">// Report error to the controller. If controller decides</comment>
            <comment type="line">// to stop, throw an exception</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>proceed</name> <init>= <expr><call><name><name>controller</name><operator>.</operator><name>proceedOnSourceTranscodingFailure</name></name>
                <argument_list>(<argument><expr><name>inputFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>, <argument><expr><name>ERROR_WHILE_RASTERIZING_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>proceed</name></expr>)</condition><block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_WHILE_RASTERIZING_FILE</name></expr></argument>,
                                                 <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>outputFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>,
                                                               <expr><call><name><name>te</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Close streams and clean up.</comment>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onSourceTranscodingSuccess</name></name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the name of the result image file.
     *
     * &lt;P&gt;This method modifies the result filename, it changes the existing
     * suffix to correspong the result file type. It also adds the suffix
     * if the file doesn't have one.&lt;/P&gt;
     *
     * @param file Result file name as a String object.
     *
     * @return Name of the file. The directory of the file is not returned.
     *         The returned string is empty if the parameter is not a file.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getDestinationFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>suffixStart</name></decl>;</decl_stmt>            <comment type="line">// Location of the first char of</comment>
                                    <comment type="line">// the suffix in a String.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>oldName</name></decl>;</decl_stmt>             <comment type="line">// Existing filename.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>newSuffix</name> <init>= <expr><call><name><name>destinationType</name><operator>.</operator><name>getExtension</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <comment type="line">// New suffix.</comment>

        <expr_stmt><expr><name>oldName</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
        <comment type="line">// Find the first char of the suffix.</comment>
        <expr_stmt><expr><name>suffixStart</name> <operator>=</operator> <call><name><name>oldName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>( <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dest</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>suffixStart</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Replace existing suffix.</comment>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name><name>oldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>suffixStart</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>newSuffix</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Add new suffix.</comment>
            <expr_stmt><expr><name>dest</name> <operator>=</operator> <name>oldName</name> <operator>+</operator> <name>newSuffix</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates directories for output files if needed.
     *
     * @param output Output file with path.
     *
     * @throws SVGConverterException Output directory doesn't exist and it can't be created.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>createOutputDir</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>output</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>SVGConverterException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>File</name></type> <name>outputDir</name></decl>;</decl_stmt>             <comment type="line">// Output directory object.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>     <comment type="line">// false if the output directory</comment>
                                    <comment type="line">// doesn't exist and it can't be created</comment>
                                    <comment type="line">// true otherwise</comment>


        <comment type="line">// Create object from output directory.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>parentDir</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>parentDir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>outputDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>outputDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
                <comment type="line">// Output directory doesn't exist, so create it.</comment>
                <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>outputDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>outputDir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
                    <comment type="line">// File, which have a same name as the output directory, exists.</comment>
                    <comment type="line">// Create output directory.</comment>
                    <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name><name>outputDir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SVGConverterException</name><argument_list>(<argument><expr><name>ERROR_UNABLE_TO_CREATE_OUTPUT_DIR</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the application is allowed to write to the file.
     *
     * @param file File to be checked.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the file is writeable and &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isWriteable</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Check the existing file.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Check the file that doesn't exist yet.</comment>
            <comment type="line">// Create a new file. The file is writeable if</comment>
            <comment type="line">// the creation succeeds.</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// -----------------------------------------------------------------------</comment>
    <comment type="line">//   Inner classes</comment>
    <comment type="line">// -----------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * Convenience class to filter svg files
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SVGFileFilter</name> <super_list><implements>implements <super><name>FileFilter</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SVG_EXTENSION</name> <init>= <expr><literal type="string">".svg"</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><name>SVG_EXTENSION</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>

</unit>
