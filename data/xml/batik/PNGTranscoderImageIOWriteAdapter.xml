<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-codec/src/main/java/org/apache/batik/ext/awt/image/codec/imageio/PNGTranscoderImageIOWriteAdapter.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>codec</name><operator>.</operator><name>imageio</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>rendered</name><operator>.</operator><name>IndexImage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>PNGTranscoder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is a helper to &lt;code&gt;PNGTranscoder&lt;/code&gt; that writes PNG images 
 * through the Image I/O API.
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>PNGTranscoderImageIOWriteAdapter</name> <super_list><implements>implements
        <super><name><name>PNGTranscoder</name><operator>.</operator><name>WriteAdapter</name></name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * @throws TranscoderException 
     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(
     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,
     * org.apache.batik.transcoder.TranscoderOutput)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>PNGTranscoder</name></type> <name>transcoder</name></decl></parameter>, <parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>,
            <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>TranscodingHints</name></type> <name>hints</name> <init>= <expr><call><name><name>transcoder</name><operator>.</operator><name>getTranscodingHints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_INDEXED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>n</name><operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_INDEXED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>n</name><operator>==</operator><literal type="number">2</literal><operator>||</operator><name>n</name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name>n</name><operator>==</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> 
                <comment type="line">//PNGEncodeParam.Palette can handle these numbers only.</comment>
                <expr_stmt><expr><name>img</name> <operator>=</operator> <call><name><name>IndexImage</name><operator>.</operator><name>getIndexedImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>ImageWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>ImageWriterRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>getWriterFor</name><argument_list>(<argument><expr><literal type="string">"image/png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageWriterParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>ImageWriterParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* NYI!!!!!
        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);
        if (params instanceof PNGEncodeParam.RGB) {
            ((PNGEncodeParam.RGB)params).setBackgroundRGB
                (new int [] { 255, 255, 255 });
        }*/</comment>

        <comment type="line">// If they specify GAMMA key with a value of '0' then omit</comment>
        <comment type="line">// gamma chunk.  If they do not provide a GAMMA then just</comment>
        <comment type="line">// generate an sRGB chunk. Otherwise supress the sRGB chunk</comment>
        <comment type="line">// and just generate gamma and chroma chunks.</comment>
        <comment type="block">/* NYI!!!!!!
        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {
            float gamma = ((Float)hints.get(PNGTranscoder.KEY_GAMMA)).floatValue();
            if (gamma &gt; 0) {
                params.setGamma(gamma);
            }
            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);
        }  else {
            // We generally want an sRGB chunk and our encoding intent
            // is perceptual
            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);
        }*/</comment>


        <decl_stmt><decl><type><name>float</name></type> <name>PixSzMM</name> <init>= <expr><call><name><name>transcoder</name><operator>.</operator><name>getUserAgent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPixelUnitToMillimeter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>PixSzInch</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">25.4</literal> <operator>/</operator> <name>PixSzMM</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setResolution</name></name><argument_list>(<argument><expr><name>PixSzInch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>ostream</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>writeImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ostream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

}</block></class>
</unit>
