<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/image/ImageTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Shape</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>geom</name><operator>.</operator><name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>DataBufferInt</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>SinglePixelPackedSampleModel</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>GraphicsUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>renderer</name><operator>.</operator><name>ConcreteImageRendererFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>renderer</name><operator>.</operator><name>ImageRenderer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>gvt</name><operator>.</operator><name>renderer</name><operator>.</operator><name>ImageRendererFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>SVGAbstractTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>PaintKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class enables to transcode an input to an image of any format.
 *
 * &lt;p&gt;Two transcoding hints (&lt;code&gt;KEY_WIDTH&lt;/code&gt; and
 * &lt;code&gt;KEY_HEIGHT&lt;/code&gt;) can be used to respectively specify the image
 * width and the image height. If only one of these keys is specified,
 * the transcoder preserves the aspect ratio of the original image.
 *
 * &lt;p&gt;The &lt;code&gt;KEY_BACKGROUND_COLOR&lt;/code&gt; defines the background color
 * to use for opaque image formats, or the background color that may
 * be used for image formats that support alpha channel.
 *
 * &lt;p&gt;The &lt;code&gt;KEY_AOI&lt;/code&gt; represents the area of interest to paint
 * in device space.
 *
 * &lt;p&gt;Three additional transcoding hints that act on the SVG
 * processor can be specified:
 *
 * &lt;p&gt;&lt;code&gt;KEY_LANGUAGE&lt;/code&gt; to set the default language to use (may be
 * used by a &amp;lt;switch&amp;gt; SVG element for example),
 * &lt;code&gt;KEY_USER_STYLESHEET_URI&lt;/code&gt; to fix the URI of a user
 * stylesheet, and &lt;code&gt;KEY_MM_PER_PIXEL&lt;/code&gt; to specify the number of
 * millimeters in each pixel .
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ImageTranscoder</name> <super_list><extends>extends <super><name>SVGAbstractTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ImageTranscoder&lt;/code&gt;.
     */</comment>
    <constructor><specifier>protected</specifier> <name>ImageTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified Document as an image in the specified output.
     *
     * @param document the document to transcode
     * @param uri the uri of the document or null if any
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>,
                             <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                             <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <comment type="line">// Sets up root, curTxf &amp; curAoi</comment>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// prepare the image to be painted</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>width</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>height</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

        <comment type="line">// paint the SVG document using the bridge package</comment>
        <comment type="line">// create the appropriate renderer</comment>
        <decl_stmt><decl><type><name>ImageRenderer</name></type> <name>renderer</name> <init>= <expr><call><name>createRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>renderer</name><operator>.</operator><name>updateOffScreen</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// curTxf.translate(0.5, 0.5);</comment>
        <expr_stmt><expr><call><name><name>renderer</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>curTxf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>renderer</name><operator>.</operator><name>setTree</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>root</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// We're done with it...</comment>

        <try>try <block>{<block_content>
            <comment type="line">// now we are sure that the aoi is the image size</comment>
            <decl_stmt><decl><type><name>Shape</name></type> <name>raoi</name> <init>= <expr><operator>new</operator> <call><name><name>Rectangle2D</name><operator>.</operator><name>Float</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Warning: the renderer's AOI must be in user space</comment>
            <expr_stmt><expr><call><name><name>renderer</name><operator>.</operator><name>repaint</name></name><argument_list>(<argument><expr><call><name><name>curTxf</name><operator>.</operator><name>createInverse</name></name><argument_list>()</argument_list></call><operator>.</operator>
                             <call><name>createTransformedShape</name><argument_list>(<argument><expr><name>raoi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>rend</name> <init>= <expr><call><name><name>renderer</name><operator>.</operator><name>getOffScreen</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>renderer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// We're done with it...</comment>

            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>dest</name> <init>= <expr><call><name>createImage</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2d</name> <init>= <expr><call><name><name>GraphicsUtil</name><operator>.</operator><name>createGraphics</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Paint</name></type> <name>bgcolor</name> <init>= <expr><operator>(</operator><name>Paint</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setComposite</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name><operator>.</operator><name>SrcOver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>setPaint</name></name><argument_list>(<argument><expr><name>bgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>rend</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <comment type="line">// might be null if the svg document is empty</comment>
                <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>drawRenderedImage</name></name><argument_list>(<argument><expr><name>rend</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AffineTransform</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>g2d</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rend</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// We're done with it...</comment>
            <expr_stmt><expr><call><name>writeImage</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Method so subclasses can modify the Renderer used to render document.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ImageRenderer</name></type> <name>createRenderer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ImageRendererFactory</name></type> <name>rendFactory</name> <init>= <expr><operator>new</operator> <call><name>ConcreteImageRendererFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// ImageRenderer renderer = rendFactory.createDynamicImageRenderer();</comment>
        <return>return <expr><call><name><name>rendFactory</name><operator>.</operator><name>createStaticImageRenderer</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts an image so that viewers which do not support the
     * alpha channel will see a white background (and not a black
     * one).
     * @param img the image to convert
     * @param sppsm
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>forceTransparentWhite</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>SinglePixelPackedSampleModel</name></type> <name>sppsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// This is a trick so that viewers which do not support</comment>
        <comment type="line">// the alpha channel will see a white background (and not</comment>
        <comment type="line">// a black one).</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>img</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataBufferInt</name></type> <name>biDB</name><init>=<expr><operator>(</operator><name>DataBufferInt</name><operator>)</operator><call><name><name>img</name><operator>.</operator><name>getRaster</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>scanStride</name> <init>= <expr><call><name><name>sppsm</name><operator>.</operator><name>getScanlineStride</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dbOffset</name> <init>= <expr><call><name><name>biDB</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>pixels</name> <init>= <expr><call><name><name>biDB</name><operator>.</operator><name>getBankData</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>dbOffset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>adjust</name> <init>= <expr><name>scanStride</name> <operator>-</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pel</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <expr_stmt><expr><name>pel</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>pel</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>pel</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>pel</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>=</operator>  <name>pel</name>        <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal><operator>*</operator><operator>(</operator><literal type="number">255</literal> <operator>-</operator><name>a</name><operator>)</operator> <operator>+</operator> <name>a</name><operator>*</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">255</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal><operator>*</operator><operator>(</operator><literal type="number">255</literal> <operator>-</operator><name>a</name><operator>)</operator> <operator>+</operator> <name>a</name><operator>*</operator><name>g</name><operator>)</operator><operator>/</operator><literal type="number">255</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal><operator>*</operator><operator>(</operator><literal type="number">255</literal> <operator>-</operator><name>a</name><operator>)</operator> <operator>+</operator> <name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>/</operator><literal type="number">255</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
                    <operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">8</literal>  <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><name>b</name>     <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>adjust</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new image with the specified dimension.
     * @param width the image width in pixels
     * @param height the image height in pixels
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>BufferedImage</name></type> <name>createImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Writes the specified image to the specified output.
     * @param img the image to write
     * @param output the output where to store the image
     * @throws TranscoderException if an error occured while storing the image
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws>;</function_decl>

    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * The image background paint key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_BACKGROUND_COLOR&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Paint&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the background color to use.
     *       The color is required by opaque image formats and is used by
     *       image formats that support alpha channel.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_BACKGROUND_COLOR</name>
        <init>= <expr><operator>new</operator> <call><name>PaintKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The forceTransparentWhite key.
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_FORCE_TRANSPARENT_WHITE&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;false&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;It controls whether the encoder should force
     *       the image's fully transparent pixels to be fully transparent
     *       white instead of fully transparent black.  This is useful when
     *       the encoded file is displayed in a browser which does not
     *       support transparency correctly and lets the image display with
     *       a white background instead of a black background.
     *       &lt;br&gt;
     *       However, note that the modified image will display differently
     *       over a white background in a viewer that supports
     *       transparency.
     *       &lt;br&gt;
     *       Not all Transcoders use this key (in particular some formats
     *       can't preserve the alpha channel at all in which case this
     *       is not used).&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_FORCE_TRANSPARENT_WHITE</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>
