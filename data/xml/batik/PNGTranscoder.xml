<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/image/PNGTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>SinglePixelPackedSampleModel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>bridge</name><operator>.</operator><name>UserAgent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>resources</name><operator>.</operator><name>Messages</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>FloatKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>IntegerKey</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is an &lt;code&gt;ImageTranscoder&lt;/code&gt; that produces a PNG image.
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>PNGTranscoder</name> <super_list><extends>extends <super><name>ImageTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new transcoder that produces png images.
     */</comment>
    <constructor><specifier>public</specifier> <name>PNGTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FORCE_TRANSPARENT_WHITE</name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** @return the transcoder's user agent */</comment>
    <function><type><specifier>public</specifier> <name>UserAgent</name></type> <name>getUserAgent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>userAgent</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Creates a new ARGB image with the specified dimension.
     * @param width the image width in pixels
     * @param height the image height in pixels
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>WriteAdapter</name></type> <name>getWriteAdapter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>WriteAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>(</operator><name>WriteAdapter</name><operator>)</operator><call><name><name>clazz</name><operator>.</operator><name>getDeclaredConstructor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>adapter</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Writes the specified image to the specified output.
     * @param img the image to write
     * @param output the output where to store the image
     * @throws TranscoderException if an error occured while storing the image
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>OutputStream</name></type> <name>ostream</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ostream</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(
                <argument><expr><call><name><name>Messages</name><operator>.</operator><name>formatMessage</name></name><argument_list>(<argument><expr><literal type="string">"png.badoutput"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//</comment>
        <comment type="line">// This is a trick so that viewers which do not support the alpha</comment>
        <comment type="line">// channel will see a white background (and not a black one).</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>forceTransparentWhite</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_FORCE_TRANSPARENT_WHITE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>forceTransparentWhite</name> <operator>=</operator>
                    <operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name>
                            <argument_list>(<argument><expr><name><name>PNGTranscoder</name><operator>.</operator><name>KEY_FORCE_TRANSPARENT_WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>forceTransparentWhite</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SinglePixelPackedSampleModel</name></type> <name>sppsm</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>sppsm</name> <operator>=</operator> <operator>(</operator><name>SinglePixelPackedSampleModel</name><operator>)</operator><call><name><name>img</name><operator>.</operator><name>getSampleModel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>forceTransparentWhite</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>sppsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>WriteAdapter</name></type> <name>adapter</name> <init>= <expr><call><name>getWriteAdapter</name><argument_list>(
                <argument><expr><literal type="string">"org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>adapter</name> <operator>=</operator> <call><name>getWriteAdapter</name><argument_list>(
                <argument><expr><literal type="string">"org.apache.batik.transcoder.image.PNGTranscoderImageIOWriteAdapter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(
                    <argument><expr><literal type="string">"Could not write PNG file because no WriteAdapter is availble"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>writeImage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// PNG specific interfaces</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * This interface is used by &lt;code&gt;PNGTranscoder&lt;/code&gt; to write PNG images 
     * through different codecs.
     *
     * @version $Id$
     */</comment>
    <interface><specifier>public</specifier> interface <name>WriteAdapter</name> <block>{
        
        <comment type="block" format="javadoc">/**
         * Writes the specified image to the specified output.
         * @param transcoder the calling PNGTranscoder
         * @param img the image to write
         * @param output the output where to store the image
         * @throws TranscoderException if an error occured while storing the image
         */</comment>
        <function_decl><type><name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>PNGTranscoder</name></type> <name>transcoder</name></decl></parameter>, <parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>, 
                <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws>;</function_decl>

    }</block></interface>
    

    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * The gamma correction key.
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_GAMMA&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;PNGEncodeParam.INTENT_PERCEPTUAL&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Controls the gamma correction of the PNG image. 
     *       A value of zero for gamma disables the generation 
     *       of a gamma chunk.  No value causes an sRGB chunk 
     *       to be generated.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_GAMMA</name>
        <init>= <expr><operator>new</operator> <call><name>FloatKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default Primary Chromaticities for sRGB imagery.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>DEFAULT_CHROMA</name> <init>= <expr><block>{
        <expr><literal type="number">0.31270F</literal></expr>, <expr><literal type="number">0.329F</literal></expr>, <expr><literal type="number">0.64F</literal></expr>, <expr><literal type="number">0.33F</literal></expr>, <expr><literal type="number">0.3F</literal></expr>, <expr><literal type="number">0.6F</literal></expr>, <expr><literal type="number">0.15F</literal></expr>, <expr><literal type="number">0.06F</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * The color indexed image key to specify number of colors used in
     * palette.
     *
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_INDEXED&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Integer&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;none/true color image&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Turns on the reduction of the image to index 
     *       colors by specifying color bit depth, 1, 2, 4 or 8. The resultant 
     *       PNG will be an indexed PNG with color bit depth specified.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt; 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_INDEXED</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>
