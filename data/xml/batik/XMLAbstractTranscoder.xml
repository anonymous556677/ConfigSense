<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/XMLAbstractTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>DocumentFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>SAXDocumentFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>DOMImplementationKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>StringKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>util</name><operator>.</operator><name>XMLResourceDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>DOMImplementation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class may be the base class of all transcoders which take an
 * XML document as input and which need to build a DOM tree. In order
 * to take advantage of this class, you have to specify the following
 * transcoding hints:
 *
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;KEY_DOM_IMPLEMENTATION&lt;/code&gt;: the DOM Implementation to use
 *
 * &lt;li&gt;&lt;code&gt;KEY_DOCUMENT_ELEMENT_NAMESPACE_URI&lt;/code&gt;: the namespace URI of the
 * document to create
 *
 * &lt;li&gt;&lt;code&gt;KEY_DOCUMENT_ELEMENT&lt;/code&gt;: the qualified name of the document type
 * to create
 * &lt;/ul&gt;
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>XMLAbstractTranscoder</name> <super_list><extends>extends <super><name>AbstractTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;XMLAbstractTranscoder&lt;/code&gt;.
     */</comment>
    <constructor><specifier>protected</specifier> <name>XMLAbstractTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_XML_PARSER_VALIDATING</name></expr></argument>, <argument><expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified XML input in the specified output. All
     * &lt;code&gt;TranscoderException&lt;/code&gt; exceptions not catched previously
     * are tagged as fatal errors (ie. call the &lt;code&gt;fatalError&lt;/code&gt;
     * method of the &lt;code&gt;ErrorHandler&lt;/code&gt;).
     *
     * @param input the XML input to transcode
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name>Document</name></type> <name>document</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>parserClassname</name> <init>=
                <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_XML_PARSER_CLASSNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>namespaceURI</name> <init>=
                <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOCUMENT_ELEMENT_NAMESPACE_URI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>documentElement</name> <init>=
                <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOCUMENT_ELEMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DOMImplementation</name></type> <name>domImpl</name> <init>=
                <expr><operator>(</operator><name>DOMImplementation</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOM_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>parserClassname</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>parserClassname</name> <operator>=</operator> <call><name><name>XMLResourceDescriptor</name><operator>.</operator><name>getXMLParserClassName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>domImpl</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(
                    <argument><expr><literal type="string">"Unspecified transcoding hints: KEY_DOM_IMPLEMENTATION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>namespaceURI</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(
                <argument><expr><literal type="string">"Unspecified transcoding hints: KEY_DOCUMENT_ELEMENT_NAMESPACE_URI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>documentElement</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(
                    <argument><expr><literal type="string">"Unspecified transcoding hints: KEY_DOCUMENT_ELEMENT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// parse the XML document</comment>
            <decl_stmt><decl><type><name>DocumentFactory</name></type> <name>f</name> <init>= <expr><call><name>createDocumentFactory</name><argument_list>(<argument><expr><name>domImpl</name></expr></argument>, <argument><expr><name>parserClassname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>xmlParserValidating</name> <init>= <expr><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_XML_PARSER_VALIDATING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>validating</name> <init>= <expr><name>xmlParserValidating</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>Boolean</name><operator>)</operator> <name>xmlParserValidating</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setValidating</name></name><argument_list>(<argument><expr><name>validating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>,
                                                <argument><expr><name>documentElement</name></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>,
                                                <argument><expr><name>documentElement</name></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>getXMLReader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>,
                                                <argument><expr><name>documentElement</name></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>input</name><operator>.</operator><name>getXMLReader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>document</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>,
                                                <argument><expr><name>documentElement</name></expr></argument>,
                                                <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DOMException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// call the dedicated transcode method</comment>
        <if_stmt><if>if <condition>(<expr><name>document</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>transcode</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// at this time, all TranscoderExceptions are fatal errors</comment>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates the &lt;code&gt;DocumentFactory&lt;/code&gt; used to create the DOM
     * tree. Override this method if you have to use another
     * implementation of the &lt;code&gt;DocumentFactory&lt;/code&gt; (ie. for SVG,
     * you have to use the &lt;code&gt;SAXSVGDocumentFactory&lt;/code&gt;).
     *
     * @param domImpl the DOM Implementation to use
     * @param parserClassname the XML parser classname
     */</comment>
    <function><type><specifier>protected</specifier> <name>DocumentFactory</name></type> <name>createDocumentFactory</name><parameter_list>(<parameter><decl><type><name>DOMImplementation</name></type> <name>domImpl</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>parserClassname</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SAXDocumentFactory</name><argument_list>(<argument><expr><name>domImpl</name></expr></argument>, <argument><expr><name>parserClassname</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified Document in the specified output.
     *
     * @param document the document to transcode
     * @param uri the uri of the document or null if any
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>,
                                      <parameter><decl><type><name>String</name></type> <name>uri</name></decl></parameter>,
                                      <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws>;</function_decl>

    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * XML parser classname key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_XML_PARSER_CLASSNAME&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Yes&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the XML parser classname to use.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_XML_PARSER_CLASSNAME</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The validation mode of the XML parser.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_XML_PARSER_VALIDATING&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Boolean&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;false&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;No&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the validation mode of the XML parser.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_XML_PARSER_VALIDATING</name>
        <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Document element key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_DOCUMENT_ELEMENT&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Yes&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the qualified name of the document
     *       type to be created.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DOCUMENT_ELEMENT</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Document element namespace URI key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_DOCUMENT_ELEMENT_NAMESPACE_URI&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Yes&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the namespace URI of the document
     *       element.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DOCUMENT_ELEMENT_NAMESPACE_URI</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * DOM Implementation key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_DOM_IMPLEMENTATION&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;String&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;null&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Yes&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the DOM Implementation to use.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DOM_IMPLEMENTATION</name>
        <init>= <expr><operator>new</operator> <call><name>DOMImplementationKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>


</unit>
