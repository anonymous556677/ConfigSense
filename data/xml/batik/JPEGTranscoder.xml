<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/image/JPEGTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>ext</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>spi</name><operator>.</operator><name>ImageWriterRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>image</name><operator>.</operator><name>resources</name><operator>.</operator><name>Messages</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is an &lt;code&gt;ImageTranscoder&lt;/code&gt; that produces a JPEG image.
 *
 * @author &lt;a href="mailto:Thierry.Kormann@sophia.inria.fr"&gt;Thierry Kormann&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>JPEGTranscoder</name> <super_list><extends>extends <super><name>ImageTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new transcoder that produces jpeg images.
     */</comment>
    <constructor><specifier>public</specifier> <name>JPEGTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ImageTranscoder</name><operator>.</operator><name>KEY_BACKGROUND_COLOR</name></name></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new ARGB image with the specified dimension.
     * @param width the image width in pixels
     * @param height the image height in pixels
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createImage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_RGB</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the specified image to the specified output.
     * @param img the image to write
     * @param output the output where to store the image
     * @throws TranscoderException if an error occured while storing the image
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeImage</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>ostream</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// The outputstream wrapper protects the JPEG encoder from</comment>
        <comment type="line">// exceptions due to stream closings.  If it gets an exception</comment>
        <comment type="line">// it nulls out the stream and just ignores any future calls.</comment>
        <expr_stmt><expr><name>ostream</name> <operator>=</operator> <operator>new</operator> <call><name>OutputStreamWrapper</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_QUALITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>quality</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_QUALITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>TranscoderException</name></type> <name>te</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>te</name> <operator>=</operator> <operator>new</operator> <call><name>TranscoderException</name>
                    <argument_list>(<argument><expr><call><name><name>Messages</name><operator>.</operator><name>formatMessage</name></name><argument_list>(<argument><expr><literal type="string">"jpeg.unspecifiedQuality"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>quality</name> <operator>=</operator> <literal type="number">0.75f</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>ImageWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>ImageWriterRegistry</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getWriterFor</name><argument_list>(<argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ImageWriterParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>ImageWriterParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setJPEGQuality</name></name><argument_list>(<argument><expr><name>quality</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>PixSzMM</name> <init>= <expr><call><name><name>userAgent</name><operator>.</operator><name>getPixelUnitToMillimeter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>PixSzInch</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">25.4</literal> <operator>/</operator> <name>PixSzMM</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setResolution</name></name><argument_list>(<argument><expr><name>PixSzInch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>writeImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ostream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="line">// --------------------------------------------------------------------</comment>
    <comment type="line">// Keys definition</comment>
    <comment type="line">// --------------------------------------------------------------------</comment>

    <comment type="block" format="javadoc">/**
     * The encoder quality factor key.
     * &lt;table summary="" border="0" cellspacing="0" cellpadding="1"&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Key:&lt;/th&gt;
     *     &lt;td valign="top"&gt;KEY_QUALITY&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Value:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Float (between 0 and 1)&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Default:&lt;/th&gt;
     *     &lt;td valign="top"&gt;0.75 (lossy)&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Required:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Recommended&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;th valign="top" align="right"&gt;Description:&lt;/th&gt;
     *     &lt;td valign="top"&gt;Specify the JPEG image encoding quality.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_QUALITY</name>
        <init>= <expr><operator>new</operator> <call><name>QualityKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A transcoding Key represented the JPEG image quality.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>QualityKey</name> <super_list><extends>extends <super><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></super></extends></super_list> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>Float</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>(</operator><name>q</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;=</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     *  This class will never throw an IOException, instead it eats
     * them and then ignores any future calls to it's interface.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>OutputStreamWrapper</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * Constructs a wrapper around &lt;code&gt;os&lt;/code&gt; that will not throw
         * IOExceptions.
         * &lt;@param os&gt;The Stream to wrap.
         */</comment>
        <constructor><name>OutputStreamWrapper</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>os</name></name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>  <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
