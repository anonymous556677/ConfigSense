<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/svg2svg/SVGTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>svg2svg</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Writer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>dom</name><operator>.</operator><name>util</name><operator>.</operator><name>DOMUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>AbstractTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>ErrorHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscodingHints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>BooleanKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>IntegerKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>keys</name><operator>.</operator><name>StringKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class is a trancoder from SVG to SVG.
 *
 * @author &lt;a href="mailto:stephane@hillion.org"&gt;Stephane Hillion&lt;/a&gt;
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>SVGTranscoder</name> <super_list><extends>extends <super><name>AbstractTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The default error handler.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ErrorHandler</name></type> <name>DEFAULT_ERROR_HANDLER</name> <init>= <expr><operator>new</operator> <class><super><name>ErrorHandler</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fatalError</name><parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>warning</name><parameter_list>(<parameter><decl><type><name>TranscoderException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
            <comment type="line">// Do nothing</comment>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the newline character sequence.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_NEWLINE</name> <init>= <expr><operator>new</operator> <call><name>NewlineKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The "\r" newline value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NewlineValue</name></type> <name>VALUE_NEWLINE_CR</name> <init>= <expr><operator>new</operator> <call><name>NewlineValue</name><argument_list>(<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The "\r\n" newline value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NewlineValue</name></type> <name>VALUE_NEWLINE_CR_LF</name> <init>= <expr><operator>new</operator> <call><name>NewlineValue</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The "\n" newline value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NewlineValue</name></type> <name>VALUE_NEWLINE_LF</name> <init>= <expr><operator>new</operator> <call><name>NewlineValue</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify whether to format the input.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_FORMAT</name> <init>= <expr><operator>new</operator> <call><name>BooleanKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The value to turn on formatting.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Boolean</name></type> <name>VALUE_FORMAT_ON</name> <init>= <expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The value to turn off formatting.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Boolean</name></type> <name>VALUE_FORMAT_OFF</name> <init>= <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the tabulation width.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_TABULATION_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the document width.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DOCUMENT_WIDTH</name>
        <init>= <expr><operator>new</operator> <call><name>IntegerKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the doctype option.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_DOCTYPE</name>
        <init>= <expr><operator>new</operator> <call><name>DoctypeKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The doctype value to change the declaration.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DoctypeValue</name></type> <name>VALUE_DOCTYPE_CHANGE</name> <init>=
        <expr><operator>new</operator> <call><name>DoctypeValue</name><argument_list>(<argument><expr><name><name>PrettyPrinter</name><operator>.</operator><name>DOCTYPE_CHANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The doctype value to remove the declaration.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DoctypeValue</name></type> <name>VALUE_DOCTYPE_REMOVE</name> <init>=
        <expr><operator>new</operator> <call><name>DoctypeValue</name><argument_list>(<argument><expr><name><name>PrettyPrinter</name><operator>.</operator><name>DOCTYPE_REMOVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The doctype value to keep unchanged the declaration.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DoctypeValue</name></type> <name>VALUE_DOCTYPE_KEEP_UNCHANGED</name> <init>=
        <expr><operator>new</operator> <call><name>DoctypeValue</name><argument_list>(<argument><expr><name><name>PrettyPrinter</name><operator>.</operator><name>DOCTYPE_KEEP_UNCHANGED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the public id.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_PUBLIC_ID</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the system id.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_SYSTEM_ID</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The key to specify the XML declaration option.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></type> <name>KEY_XML_DECLARATION</name>
        <init>= <expr><operator>new</operator> <call><name>StringKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new SVGTranscoder.
     */</comment>
    <constructor><specifier>public</specifier> <name>SVGTranscoder</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setErrorHandler</name><argument_list>(<argument><expr><name>DEFAULT_ERROR_HANDLER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified input in the specified output.
     * @param input the input to transcode
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getReader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Writer</name></type> <name>w</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Document</name></type> <name>d</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Reader or Document expected"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>( <argument><expr><literal type="number">1024</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>DOMUtilities</name><operator>.</operator><name>writeDocument</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>IOException</name></type> <name>ioEx</name></decl></parameter> )</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"IO:"</literal> <operator>+</operator> <call><name><name>ioEx</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><call><name><name>sw</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Writer expected"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>prettyPrint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Pretty print the given reader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>prettyPrint</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Writer</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>PrettyPrinter</name></type> <name>pp</name> <init>= <expr><operator>new</operator> <call><name>PrettyPrinter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NewlineValue</name></type> <name>nlv</name> <init>= <expr><operator>(</operator><name>NewlineValue</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_NEWLINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nlv</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setNewline</name></name><argument_list>(<argument><expr><call><name><name>nlv</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Boolean</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_FORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setFormat</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_TABULATION_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setTabulationWidth</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOCUMENT_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setDocumentWidth</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>DoctypeValue</name></type> <name>dtv</name> <init>= <expr><operator>(</operator><name>DoctypeValue</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_DOCTYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dtv</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setDoctypeOption</name></name><argument_list>(<argument><expr><call><name><name>dtv</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_PUBLIC_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setPublicId</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_SYSTEM_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setSystemId</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator><call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_XML_DECLARATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>setXMLDeclaration</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>getErrorHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>fatalError</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * To represent a newline key.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>NewlineKey</name> <super_list><extends>extends <super><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></super></extends></super_list> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>v</name> <operator>instanceof</operator> <name>NewlineValue</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * To represent a newline value.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>NewlineValue</name> <block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
        <constructor><specifier>protected</specifier> <name>NewlineValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * To represent a doctype key.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DoctypeKey</name> <super_list><extends>extends <super><name><name>TranscodingHints</name><operator>.</operator><name>Key</name></name></super></extends></super_list> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>v</name> <operator>instanceof</operator> <name>DoctypeValue</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * To represent a doctype value.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>DoctypeValue</name> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
        <constructor><specifier>protected</specifier> <name>DoctypeValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
