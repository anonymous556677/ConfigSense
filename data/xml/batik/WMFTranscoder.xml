<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/xmlgraphics-batik/batik-transcoder/src/main/java/org/apache/batik/transcoder/wmf/tosvg/WMFTranscoder.java"><comment type="block">/*

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>wmf</name><operator>.</operator><name>tosvg</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>svggen</name><operator>.</operator><name>SVGGraphics2D</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>ToSVGAbstractTranscoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderInput</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>batik</name><operator>.</operator><name>transcoder</name><operator>.</operator><name>TranscoderOutput</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>

<comment type="block" format="javadoc">/** This class implements the &lt;code&gt;Transcoder&lt;/code&gt; interface and
 *  can convert a WMF input document into an SVG document.
 *  &lt;p&gt;This class is copied from
 *  batik org.apache.batik.transcoder.wmf.tosvg.WMFTranscoder class.&lt;/p&gt;
 *  &lt;p&gt;It can use &lt;code&gt;TranscoderInput&lt;/code&gt; that are either a URI
 *  or a &lt;code&gt;InputStream&lt;/code&gt; or a &lt;code&gt;Reader&lt;/code&gt;. The
 *  &lt;code&gt;XMLReader&lt;/code&gt; and &lt;code&gt;Document&lt;/code&gt; &lt;code&gt;TranscoderInput&lt;/code&gt;
 *  types are not supported.&lt;/p&gt;
 *
 *  &lt;p&gt;This transcoder can use &lt;code&gt;TranscoderOutputs&lt;/code&gt; that are
 *  of any type except the &lt;code&gt;XMLFilter&lt;/code&gt; type.&lt;/p&gt;
 *
 *  &lt;p&gt;Corrected bugs from the original class:&lt;/p&gt;
 *  &lt;ul&gt;
 *  &lt;li&gt; Manage images size&lt;/li&gt;
 *  &lt;/ul&gt;
 *  &lt;p&gt;Exemple of use :&lt;/p&gt;
 *  &lt;pre&gt;
 *    WMFTranscoder transcoder = new WMFTranscoder();
 *    try {
 *       TranscoderInput wmf = new TranscoderInput(wmffile.toURL().toString());
 *       FileOutputStream fos = new FileOutputStream(svgFile);
 *       TranscoderOutput svg =
 *           new TranscoderOutput(new OutputStreamWriter(fos, "UTF-8"));
 *       transcoder.transcode(wmf, svg);
 *    } catch (MalformedURLException e){
 *       throw new TranscoderException(e);
 *    } catch (IOException e){
 *       throw new TranscoderException(e);
 *    }
 *  &lt;/pre&gt;
 *  &lt;p&gt;Several transcoding hints are available for this transcoder :&lt;/p&gt;
 *  KEY_INPUT_WIDTH, KEY_INPUT_HEIGHT, KEY_XOFFSET, KEY_YOFFSET : this Integer values allows to
 *  set the  portion of the image to transcode, defined by the width, height, and offset
 *  of this portion in Metafile units.
 *  &lt;pre&gt;
 *     transcoder.addTranscodingHint(FromWMFTranscoder.KEY_INPUT_WIDTH, Integer.valueOf(input_width));
 *  &lt;/pre&gt;
 *  KEY_WIDTH, KEY_HEIGHT : this Float values allows to force the width and height of the output:
 *  &lt;pre&gt;
 *     transcoder.addTranscodingHint(FromWMFTranscoder.KEY_WIDTH, Float.valueOf(width));
 *  &lt;/pre&gt;
 *
 * @version $Id$
 */</comment>
<class><specifier>public</specifier> class <name>WMFTranscoder</name> <super_list><extends>extends <super><name>ToSVGAbstractTranscoder</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Default constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>WMFTranscoder</name><parameter_list>()</parameter_list><block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Transcodes the specified input in the specified output.
     * @param input the input to transcode
     * @param output the ouput where to transcode
     * @exception TranscoderException if an error occured while transcoding
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>transcode</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>TranscoderOutput</name></type> <name>output</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Extract the input</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>is</name> <init>= <expr><call><name>getCompatibleInput</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Build a RecordStore from the input</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>WMFRecordStore</name></type> <name>currentStore</name> <init>= <expr><operator>new</operator> <call><name>WMFRecordStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>currentStore</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <comment type="line">// determines the width and height of output image</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>wmfwidth</name></decl>;</decl_stmt> <comment type="line">// width in pixels</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>wmfheight</name></decl>;</decl_stmt> <comment type="line">// height in pixels</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>conv</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt> <comment type="line">// conversion factor</comment>

        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_INPUT_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>wmfwidth</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_INPUT_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>wmfheight</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_INPUT_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>wmfwidth</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getWidthPixels</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>wmfheight</name> <operator>=</operator> <call><name><name>currentStore</name><operator>.</operator><name>getHeightPixels</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><name>wmfwidth</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><name>wmfheight</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// change the output width and height if required</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>Float</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>width</name> <operator>/</operator> <name>wmfwidth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <name>height</name> <operator>*</operator> <name>width</name> <operator>/</operator> <name>wmfwidth</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// determine the offset values</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>xOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>yOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_XOFFSET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>xOffset</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_XOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_YOFFSET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>yOffset</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_YOFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set the size and viewBox on the output document</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>sizeFactor</name> <init>= <expr><call><name><name>currentStore</name><operator>.</operator><name>getUnitsToPixels</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>conv</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>vpX</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name><name>currentStore</name><operator>.</operator><name>getVpX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>sizeFactor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>vpY</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name><name>currentStore</name><operator>.</operator><name>getVpY</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>sizeFactor</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>vpW</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>vpH</name></decl>;</decl_stmt>
        <comment type="line">// if we took only a part of the image, we use its dimension for computing</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>hints</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_INPUT_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>vpW</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_INPUT_WIDTH</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>conv</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>vpH</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>hints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>KEY_INPUT_HEIGHT</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>conv</name><operator>)</operator></expr>;</expr_stmt>
        <comment type="line">// else we took the whole image dimension</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>vpW</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name><name>currentStore</name><operator>.</operator><name>getWidthUnits</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>sizeFactor</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>vpH</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name><name>currentStore</name><operator>.</operator><name>getHeightUnits</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>sizeFactor</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Build a painter for the RecordStore</comment>
        <decl_stmt><decl><type><name>WMFPainter</name></type> <name>painter</name> <init>= <expr><operator>new</operator> <call><name>WMFPainter</name><argument_list>(<argument><expr><name>currentStore</name></expr></argument>, <argument><expr><name>xOffset</name></expr></argument>, <argument><expr><name>yOffset</name></expr></argument>, <argument><expr><name>conv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Use SVGGraphics2D to generate SVG content</comment>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>createDocument</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>svgGenerator</name> <operator>=</operator> <operator>new</operator> <call><name>SVGGraphics2D</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" format="javadoc">/** set precision
         ** otherwise Ellipses aren't working (for example) (because of Decimal format
         * modifications ins SVGGenerator Context
         */</comment>
        <expr_stmt><expr><call><name><name>svgGenerator</name><operator>.</operator><name>getGeneratorContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPrecision</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>paint</name></name><argument_list>(<argument><expr><name>svgGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>svgGenerator</name><operator>.</operator><name>setSVGCanvasSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><name>vpW</name></expr></argument>, <argument><expr><name>vpH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Element</name></type> <name>svgRoot</name> <init>= <expr><call><name><name>svgGenerator</name><operator>.</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>svgRoot</name><operator>.</operator><name>setAttributeNS</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>SVG_VIEW_BOX_ATTRIBUTE</name></expr></argument>,
                                <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>( <argument><expr><name>vpX</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name>vpY</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator>
                               <name>vpW</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <name>vpH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now, write the SVG content to the output</comment>
        <expr_stmt><expr><call><name>writeSVGToOutput</name><argument_list>(<argument><expr><name>svgGenerator</name></expr></argument>, <argument><expr><name>svgRoot</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks that the input is one of URI or an &lt;code&gt;InputStream&lt;/code&gt;
     * returns it as a DataInputStream
     */</comment>
    <function><type><specifier>private</specifier> <name>DataInputStream</name></type> <name>getCompatibleInput</name><parameter_list>(<parameter><decl><type><name>TranscoderInput</name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// Cannot deal with null input</comment>
        <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>( <argument><expr><name>ERROR_NULL_INPUT</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Can deal with InputStream</comment>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Can deal with URI</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>getURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <try>try<block>{<block_content>
                <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
                <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>fatalError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>( <argument><expr><name>ERROR_INCOMPATIBLE_INPUT_TYPE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WMF_EXTENSION</name> <init>= <expr><literal type="string">".wmf"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SVG_EXTENSION</name> <init>= <expr><literal type="string">".svg"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Unit testing : Illustrates how the transcoder might be used.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TranscoderException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Usage : WMFTranscoder.main &lt;file 1&gt; ... &lt;file n&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>WMFTranscoder</name></type> <name>transcoder</name> <init>= <expr><operator>new</operator> <call><name>WMFTranscoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nFiles</name> <init>= <expr><name><name>args</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>fileName</name> <range>: <expr><name>args</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fileName</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>endsWith</name><argument_list>(<argument><expr><name>WMF_EXTENSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>fileName</name> <operator>+</operator> <literal type="string">" does not have the "</literal> <operator>+</operator> <name>WMF_EXTENSION</name> <operator>+</operator> <literal type="string">" extension. It is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Processing : "</literal> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>outputFileName</name> <init>= <expr><call><name><name>fileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>fileName</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>WMF_EXTENSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>SVG_EXTENSION</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>inputFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>outputFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>outputFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>TranscoderInput</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>TranscoderInput</name><argument_list>(<argument><expr><call><name><name>inputFile</name><operator>.</operator><name>toURI</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toURL</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TranscoderOutput</name></type> <name>output</name> <init>= <expr><operator>new</operator> <call><name>TranscoderOutput</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>transcoder</name><operator>.</operator><name>transcode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>TranscoderException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">".... Done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
