Jar_name_x,function,option,Method_short,class_name,xml_path,Method_body,Method,Jar_name_y
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getExtension,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String getExtension(){
        return extension;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getExtension(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getExtension,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String getExtension(){
        return extension;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getExtension(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,computeSources,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"/**
     * Populates a vector with the set of SVG files from the
     * srcDir if it is not null and with the sources (files or URLs)
     * if any.
     */
protected List computeSources() throws SVGConverterException{
        List sources = new ArrayList();

        // Check that at least one source has been specified.
        if (this.sources == null){
            throw new SVGConverterException(ERROR_NO_SOURCES_SPECIFIED);
        }

        int n = this.sources.size();
        for (Object source : this.sources) {
            String sourceString = (String) source;
            File file = new File(sourceString);
            if (file.exists()) {
                sources.add(new SVGConverterFileSource(file));
            } else {
                String[] fileNRef = getFileNRef(sourceString);
                file = new File(fileNRef[0]);
                if (file.exists()) {
                    sources.add(new SVGConverterFileSource(file, fileNRef[1]));
                } else {
                    sources.add(new SVGConverterURLSource(sourceString));
                }
            }
        }

        return sources;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:computeSources(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDst,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public File getDst(){
        return dst;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDst(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getTranscoder,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"/**
     * Returns a transcoder object of the result image type.
     *
     * @return Transcoder object or <code>null</code> if there isn't a proper transcoder.
     */
protected Transcoder getTranscoder(){
        switch(code) {
            case PNG_CODE:
                return new PNGTranscoder();
            case JPEG_CODE:
                return new JPEGTranscoder();
            case TIFF_CODE:
                return new TIFFTranscoder();
            case PDF_CODE:
                try {
                    Class pdfClass = Class.forName(""org.apache.fop.svg.PDFTranscoder"");
                    return (Transcoder)pdfClass.getDeclaredConstructor().newInstance();
                } catch(Exception e) {
                    return null;
                }
            default:
                return null;
        }

    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getTranscoder(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,toString,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String toString(){
        return type;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:toString(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,computeTranscodingHints,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"// -----------------------------------------------------------------------
//   Internal methods
// -----------------------------------------------------------------------
/**
     * Computes the set of transcoding hints to use for the operation
     */
protected Map computeTranscodingHints(){
        Map map = new HashMap();

        // Set AOI. ----------------------------------------------------------
        if (area != null) {
            map.put(ImageTranscoder.KEY_AOI, area);
        }

        // Set image quality. ------------------------------------------------
        if (quality > 0) {
            map.put(JPEGTranscoder.KEY_QUALITY, this.quality);
        }

        // Set image indexed. ------------------------------------------------
        if (indexed != -1) {
            map.put(PNGTranscoder.KEY_INDEXED, indexed);
        }

        // Set image background color -----------------------------------------
        if (backgroundColor != null){
            map.put(ImageTranscoder.KEY_BACKGROUND_COLOR, backgroundColor);
        }

        // Set image height and width. ----------------------------------------
        if (height > 0) {
            map.put(ImageTranscoder.KEY_HEIGHT, this.height);
        }
        if (width > 0){
            map.put(ImageTranscoder.KEY_WIDTH, this.width);
        }

        // Set maximum height and width ---------------------------------------
        if (maxHeight > 0) {
            map.put(ImageTranscoder.KEY_MAX_HEIGHT, this.maxHeight);
        }
        if (maxWidth > 0){
            map.put(ImageTranscoder.KEY_MAX_WIDTH, this.maxWidth);
        }

        // Set CSS Media
        if (mediaType != null){
            map.put(ImageTranscoder.KEY_MEDIA, mediaType);
        }

        // Set default font-family
        if (defaultFontFamily != null) {
            map.put(ImageTranscoder.KEY_DEFAULT_FONT_FAMILY, defaultFontFamily);
        }

        // Set alternateStylesheet
        if (alternateStylesheet != null){
            map.put(ImageTranscoder.KEY_ALTERNATE_STYLESHEET, alternateStylesheet);
        }

        // Set user stylesheet
        if (userStylesheet != null) {
            String userStylesheetURL;
            try {
                URL userDir = new File(System.getProperty(""user.dir"")).toURI().toURL();
                userStylesheetURL = new ParsedURL(userDir, userStylesheet).toString();
            } catch (Exception e) {
                userStylesheetURL = userStylesheet;
            }
            map.put(ImageTranscoder.KEY_USER_STYLESHEET_URI, userStylesheetURL);
        }

        // Set the user language
        if (language != null){
            map.put(ImageTranscoder.KEY_LANGUAGE, language);
        }

        // Sets the millimeters per pixel
        if (pixelUnitToMillimeter > 0){
            map.put(ImageTranscoder.KEY_PIXEL_UNIT_TO_MILLIMETER,
                    pixelUnitToMillimeter);
        }

        // Set validation
        if (validate){
            map.put(ImageTranscoder.KEY_XML_PARSER_VALIDATING, Boolean.TRUE);
        }

        // Set onload
        if (executeOnload) {
            map.put(ImageTranscoder.KEY_EXECUTE_ONLOAD, Boolean.TRUE);
        }

        // Set snapshot time
        if (!Float.isNaN(snapshotTime)) {
            map.put(ImageTranscoder.KEY_SNAPSHOT_TIME, snapshotTime);
        }

        // Set allowed scripts
        if (allowedScriptTypes != null) {
            map.put(ImageTranscoder.KEY_ALLOWED_SCRIPT_TYPES, allowedScriptTypes);
        }

        // Set constrain script origin
        if (!constrainScriptOrigin) {
            map.put(ImageTranscoder.KEY_CONSTRAIN_SCRIPT_ORIGIN, Boolean.FALSE);
        }

        if (!allowExternalResources) {
            map.put(ImageTranscoder.KEY_ALLOW_EXTERNAL_RESOURCES, Boolean.FALSE);
        }

        return map;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:computeTranscodingHints(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,computeSources,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"/**
     * Populates a vector with the set of SVG files from the
     * srcDir if it is not null and with the sources (files or URLs)
     * if any.
     */
protected List computeSources() throws SVGConverterException{
        List sources = new ArrayList();

        // Check that at least one source has been specified.
        if (this.sources == null){
            throw new SVGConverterException(ERROR_NO_SOURCES_SPECIFIED);
        }

        int n = this.sources.size();
        for (Object source : this.sources) {
            String sourceString = (String) source;
            File file = new File(sourceString);
            if (file.exists()) {
                sources.add(new SVGConverterFileSource(file));
            } else {
                String[] fileNRef = getFileNRef(sourceString);
                file = new File(fileNRef[0]);
                if (file.exists()) {
                    sources.add(new SVGConverterFileSource(file, fileNRef[1]));
                } else {
                    sources.add(new SVGConverterURLSource(sourceString));
                }
            }
        }

        return sources;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:computeSources(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDst,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public File getDst(){
        return dst;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDst(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getTranscoder,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"/**
     * Returns a transcoder object of the result image type.
     *
     * @return Transcoder object or <code>null</code> if there isn't a proper transcoder.
     */
protected Transcoder getTranscoder(){
        switch(code) {
            case PNG_CODE:
                return new PNGTranscoder();
            case JPEG_CODE:
                return new JPEGTranscoder();
            case TIFF_CODE:
                return new TIFFTranscoder();
            case PDF_CODE:
                try {
                    Class pdfClass = Class.forName(""org.apache.fop.svg.PDFTranscoder"");
                    return (Transcoder)pdfClass.getDeclaredConstructor().newInstance();
                } catch(Exception e) {
                    return null;
                }
            default:
                return null;
        }

    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getTranscoder(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,toString,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String toString(){
        return type;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:toString(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,computeTranscodingHints,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"// -----------------------------------------------------------------------
//   Internal methods
// -----------------------------------------------------------------------
/**
     * Computes the set of transcoding hints to use for the operation
     */
protected Map computeTranscodingHints(){
        Map map = new HashMap();

        // Set AOI. ----------------------------------------------------------
        if (area != null) {
            map.put(ImageTranscoder.KEY_AOI, area);
        }

        // Set image quality. ------------------------------------------------
        if (quality > 0) {
            map.put(JPEGTranscoder.KEY_QUALITY, this.quality);
        }

        // Set image indexed. ------------------------------------------------
        if (indexed != -1) {
            map.put(PNGTranscoder.KEY_INDEXED, indexed);
        }

        // Set image background color -----------------------------------------
        if (backgroundColor != null){
            map.put(ImageTranscoder.KEY_BACKGROUND_COLOR, backgroundColor);
        }

        // Set image height and width. ----------------------------------------
        if (height > 0) {
            map.put(ImageTranscoder.KEY_HEIGHT, this.height);
        }
        if (width > 0){
            map.put(ImageTranscoder.KEY_WIDTH, this.width);
        }

        // Set maximum height and width ---------------------------------------
        if (maxHeight > 0) {
            map.put(ImageTranscoder.KEY_MAX_HEIGHT, this.maxHeight);
        }
        if (maxWidth > 0){
            map.put(ImageTranscoder.KEY_MAX_WIDTH, this.maxWidth);
        }

        // Set CSS Media
        if (mediaType != null){
            map.put(ImageTranscoder.KEY_MEDIA, mediaType);
        }

        // Set default font-family
        if (defaultFontFamily != null) {
            map.put(ImageTranscoder.KEY_DEFAULT_FONT_FAMILY, defaultFontFamily);
        }

        // Set alternateStylesheet
        if (alternateStylesheet != null){
            map.put(ImageTranscoder.KEY_ALTERNATE_STYLESHEET, alternateStylesheet);
        }

        // Set user stylesheet
        if (userStylesheet != null) {
            String userStylesheetURL;
            try {
                URL userDir = new File(System.getProperty(""user.dir"")).toURI().toURL();
                userStylesheetURL = new ParsedURL(userDir, userStylesheet).toString();
            } catch (Exception e) {
                userStylesheetURL = userStylesheet;
            }
            map.put(ImageTranscoder.KEY_USER_STYLESHEET_URI, userStylesheetURL);
        }

        // Set the user language
        if (language != null){
            map.put(ImageTranscoder.KEY_LANGUAGE, language);
        }

        // Sets the millimeters per pixel
        if (pixelUnitToMillimeter > 0){
            map.put(ImageTranscoder.KEY_PIXEL_UNIT_TO_MILLIMETER,
                    pixelUnitToMillimeter);
        }

        // Set validation
        if (validate){
            map.put(ImageTranscoder.KEY_XML_PARSER_VALIDATING, Boolean.TRUE);
        }

        // Set onload
        if (executeOnload) {
            map.put(ImageTranscoder.KEY_EXECUTE_ONLOAD, Boolean.TRUE);
        }

        // Set snapshot time
        if (!Float.isNaN(snapshotTime)) {
            map.put(ImageTranscoder.KEY_SNAPSHOT_TIME, snapshotTime);
        }

        // Set allowed scripts
        if (allowedScriptTypes != null) {
            map.put(ImageTranscoder.KEY_ALLOWED_SCRIPT_TYPES, allowedScriptTypes);
        }

        // Set constrain script origin
        if (!constrainScriptOrigin) {
            map.put(ImageTranscoder.KEY_CONSTRAIN_SCRIPT_ORIGIN, Boolean.FALSE);
        }

        if (!allowExternalResources) {
            map.put(ImageTranscoder.KEY_ALLOW_EXTERNAL_RESOURCES, Boolean.FALSE);
        }

        return map;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:computeTranscodingHints(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getExtension,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String getExtension(){
        return extension;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getExtension(),batik-svgrasterizer-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getDestinationType,SVGConverter,../data/xml/batik_call_methods/SVGConverter.xml,"
public DestinationType getDestinationType(){
        return destinationType;
    }

    ",(M)org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),batik-all-1.14
batik-all-1.14,org.apache.batik.apps.rasterizer.SVGConverter:getDestinationType(),DESTINATION_TYPE,getExtension,DestinationType,../data/xml/batik_call_methods/DestinationType.xml,"
public String getExtension(){
        return extension;
    }

    ",(M)org.apache.batik.apps.rasterizer.DestinationType:getExtension(),batik-all-1.14
