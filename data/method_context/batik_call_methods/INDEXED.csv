Jar_name_x,function,option,Method_short,class_name,xml_path,Method_body,Method,Jar_name_y
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setBackgroundRGB,PNGEncodeParam$RGB,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
         * Sets the RGB value of the suggested background color.
         * The <code>rgb</code> parameter should have 3 entries.
         *
         * <p> The 'bKGD' chunk will encode this information.
         */
public void setBackgroundRGB(int[] rgb) {
            if (rgb.length != 3) {
                throw new RuntimeException();
            }
            backgroundRGB = rgb;
            backgroundSet = true;
        }

        ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB:setBackgroundRGB(int[]),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setGamma,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the file gamma value for the image.
     *
     * <p> The 'gAMA' chunk will encode this information.
     */
public void setGamma(float gamma) {
        this.gamma = gamma;
        gammaSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setGamma(float),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setChromaticity,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the white point and primary chromaticities in CIE (x, y)
     * space.
     *
     * <p> The <code>chromaticity</code> parameter should be a
     * <code>float</code> array of length 8 containing the white point
     * X and Y, red X and Y, green X and Y, and blue X and Y values in
     * order.
     *
     * <p> The 'cHRM' chunk will encode this information.
     */
public void setChromaticity(float[] chromaticity) {
        if (chromaticity.length != 8) {
            throw new IllegalArgumentException();
        }
        this.chromaticity = chromaticity.clone();
        chromaticitySet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setChromaticity(float whitePointX, float whitePointY,
                                float redX, float redY,
                                float greenX, float greenY,
                                float blueX, float blueY) {
        float[] chroma = new float[8];
        chroma[0] = whitePointX;
        chroma[1] = whitePointY;
        chroma[2] = redX;
        chroma[3] = redY;
        chroma[4] = greenX;
        chroma[5] = greenY;
        chroma[6] = blueX;
        chroma[7] = blueY;
        setChromaticity(chroma);
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setChromaticity(float[]),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setSRGBIntent,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the sRGB rendering intent to be stored with this image.
     * The legal values are 0 = Perceptual, 1 = Relative Colorimetric,
     * 2 = Saturation, and 3 = Absolute Colorimetric.  Refer to the
     * PNG specification for information on these values.
     *
     * <p> The 'sRGB' chunk will encode this information.
     */
public void setSRGBIntent(int SRGBIntent) {
        this.SRGBIntent = SRGBIntent;
        SRGBIntentSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setSRGBIntent(int),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setPhysicalDimension,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the physical dimension information to be stored with this
     * image.  The physicalDimension parameter should be a 3-entry
     * array containing the number of pixels per unit in the X
     * direction, the number of pixels per unit in the Y direction,
     * and the unit specifier (0 = unknown, 1 = meters).
     *
     * <p> The 'pHYS' chunk will encode this information.
     */
public void setPhysicalDimension(int[] physicalDimension) {
        this.physicalDimension = physicalDimension.clone();
        physicalDimensionSet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setPhysicalDimension(int xPixelsPerUnit,
                                     int yPixelsPerUnit,
                                     int unitSpecifier) {
        int[] pd = new int[3];
        pd[0] = xPixelsPerUnit;
        pd[1] = yPixelsPerUnit;
        pd[2] = unitSpecifier;

        setPhysicalDimension(pd);
    }

    ","(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setPhysicalDimension(int,int,int)",batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setBackgroundRGB,PNGEncodeParam$RGB,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
         * Sets the RGB value of the suggested background color.
         * The <code>rgb</code> parameter should have 3 entries.
         *
         * <p> The 'bKGD' chunk will encode this information.
         */
public void setBackgroundRGB(int[] rgb) {
            if (rgb.length != 3) {
                throw new RuntimeException();
            }
            backgroundRGB = rgb;
            backgroundSet = true;
        }

        ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB:setBackgroundRGB(int[]),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setGamma,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the file gamma value for the image.
     *
     * <p> The 'gAMA' chunk will encode this information.
     */
public void setGamma(float gamma) {
        this.gamma = gamma;
        gammaSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setGamma(float),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setChromaticity,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the white point and primary chromaticities in CIE (x, y)
     * space.
     *
     * <p> The <code>chromaticity</code> parameter should be a
     * <code>float</code> array of length 8 containing the white point
     * X and Y, red X and Y, green X and Y, and blue X and Y values in
     * order.
     *
     * <p> The 'cHRM' chunk will encode this information.
     */
public void setChromaticity(float[] chromaticity) {
        if (chromaticity.length != 8) {
            throw new IllegalArgumentException();
        }
        this.chromaticity = chromaticity.clone();
        chromaticitySet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setChromaticity(float whitePointX, float whitePointY,
                                float redX, float redY,
                                float greenX, float greenY,
                                float blueX, float blueY) {
        float[] chroma = new float[8];
        chroma[0] = whitePointX;
        chroma[1] = whitePointY;
        chroma[2] = redX;
        chroma[3] = redY;
        chroma[4] = greenX;
        chroma[5] = greenY;
        chroma[6] = blueX;
        chroma[7] = blueY;
        setChromaticity(chroma);
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setChromaticity(float[]),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setSRGBIntent,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the sRGB rendering intent to be stored with this image.
     * The legal values are 0 = Perceptual, 1 = Relative Colorimetric,
     * 2 = Saturation, and 3 = Absolute Colorimetric.  Refer to the
     * PNG specification for information on these values.
     *
     * <p> The 'sRGB' chunk will encode this information.
     */
public void setSRGBIntent(int SRGBIntent) {
        this.SRGBIntent = SRGBIntent;
        SRGBIntentSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setSRGBIntent(int),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setPhysicalDimension,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the physical dimension information to be stored with this
     * image.  The physicalDimension parameter should be a 3-entry
     * array containing the number of pixels per unit in the X
     * direction, the number of pixels per unit in the Y direction,
     * and the unit specifier (0 = unknown, 1 = meters).
     *
     * <p> The 'pHYS' chunk will encode this information.
     */
public void setPhysicalDimension(int[] physicalDimension) {
        this.physicalDimension = physicalDimension.clone();
        physicalDimensionSet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setPhysicalDimension(int xPixelsPerUnit,
                                     int yPixelsPerUnit,
                                     int unitSpecifier) {
        int[] pd = new int[3];
        pd[0] = xPixelsPerUnit;
        pd[1] = yPixelsPerUnit;
        pd[2] = unitSpecifier;

        setPhysicalDimension(pd);
    }

    ","(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setPhysicalDimension(int,int,int)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setBackgroundRGB,PNGEncodeParam$RGB,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
         * Sets the RGB value of the suggested background color.
         * The <code>rgb</code> parameter should have 3 entries.
         *
         * <p> The 'bKGD' chunk will encode this information.
         */
public void setBackgroundRGB(int[] rgb) {
            if (rgb.length != 3) {
                throw new RuntimeException();
            }
            backgroundRGB = rgb;
            backgroundSet = true;
        }

        ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB:setBackgroundRGB(int[]),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setGamma,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the file gamma value for the image.
     *
     * <p> The 'gAMA' chunk will encode this information.
     */
public void setGamma(float gamma) {
        this.gamma = gamma;
        gammaSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setGamma(float),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setChromaticity,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the white point and primary chromaticities in CIE (x, y)
     * space.
     *
     * <p> The <code>chromaticity</code> parameter should be a
     * <code>float</code> array of length 8 containing the white point
     * X and Y, red X and Y, green X and Y, and blue X and Y values in
     * order.
     *
     * <p> The 'cHRM' chunk will encode this information.
     */
public void setChromaticity(float[] chromaticity) {
        if (chromaticity.length != 8) {
            throw new IllegalArgumentException();
        }
        this.chromaticity = chromaticity.clone();
        chromaticitySet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setChromaticity(float whitePointX, float whitePointY,
                                float redX, float redY,
                                float greenX, float greenY,
                                float blueX, float blueY) {
        float[] chroma = new float[8];
        chroma[0] = whitePointX;
        chroma[1] = whitePointY;
        chroma[2] = redX;
        chroma[3] = redY;
        chroma[4] = greenX;
        chroma[5] = greenY;
        chroma[6] = blueX;
        chroma[7] = blueY;
        setChromaticity(chroma);
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setChromaticity(float[]),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setSRGBIntent,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the sRGB rendering intent to be stored with this image.
     * The legal values are 0 = Perceptual, 1 = Relative Colorimetric,
     * 2 = Saturation, and 3 = Absolute Colorimetric.  Refer to the
     * PNG specification for information on these values.
     *
     * <p> The 'sRGB' chunk will encode this information.
     */
public void setSRGBIntent(int SRGBIntent) {
        this.SRGBIntent = SRGBIntent;
        SRGBIntentSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setSRGBIntent(int),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setPhysicalDimension,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the physical dimension information to be stored with this
     * image.  The physicalDimension parameter should be a 3-entry
     * array containing the number of pixels per unit in the X
     * direction, the number of pixels per unit in the Y direction,
     * and the unit specifier (0 = unknown, 1 = meters).
     *
     * <p> The 'pHYS' chunk will encode this information.
     */
public void setPhysicalDimension(int[] physicalDimension) {
        this.physicalDimension = physicalDimension.clone();
        physicalDimensionSet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setPhysicalDimension(int xPixelsPerUnit,
                                     int yPixelsPerUnit,
                                     int unitSpecifier) {
        int[] pd = new int[3];
        pd[0] = xPixelsPerUnit;
        pd[1] = yPixelsPerUnit;
        pd[2] = unitSpecifier;

        setPhysicalDimension(pd);
    }

    ","(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setPhysicalDimension(int,int,int)",batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setBackgroundRGB,PNGEncodeParam$RGB,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
         * Sets the RGB value of the suggested background color.
         * The <code>rgb</code> parameter should have 3 entries.
         *
         * <p> The 'bKGD' chunk will encode this information.
         */
public void setBackgroundRGB(int[] rgb) {
            if (rgb.length != 3) {
                throw new RuntimeException();
            }
            backgroundRGB = rgb;
            backgroundSet = true;
        }

        ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB:setBackgroundRGB(int[]),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setGamma,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the file gamma value for the image.
     *
     * <p> The 'gAMA' chunk will encode this information.
     */
public void setGamma(float gamma) {
        this.gamma = gamma;
        gammaSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setGamma(float),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setChromaticity,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the white point and primary chromaticities in CIE (x, y)
     * space.
     *
     * <p> The <code>chromaticity</code> parameter should be a
     * <code>float</code> array of length 8 containing the white point
     * X and Y, red X and Y, green X and Y, and blue X and Y values in
     * order.
     *
     * <p> The 'cHRM' chunk will encode this information.
     */
public void setChromaticity(float[] chromaticity) {
        if (chromaticity.length != 8) {
            throw new IllegalArgumentException();
        }
        this.chromaticity = chromaticity.clone();
        chromaticitySet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setChromaticity(float whitePointX, float whitePointY,
                                float redX, float redY,
                                float greenX, float greenY,
                                float blueX, float blueY) {
        float[] chroma = new float[8];
        chroma[0] = whitePointX;
        chroma[1] = whitePointY;
        chroma[2] = redX;
        chroma[3] = redY;
        chroma[4] = greenX;
        chroma[5] = greenY;
        chroma[6] = blueX;
        chroma[7] = blueY;
        setChromaticity(chroma);
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setChromaticity(float[]),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setSRGBIntent,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the sRGB rendering intent to be stored with this image.
     * The legal values are 0 = Perceptual, 1 = Relative Colorimetric,
     * 2 = Saturation, and 3 = Absolute Colorimetric.  Refer to the
     * PNG specification for information on these values.
     *
     * <p> The 'sRGB' chunk will encode this information.
     */
public void setSRGBIntent(int SRGBIntent) {
        this.SRGBIntent = SRGBIntent;
        SRGBIntentSet = true;
    }

    ",(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setSRGBIntent(int),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,setPhysicalDimension,PNGEncodeParam,../data/xml/batik_call_methods/PNGEncodeParam.xml,"/**
     * Sets the physical dimension information to be stored with this
     * image.  The physicalDimension parameter should be a 3-entry
     * array containing the number of pixels per unit in the X
     * direction, the number of pixels per unit in the Y direction,
     * and the unit specifier (0 = unknown, 1 = meters).
     *
     * <p> The 'pHYS' chunk will encode this information.
     */
public void setPhysicalDimension(int[] physicalDimension) {
        this.physicalDimension = physicalDimension.clone();
        physicalDimensionSet = true;
    }

    
/**
     * A convenience method that calls the array version.
     */
public void setPhysicalDimension(int xPixelsPerUnit,
                                     int yPixelsPerUnit,
                                     int unitSpecifier) {
        int[] pd = new int[3];
        pd[0] = xPixelsPerUnit;
        pd[1] = yPixelsPerUnit;
        pd[2] = unitSpecifier;

        setPhysicalDimension(pd);
    }

    ","(M)org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam:setPhysicalDimension(int,int,int)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getInstance,ImageWriterRegistry,../data/xml/batik_call_methods/ImageWriterRegistry.xml,"
public static ImageWriterRegistry getInstance() {
      synchronized( ImageWriterRegistry.class ){
        if ( instance == null ){
          instance = new ImageWriterRegistry();
        }
        return instance;
      }
    }

    ",(S)org.apache.batik.ext.awt.image.spi.ImageWriterRegistry:getInstance(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,<init>,ImageWriterParams,../data/xml/batik_call_methods/ImageWriterParams.xml,"/**
     * Default constructor.
     */
public ImageWriterParams() {
        //nop
    }

    ",(O)org.apache.batik.ext.awt.image.spi.ImageWriterParams:<init>(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setResolution,ImageWriterParams,../data/xml/batik_call_methods/ImageWriterParams.xml,"/**
     * Sets the target resolution of the bitmap image to be written.
     * @param dpi the resolution in dpi
     */
public void setResolution(int dpi) {
        this.resolution = dpi;
    }

    ",(M)org.apache.batik.ext.awt.image.spi.ImageWriterParams:setResolution(int),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-codec-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getTranscodingHints,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,not found,(M)org.apache.batik.transcoder.image.PNGTranscoder:getTranscodingHints(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getInstance,ImageWriterRegistry,../data/xml/batik_call_methods/ImageWriterRegistry.xml,"
public static ImageWriterRegistry getInstance() {
      synchronized( ImageWriterRegistry.class ){
        if ( instance == null ){
          instance = new ImageWriterRegistry();
        }
        return instance;
      }
    }

    ",(S)org.apache.batik.ext.awt.image.spi.ImageWriterRegistry:getInstance(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,<init>,ImageWriterParams,../data/xml/batik_call_methods/ImageWriterParams.xml,"/**
     * Default constructor.
     */
public ImageWriterParams() {
        //nop
    }

    ",(O)org.apache.batik.ext.awt.image.spi.ImageWriterParams:<init>(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getUserAgent,PNGTranscoder,../data/xml/batik_call_methods/PNGTranscoder.xml,"/** @return the transcoder's user agent */
public UserAgent getUserAgent() {
        return this.userAgent;
    }
    
    ",(M)org.apache.batik.transcoder.image.PNGTranscoder:getUserAgent(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getPixelUnitToMillimeter,UserAgent,../data/xml/batik_call_methods/UserAgent.xml,not found,(I)org.apache.batik.bridge.UserAgent:getPixelUnitToMillimeter(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,setResolution,ImageWriterParams,../data/xml/batik_call_methods/ImageWriterParams.xml,"/**
     * Sets the target resolution of the bitmap image to be written.
     * @param dpi the resolution in dpi
     */
public void setResolution(int dpi) {
        this.resolution = dpi;
    }

    ",(M)org.apache.batik.ext.awt.image.spi.ImageWriterParams:setResolution(int),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_INDEXED(java.lang.Object),INDEXED,getOutputStream,TranscoderOutput,../data/xml/batik_call_methods/TranscoderOutput.xml,"/**
     * Returns the output of this transcoder as a byte stream or null
     * if none was supplied.
     */
public OutputStream getOutputStream() {
        return ostream;
    }

    ",(M)org.apache.batik.transcoder.TranscoderOutput:getOutputStream(),batik-all-1.14
