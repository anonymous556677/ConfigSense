Jar_name_x,function,option,Method_short,class_name,xml_path,Method_body,Method,Jar_name_y
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getImplementation,Document,../data/xml/batik_call_methods/cannot find.xml,not found,(I)org.w3c.dom.Document:getImplementation(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,deepCloneDocument,DOMUtilities,../data/xml/batik_call_methods/DOMUtilities.xml,"/**
     * Deep clones a document using the given DOM implementation.
     */
public static Document deepCloneDocument(Document doc, DOMImplementation impl) {
        Element root = doc.getDocumentElement();
        Document result = impl.createDocument(root.getNamespaceURI(),
                                              root.getNodeName(),
                                              null);
        Element rroot = result.getDocumentElement();
        boolean before = true;
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (n == root) {
                before = false;
                if (root.hasAttributes()) {
                    NamedNodeMap attr = root.getAttributes();
                    int len = attr.getLength();
                    for (int i = 0; i < len; i++) {
                        rroot.setAttributeNode((Attr)result.importNode(attr.item(i),
                                                                       true));
                    }
                }
                for (Node c = root.getFirstChild();
                     c != null;
                     c = c.getNextSibling()) {
                    rroot.appendChild(result.importNode(c, true));
                }
            } else {
                if (n.getNodeType() != Node.DOCUMENT_TYPE_NODE) {
                    if (before) {
                        result.insertBefore(result.importNode(n, true), rroot);
                    } else {
                        result.appendChild(result.importNode(n, true));
                    }
                }
            }
        }
        return result;
    }

    ","(S)org.apache.batik.dom.util.DOMUtilities:deepCloneDocument(org.w3c.dom.Document,org.w3c.dom.DOMImplementation)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setParsedURL,SVGOMDocument,../data/xml/batik_call_methods/SVGOMDocument.xml,"/**
     * Sets the URI of the document.
     */
public void setParsedURL(ParsedURL url) {
        this.url = url;
        documentURI = url == null ? null : url.toString();
    }

    ",(M)org.apache.batik.anim.dom.SVGOMDocument:setParsedURL(org.apache.batik.util.ParsedURL),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getRootElement,SVGOMDocument,../data/xml/batik_call_methods/SVGOMDocument.xml,"/**
     * <b>DOM</b>: Implements {@link SVGDocument#getRootElement()}.
     */
public SVGSVGElement getRootElement() {
        return (SVGSVGElement)getDocumentElement();
    }

    ",(M)org.apache.batik.anim.dom.SVGOMDocument:getRootElement(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,createBridgeContext,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Factory method for constructing an configuring a
     * BridgeContext so subclasses can insert new/modified
     * bridges in the context.
     * @param doc the SVG document to create the BridgeContext for
     * @return the newly instantiated BridgeContext
     */
protected BridgeContext createBridgeContext(SVGOMDocument doc) {
        return createBridgeContext(doc.isSVG12() ? ""1.2"" : ""1.x"");
    }

    
/**
     * Creates the default SVG 1.0/1.1 BridgeContext. Subclass this method to provide
     * customized bridges. This method is provided for historical reasons. New applications
     * should use {@link #createBridgeContext(String)} instead.
     * @return the newly instantiated BridgeContext
     * @see #createBridgeContext(String)
     */
protected BridgeContext createBridgeContext() {
        return createBridgeContext(""1.x"");
    }

    
/**
     * Creates the BridgeContext. Subclass this method to provide customized bridges. For example,
     * Apache FOP uses this method to register special bridges for optimized text painting.
     * @param svgVersion the SVG version in use (ex. ""1.0"", ""1.x"" or ""1.2"")
     * @return the newly instantiated BridgeContext
     */
protected BridgeContext createBridgeContext(String svgVersion) {
        if (""1.2"".equals(svgVersion)) {
            return new SVG12BridgeContext(userAgent);
        } else {
            return new BridgeContext(userAgent);
        }
    }

    ",(M)org.apache.batik.transcoder.SVGAbstractTranscoder:createBridgeContext(org.apache.batik.anim.dom.SVGOMDocument),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,<init>,GVTBuilder,../data/xml/batik_call_methods/GVTBuilder.xml,"/**
     * Constructs a new builder.
     */
public GVTBuilder() { }

    ",(O)org.apache.batik.bridge.GVTBuilder:<init>(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setDynamicState,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Sets the document as a STATIC, INTERACTIVE or DYNAMIC document.
     * Call this method before the build phase
     * (ie. before <code>gvtBuilder.build(...)</code>)
     * otherwise, that will have no effect.
     *
     *@param status the document dynamicStatus
     */
public void setDynamicState(int status) {
        dynamicStatus = status;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:setDynamicState(int),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,build,GVTBuilder,../data/xml/batik_call_methods/GVTBuilder.xml,"/**
     * Builds using the specified bridge context the specified SVG document.
     *
     * @param ctx the bridge context
     * @param document the SVG document to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */
public GraphicsNode build(BridgeContext ctx, Document document) {
        // the bridge context is now associated to one document
        ctx.setDocument(document);
        ctx.initializeDocument(document);

        // inform the bridge context the builder to use
        ctx.setGVTBuilder(this);

        // build the GVT tree
        DocumentBridge dBridge = ctx.getDocumentBridge();
        RootGraphicsNode rootNode = null;
        try {
            // create the root node
            rootNode = dBridge.createGraphicsNode(ctx, document);
            Element svgElement = document.getDocumentElement();
            GraphicsNode topNode = null;

            // get the appropriate bridge according to the specified element
            Bridge bridge = ctx.getBridge(svgElement);
            if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {
                return null;
            }
            // create the associated composite graphics node
            GraphicsNodeBridge gnBridge = (GraphicsNodeBridge)bridge;
            topNode = gnBridge.createGraphicsNode(ctx, svgElement);
            if (topNode == null) {
                return null;
            }
            rootNode.getChildren().add(topNode);

            buildComposite(ctx, svgElement, (CompositeGraphicsNode)topNode);
            gnBridge.buildGraphicsNode(ctx, svgElement, topNode);

            // finally, build the root node
            dBridge.buildGraphicsNode(ctx, document, rootNode);
        } catch (BridgeException ex) {
            // update the exception with the missing parameters
            ex.setGraphicsNode(rootNode);
            //ex.printStackTrace();
            throw ex; // re-throw the udpated exception
        }

        // For cursor handling
        if (ctx.isInteractive()) {
            ctx.addUIEventListeners(document);

            // register GVT listeners for AWT event support
            ctx.addGVTListener(document);
        }

        // <!> FIXME: TO BE REMOVED
        if (ctx.isDynamic()) {
            // register DOM listeners for dynamic support
            ctx.addDOMListeners();
        }
        return rootNode;
    }

    
/**
     * Builds using the specified bridge context the specified Element.
     *
     * @param ctx the bridge context
     * @param e the element to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */
public GraphicsNode build(BridgeContext ctx, Element e) {
        // get the appropriate bridge according to the specified element
        Bridge bridge = ctx.getBridge(e);
        if (bridge instanceof GenericBridge) {
            // If it is a GenericBridge just handle it and any GenericBridge
            // descendents and return.
            ((GenericBridge) bridge).handleElement(ctx, e);
            handleGenericBridges(ctx, e);
            return null;
        } else if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {
            handleGenericBridges(ctx, e);
            return null;
        }
        // create the associated graphics node
        GraphicsNodeBridge gnBridge = (GraphicsNodeBridge)bridge;
        // check the display property
        if (!gnBridge.getDisplay(e)) {
            handleGenericBridges(ctx, e);
            return null;
        }
        GraphicsNode gn = gnBridge.createGraphicsNode(ctx, e);
        if (gn != null) {
            if (gnBridge.isComposite()) {
                buildComposite(ctx, e, (CompositeGraphicsNode)gn);
            } else {
                handleGenericBridges(ctx, e);
            }
            gnBridge.buildGraphicsNode(ctx, e, gn);
        }
        // <!> FIXME: see build(BridgeContext, Element)
        // + may load the script twice (for example
        // outside 'use' is ok versus local 'use' maybe wrong).
        if (ctx.isDynamic()) {
            //BridgeEventSupport.loadScripts(ctx, e);
        }
        return gn;
    }

    ","(M)org.apache.batik.bridge.GVTBuilder:build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,isDynamic,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns true if the document is dynamic, false otherwise.
     */
public boolean isDynamic() {
        return (dynamicStatus == DYNAMIC);
    }

    ",(M)org.apache.batik.bridge.BridgeContext:isDynamic(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,<init>,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Creates a new BaseScriptingEnvironment.
     * @param ctx the bridge context
     */
public BaseScriptingEnvironment(BridgeContext ctx) {
        bridgeContext = ctx;
        document = ctx.getDocument();
        docPURL = new ParsedURL(((SVGDocument)document).getURL());
        userAgent     = bridgeContext.getUserAgent();
    }

    ",(O)org.apache.batik.bridge.BaseScriptingEnvironment:<init>(org.apache.batik.bridge.BridgeContext),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,loadScripts,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Loads the scripts contained in the &lt;script&gt; elements.
     */
public void loadScripts() {
        NodeList scripts = document.getElementsByTagNameNS
            (SVGConstants.SVG_NAMESPACE_URI, SVGConstants.SVG_SCRIPT_TAG);

        int len = scripts.getLength();
        for (int i = 0; i < len; i++) {
            AbstractElement script = (AbstractElement) scripts.item(i);
            loadScript(script);
        }
    }

    ",(M)org.apache.batik.bridge.BaseScriptingEnvironment:loadScripts(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,dispatchSVGLoadEvent,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Recursively dispatch the SVG 'onload' event.
     */
public void dispatchSVGLoadEvent() {
        SVGSVGElement root = (SVGSVGElement)document.getDocumentElement();
        String lang = root.getContentScriptType();
        long documentStartTime = System.currentTimeMillis();
        bridgeContext.getAnimationEngine().start(documentStartTime);
        dispatchSVGLoad(root, true, lang);
    }

    ",(M)org.apache.batik.bridge.BaseScriptingEnvironment:dispatchSVGLoadEvent(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getAnimationEngine,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns the AnimationEngine for the document.  Creates one if
     * it doesn't exist.
     */
public SVGAnimationEngine getAnimationEngine() {
        if (animationEngine == null) {
            animationEngine = new SVGAnimationEngine(document, this);
            setAnimationLimitingMode();
        }
        return animationEngine;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:getAnimationEngine(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setCurrentTime,SVGAnimationEngine,../data/xml/batik_call_methods/SVGAnimationEngine.xml,"/**
     * Sets the current document time.
     */
public float setCurrentTime(float t) {
        if (started) {
            float ret = super.setCurrentTime(t);
            if (animationTickRunnable != null) {
                animationTickRunnable.resume();
            }
            return ret;
        } else {
            initialStartTime = t;
            return 0;
        }
    }

    ",(M)org.apache.batik.bridge.SVGAnimationEngine:setCurrentTime(float),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,isSVG12,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns whether the managed document is an SVG 1.2 document.
     */
public boolean isSVG12() {
        return isSVG12;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:isSVG12(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,convertSnapshotTime,SVGUtilities,../data/xml/batik_call_methods/SVGUtilities.xml,"/**
     * Returns the value of the 'snapshotTime' attribute on the specified
     * element as a float, or <code>0f</code> if the attribute is missing
     * or given as <code>""none""</code>.
     *
     * @param e the element from which to retrieve the 'snapshotTime' attribute
     * @param ctx the BridgeContext to use for error information
     */
public static float convertSnapshotTime(Element e, BridgeContext ctx) {
        if (!e.hasAttributeNS(null, SVG_SNAPSHOT_TIME_ATTRIBUTE)) {
            return 0f;
        }
        String t = e.getAttributeNS(null, SVG_SNAPSHOT_TIME_ATTRIBUTE);
        if (t.equals(SVG_NONE_VALUE)) {
            return 0f;
        }

        class Handler implements ClockHandler {
            float time;
            public void clockValue(float t) {
                time = t;
            }
        }
        ClockParser p = new ClockParser(false);
        Handler h = new Handler();
        p.setClockHandler(h);
        try {
            p.parse(t);
        } catch (ParseException pEx ) {
            throw new BridgeException
                (null, e, pEx, ERR_ATTRIBUTE_VALUE_MALFORMED,
                 new Object[] { SVG_SNAPSHOT_TIME_ATTRIBUTE, t, pEx });
        }
        return h.time;
    }
}","(S)org.apache.batik.bridge.SVGUtilities:convertSnapshotTime(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getDocumentSize,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns the actual size of the document or null if the document
     * has not been built yet.
     */
public Dimension2D getDocumentSize() {
        return documentSize;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:getDocumentSize(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setImageSize,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */
protected void setImageSize(float docWidth, float docHeight) {

        // Compute the image's width and height according the hints
        float imgWidth = -1;
        if (hints.containsKey(KEY_WIDTH)) {
            imgWidth = (Float) hints.get(KEY_WIDTH);
        }
        float imgHeight = -1;
        if (hints.containsKey(KEY_HEIGHT)) {
            imgHeight = (Float) hints.get(KEY_HEIGHT);
        }

        if (imgWidth > 0 && imgHeight > 0) {
            width = imgWidth;
            height = imgHeight;
        } else if (imgHeight > 0) {
            width = (docWidth * imgHeight) / docHeight;
            height = imgHeight;
        } else if (imgWidth > 0) {
            width = imgWidth;
            height = (docHeight * imgWidth) / docWidth;
        } else {
            width = docWidth;
            height = docHeight;
        }

        // Limit image size according to the maximuxm size hints.
        float imgMaxWidth = -1;
        if (hints.containsKey(KEY_MAX_WIDTH)) {
            imgMaxWidth = (Float) hints.get(KEY_MAX_WIDTH);
        }
        float imgMaxHeight = -1;
        if (hints.containsKey(KEY_MAX_HEIGHT)) {
            imgMaxHeight = (Float) hints.get(KEY_MAX_HEIGHT);
        }

        if ((imgMaxHeight > 0) && (height > imgMaxHeight)) {
            width = (docWidth * imgMaxHeight) / docHeight;
            height = imgMaxHeight;
        }
        if ((imgMaxWidth > 0) && (width > imgMaxWidth)) {
            width = imgMaxWidth;
            height = (docHeight * imgMaxWidth) / docWidth;
        }
    }


    ","(M)org.apache.batik.transcoder.SVGAbstractTranscoder:setImageSize(float,float)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getRef,ParsedURL,../data/xml/batik_call_methods/ParsedURL.xml,"/**
     * Returns the 'fragment' reference in the URL.
     */
public String getRef() {
        if (data.ref == null) return null;
        return data.ref;
    }


    ",(M)org.apache.batik.util.ParsedURL:getRef(),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getCanvasGraphicsNode,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"
protected CanvasGraphicsNode getCanvasGraphicsNode(GraphicsNode gn) {
        if (!(gn instanceof CompositeGraphicsNode))
            return null;
        CompositeGraphicsNode cgn = (CompositeGraphicsNode)gn;
        List children = cgn.getChildren();
        if (children.size() == 0)
            return null;
        gn = (GraphicsNode)children.get(0);
        if (!(gn instanceof CanvasGraphicsNode))
            return null;
        return (CanvasGraphicsNode)gn;
    }

    ",(M)org.apache.batik.transcoder.SVGAbstractTranscoder:getCanvasGraphicsNode(org.apache.batik.gvt.GraphicsNode),batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getImplementation,Document,../data/xml/batik_call_methods/cannot find.xml,not found,(I)org.w3c.dom.Document:getImplementation(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,deepCloneDocument,DOMUtilities,../data/xml/batik_call_methods/DOMUtilities.xml,"/**
     * Deep clones a document using the given DOM implementation.
     */
public static Document deepCloneDocument(Document doc, DOMImplementation impl) {
        Element root = doc.getDocumentElement();
        Document result = impl.createDocument(root.getNamespaceURI(),
                                              root.getNodeName(),
                                              null);
        Element rroot = result.getDocumentElement();
        boolean before = true;
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (n == root) {
                before = false;
                if (root.hasAttributes()) {
                    NamedNodeMap attr = root.getAttributes();
                    int len = attr.getLength();
                    for (int i = 0; i < len; i++) {
                        rroot.setAttributeNode((Attr)result.importNode(attr.item(i),
                                                                       true));
                    }
                }
                for (Node c = root.getFirstChild();
                     c != null;
                     c = c.getNextSibling()) {
                    rroot.appendChild(result.importNode(c, true));
                }
            } else {
                if (n.getNodeType() != Node.DOCUMENT_TYPE_NODE) {
                    if (before) {
                        result.insertBefore(result.importNode(n, true), rroot);
                    } else {
                        result.appendChild(result.importNode(n, true));
                    }
                }
            }
        }
        return result;
    }

    ","(S)org.apache.batik.dom.util.DOMUtilities:deepCloneDocument(org.w3c.dom.Document,org.w3c.dom.DOMImplementation)",batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setParsedURL,SVGOMDocument,../data/xml/batik_call_methods/SVGOMDocument.xml,"/**
     * Sets the URI of the document.
     */
public void setParsedURL(ParsedURL url) {
        this.url = url;
        documentURI = url == null ? null : url.toString();
    }

    ",(M)org.apache.batik.anim.dom.SVGOMDocument:setParsedURL(org.apache.batik.util.ParsedURL),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getRootElement,SVGOMDocument,../data/xml/batik_call_methods/SVGOMDocument.xml,"/**
     * <b>DOM</b>: Implements {@link SVGDocument#getRootElement()}.
     */
public SVGSVGElement getRootElement() {
        return (SVGSVGElement)getDocumentElement();
    }

    ",(M)org.apache.batik.anim.dom.SVGOMDocument:getRootElement(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,createBridgeContext,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Factory method for constructing an configuring a
     * BridgeContext so subclasses can insert new/modified
     * bridges in the context.
     * @param doc the SVG document to create the BridgeContext for
     * @return the newly instantiated BridgeContext
     */
protected BridgeContext createBridgeContext(SVGOMDocument doc) {
        return createBridgeContext(doc.isSVG12() ? ""1.2"" : ""1.x"");
    }

    
/**
     * Creates the default SVG 1.0/1.1 BridgeContext. Subclass this method to provide
     * customized bridges. This method is provided for historical reasons. New applications
     * should use {@link #createBridgeContext(String)} instead.
     * @return the newly instantiated BridgeContext
     * @see #createBridgeContext(String)
     */
protected BridgeContext createBridgeContext() {
        return createBridgeContext(""1.x"");
    }

    
/**
     * Creates the BridgeContext. Subclass this method to provide customized bridges. For example,
     * Apache FOP uses this method to register special bridges for optimized text painting.
     * @param svgVersion the SVG version in use (ex. ""1.0"", ""1.x"" or ""1.2"")
     * @return the newly instantiated BridgeContext
     */
protected BridgeContext createBridgeContext(String svgVersion) {
        if (""1.2"".equals(svgVersion)) {
            return new SVG12BridgeContext(userAgent);
        } else {
            return new BridgeContext(userAgent);
        }
    }

    ",(M)org.apache.batik.transcoder.SVGAbstractTranscoder:createBridgeContext(org.apache.batik.anim.dom.SVGOMDocument),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,<init>,GVTBuilder,../data/xml/batik_call_methods/GVTBuilder.xml,"/**
     * Constructs a new builder.
     */
public GVTBuilder() { }

    ",(O)org.apache.batik.bridge.GVTBuilder:<init>(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setDynamicState,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Sets the document as a STATIC, INTERACTIVE or DYNAMIC document.
     * Call this method before the build phase
     * (ie. before <code>gvtBuilder.build(...)</code>)
     * otherwise, that will have no effect.
     *
     *@param status the document dynamicStatus
     */
public void setDynamicState(int status) {
        dynamicStatus = status;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:setDynamicState(int),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,build,GVTBuilder,../data/xml/batik_call_methods/GVTBuilder.xml,"/**
     * Builds using the specified bridge context the specified SVG document.
     *
     * @param ctx the bridge context
     * @param document the SVG document to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */
public GraphicsNode build(BridgeContext ctx, Document document) {
        // the bridge context is now associated to one document
        ctx.setDocument(document);
        ctx.initializeDocument(document);

        // inform the bridge context the builder to use
        ctx.setGVTBuilder(this);

        // build the GVT tree
        DocumentBridge dBridge = ctx.getDocumentBridge();
        RootGraphicsNode rootNode = null;
        try {
            // create the root node
            rootNode = dBridge.createGraphicsNode(ctx, document);
            Element svgElement = document.getDocumentElement();
            GraphicsNode topNode = null;

            // get the appropriate bridge according to the specified element
            Bridge bridge = ctx.getBridge(svgElement);
            if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {
                return null;
            }
            // create the associated composite graphics node
            GraphicsNodeBridge gnBridge = (GraphicsNodeBridge)bridge;
            topNode = gnBridge.createGraphicsNode(ctx, svgElement);
            if (topNode == null) {
                return null;
            }
            rootNode.getChildren().add(topNode);

            buildComposite(ctx, svgElement, (CompositeGraphicsNode)topNode);
            gnBridge.buildGraphicsNode(ctx, svgElement, topNode);

            // finally, build the root node
            dBridge.buildGraphicsNode(ctx, document, rootNode);
        } catch (BridgeException ex) {
            // update the exception with the missing parameters
            ex.setGraphicsNode(rootNode);
            //ex.printStackTrace();
            throw ex; // re-throw the udpated exception
        }

        // For cursor handling
        if (ctx.isInteractive()) {
            ctx.addUIEventListeners(document);

            // register GVT listeners for AWT event support
            ctx.addGVTListener(document);
        }

        // <!> FIXME: TO BE REMOVED
        if (ctx.isDynamic()) {
            // register DOM listeners for dynamic support
            ctx.addDOMListeners();
        }
        return rootNode;
    }

    
/**
     * Builds using the specified bridge context the specified Element.
     *
     * @param ctx the bridge context
     * @param e the element to build
     * @exception BridgeException if an error occured while constructing
     * the GVT tree
     */
public GraphicsNode build(BridgeContext ctx, Element e) {
        // get the appropriate bridge according to the specified element
        Bridge bridge = ctx.getBridge(e);
        if (bridge instanceof GenericBridge) {
            // If it is a GenericBridge just handle it and any GenericBridge
            // descendents and return.
            ((GenericBridge) bridge).handleElement(ctx, e);
            handleGenericBridges(ctx, e);
            return null;
        } else if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {
            handleGenericBridges(ctx, e);
            return null;
        }
        // create the associated graphics node
        GraphicsNodeBridge gnBridge = (GraphicsNodeBridge)bridge;
        // check the display property
        if (!gnBridge.getDisplay(e)) {
            handleGenericBridges(ctx, e);
            return null;
        }
        GraphicsNode gn = gnBridge.createGraphicsNode(ctx, e);
        if (gn != null) {
            if (gnBridge.isComposite()) {
                buildComposite(ctx, e, (CompositeGraphicsNode)gn);
            } else {
                handleGenericBridges(ctx, e);
            }
            gnBridge.buildGraphicsNode(ctx, e, gn);
        }
        // <!> FIXME: see build(BridgeContext, Element)
        // + may load the script twice (for example
        // outside 'use' is ok versus local 'use' maybe wrong).
        if (ctx.isDynamic()) {
            //BridgeEventSupport.loadScripts(ctx, e);
        }
        return gn;
    }

    ","(M)org.apache.batik.bridge.GVTBuilder:build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)",batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,isDynamic,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns true if the document is dynamic, false otherwise.
     */
public boolean isDynamic() {
        return (dynamicStatus == DYNAMIC);
    }

    ",(M)org.apache.batik.bridge.BridgeContext:isDynamic(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,<init>,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Creates a new BaseScriptingEnvironment.
     * @param ctx the bridge context
     */
public BaseScriptingEnvironment(BridgeContext ctx) {
        bridgeContext = ctx;
        document = ctx.getDocument();
        docPURL = new ParsedURL(((SVGDocument)document).getURL());
        userAgent     = bridgeContext.getUserAgent();
    }

    ",(O)org.apache.batik.bridge.BaseScriptingEnvironment:<init>(org.apache.batik.bridge.BridgeContext),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,loadScripts,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Loads the scripts contained in the &lt;script&gt; elements.
     */
public void loadScripts() {
        NodeList scripts = document.getElementsByTagNameNS
            (SVGConstants.SVG_NAMESPACE_URI, SVGConstants.SVG_SCRIPT_TAG);

        int len = scripts.getLength();
        for (int i = 0; i < len; i++) {
            AbstractElement script = (AbstractElement) scripts.item(i);
            loadScript(script);
        }
    }

    ",(M)org.apache.batik.bridge.BaseScriptingEnvironment:loadScripts(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,dispatchSVGLoadEvent,BaseScriptingEnvironment,../data/xml/batik_call_methods/BaseScriptingEnvironment.xml,"/**
     * Recursively dispatch the SVG 'onload' event.
     */
public void dispatchSVGLoadEvent() {
        SVGSVGElement root = (SVGSVGElement)document.getDocumentElement();
        String lang = root.getContentScriptType();
        long documentStartTime = System.currentTimeMillis();
        bridgeContext.getAnimationEngine().start(documentStartTime);
        dispatchSVGLoad(root, true, lang);
    }

    ",(M)org.apache.batik.bridge.BaseScriptingEnvironment:dispatchSVGLoadEvent(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getAnimationEngine,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns the AnimationEngine for the document.  Creates one if
     * it doesn't exist.
     */
public SVGAnimationEngine getAnimationEngine() {
        if (animationEngine == null) {
            animationEngine = new SVGAnimationEngine(document, this);
            setAnimationLimitingMode();
        }
        return animationEngine;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:getAnimationEngine(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setCurrentTime,SVGAnimationEngine,../data/xml/batik_call_methods/SVGAnimationEngine.xml,"/**
     * Sets the current document time.
     */
public float setCurrentTime(float t) {
        if (started) {
            float ret = super.setCurrentTime(t);
            if (animationTickRunnable != null) {
                animationTickRunnable.resume();
            }
            return ret;
        } else {
            initialStartTime = t;
            return 0;
        }
    }

    ",(M)org.apache.batik.bridge.SVGAnimationEngine:setCurrentTime(float),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,isSVG12,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns whether the managed document is an SVG 1.2 document.
     */
public boolean isSVG12() {
        return isSVG12;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:isSVG12(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,convertSnapshotTime,SVGUtilities,../data/xml/batik_call_methods/SVGUtilities.xml,"/**
     * Returns the value of the 'snapshotTime' attribute on the specified
     * element as a float, or <code>0f</code> if the attribute is missing
     * or given as <code>""none""</code>.
     *
     * @param e the element from which to retrieve the 'snapshotTime' attribute
     * @param ctx the BridgeContext to use for error information
     */
public static float convertSnapshotTime(Element e, BridgeContext ctx) {
        if (!e.hasAttributeNS(null, SVG_SNAPSHOT_TIME_ATTRIBUTE)) {
            return 0f;
        }
        String t = e.getAttributeNS(null, SVG_SNAPSHOT_TIME_ATTRIBUTE);
        if (t.equals(SVG_NONE_VALUE)) {
            return 0f;
        }

        class Handler implements ClockHandler {
            float time;
            public void clockValue(float t) {
                time = t;
            }
        }
        ClockParser p = new ClockParser(false);
        Handler h = new Handler();
        p.setClockHandler(h);
        try {
            p.parse(t);
        } catch (ParseException pEx ) {
            throw new BridgeException
                (null, e, pEx, ERR_ATTRIBUTE_VALUE_MALFORMED,
                 new Object[] { SVG_SNAPSHOT_TIME_ATTRIBUTE, t, pEx });
        }
        return h.time;
    }
}","(S)org.apache.batik.bridge.SVGUtilities:convertSnapshotTime(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)",batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getDocumentSize,BridgeContext,../data/xml/batik_call_methods/BridgeContext.xml,"/**
     * Returns the actual size of the document or null if the document
     * has not been built yet.
     */
public Dimension2D getDocumentSize() {
        return documentSize;
    }

    ",(M)org.apache.batik.bridge.BridgeContext:getDocumentSize(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setImageSize,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */
protected void setImageSize(float docWidth, float docHeight) {

        // Compute the image's width and height according the hints
        float imgWidth = -1;
        if (hints.containsKey(KEY_WIDTH)) {
            imgWidth = (Float) hints.get(KEY_WIDTH);
        }
        float imgHeight = -1;
        if (hints.containsKey(KEY_HEIGHT)) {
            imgHeight = (Float) hints.get(KEY_HEIGHT);
        }

        if (imgWidth > 0 && imgHeight > 0) {
            width = imgWidth;
            height = imgHeight;
        } else if (imgHeight > 0) {
            width = (docWidth * imgHeight) / docHeight;
            height = imgHeight;
        } else if (imgWidth > 0) {
            width = imgWidth;
            height = (docHeight * imgWidth) / docWidth;
        } else {
            width = docWidth;
            height = docHeight;
        }

        // Limit image size according to the maximuxm size hints.
        float imgMaxWidth = -1;
        if (hints.containsKey(KEY_MAX_WIDTH)) {
            imgMaxWidth = (Float) hints.get(KEY_MAX_WIDTH);
        }
        float imgMaxHeight = -1;
        if (hints.containsKey(KEY_MAX_HEIGHT)) {
            imgMaxHeight = (Float) hints.get(KEY_MAX_HEIGHT);
        }

        if ((imgMaxHeight > 0) && (height > imgMaxHeight)) {
            width = (docWidth * imgMaxHeight) / docHeight;
            height = imgMaxHeight;
        }
        if ((imgMaxWidth > 0) && (width > imgMaxWidth)) {
            width = imgMaxWidth;
            height = (docHeight * imgMaxWidth) / docWidth;
        }
    }


    ","(M)org.apache.batik.transcoder.SVGAbstractTranscoder:setImageSize(float,float)",batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getRef,ParsedURL,../data/xml/batik_call_methods/ParsedURL.xml,"/**
     * Returns the 'fragment' reference in the URL.
     */
public String getRef() {
        if (data.ref == null) return null;
        return data.ref;
    }


    ",(M)org.apache.batik.util.ParsedURL:getRef(),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,getCanvasGraphicsNode,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"
protected CanvasGraphicsNode getCanvasGraphicsNode(GraphicsNode gn) {
        if (!(gn instanceof CompositeGraphicsNode))
            return null;
        CompositeGraphicsNode cgn = (CompositeGraphicsNode)gn;
        List children = cgn.getChildren();
        if (children.size() == 0)
            return null;
        gn = (GraphicsNode)children.get(0);
        if (!(gn instanceof CanvasGraphicsNode))
            return null;
        return (CanvasGraphicsNode)gn;
    }

    ",(M)org.apache.batik.transcoder.SVGAbstractTranscoder:getCanvasGraphicsNode(org.apache.batik.gvt.GraphicsNode),batik-transcoder-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setImageSize,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */
protected void setImageSize(float docWidth, float docHeight) {

        // Compute the image's width and height according the hints
        float imgWidth = -1;
        if (hints.containsKey(KEY_WIDTH)) {
            imgWidth = (Float) hints.get(KEY_WIDTH);
        }
        float imgHeight = -1;
        if (hints.containsKey(KEY_HEIGHT)) {
            imgHeight = (Float) hints.get(KEY_HEIGHT);
        }

        if (imgWidth > 0 && imgHeight > 0) {
            width = imgWidth;
            height = imgHeight;
        } else if (imgHeight > 0) {
            width = (docWidth * imgHeight) / docHeight;
            height = imgHeight;
        } else if (imgWidth > 0) {
            width = imgWidth;
            height = (docHeight * imgWidth) / docWidth;
        } else {
            width = docWidth;
            height = docHeight;
        }

        // Limit image size according to the maximuxm size hints.
        float imgMaxWidth = -1;
        if (hints.containsKey(KEY_MAX_WIDTH)) {
            imgMaxWidth = (Float) hints.get(KEY_MAX_WIDTH);
        }
        float imgMaxHeight = -1;
        if (hints.containsKey(KEY_MAX_HEIGHT)) {
            imgMaxHeight = (Float) hints.get(KEY_MAX_HEIGHT);
        }

        if ((imgMaxHeight > 0) && (height > imgMaxHeight)) {
            width = (docWidth * imgMaxHeight) / docHeight;
            height = imgMaxHeight;
        }
        if ((imgMaxWidth > 0) && (width > imgMaxWidth)) {
            width = imgMaxWidth;
            height = (docHeight * imgMaxWidth) / docWidth;
        }
    }


    ","(O)org.apache.batik.transcoder.SVGAbstractTranscoder:setImageSize(float,float)",batik-all-1.14
batik-all-1.14,org.apache.batik.transcoder.TranscodingHints:getKey_AOI(java.lang.Object),AREA,setImageSize,SVGAbstractTranscoder,../data/xml/batik_call_methods/SVGAbstractTranscoder.xml,"/**
     * Sets document size according to the hints.
     * Global variables width and height are modified.
     *
     * @param docWidth Width of the document.
     * @param docHeight Height of the document.
     */
protected void setImageSize(float docWidth, float docHeight) {

        // Compute the image's width and height according the hints
        float imgWidth = -1;
        if (hints.containsKey(KEY_WIDTH)) {
            imgWidth = (Float) hints.get(KEY_WIDTH);
        }
        float imgHeight = -1;
        if (hints.containsKey(KEY_HEIGHT)) {
            imgHeight = (Float) hints.get(KEY_HEIGHT);
        }

        if (imgWidth > 0 && imgHeight > 0) {
            width = imgWidth;
            height = imgHeight;
        } else if (imgHeight > 0) {
            width = (docWidth * imgHeight) / docHeight;
            height = imgHeight;
        } else if (imgWidth > 0) {
            width = imgWidth;
            height = (docHeight * imgWidth) / docWidth;
        } else {
            width = docWidth;
            height = docHeight;
        }

        // Limit image size according to the maximuxm size hints.
        float imgMaxWidth = -1;
        if (hints.containsKey(KEY_MAX_WIDTH)) {
            imgMaxWidth = (Float) hints.get(KEY_MAX_WIDTH);
        }
        float imgMaxHeight = -1;
        if (hints.containsKey(KEY_MAX_HEIGHT)) {
            imgMaxHeight = (Float) hints.get(KEY_MAX_HEIGHT);
        }

        if ((imgMaxHeight > 0) && (height > imgMaxHeight)) {
            width = (docWidth * imgMaxHeight) / docHeight;
            height = imgMaxHeight;
        }
        if ((imgMaxWidth > 0) && (width > imgMaxWidth)) {
            width = imgMaxWidth;
            height = (docHeight * imgMaxWidth) / docWidth;
        }
    }


    ","(O)org.apache.batik.transcoder.SVGAbstractTranscoder:setImageSize(float,float)",batik-transcoder-1.14
