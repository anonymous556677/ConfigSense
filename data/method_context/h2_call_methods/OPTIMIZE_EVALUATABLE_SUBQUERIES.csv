function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"/**
     * Get the visitor type.
     *
     * @return the type
     */
public int getType() {
        return type;
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.ExpressionVisitor:getType(),getType,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),"
public Table getTable() {
        return table;
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.table.TableFilter:getTable(),getTable,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.table.Table:isDeterministic(),isDeterministic,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.table.Table:getMaxDataModificationId(),getMaxDataModificationId,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"/**
     * Update the field maxDataModificationId if this value is higher
     * than the current value.
     * This is used for SET_MAX_DATA_MODIFICATION_ID visitors.
     *
     * @param value the data modification id
     */
public void addDataModificationId(long value) {
        long m = maxDataModificationId[0];
        if (value > m) {
            maxDataModificationId[0] = value;
        }
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.ExpressionVisitor:addDataModificationId(long),addDataModificationId,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Add a new dependency to the set of dependencies.
     * This is used for GET_DEPENDENCIES visitors.
     *
     * @param obj the additional dependency.
     */
@SuppressWarnings(""unchecked"")
    public void addDependency(DbObject obj) {
        ((HashSet<DbObject>) set).add(obj);
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.ExpressionVisitor:addDependency(org.h2.engine.DbObject),addDependency,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the dependency set.
     * This is used for GET_DEPENDENCIES visitors.
     *
     * @return the set
     */
@SuppressWarnings(""unchecked"")
    public HashSet<DbObject> getDependencies() {
        return (HashSet<DbObject>) set;
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.ExpressionVisitor:getDependencies(),getDependencies,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),"/**
     * Increment or decrement the query level.
     *
     * @param offset 1 to increment, -1 to decrement
     * @return this visitor or its clone with the changed query level
     */
public ExpressionVisitor incrementQueryLevel(int offset) {
        if (type == INDEPENDENT) {
            offset += queryLevel;
            return offset < CACHED ? INDEPENDENT_VISITORS[offset] : new ExpressionVisitor(INDEPENDENT, offset);
        } else if (type == EVALUATABLE) {
            offset += queryLevel;
            return offset < CACHED ? EVALUATABLE_VISITORS[offset] : new ExpressionVisitor(EVALUATABLE, offset);
        } else {
            return this;
        }
    }

    ",OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.ExpressionVisitor:incrementQueryLevel(int),incrementQueryLevel,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_EVALUATABLE_SUBQUERIES,(M)org.h2.expression.Expression:isEverything(org.h2.expression.ExpressionVisitor),isEverything,Expression,../data/xml/h2_call_methods/Expression.xml
