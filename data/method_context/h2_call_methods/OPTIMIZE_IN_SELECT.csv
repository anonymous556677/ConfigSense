function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_IN_SELECT,(M)org.h2.command.query.Query:setSession(org.h2.engine.SessionLocal),setSession,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),"
@Override
    public final ResultInterface query(long maxrows) {
        return query(maxrows, null);
    }

    
/**
     * Execute the query, writing the result to the target result.
     *
     * @param limit the maximum number of rows to return
     * @param target the target result (null will return the result)
     * @return the result set (if the target is not set).
     */
public final ResultInterface query(long limit, ResultTarget target) {
        if (isUnion()) {
            // union doesn't always know the parameter list of the left and
            // right queries
            return queryWithoutCacheLazyCheck(limit, target);
        }
        fireBeforeSelectTriggers();
        if (noCache || !session.getDatabase().getOptimizeReuseResults() ||
                (session.isLazyQueryExecution() && !neverLazy)) {
            return queryWithoutCacheLazyCheck(limit, target);
        }
        Value[] params = getParameterValues();
        long now = session.getDatabase().getModificationDataId();
        if (isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            if (lastResult != null && !lastResult.isClosed() &&
                    limit == lastLimit) {
                if (sameResultAsLast(params, lastParameters, lastEvaluated)) {
                    lastResult = lastResult.createShallowCopy(session);
                    if (lastResult != null) {
                        lastResult.reset();
                        return lastResult;
                    }
                }
            }
        }
        lastParameters = params;
        closeLastResult();
        ResultInterface r = queryWithoutCacheLazyCheck(limit, target);
        lastResult = r;
        lastExists = null;
        lastEvaluated = now;
        lastLimit = limit;
        return r;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.command.query.Query:query(long),query,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean hasNext() {
        return !closed && rowId < rowCount - 1;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.result.LocalResult:hasNext(),hasNext,LocalResult,../data/xml/h2_call_methods/LocalResult.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the boolean value for the given boolean.
     *
     * @param b the boolean
     * @return the value
     */
public static ValueBoolean get(boolean b) {
        return b ? TRUE : FALSE;
    }

    ",OPTIMIZE_IN_SELECT,(S)org.h2.value.ValueBoolean:get(boolean),get,ValueBoolean,../data/xml/h2_call_methods/ValueBoolean.xml
org.h2.engine.Database:getSettings(),"
private Value getNullSafeValueSlow(SessionLocal session, ResultInterface rows, Value l) {
        boolean simple = l.getValueType() != Value.ROW && query.getColumnCount() == 1;
        boolean searched = all == (compareType == Comparison.NOT_EQUAL_NULL_SAFE);
        while (rows.next()) {
            Value[] currentRow = rows.currentRow();
            if (session.areEqual(l, simple ? currentRow[0] : ValueRow.get(currentRow)) == searched) {
                return ValueBoolean.get(not == all);
            }
        }
        return ValueBoolean.get(not ^ all);
    }

    ",OPTIMIZE_IN_SELECT,"(O)org.h2.expression.condition.ConditionInQuery:getNullSafeValueSlow(org.h2.engine.SessionLocal,org.h2.result.ResultInterface,org.h2.value.Value)",getNullSafeValueSlow,ConditionInQuery,../data/xml/h2_call_methods/ConditionInQuery.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns true if this value is NULL or contains NULL value.
     *
     * @return true if this value is NULL or contains NULL value
     */
public boolean containsNull() {
        return false;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.value.Value:containsNull(),containsNull,Value,../data/xml/h2_call_methods/Value.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
Value getValueSlow(SessionLocal session, ResultInterface rows, Value l) {
        // this only returns the correct result if the result has at least one
        // row, and if l is not null
        boolean simple = l.getValueType() != Value.ROW && query.getColumnCount() == 1;
        boolean hasNull = false;
        ValueBoolean searched = ValueBoolean.get(!all);
        while (rows.next()) {
            Value[] currentRow = rows.currentRow();
            Value cmp = Comparison.compare(session, l, simple ? currentRow[0] : ValueRow.get(currentRow),
                    compareType);
            if (cmp == ValueNull.INSTANCE) {
                hasNull = true;
            } else if (cmp == searched) {
                return ValueBoolean.get(not == all);
            }
        }
        if (hasNull) {
            return ValueNull.INSTANCE;
        }
        return ValueBoolean.get(not ^ all);
    }

    ",OPTIMIZE_IN_SELECT,"(O)org.h2.expression.condition.ConditionInQuery:getValueSlow(org.h2.engine.SessionLocal,org.h2.result.ResultInterface,org.h2.value.Value)",getValueSlow,ConditionInQuery,../data/xml/h2_call_methods/ConditionInQuery.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the column count of this query.
     *
     * @return the column count
     */
public int getColumnCount() {
        return visibleColumnCount;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.command.query.Query:getColumnCount(),getColumnCount,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),"/**
     * Convert this value to any ROW data type.
     *
     * @return a row value
     */
public final ValueRow convertToAnyRow() {
        if (getValueType() == Value.ROW) {
            return (ValueRow) this;
        }
        return ValueRow.get(new Value[] { this });
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.value.Value:convertToAnyRow(),convertToAnyRow,Value,../data/xml/h2_call_methods/Value.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_IN_SELECT,(M)org.h2.value.ValueRow:getList(),getList,ValueRow,../data/xml/h2_call_methods/ValueRow.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if this result set contains the given row.
     *
     * @param values the row
     * @return true if the row exists
     */
public boolean containsDistinct(Value[] values) {
        assert values.length == visibleColumnCount;
        if (external != null) {
            return external.contains(values);
        }
        if (distinctRows == null) {
            distinctRows = new TreeMap<>(session.getDatabase().getCompareMode());
            for (Value[] row : rows) {
                ValueRow array = getDistinctRow(row);
                distinctRows.put(array, array.getList());
            }
        }
        ValueRow array = ValueRow.get(values);
        return distinctRows.get(array) != null;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.result.LocalResult:containsDistinct(org.h2.value.Value[]),containsDistinct,LocalResult,../data/xml/h2_call_methods/LocalResult.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TypeInfo getColumnType(int i) {
        return expressions[i].getType();
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.result.LocalResult:getColumnType(int),getColumnType,LocalResult,../data/xml/h2_call_methods/LocalResult.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the value type.
     *
     * @return the value type
     */
public int getValueType() {
        return valueType;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.value.TypeInfo:getValueType(),getValueType,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_IN_SELECT,(M)org.h2.value.Value:getValueType(),getValueType,Value,../data/xml/h2_call_methods/Value.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if this result set contains a NULL value. This method may reset
     * this result.
     *
     * @return true if there is a NULL value
     */
public boolean containsNull() {
        Boolean r = containsNull;
        if (r == null) {
            r = false;
            reset();
            loop: while (next()) {
                Value[] row = currentRow;
                for (int i = 0; i < visibleColumnCount; i++) {
                    if (row[i].containsNull()) {
                        r = true;
                        break loop;
                    }
                }
            }
            reset();
            containsNull = r;
        }
        return r;
    }

    ",OPTIMIZE_IN_SELECT,(M)org.h2.result.LocalResult:containsNull(),containsNull,LocalResult,../data/xml/h2_call_methods/LocalResult.xml
