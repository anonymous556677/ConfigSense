function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_OR,(M)org.h2.expression.Expression:optimize(org.h2.engine.SessionLocal),optimize,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_OR,(M)org.h2.expression.Expression:getCost(),getCost,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_OR,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_OR,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Get an additional condition if possible. Example: given two conditions
     * A=B AND B=C, the new condition A=C is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the third condition for indexes
     */
Expression getAdditionalAnd(SessionLocal session, Comparison other) {
        if (compareType == EQUAL && other.compareType == EQUAL && !whenOperand) {
            boolean lc = left.isConstant();
            boolean rc = right.isConstant();
            boolean l2c = other.left.isConstant();
            boolean r2c = other.right.isConstant();
            String l = left.getSQL(DEFAULT_SQL_FLAGS);
            String l2 = other.left.getSQL(DEFAULT_SQL_FLAGS);
            String r = right.getSQL(DEFAULT_SQL_FLAGS);
            String r2 = other.right.getSQL(DEFAULT_SQL_FLAGS);
            // a=b AND a=c
            // must not compare constants. example: NOT(B=2 AND B=3)
            if (!(rc && r2c) && l.equals(l2)) {
                return new Comparison(EQUAL, right, other.right, false);
            } else if (!(rc && l2c) && l.equals(r2)) {
                return new Comparison(EQUAL, right, other.left, false);
            } else if (!(lc && r2c) && r.equals(l2)) {
                return new Comparison(EQUAL, left, other.right, false);
            } else if (!(lc && l2c) && r.equals(r2)) {
                return new Comparison(EQUAL, left, other.left, false);
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.Comparison:getAdditionalAnd(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",getAdditionalAnd,Comparison,../data/xml/h2_call_methods/Comparison.xml
org.h2.engine.Database:getSettings(),"/**
     * Replace the OR condition with IN condition if possible. Example: given
     * the two conditions A=1 OR A=2, the new condition A IN(1, 2) is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the joined IN condition
     */
Expression optimizeOr(SessionLocal session, Comparison other) {
        if (compareType == EQUAL && other.compareType == EQUAL) {
            Expression left2 = other.left;
            Expression right2 = other.right;
            String l2 = left2.getSQL(DEFAULT_SQL_FLAGS);
            String r2 = right2.getSQL(DEFAULT_SQL_FLAGS);
            if (left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
                String l = left.getSQL(DEFAULT_SQL_FLAGS);
                if (l.equals(l2)) {
                    return getConditionIn(left, right, right2);
                } else if (l.equals(r2)) {
                    return getConditionIn(left, right, left2);
                }
            }
            if (right.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
                String r = right.getSQL(DEFAULT_SQL_FLAGS);
                if (r.equals(l2)) {
                    return getConditionIn(right, left, right2);
                } else if (r.equals(r2)) {
                    return getConditionIn(right, left, left2);
                }
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.Comparison:optimizeOr(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",optimizeOr,Comparison,../data/xml/h2_call_methods/Comparison.xml
org.h2.engine.Database:getSettings(),"/**
     * Add an additional element if possible. Example: given two conditions
     * A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
     *
     * @param other the second condition
     * @return null if the condition was not added, or the new condition
     */
Expression getAdditional(Comparison other) {
        if (!not && !whenOperand && left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            Expression add = other.getIfEquals(left);
            if (add != null) {
                ArrayList<Expression> list = new ArrayList<>(valueList.size() + 1);
                list.addAll(valueList);
                list.add(add);
                return new ConditionIn(left, false, false, list);
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,(M)org.h2.expression.condition.ConditionIn:getAdditional(org.h2.expression.condition.Comparison),getAdditional,ConditionIn,../data/xml/h2_call_methods/ConditionIn.xml
org.h2.engine.Database:getSettings(),"/**
     * Add an additional element if possible. Example: given two conditions
     * A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
     *
     * @param session the session
     * @param other the second condition
     * @return null if the condition was not added, or the new condition
     */
Expression getAdditional(SessionLocal session, Comparison other) {
        if (!not && !whenOperand && left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            Expression add = other.getIfEquals(left);
            if (add != null) {
                if (add.isConstant()) {
                    ArrayList<Expression> list = new ArrayList<>(valueList.size() + 1);
                    list.addAll(valueList);
                    list.add(add);
                    return new ConditionInConstantSet(session, left, false, false, list);
                }
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.ConditionInConstantSet:getAdditional(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",getAdditional,ConditionInConstantSet,../data/xml/h2_call_methods/ConditionInConstantSet.xml
org.h2.engine.Database:getSettings(),"/**
     * Optimize query according to the given condition. Example:
     * (A AND B) OR (C AND B), the new condition B AND (A OR C) is returned
     *
     * @param left the session
     * @param right the second condition
     * @return null or the third condition
     */
static Expression optimizeConditionAndOr(ConditionAndOr left, ConditionAndOr right) {
        if (left.andOrType != AND || right.andOrType != AND) {
            return null;
        }
        Expression leftLeft = left.getSubexpression(0), leftRight = left.getSubexpression(1);
        Expression rightLeft = right.getSubexpression(0), rightRight = right.getSubexpression(1);
        String rightLeftSQL = rightLeft.getSQL(DEFAULT_SQL_FLAGS);
        String rightRightSQL = rightRight.getSQL(DEFAULT_SQL_FLAGS);
        if (leftLeft.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            String leftLeftSQL = leftLeft.getSQL(DEFAULT_SQL_FLAGS);
            if (leftLeftSQL.equals(rightLeftSQL)) {
                return new ConditionAndOr(AND, leftLeft, new ConditionAndOr(OR, leftRight, rightRight));
            }
            if (leftLeftSQL.equals(rightRightSQL)) {
                return new ConditionAndOr(AND, leftLeft, new ConditionAndOr(OR, leftRight, rightLeft));
            }
        }
        if (leftRight.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            String leftRightSQL = leftRight.getSQL(DEFAULT_SQL_FLAGS);
            if (leftRightSQL.equals(rightLeftSQL)) {
                return new ConditionAndOr(AND, leftRight, new ConditionAndOr(OR, leftLeft, rightRight));
            } else if (leftRightSQL.equals(rightRightSQL)) {
                return new ConditionAndOr(AND, leftRight, new ConditionAndOr(OR, leftLeft, rightLeft));
            }
        }
        return null;
    }
}",OPTIMIZE_OR,"(S)org.h2.expression.condition.ConditionAndOr:optimizeConditionAndOr(org.h2.expression.condition.ConditionAndOr,org.h2.expression.condition.ConditionAndOr)",optimizeConditionAndOr,ConditionAndOr,../data/xml/h2_call_methods/ConditionAndOr.xml
org.h2.engine.Database:getSettings(),"/**
     * Optimize the condition if at least one part is constant.
     *
     * @param session the session
     * @param andOrType the type
     * @param left the left part of the condition
     * @param right the right part of the condition
     * @return the optimized condition, or {@code null} if condition cannot be optimized
     */
static Expression optimizeIfConstant(SessionLocal session, int andOrType, Expression left, Expression right) {
        if (!left.isConstant()) {
            if (!right.isConstant()) {
                return null;
            } else {
                return optimizeConstant(session, andOrType, right.getValue(session), left);
            }
        }
        Value l = left.getValue(session);
        if (!right.isConstant()) {
            return optimizeConstant(session, andOrType, l, right);
        }
        Value r = right.getValue(session);
        switch (andOrType) {
        case AND: {
            if (l.isFalse() || r.isFalse()) {
                return ValueExpression.FALSE;
            }
            if (l == ValueNull.INSTANCE || r == ValueNull.INSTANCE) {
                return TypedValueExpression.UNKNOWN;
            }
            return ValueExpression.TRUE;
        }
        case OR: {
            if (l.isTrue() || r.isTrue()) {
                return ValueExpression.TRUE;
            }
            if (l == ValueNull.INSTANCE || r == ValueNull.INSTANCE) {
                return TypedValueExpression.UNKNOWN;
            }
            return ValueExpression.FALSE;
        }
        default:
            throw DbException.getInternalError(""type="" + andOrType);
        }
    }

    ",OPTIMIZE_OR,"(S)org.h2.expression.condition.ConditionAndOr:optimizeIfConstant(org.h2.engine.SessionLocal,int,org.h2.expression.Expression,org.h2.expression.Expression)",optimizeIfConstant,ConditionAndOr,../data/xml/h2_call_methods/ConditionAndOr.xml
org.h2.engine.Database:getSettings(),"
private static Expression optimizeN(ConditionAndOr condition) {
        if (condition.right instanceof ConditionAndOr) {
            ConditionAndOr rightCondition = (ConditionAndOr) condition.right;
            if (rightCondition.andOrType == condition.andOrType) {
                return new ConditionAndOrN(condition.andOrType, condition.left, rightCondition.left,
                        rightCondition.right);
            }
        }
        if (condition.right instanceof ConditionAndOrN) {
            ConditionAndOrN rightCondition = (ConditionAndOrN) condition.right;
            if (rightCondition.getAndOrType() == condition.andOrType) {
                rightCondition.addFirst(condition.left);
                return rightCondition;
            }
        }
        return condition;
    }

    ",OPTIMIZE_OR,(S)org.h2.expression.condition.ConditionAndOr:optimizeN(org.h2.expression.condition.ConditionAndOr),optimizeN,ConditionAndOr,../data/xml/h2_call_methods/ConditionAndOr.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_OR,(M)org.h2.expression.Expression:optimize(org.h2.engine.SessionLocal),optimize,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
private boolean optimizeMerge(int i) {
        Expression e = expressions.get(i);
        // If we have a ConditionAndOrN as a sub-expression, see if we can merge it
        // into this one.
        if (e instanceof ConditionAndOrN) {
            ConditionAndOrN rightCondition = (ConditionAndOrN) e;
            if (this.andOrType == rightCondition.andOrType) {
                expressions.remove(i);
                expressions.addAll(i, rightCondition.expressions);
                return true;
            }
        }
        else if (e instanceof ConditionAndOr) {
            ConditionAndOr rightCondition = (ConditionAndOr) e;
            if (this.andOrType == rightCondition.getAndOrType()) {
                expressions.set(i, rightCondition.getSubexpression(0));
                expressions.add(i+1, rightCondition.getSubexpression(1));
                return true;
            }
        }
        return false;
    }

    ",OPTIMIZE_OR,(O)org.h2.expression.condition.ConditionAndOrN:optimizeMerge(int),optimizeMerge,ConditionAndOrN,../data/xml/h2_call_methods/ConditionAndOrN.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_OR,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_OR,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Get an additional condition if possible. Example: given two conditions
     * A=B AND B=C, the new condition A=C is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the third condition for indexes
     */
Expression getAdditionalAnd(SessionLocal session, Comparison other) {
        if (compareType == EQUAL && other.compareType == EQUAL && !whenOperand) {
            boolean lc = left.isConstant();
            boolean rc = right.isConstant();
            boolean l2c = other.left.isConstant();
            boolean r2c = other.right.isConstant();
            String l = left.getSQL(DEFAULT_SQL_FLAGS);
            String l2 = other.left.getSQL(DEFAULT_SQL_FLAGS);
            String r = right.getSQL(DEFAULT_SQL_FLAGS);
            String r2 = other.right.getSQL(DEFAULT_SQL_FLAGS);
            // a=b AND a=c
            // must not compare constants. example: NOT(B=2 AND B=3)
            if (!(rc && r2c) && l.equals(l2)) {
                return new Comparison(EQUAL, right, other.right, false);
            } else if (!(rc && l2c) && l.equals(r2)) {
                return new Comparison(EQUAL, right, other.left, false);
            } else if (!(lc && r2c) && r.equals(l2)) {
                return new Comparison(EQUAL, left, other.right, false);
            } else if (!(lc && l2c) && r.equals(r2)) {
                return new Comparison(EQUAL, left, other.left, false);
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.Comparison:getAdditionalAnd(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",getAdditionalAnd,Comparison,../data/xml/h2_call_methods/Comparison.xml
org.h2.engine.Database:getSettings(),"/**
     * Replace the OR condition with IN condition if possible. Example: given
     * the two conditions A=1 OR A=2, the new condition A IN(1, 2) is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the joined IN condition
     */
Expression optimizeOr(SessionLocal session, Comparison other) {
        if (compareType == EQUAL && other.compareType == EQUAL) {
            Expression left2 = other.left;
            Expression right2 = other.right;
            String l2 = left2.getSQL(DEFAULT_SQL_FLAGS);
            String r2 = right2.getSQL(DEFAULT_SQL_FLAGS);
            if (left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
                String l = left.getSQL(DEFAULT_SQL_FLAGS);
                if (l.equals(l2)) {
                    return getConditionIn(left, right, right2);
                } else if (l.equals(r2)) {
                    return getConditionIn(left, right, left2);
                }
            }
            if (right.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
                String r = right.getSQL(DEFAULT_SQL_FLAGS);
                if (r.equals(l2)) {
                    return getConditionIn(right, left, right2);
                } else if (r.equals(r2)) {
                    return getConditionIn(right, left, left2);
                }
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.Comparison:optimizeOr(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",optimizeOr,Comparison,../data/xml/h2_call_methods/Comparison.xml
org.h2.engine.Database:getSettings(),"/**
     * Add an additional element if possible. Example: given two conditions
     * A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
     *
     * @param other the second condition
     * @return null if the condition was not added, or the new condition
     */
Expression getAdditional(Comparison other) {
        if (!not && !whenOperand && left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            Expression add = other.getIfEquals(left);
            if (add != null) {
                ArrayList<Expression> list = new ArrayList<>(valueList.size() + 1);
                list.addAll(valueList);
                list.add(add);
                return new ConditionIn(left, false, false, list);
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,(M)org.h2.expression.condition.ConditionIn:getAdditional(org.h2.expression.condition.Comparison),getAdditional,ConditionIn,../data/xml/h2_call_methods/ConditionIn.xml
org.h2.engine.Database:getSettings(),"/**
     * Add an additional element if possible. Example: given two conditions
     * A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
     *
     * @param session the session
     * @param other the second condition
     * @return null if the condition was not added, or the new condition
     */
Expression getAdditional(SessionLocal session, Comparison other) {
        if (!not && !whenOperand && left.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            Expression add = other.getIfEquals(left);
            if (add != null) {
                if (add.isConstant()) {
                    ArrayList<Expression> list = new ArrayList<>(valueList.size() + 1);
                    list.addAll(valueList);
                    list.add(add);
                    return new ConditionInConstantSet(session, left, false, false, list);
                }
            }
        }
        return null;
    }

    ",OPTIMIZE_OR,"(M)org.h2.expression.condition.ConditionInConstantSet:getAdditional(org.h2.engine.SessionLocal,org.h2.expression.condition.Comparison)",getAdditional,ConditionInConstantSet,../data/xml/h2_call_methods/ConditionInConstantSet.xml
org.h2.engine.Database:getSettings(),"/**
     * Optimize query according to the given condition. Example:
     * (A AND B) OR (C AND B), the new condition B AND (A OR C) is returned
     *
     * @param left the session
     * @param right the second condition
     * @return null or the third condition
     */
static Expression optimizeConditionAndOr(ConditionAndOr left, ConditionAndOr right) {
        if (left.andOrType != AND || right.andOrType != AND) {
            return null;
        }
        Expression leftLeft = left.getSubexpression(0), leftRight = left.getSubexpression(1);
        Expression rightLeft = right.getSubexpression(0), rightRight = right.getSubexpression(1);
        String rightLeftSQL = rightLeft.getSQL(DEFAULT_SQL_FLAGS);
        String rightRightSQL = rightRight.getSQL(DEFAULT_SQL_FLAGS);
        if (leftLeft.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            String leftLeftSQL = leftLeft.getSQL(DEFAULT_SQL_FLAGS);
            if (leftLeftSQL.equals(rightLeftSQL)) {
                return new ConditionAndOr(AND, leftLeft, new ConditionAndOr(OR, leftRight, rightRight));
            }
            if (leftLeftSQL.equals(rightRightSQL)) {
                return new ConditionAndOr(AND, leftLeft, new ConditionAndOr(OR, leftRight, rightLeft));
            }
        }
        if (leftRight.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR)) {
            String leftRightSQL = leftRight.getSQL(DEFAULT_SQL_FLAGS);
            if (leftRightSQL.equals(rightLeftSQL)) {
                return new ConditionAndOr(AND, leftRight, new ConditionAndOr(OR, leftLeft, rightRight));
            } else if (leftRightSQL.equals(rightRightSQL)) {
                return new ConditionAndOr(AND, leftRight, new ConditionAndOr(OR, leftLeft, rightLeft));
            }
        }
        return null;
    }
}",OPTIMIZE_OR,"(S)org.h2.expression.condition.ConditionAndOr:optimizeConditionAndOr(org.h2.expression.condition.ConditionAndOr,org.h2.expression.condition.ConditionAndOr)",optimizeConditionAndOr,ConditionAndOr,../data/xml/h2_call_methods/ConditionAndOr.xml
org.h2.engine.Database:getSettings(),"/**
     * Optimize the condition if at least one part is constant.
     *
     * @param session the session
     * @param andOrType the type
     * @param left the left part of the condition
     * @param right the right part of the condition
     * @return the optimized condition, or {@code null} if condition cannot be optimized
     */
static Expression optimizeIfConstant(SessionLocal session, int andOrType, Expression left, Expression right) {
        if (!left.isConstant()) {
            if (!right.isConstant()) {
                return null;
            } else {
                return optimizeConstant(session, andOrType, right.getValue(session), left);
            }
        }
        Value l = left.getValue(session);
        if (!right.isConstant()) {
            return optimizeConstant(session, andOrType, l, right);
        }
        Value r = right.getValue(session);
        switch (andOrType) {
        case AND: {
            if (l.isFalse() || r.isFalse()) {
                return ValueExpression.FALSE;
            }
            if (l == ValueNull.INSTANCE || r == ValueNull.INSTANCE) {
                return TypedValueExpression.UNKNOWN;
            }
            return ValueExpression.TRUE;
        }
        case OR: {
            if (l.isTrue() || r.isTrue()) {
                return ValueExpression.TRUE;
            }
            if (l == ValueNull.INSTANCE || r == ValueNull.INSTANCE) {
                return TypedValueExpression.UNKNOWN;
            }
            return ValueExpression.FALSE;
        }
        default:
            throw DbException.getInternalError(""type="" + andOrType);
        }
    }

    ",OPTIMIZE_OR,"(S)org.h2.expression.condition.ConditionAndOr:optimizeIfConstant(org.h2.engine.SessionLocal,int,org.h2.expression.Expression,org.h2.expression.Expression)",optimizeIfConstant,ConditionAndOr,../data/xml/h2_call_methods/ConditionAndOr.xml
org.h2.engine.Database:getSettings(),"/**
     * Add a cast around the expression (if necessary) so that the type is boolean.
     *
     * @param session the session
     * @param expression the expression
     * @return the new expression
     */
static Expression castToBoolean(SessionLocal session, Expression expression) {
        if (expression.getType().getValueType() == Value.BOOLEAN) {
            return expression;
        }
        return new CastSpecification(expression, TypeInfo.TYPE_BOOLEAN);
    }

    ",OPTIMIZE_OR,"(S)org.h2.expression.condition.Condition:castToBoolean(org.h2.engine.SessionLocal,org.h2.expression.Expression)",castToBoolean,Condition,../data/xml/h2_call_methods/Condition.xml
