function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"
public TableBase(CreateTableData data) {
        super(data.schema, data.id, data.tableName,
                data.persistIndexes, data.persistData);
        this.tableEngine = data.tableEngine;
        this.globalTemporary = data.globalTemporary;
        if (data.tableEngineParams != null) {
            this.tableEngineParams = data.tableEngineParams;
        } else {
            this.tableEngineParams = Collections.emptyList();
        }
        setTemporary(data.temporary);
        setColumns(data.columns.toArray(new Column[0]));
    }

    ",ANALYZE_AUTO,(O)org.h2.table.TableBase:<init>(org.h2.command.ddl.CreateTableData),<init>,TableBase,../data/xml/h2_call_methods/TableBase.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a new ArrayList with an initial capacity of 4.
     *
     * @param <T> the type
     * @return the object
     */
public static <T> ArrayList<T> newSmallArrayList() {
        return new ArrayList<>(4);
    }

    ",ANALYZE_AUTO,(S)org.h2.util.Utils:newSmallArrayList(),newSmallArrayList,Utils,../data/xml/h2_call_methods/Utils.xml
org.h2.engine.Database:getSettings(),not found,ANALYZE_AUTO,(M)org.h2.mvstore.db.MVTable:getColumns(),getColumns,MVTable,../data/xml/h2_call_methods/MVTable.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TypeInfo getType() {
        return type;
    }

    ",ANALYZE_AUTO,(M)org.h2.table.Column:getType(),getType,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the value type.
     *
     * @return the value type
     */
public int getValueType() {
        return valueType;
    }

    ",ANALYZE_AUTO,(M)org.h2.value.TypeInfo:getValueType(),getValueType,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if the given value type is a large object (BLOB or CLOB).
     *
     * @param type the value type
     * @return true if the value type is a lob type
     */
public static boolean isLargeObject(int type) {
        return type == Value.BLOB || type == Value.CLOB;
    }

    ",ANALYZE_AUTO,(S)org.h2.value.DataType:isLargeObject(int),isLargeObject,DataType,../data/xml/h2_call_methods/DataType.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",ANALYZE_AUTO,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public TransactionStore getTransactionStore() {
        return transactionStore;
    }

    ",ANALYZE_AUTO,(M)org.h2.mvstore.db.Store:getTransactionStore(),getTransactionStore,Store,../data/xml/h2_call_methods/Store.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the trace object for the given module id.
     *
     * @param moduleId the module id
     * @return the trace object
     */
public Trace getTrace(int moduleId) {
        return traceSystem.getTrace(moduleId);
    }

    ",ANALYZE_AUTO,(M)org.h2.engine.Database:getTrace(int),getTrace,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,ANALYZE_AUTO,(M)org.h2.mvstore.db.MVTable:getId(),getId,MVTable,../data/xml/h2_call_methods/MVTable.xml
org.h2.engine.Database:getSettings(),"/**
     * Create an array of index columns from a list of columns. The default sort
     * type is used.
     *
     * @param columns the column list
     * @return the index column array
     */
public static IndexColumn[] wrap(Column[] columns) {
        IndexColumn[] list = new IndexColumn[columns.length];
        for (int i = 0; i < list.length; i++) {
            list[i] = new IndexColumn(columns[i]);
        }
        return list;
    }

    ",ANALYZE_AUTO,(S)org.h2.table.IndexColumn:wrap(org.h2.table.Column[]),wrap,IndexColumn,../data/xml/h2_call_methods/IndexColumn.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a scan pseudo-index.
     *
     * @param persistent if the index is persistent
     * @return the index type
     */
public static IndexType createScan(boolean persistent) {
        IndexType type = new IndexType();
        type.persistent = persistent;
        type.scan = true;
        return type;
    }

    ",ANALYZE_AUTO,(S)org.h2.index.IndexType:createScan(boolean),createScan,IndexType,../data/xml/h2_call_methods/IndexType.xml
org.h2.engine.Database:getSettings(),"
public MVPrimaryIndex(Database db, MVTable table, int id, IndexColumn[] columns, IndexType indexType) {
        super(table, id, table.getName() + ""_DATA"", columns, 0, indexType);
        this.mvTable = table;
        RowDataType valueType = table.getRowFactory().getRowDataType();
        mapName = ""table."" + getId();
        Transaction t = mvTable.getTransactionBegin();
        dataMap = t.openMap(mapName, LongDataType.INSTANCE, valueType);
        dataMap.map.setVolatile(!table.isPersistData() || !indexType.isPersistent());
        if (!db.isStarting()) {
            dataMap.clear();
        }
        t.commit();
        Long k = dataMap.map.lastKey();    // include uncommitted keys as well
        lastKey.set(k == null ? 0 : k);
    }

    ",ANALYZE_AUTO,"(O)org.h2.mvstore.db.MVPrimaryIndex:<init>(org.h2.engine.Database,org.h2.mvstore.db.MVTable,int,org.h2.table.IndexColumn[],org.h2.index.IndexType)",<init>,MVPrimaryIndex,../data/xml/h2_call_methods/MVPrimaryIndex.xml
