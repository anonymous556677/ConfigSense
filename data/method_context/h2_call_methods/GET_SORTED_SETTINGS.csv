function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"
public Collection<Setting> getAllSettings() {
        return settings.values();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllSettings(),getAllSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public String getStringValue() {
        return stringValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getStringValue(),getStringValue,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),"
public int getIntValue() {
        return intValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getIntValue(),getIntValue,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getName(),getName,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),"
public User getUser() {
        return user;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getUser(),getUser,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public boolean isAdmin() {
        return admin;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.User:isAdmin(),isAdmin,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),"
public DefaultNullOrdering getDefaultNullOrdering() {
        return defaultNullOrdering;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getDefaultNullOrdering(),getDefaultNullOrdering,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.mode.DefaultNullOrdering:name(),name,DefaultNullOrdering,../data/xml/h2_call_methods/DefaultNullOrdering.xml
org.h2.engine.Database:getSettings(),"
public SessionLocal getExclusiveSession() {
        return exclusiveSession.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getExclusiveSession(),getExclusiveSession,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Mode getMode() {
        return mode;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getMode(),getMode,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public String getName() {
        return name;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Mode:getName(),getName,Mode,../data/xml/h2_call_methods/Mode.xml
org.h2.engine.Database:getSettings(),"
public int getQueryTimeout() {
        return queryTimeout;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getQueryTimeout(),getQueryTimeout,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TimeZoneProvider currentTimeZone() {
        return timeZone;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:currentTimeZone(),currentTimeZone,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
        public String getId() {
            String id = this.id;
            if (id == null) {
                this.id = id = DateTimeUtils.timeZoneNameFromOffsetSeconds(offset);
            }
            return id;
        }

        

@Override
        public String getId() {
            return zoneId.getId();
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.util.TimeZoneProvider:getId(),getId,TimeZoneProvider,../data/xml/h2_call_methods/TimeZoneProvider.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns parsing mode of data types with too large length.
     *
     * @return {@code true} if large length is truncated, {@code false} if an
     *         exception is thrown
     */
public boolean isTruncateLargeLength() {
        return truncateLargeLength;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isTruncateLargeLength(),isTruncateLargeLength,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns BINARY data type parsing mode.
     *
     * @return {@code true} if BINARY should be parsed as VARBINARY,
     *         {@code false} if it should be parsed as is
     */
public boolean isVariableBinary() {
        return variableBinary;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isVariableBinary(),isVariableBinary,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean isOldInformationSchema() {
        return oldInformationSchema;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isOldInformationSchema(),isOldInformationSchema,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Gets bit set of non-keywords.
     *
     * @return set of non-keywords, or {@code null}
     */
public BitSet getNonKeywords() {
        return nonKeywords;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getNonKeywords(),getNonKeywords,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public int getRetentionTime() {
        return store.getMvStore().getRetentionTime();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getRetentionTime(),getRetentionTime,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.DbSettings:getSortedSettings(),getSortedSettings,DbSettings,../data/xml/h2_call_methods/DbSettings.xml
org.h2.engine.Database:getSettings(),"
public Store getStore() {
        return store;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getStore(),getStore,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public MVStore getMvStore() {
        return mvStore;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.db.Store:getMvStore(),getMvStore,Store,../data/xml/h2_call_methods/Store.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the file store.
     *
     * @return the file store
     */
public FileStore getFileStore() {
        return fileStore;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getFileStore(),getFileStore,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of write operations since this store was opened.
     * For file based stores, this is the number of file write operations.
     *
     * @return the number of write operations
     */
public long getWriteCount() {
        return writeCount.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getWriteCount(),getWriteCount,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of written bytes since this store was opened.
     *
     * @return the number of write operations
     */
public long getWriteBytes() {
        return writeBytes.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getWriteBytes(),getWriteBytes,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of read operations since this store was opened.
     * For file based stores, this is the number of file read operations.
     *
     * @return the number of read operations
     */
public long getReadCount() {
        return readCount.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getReadCount(),getReadCount,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of read bytes since this store was opened.
     *
     * @return the number of write operations
     */
public long getReadBytes() {
        return readBytes.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getReadBytes(),getReadBytes,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"
public double getUpdateFailureRatio() {
        long updateCounter = this.updateCounter;
        long updateAttemptCounter = this.updateAttemptCounter;
        RootReference<?,?> rootReference = layout.getRoot();
        updateCounter += rootReference.updateCounter;
        updateAttemptCounter += rootReference.updateAttemptCounter;
        rootReference = meta.getRoot();
        updateCounter += rootReference.updateCounter;
        updateAttemptCounter += rootReference.updateAttemptCounter;
        for (MVMap<?, ?> map : maps.values()) {
            RootReference<?,?> root = map.getRoot();
            updateCounter += root.updateCounter;
            updateAttemptCounter += root.updateAttemptCounter;
        }
        return updateAttemptCounter == 0 ? 0 : 1 - ((double)updateCounter / updateAttemptCounter);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getUpdateFailureRatio(),getUpdateFailureRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getFillRate() {
        saveChunkLock.lock();
        try {
            return fileStore.getFillRate();
        } finally {
            saveChunkLock.unlock();
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getFillRate(),getFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the current fill rate (percentage of used space in the file). Unlike
     * the fill rate of the store, here we only account for chunk data; the fill
     * rate here is how much of the chunk data is live (still referenced). Young
     * chunks are considered live.
     *
     * @return the fill rate, in percent (100 is completely full)
     */
public int getChunksFillRate() {
        return getChunksFillRate(true);
    }

    

private int getChunksFillRate(boolean all) {
        long maxLengthSum = 1;
        long maxLengthLiveSum = 1;
        long time = getTimeSinceCreation();
        for (Chunk c : chunks.values()) {
            if (all || isRewritable(c, time)) {
                assert c.maxLen >= 0;
                maxLengthSum += c.maxLen;
                maxLengthLiveSum += c.maxLenLive;
            }
        }
        // the fill rate of all chunks combined
        int fillRate = (int) (100 * maxLengthLiveSum / maxLengthSum);
        return fillRate;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getChunksFillRate(),getChunksFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getRewritableChunksFillRate() {
        return getChunksFillRate(false);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getRewritableChunksFillRate(),getRewritableChunksFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the file instance in use.
     * <p>
     * The application may read from the file (for example for online backup),
     * but not write to it or truncate it.
     *
     * @return the file
     */
public FileChannel getFile() {
        return file;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getFile(),getFile,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get data chunks count.
     *
     * @return number of existing chunks in store.
     */
public int getChunkCount() {
        return chunks.size();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getChunkCount(),getChunkCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get data pages count.
     *
     * @return number of existing pages in store.
     */
public int getPageCount() {
        int count = 0;
        for (Chunk chunk : chunks.values()) {
            count += chunk.pageCount;
        }
        return count;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getPageCount(),getPageCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get live data pages count.
     *
     * @return number of existing live pages in store.
     */
public int getLivePageCount() {
        int count = 0;
        for (Chunk chunk : chunks.values()) {
            count += chunk.pageCountLive;
        }
        return count;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getLivePageCount(),getLivePageCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getPageSplitSize() {
        return pageSplitSize;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getPageSplitSize(),getPageSplitSize,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the maximum cache size, in MB.
     * Note that this does not include the page chunk references cache, which is
     * 25% of the size of the page cache.
     *
     * @return the cache size
     */
public int getCacheSize() {
        if (cache == null) {
            return 0;
        }
        return (int) (cache.getMaxMemory() >> 20);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheSize(),getCacheSize,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the amount of memory used for caching, in MB.
     * Note that this does not include the page chunk references cache, which is
     * 25% of the size of the page cache.
     *
     * @return the amount of memory used for caching
     */
public int getCacheSizeUsed() {
        if (cache == null) {
            return 0;
        }
        return (int) (cache.getUsedMemory() >> 20);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheSizeUsed(),getCacheSizeUsed,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getCacheHitRatio() {
        return getCacheHitRatio(cache);
    }

    

private static int getCacheHitRatio(CacheLongKeyLIRS<?> cache) {
        if (cache == null) {
            return 0;
        }
        long hits = cache.getHits();
        return (int) (100 * hits / (hits + cache.getMisses() + 1));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheHitRatio(),getCacheHitRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getTocCacheHitRatio() {
        return getCacheHitRatio(chunksToC);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getTocCacheHitRatio(),getTocCacheHitRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getLeafRatio() {
        return (int)(leafCount * 100 / Math.max(1, leafCount + nonLeafCount));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getLeafRatio(),getLeafRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.result.SearchRow:getValue(int),getValue,SearchRow,../data/xml/h2_call_methods/SearchRow.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a new ArrayList with an initial capacity of 4.
     *
     * @param <T> the type
     * @return the object
     */
public static <T> ArrayList<T> newSmallArrayList() {
        return new ArrayList<>(4);
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.util.Utils:newSmallArrayList(),newSmallArrayList,Utils,../data/xml/h2_call_methods/Utils.xml
org.h2.engine.Database:getSettings(),"
public String getShortName() {
        return databaseShortName;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getShortName(),getShortName,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public User getUser() {
        return user;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getUser(),getUser,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public boolean isAdmin() {
        return admin;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.User:isAdmin(),isAdmin,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),"/**
     * Get all tables of this database, including local temporary tables for the
     * session.
     *
     * @param session the session
     * @return the array of tables
     */
private ArrayList<Table> getAllTables(SessionLocal session) {
        ArrayList<Table> tables = new ArrayList<>();
        for (Schema schema : database.getAllSchemas()) {
            tables.addAll(schema.getAllTablesAndViews(session));
        }
        tables.addAll(session.getLocalTempTables());
        return tables;
    }

    ",GET_SORTED_SETTINGS,(O)org.h2.table.InformationSchemaTableLegacy:getAllTables(org.h2.engine.SessionLocal),getAllTables,InformationSchemaTableLegacy,../data/xml/h2_call_methods/InformationSchemaTableLegacy.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getName(),getName,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,"(M)org.h2.table.InformationSchemaTableLegacy:hideTable(org.h2.table.Table,org.h2.engine.SessionLocal)",hideTable,InformationSchemaTableLegacy,../data/xml/h2_call_methods/InformationSchemaTableLegacy.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:isTemporary(),isTemporary,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
public boolean isGlobalTemporary() {
        return false;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Table:isGlobalTemporary(),isGlobalTemporary,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
public boolean isPersistIndexes() {
        return persistIndexes;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Table:isPersistIndexes(),isPersistIndexes,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getCreateSQL(),getCreateSQL,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getSchema(),getSchema,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Schema:getName(),getName,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getTableType(),getTableType,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String toString() {
        if (this == EXTERNAL_TABLE_ENGINE) {
            return ""EXTERNAL"";
        } else if (this == SYSTEM_TABLE) {
            return ""SYSTEM TABLE"";
        } else if (this == TABLE_LINK) {
            return ""TABLE LINK"";
        } else {
            return super.toString();
        }
    }

}",GET_SORTED_SETTINGS,(M)org.h2.table.TableType:toString(),toString,TableType,../data/xml/h2_call_methods/TableType.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getComment(),getComment,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getMaxDataModificationId(),getMaxDataModificationId,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"/**
     * Get or create a BIGINT value for the given long.
     *
     * @param i the long
     * @return the value
     */
public static ValueBigint get(long i) {
        if (i >= 0 && i < STATIC_SIZE) {
            return STATIC_CACHE[(int) i];
        }
        return (ValueBigint) Value.cache(new ValueBigint(i));
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.ValueBigint:get(long),get,ValueBigint,../data/xml/h2_call_methods/ValueBigint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getId(),getId,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"/**
     * Get or create an INTEGER value for the given int.
     *
     * @param i the int
     * @return the value
     */
public static ValueInteger get(int i) {
        if (i >= 0 && i < STATIC_SIZE) {
            return STATIC_CACHE[i];
        }
        ValueInteger v = DYNAMIC_CACHE[i & (DYNAMIC_SIZE - 1)];
        if (v == null || v.value != i) {
            v = new ValueInteger(i);
            DYNAMIC_CACHE[i & (DYNAMIC_SIZE - 1)] = v;
        }
        return v;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.ValueInteger:get(int),get,ValueInteger,../data/xml/h2_call_methods/ValueInteger.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getRowCountApproximation(org.h2.engine.SessionLocal),getRowCountApproximation,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.value.Value:getString(),getString,Value,../data/xml/h2_call_methods/Value.xml
org.h2.engine.Database:getSettings(),"
public Column[] getColumns() {
        return columns;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Table:getColumns(),getColumns,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
@Override
    public CompareMode getCompareMode() {
        return compareMode;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getCompareMode(),getCompareMode,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the collation name.
     *
     * @param l the locale
     * @return the name of the collation
     */
public static String getName(Locale l) {
        Locale english = Locale.ENGLISH;
        String name = l.getDisplayLanguage(english) + ' ' +
                l.getDisplayCountry(english) + ' ' + l.getVariant();
        name = StringUtils.toUpperEnglish(name.trim().replace(' ', '_'));
        return name;
    }

    

public String getName() {
        return name == null ? OFF : name;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.value.CompareMode:getName(),getName,CompareMode,../data/xml/h2_call_methods/CompareMode.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Domain getDomain() {
        return domain;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getDomain(),getDomain,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TypeInfo getType() {
        return type;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getType(),getType,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the precision.
     *
     * @return the precision
     */
public long getPrecision() {
        switch (valueType) {
        case Value.UNKNOWN:
            return -1L;
        case Value.NULL:
            return ValueNull.PRECISION;
        case Value.CHAR:
        case Value.BINARY:
            return precision >= 0L ? precision : 1L;
        case Value.VARCHAR:
        case Value.VARCHAR_IGNORECASE:
        case Value.VARBINARY:
        case Value.JAVA_OBJECT:
        case Value.ENUM:
        case Value.GEOMETRY:
        case Value.JSON:
            return precision >= 0L ? precision : Constants.MAX_STRING_LENGTH;
        case Value.CLOB:
        case Value.BLOB:
            return precision >= 0L ? precision : Long.MAX_VALUE;
        case Value.BOOLEAN:
            return ValueBoolean.PRECISION;
        case Value.TINYINT:
            return ValueTinyint.PRECISION;
        case Value.SMALLINT:
            return ValueSmallint.PRECISION;
        case Value.INTEGER:
            return ValueInteger.PRECISION;
        case Value.BIGINT:
            return ValueBigint.PRECISION;
        case Value.NUMERIC:
            return precision >= 0L ? precision : Constants.MAX_NUMERIC_PRECISION;
        case Value.REAL:
            return ValueReal.PRECISION;
        case Value.DOUBLE:
            return ValueDouble.PRECISION;
        case Value.DECFLOAT:
            return precision >= 0L ? precision : Constants.MAX_NUMERIC_PRECISION;
        case Value.DATE:
            return ValueDate.PRECISION;
        case Value.TIME: {
            int s = scale >= 0 ? scale : ValueTime.DEFAULT_SCALE;
            return s == 0 ? 8 : 9 + s;
        }
        case Value.TIME_TZ: {
            int s = scale >= 0 ? scale : ValueTime.DEFAULT_SCALE;
            return s == 0 ? 14 : 15 + s;
        }
        case Value.TIMESTAMP: {
            int s = scale >= 0 ? scale : ValueTimestamp.DEFAULT_SCALE;
            return s == 0 ? 19 : 20 + s;
        }
        case Value.TIMESTAMP_TZ: {
            int s = scale >= 0 ? scale : ValueTimestamp.DEFAULT_SCALE;
            return s == 0 ? 25 : 26 + s;
        }
        case Value.INTERVAL_YEAR:
        case Value.INTERVAL_MONTH:
        case Value.INTERVAL_DAY:
        case Value.INTERVAL_HOUR:
        case Value.INTERVAL_MINUTE:
        case Value.INTERVAL_SECOND:
        case Value.INTERVAL_YEAR_TO_MONTH:
        case Value.INTERVAL_DAY_TO_HOUR:
        case Value.INTERVAL_DAY_TO_MINUTE:
        case Value.INTERVAL_DAY_TO_SECOND:
        case Value.INTERVAL_HOUR_TO_MINUTE:
        case Value.INTERVAL_HOUR_TO_SECOND:
        case Value.INTERVAL_MINUTE_TO_SECOND:
            return precision >= 0L ? precision : ValueInterval.DEFAULT_PRECISION;
        case Value.ROW:
            return Integer.MAX_VALUE;
        case Value.UUID:
            return ValueUuid.PRECISION;
        case Value.ARRAY:
            return precision >= 0L ? precision : Constants.MAX_ARRAY_CARDINALITY;
        default:
            return precision;
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.value.TypeInfo:getPrecision(),getPrecision,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Convert a long value to an int value. Values larger than the biggest int
     * value are converted to the biggest int value, and values smaller than the
     * smallest int value are converted to the smallest int value.
     *
     * @param l the value to convert
     * @return the converted int value
     */
public static int convertLongToInt(long l) {
        if (l <= Integer.MIN_VALUE) {
            return Integer.MIN_VALUE;
        } else if (l >= Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        } else {
            return (int) l;
        }
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.util.MathUtils:convertLongToInt(long),convertLongToInt,MathUtils,../data/xml/h2_call_methods/MathUtils.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the scale.
     *
     * @return the scale
     */
public int getScale() {
        switch (valueType) {
        case Value.UNKNOWN:
            return -1;
        case Value.NULL:
        case Value.CHAR:
        case Value.VARCHAR:
        case Value.CLOB:
        case Value.VARCHAR_IGNORECASE:
        case Value.BINARY:
        case Value.VARBINARY:
        case Value.BLOB:
        case Value.BOOLEAN:
        case Value.TINYINT:
        case Value.SMALLINT:
        case Value.INTEGER:
        case Value.BIGINT:
        case Value.REAL:
        case Value.DOUBLE:
        case Value.DECFLOAT:
        case Value.DATE:
        case Value.INTERVAL_YEAR:
        case Value.INTERVAL_MONTH:
        case Value.INTERVAL_DAY:
        case Value.INTERVAL_HOUR:
        case Value.INTERVAL_MINUTE:
        case Value.INTERVAL_YEAR_TO_MONTH:
        case Value.INTERVAL_DAY_TO_HOUR:
        case Value.INTERVAL_DAY_TO_MINUTE:
        case Value.INTERVAL_HOUR_TO_MINUTE:
        case Value.JAVA_OBJECT:
        case Value.ENUM:
        case Value.GEOMETRY:
        case Value.JSON:
        case Value.UUID:
        case Value.ARRAY:
        case Value.ROW:
            return 0;
        case Value.NUMERIC:
            return scale >= 0 ? scale : 0;
        case Value.TIME:
        case Value.TIME_TZ:
            return scale >= 0 ? scale : ValueTime.DEFAULT_SCALE;
        case Value.TIMESTAMP:
        case Value.TIMESTAMP_TZ:
            return scale >= 0 ? scale : ValueTimestamp.DEFAULT_SCALE;
        case Value.INTERVAL_SECOND:
        case Value.INTERVAL_DAY_TO_SECOND:
        case Value.INTERVAL_HOUR_TO_SECOND:
        case Value.INTERVAL_MINUTE_TO_SECOND:
            return scale >= 0 ? scale : ValueInterval.DEFAULT_SCALE;
        default:
            return scale;
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.value.TypeInfo:getScale(),getScale,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),"
public Sequence getSequence() {
        return sequence;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getSequence(),getSequence,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the value type.
     *
     * @return the value type
     */
public int getValueType() {
        return valueType;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.value.TypeInfo:getValueType(),getValueType,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns whether this column is a generated column.
     *
     * @return whether this column is a generated column
     */
public boolean isGenerated() {
        return isGeneratedAlways && defaultExpression != null;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:isGenerated(),isGenerated,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if the given value type is an interval type.
     *
     * @param type the value type
     * @return true if the value type is an interval type
     */
public static boolean isIntervalType(int type) {
        return type >= Value.INTERVAL_YEAR && type <= Value.INTERVAL_MINUTE_TO_SECOND;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.DataType:isIntervalType(int),isIntervalType,DataType,../data/xml/h2_call_methods/DataType.xml
org.h2.engine.Database:getSettings(),"
public String getCreateSQLWithoutName() {
        return getCreateSQL(new StringBuilder(), false);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getCreateSQLWithoutName(),getCreateSQLWithoutName,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
public String getName() {
        return name;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getName(),getName,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getDefaultSQL() {
        return defaultExpression == null ? null
                : defaultExpression.getUnenclosedSQL(new StringBuilder(), DEFAULT_SQL_FLAGS).toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getDefaultSQL(),getDefaultSQL,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
public boolean isNullable() {
        return nullable;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:isNullable(),isNullable,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Convert a value type to a SQL type.
     *
     * @param type the type
     * @return the SQL type
     */
public static int convertTypeToSQLType(TypeInfo type) {
        int valueType = type.getValueType();
        switch (valueType) {
        case Value.NUMERIC:
            return type.getExtTypeInfo() != null ? Types.DECIMAL : Types.NUMERIC;
        case Value.REAL:
        case Value.DOUBLE:
            if (type.getDeclaredPrecision() >= 0) {
                return Types.FLOAT;
            }
            break;
        }
        return getDataType(valueType).sqlType;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.DataType:convertTypeToSQLType(org.h2.value.TypeInfo),convertTypeToSQLType,DataType,../data/xml/h2_call_methods/DataType.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getSchema(),getSchema,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getName(),getName,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the declared name of this data type with precision, scale,
     * length, cardinality etc. parameters removed, excluding parameters of ENUM
     * data type, GEOMETRY data type, ARRAY elements, and ROW fields.
     *
     * @return the declared name
     */
public String getDeclaredTypeName() {
        switch (valueType) {
        case Value.NUMERIC:
            return extTypeInfo != null ? ""DECIMAL"" : ""NUMERIC"";
        case Value.REAL:
        case Value.DOUBLE:
            if (extTypeInfo != null) {
                return ""FLOAT"";
            }
            break;
        case Value.ENUM:
        case Value.GEOMETRY:
        case Value.ROW:
            return getSQL(DEFAULT_SQL_FLAGS);
        case Value.ARRAY:
            TypeInfo typeInfo = (TypeInfo) extTypeInfo;
            // Use full type names with parameters for elements
            return typeInfo.getSQL(new StringBuilder(), DEFAULT_SQL_FLAGS).append("" ARRAY"").toString();
        }
        return Value.getTypeName(valueType);
    }

}",GET_SORTED_SETTINGS,(M)org.h2.value.TypeInfo:getDeclaredTypeName(),getDeclaredTypeName,TypeInfo,../data/xml/h2_call_methods/TypeInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the boolean value for the given boolean.
     *
     * @param b the boolean
     * @return the value
     */
public static ValueBoolean get(boolean b) {
        return b ? TRUE : FALSE;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.ValueBoolean:get(boolean),get,ValueBoolean,../data/xml/h2_call_methods/ValueBoolean.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the selectivity of the column. Selectivity 100 means values are
     * unique, 10 means every distinct value appears 10 times on average.
     *
     * @return the selectivity
     */
public int getSelectivity() {
        return selectivity == 0 ? Constants.SELECTIVITY_DEFAULT : selectivity;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getSelectivity(),getSelectivity,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getName(),getName,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public String getComment() {
        return comment;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getComment(),getComment,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getOnUpdateSQL() {
        return onUpdateExpression == null ? null
                : onUpdateExpression.getUnenclosedSQL(new StringBuilder(), DEFAULT_SQL_FLAGS).toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getOnUpdateSQL(),getOnUpdateSQL,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
public boolean getVisible() {
        return visible;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getVisible(),getVisible,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.Table:getIndexes(),getIndexes,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
public ArrayList<Constraint> getConstraints() {
        return constraints;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Table:getConstraints(),getConstraints,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getCreateSQL() {
        return getCreateSQLForCopy(table, getSQL(DEFAULT_SQL_FLAGS));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.Index:getCreateSQL(),getCreateSQL,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:usesIndex(org.h2.index.Index),usesIndex,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the index type.
     *
     * @return the index type
     */
public final IndexType getIndexType() {
        return indexType;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.Index:getIndexType(),getIndexType,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Does this index belong to a primary key constraint?
     *
     * @return true if it references a primary key constraint
     */
public boolean isPrimaryKey() {
        return primaryKey;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.IndexType:isPrimaryKey(),isPrimaryKey,IndexType,../data/xml/h2_call_methods/IndexType.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getConstraintType(),getConstraintType,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getName(),getName,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the indexed columns as index columns (with ordering information).
     *
     * @return the index columns
     */
public final IndexColumn[] getIndexColumns() {
        return indexColumns;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.Index:getIndexColumns(),getIndexColumns,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns count of unique columns. Unique columns, if any, are always first
     * columns in the lists. Unique indexes may have additional indexed
     * non-unique columns.
     *
     * @return count of unique columns, or 0 if index isn't unique
     */
public final int getUniqueColumnCount() {
        return uniqueColumnColumn;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.Index:getUniqueColumnCount(),getUniqueColumnCount,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.index.Index:getName(),getName,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Get or create a SMALLINT value for the given short.
     *
     * @param i the short
     * @return the value
     */
public static ValueSmallint get(short i) {
        return (ValueSmallint) Value.cache(new ValueSmallint(i));
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.ValueSmallint:get(short),get,ValueSmallint,../data/xml/h2_call_methods/ValueSmallint.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the SQL snippet to create such an index.
     *
     * @return the SQL snippet
     */
public String getSQL() {
        StringBuilder buff = new StringBuilder();
        if (primaryKey) {
            buff.append(""PRIMARY KEY"");
            if (hash) {
                buff.append("" HASH"");
            }
        } else {
            if (unique) {
                buff.append(""UNIQUE "");
            }
            if (hash) {
                buff.append(""HASH "");
            }
            if (spatial) {
                buff.append(""SPATIAL "");
            }
            buff.append(""INDEX"");
        }
        return buff.toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.IndexType:getSQL(),getSQL,IndexType,../data/xml/h2_call_methods/IndexType.xml
org.h2.engine.Database:getSettings(),"/**
     * If the index is created because of a constraint. Such indexes are to be
     * dropped once the constraint is dropped.
     *
     * @return if the index belongs to a constraint
     */
public boolean getBelongsToConstraint() {
        return belongsToConstraint;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.index.IndexType:getBelongsToConstraint(),getBelongsToConstraint,IndexType,../data/xml/h2_call_methods/IndexType.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.index.Index:getComment(),getComment,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.index.Index:getId(),getId,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the data type object for the given value type.
     *
     * @param type the value type
     * @return the data type object
     */
public static DataType getDataType(int type) {
        if (type == Value.UNKNOWN) {
            throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1, ""?"");
        }
        if (type >= Value.NULL && type < Value.TYPE_COUNT) {
            return TYPES_BY_VALUE_TYPE[type];
        }
        return TYPES_BY_VALUE_TYPE[Value.NULL];
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.DataType:getDataType(int),getDataType,DataType,../data/xml/h2_call_methods/DataType.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns name of the specified data type.
     *
     * @param valueType
     *            the value type
     * @return the name
     */
public static String getTypeName(int valueType) {
        return NAMES[valueType + 1];
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.Value:getTypeName(int),getTypeName,Value,../data/xml/h2_call_methods/Value.xml
org.h2.engine.Database:getSettings(),"/**
     * Convert an int value to a short value. Values larger than the biggest
     * short value are converted to the biggest short value, and values smaller
     * than the smallest short value are converted to the smallest short value.
     *
     * @param i the value to convert
     * @return the converted short value
     */
public static short convertIntToShort(int i) {
        if (i <= Short.MIN_VALUE) {
            return Short.MIN_VALUE;
        } else if (i >= Short.MAX_VALUE) {
            return Short.MAX_VALUE;
        } else {
            return (short) i;
        }
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.util.MathUtils:convertIntToShort(int),convertIntToShort,MathUtils,../data/xml/h2_call_methods/MathUtils.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if the given value type is a numeric type.
     *
     * @param type the value type
     * @return true if the value type is a numeric type
     */
public static boolean isNumericType(int type) {
        return type >= Value.TINYINT && type <= Value.DECFLOAT;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.DataType:isNumericType(int),isNumericType,DataType,../data/xml/h2_call_methods/DataType.xml
org.h2.engine.Database:getSettings(),"
public Collection<Setting> getAllSettings() {
        return settings.values();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllSettings(),getAllSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public String getStringValue() {
        return stringValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getStringValue(),getStringValue,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),"
public int getIntValue() {
        return intValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getIntValue(),getIntValue,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Setting:getName(),getName,Setting,../data/xml/h2_call_methods/Setting.xml
org.h2.engine.Database:getSettings(),"
public DefaultNullOrdering getDefaultNullOrdering() {
        return defaultNullOrdering;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getDefaultNullOrdering(),getDefaultNullOrdering,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.mode.DefaultNullOrdering:name(),name,DefaultNullOrdering,../data/xml/h2_call_methods/DefaultNullOrdering.xml
org.h2.engine.Database:getSettings(),"
public SessionLocal getExclusiveSession() {
        return exclusiveSession.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getExclusiveSession(),getExclusiveSession,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Mode getMode() {
        return mode;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getMode(),getMode,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public String getName() {
        return name;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Mode:getName(),getName,Mode,../data/xml/h2_call_methods/Mode.xml
org.h2.engine.Database:getSettings(),"
public int getQueryTimeout() {
        return queryTimeout;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getQueryTimeout(),getQueryTimeout,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TimeZoneProvider currentTimeZone() {
        return timeZone;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:currentTimeZone(),currentTimeZone,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
        public String getId() {
            String id = this.id;
            if (id == null) {
                this.id = id = DateTimeUtils.timeZoneNameFromOffsetSeconds(offset);
            }
            return id;
        }

        

@Override
        public String getId() {
            return zoneId.getId();
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.util.TimeZoneProvider:getId(),getId,TimeZoneProvider,../data/xml/h2_call_methods/TimeZoneProvider.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns parsing mode of data types with too large length.
     *
     * @return {@code true} if large length is truncated, {@code false} if an
     *         exception is thrown
     */
public boolean isTruncateLargeLength() {
        return truncateLargeLength;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isTruncateLargeLength(),isTruncateLargeLength,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns BINARY data type parsing mode.
     *
     * @return {@code true} if BINARY should be parsed as VARBINARY,
     *         {@code false} if it should be parsed as is
     */
public boolean isVariableBinary() {
        return variableBinary;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isVariableBinary(),isVariableBinary,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean isOldInformationSchema() {
        return oldInformationSchema;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:isOldInformationSchema(),isOldInformationSchema,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Gets bit set of non-keywords.
     *
     * @return set of non-keywords, or {@code null}
     */
public BitSet getNonKeywords() {
        return nonKeywords;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getNonKeywords(),getNonKeywords,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public int getRetentionTime() {
        return store.getMvStore().getRetentionTime();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getRetentionTime(),getRetentionTime,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.DbSettings:getSortedSettings(),getSortedSettings,DbSettings,../data/xml/h2_call_methods/DbSettings.xml
org.h2.engine.Database:getSettings(),"
public Store getStore() {
        return store;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getStore(),getStore,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public MVStore getMvStore() {
        return mvStore;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.db.Store:getMvStore(),getMvStore,Store,../data/xml/h2_call_methods/Store.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the file store.
     *
     * @return the file store
     */
public FileStore getFileStore() {
        return fileStore;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getFileStore(),getFileStore,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of write operations since this store was opened.
     * For file based stores, this is the number of file write operations.
     *
     * @return the number of write operations
     */
public long getWriteCount() {
        return writeCount.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getWriteCount(),getWriteCount,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of written bytes since this store was opened.
     *
     * @return the number of write operations
     */
public long getWriteBytes() {
        return writeBytes.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getWriteBytes(),getWriteBytes,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of read operations since this store was opened.
     * For file based stores, this is the number of file read operations.
     *
     * @return the number of read operations
     */
public long getReadCount() {
        return readCount.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getReadCount(),getReadCount,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the number of read bytes since this store was opened.
     *
     * @return the number of write operations
     */
public long getReadBytes() {
        return readBytes.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getReadBytes(),getReadBytes,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"
public double getUpdateFailureRatio() {
        long updateCounter = this.updateCounter;
        long updateAttemptCounter = this.updateAttemptCounter;
        RootReference<?,?> rootReference = layout.getRoot();
        updateCounter += rootReference.updateCounter;
        updateAttemptCounter += rootReference.updateAttemptCounter;
        rootReference = meta.getRoot();
        updateCounter += rootReference.updateCounter;
        updateAttemptCounter += rootReference.updateAttemptCounter;
        for (MVMap<?, ?> map : maps.values()) {
            RootReference<?,?> root = map.getRoot();
            updateCounter += root.updateCounter;
            updateAttemptCounter += root.updateAttemptCounter;
        }
        return updateAttemptCounter == 0 ? 0 : 1 - ((double)updateCounter / updateAttemptCounter);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getUpdateFailureRatio(),getUpdateFailureRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getFillRate() {
        saveChunkLock.lock();
        try {
            return fileStore.getFillRate();
        } finally {
            saveChunkLock.unlock();
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getFillRate(),getFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the current fill rate (percentage of used space in the file). Unlike
     * the fill rate of the store, here we only account for chunk data; the fill
     * rate here is how much of the chunk data is live (still referenced). Young
     * chunks are considered live.
     *
     * @return the fill rate, in percent (100 is completely full)
     */
public int getChunksFillRate() {
        return getChunksFillRate(true);
    }

    

private int getChunksFillRate(boolean all) {
        long maxLengthSum = 1;
        long maxLengthLiveSum = 1;
        long time = getTimeSinceCreation();
        for (Chunk c : chunks.values()) {
            if (all || isRewritable(c, time)) {
                assert c.maxLen >= 0;
                maxLengthSum += c.maxLen;
                maxLengthLiveSum += c.maxLenLive;
            }
        }
        // the fill rate of all chunks combined
        int fillRate = (int) (100 * maxLengthLiveSum / maxLengthSum);
        return fillRate;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getChunksFillRate(),getChunksFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getRewritableChunksFillRate() {
        return getChunksFillRate(false);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getRewritableChunksFillRate(),getRewritableChunksFillRate,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the file instance in use.
     * <p>
     * The application may read from the file (for example for online backup),
     * but not write to it or truncate it.
     *
     * @return the file
     */
public FileChannel getFile() {
        return file;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.FileStore:getFile(),getFile,FileStore,../data/xml/h2_call_methods/FileStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get data chunks count.
     *
     * @return number of existing chunks in store.
     */
public int getChunkCount() {
        return chunks.size();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getChunkCount(),getChunkCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get data pages count.
     *
     * @return number of existing pages in store.
     */
public int getPageCount() {
        int count = 0;
        for (Chunk chunk : chunks.values()) {
            count += chunk.pageCount;
        }
        return count;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getPageCount(),getPageCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get live data pages count.
     *
     * @return number of existing live pages in store.
     */
public int getLivePageCount() {
        int count = 0;
        for (Chunk chunk : chunks.values()) {
            count += chunk.pageCountLive;
        }
        return count;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getLivePageCount(),getLivePageCount,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getPageSplitSize() {
        return pageSplitSize;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getPageSplitSize(),getPageSplitSize,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the maximum cache size, in MB.
     * Note that this does not include the page chunk references cache, which is
     * 25% of the size of the page cache.
     *
     * @return the cache size
     */
public int getCacheSize() {
        if (cache == null) {
            return 0;
        }
        return (int) (cache.getMaxMemory() >> 20);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheSize(),getCacheSize,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the amount of memory used for caching, in MB.
     * Note that this does not include the page chunk references cache, which is
     * 25% of the size of the page cache.
     *
     * @return the amount of memory used for caching
     */
public int getCacheSizeUsed() {
        if (cache == null) {
            return 0;
        }
        return (int) (cache.getUsedMemory() >> 20);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheSizeUsed(),getCacheSizeUsed,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getCacheHitRatio() {
        return getCacheHitRatio(cache);
    }

    

private static int getCacheHitRatio(CacheLongKeyLIRS<?> cache) {
        if (cache == null) {
            return 0;
        }
        long hits = cache.getHits();
        return (int) (100 * hits / (hits + cache.getMisses() + 1));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getCacheHitRatio(),getCacheHitRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getTocCacheHitRatio() {
        return getCacheHitRatio(chunksToC);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getTocCacheHitRatio(),getTocCacheHitRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),"
public int getLeafRatio() {
        return (int)(leafCount * 100 / Math.max(1, leafCount + nonLeafCount));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.mvstore.MVStore:getLeafRatio(),getLeafRatio,MVStore,../data/xml/h2_call_methods/MVStore.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(O)org.h2.tools.Csv:<init>(),<init>,Csv,../data/xml/h2_call_methods/Csv.xml
org.h2.engine.Database:getSettings(),"/**
     * Set the line comment character. The default is character code 0 (line
     * comments are disabled).
     *
     * @param lineCommentCharacter the line comment character
     */
public void setLineCommentCharacter(char lineCommentCharacter) {
        this.lineComment = lineCommentCharacter;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.tools.Csv:setLineCommentCharacter(char),setLineCommentCharacter,Csv,../data/xml/h2_call_methods/Csv.xml
org.h2.engine.Database:getSettings(),"
private ArrayList<SchemaObject> getAllSchemaObjects(int type) {
        ArrayList<SchemaObject> list = new ArrayList<>();
        for (Schema schema : database.getAllSchemas()) {
            schema.getAll(type, list);
        }
        return list;
    }

    ",GET_SORTED_SETTINGS,(O)org.h2.table.InformationSchemaTableLegacy:getAllSchemaObjects(int),getAllSchemaObjects,InformationSchemaTableLegacy,../data/xml/h2_call_methods/InformationSchemaTableLegacy.xml
org.h2.engine.Database:getSettings(),"
public TypeInfo getDataType() {
        return dataType;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getDataType(),getDataType,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getSchema(),getSchema,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public int getEffectivePrecision() {
        TypeInfo dataType = this.dataType;
        switch (dataType.getValueType()) {
        case Value.NUMERIC: {
            int p = (int) dataType.getPrecision();
            int s = dataType.getScale();
            if (p - s > ValueBigint.DECIMAL_PRECISION) {
                return ValueBigint.DECIMAL_PRECISION + s;
            }
            return p;
        }
        case Value.DECFLOAT:
            return Math.min((int) dataType.getPrecision(), ValueBigint.DECIMAL_PRECISION);
        default:
            return (int) dataType.getPrecision();
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getEffectivePrecision(),getEffectivePrecision,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public long getStartValue() {
        return startValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getStartValue(),getStartValue,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public long getMinValue() {
        return minValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getMinValue(),getMinValue,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public long getMaxValue() {
        return maxValue;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getMaxValue(),getMaxValue,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public long getIncrement() {
        return increment;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getIncrement(),getIncrement,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public Cycle getCycle() {
        return cycle;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getCycle(),getCycle,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"/**
         * Return whether sequence is cycled.
         *
         * @return {@code true} if sequence is cycled, {@code false} if sequence
         *         is not cycled
         */
public boolean isCycle() {
            return this == CYCLE;
        }

    }",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence$Cycle:isCycle(),isCycle,Sequence$Cycle,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public synchronized long getCurrentValue() {
        return baseValue - increment;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getCurrentValue(),getCurrentValue,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public boolean getBelongsToTable() {
        return belongsToTable;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getBelongsToTable(),getBelongsToTable,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getComment(),getComment,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public long getCacheSize() {
        return cacheSize;
    }

}",GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getCacheSize(),getCacheSize,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Sequence:getId(),getId,Sequence,../data/xml/h2_call_methods/Sequence.xml
org.h2.engine.Database:getSettings(),"
public Collection<RightOwner> getAllUsersAndRoles() {
        return usersAndRoles.values();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllUsersAndRoles(),getAllUsersAndRoles,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.User:getName(),getName,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.User:getComment(),getComment,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.User:getId(),getId,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.User:isRoleGranted(org.h2.engine.Role),isRoleGranted,User,../data/xml/h2_call_methods/User.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Role:getName(),getName,Role,../data/xml/h2_call_methods/Role.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Role:getComment(),getComment,Role,../data/xml/h2_call_methods/Role.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Role:getId(),getId,Role,../data/xml/h2_call_methods/Role.xml
org.h2.engine.Database:getSettings(),"
public ArrayList<Right> getAllRights() {
        return new ArrayList<>(rights.values());
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllRights(),getAllRights,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public Role getGrantedRole() {
        return grantedRole;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getGrantedRole(),getGrantedRole,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),"
public DbObject getGrantee() {
        return grantee;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getGrantee(),getGrantee,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.DbObject:getType(),getType,DbObject,../data/xml/h2_call_methods/DbObject.xml
org.h2.engine.Database:getSettings(),"
public DbObject getGrantedObject() {
        return grantedObject;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getGrantedObject(),getGrantedObject,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the name.
     *
     * @return the name
     */
public final String getName() {
        return objectName;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.DbObject:getName(),getName,DbObject,../data/xml/h2_call_methods/DbObject.xml
org.h2.engine.Database:getSettings(),"
public String getRights() {
        StringBuilder buff = new StringBuilder();
        if (grantedRight == ALL) {
            buff.append(""ALL"");
        } else {
            boolean comma = false;
            comma = appendRight(buff, grantedRight, SELECT, ""SELECT"", comma);
            comma = appendRight(buff, grantedRight, DELETE, ""DELETE"", comma);
            comma = appendRight(buff, grantedRight, INSERT, ""INSERT"", comma);
            comma = appendRight(buff, grantedRight, UPDATE, ""UPDATE"", comma);
            appendRight(buff, grantedRight, ALTER_ANY_SCHEMA, ""ALTER ANY SCHEMA"", comma);
        }
        return buff.toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getRights(),getRights,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getId(),getId,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),"
public Collection<Schema> getAllSchemas() {
        return schemas.values();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllSchemas(),getAllSchemas,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public Collection<UserDefinedFunction> getAllFunctionsAndAggregates() {
        return functionsAndAggregates.values();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Schema:getAllFunctionsAndAggregates(),getAllFunctionsAndAggregates,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the Java methods mapped by this function.
     *
     * @return the Java methods.
     */
public JavaMethod[] getJavaMethods() {
        load();
        return javaMethods;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getJavaMethods(),getJavaMethods,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"/**
         * Returns data type information for regular functions or {@code null}
         * for table value functions.
         *
         * @return data type information for regular functions or {@code null}
         *         for table value functions
         */
public TypeInfo getDataType() {
            return dataType;
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias$JavaMethod:getDataType(),getDataType,FunctionAlias$JavaMethod,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getSchema(),getSchema,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getName(),getName,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getJavaClassName(),getJavaClassName,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"
public String getJavaMethodName() {
        return this.methodName;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getJavaMethodName(),getJavaMethodName,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"
public int getParameterCount() {
            return paramCount;
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias$JavaMethod:getParameterCount(),getParameterCount,FunctionAlias$JavaMethod,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getComment(),getComment,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getId(),getId,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"
public String getSource() {
        return source;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias:getSource(),getSource,FunctionAlias,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns main schema (usually PUBLIC).
     *
     * @return main schema (usually PUBLIC)
     */
public Schema getMainSchema() {
        return mainSchema;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getMainSchema(),getMainSchema,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.UserDefinedFunction:getName(),getName,UserDefinedFunction,../data/xml/h2_call_methods/UserDefinedFunction.xml
org.h2.engine.Database:getSettings(),"
public final String getJavaClassName() {
        return className;
    }

}",GET_SORTED_SETTINGS,(M)org.h2.schema.UserDefinedFunction:getJavaClassName(),getJavaClassName,UserDefinedFunction,../data/xml/h2_call_methods/UserDefinedFunction.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.UserDefinedFunction:getComment(),getComment,UserDefinedFunction,../data/xml/h2_call_methods/UserDefinedFunction.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.UserDefinedFunction:getId(),getId,UserDefinedFunction,../data/xml/h2_call_methods/UserDefinedFunction.xml
org.h2.engine.Database:getSettings(),"
public Class<?>[] getColumnClasses() {
            return method.getParameterTypes();
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias$JavaMethod:getColumnClasses(),getColumnClasses,FunctionAlias$JavaMethod,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"/**
         * Check if this function requires a database connection.
         *
         * @return if the function requires a connection
         */
public boolean hasConnectionParam() {
            return this.hasConnectionParam;
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.schema.FunctionAlias$JavaMethod:hasConnectionParam(),hasConnectionParam,FunctionAlias$JavaMethod,../data/xml/h2_call_methods/FunctionAlias.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the owner of this schema.
     *
     * @return the owner
     */
public RightOwner getOwner() {
        return owner;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Schema:getOwner(),getOwner,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.RightOwner:getName(),getName,RightOwner,../data/xml/h2_call_methods/RightOwner.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Schema:getId(),getId,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Schema:getComment(),getComment,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),"
public int getRightMask() {
        return grantedRight;
    }

}",GET_SORTED_SETTINGS,(M)org.h2.engine.Right:getRightMask(),getRightMask,Right,../data/xml/h2_call_methods/Right.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns available locales for collations.
     *
     * @param onlyIfInitialized
     *            if {@code true}, returns {@code null} when locales are not yet
     *            initialized
     * @return available locales for collations.
     */
public static Locale[] getCollationLocales(boolean onlyIfInitialized) {
        Locale[] locales = LOCALES;
        if (locales == null && !onlyIfInitialized) {
            LOCALES = locales = Collator.getAvailableLocales();
        }
        return locales;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.CompareMode:getCollationLocales(boolean),getCollationLocales,CompareMode,../data/xml/h2_call_methods/CompareMode.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if this view is currently invalid.
     *
     * @return true if it is
     */
public boolean isInvalid() {
        return createException != null;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.TableView:isInvalid(),isInvalid,TableView,../data/xml/h2_call_methods/TableView.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableView:getComment(),getComment,TableView,../data/xml/h2_call_methods/TableView.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableView:getId(),getId,TableView,../data/xml/h2_call_methods/TableView.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the list of in-doubt transactions.
     *
     * @return the list
     */
public ArrayList<InDoubtTransaction> getInDoubtTransactions() {
        return store.getInDoubtTransactions();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getInDoubtTransactions(),getInDoubtTransactions,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(I)org.h2.store.InDoubtTransaction:getTransactionName(),getTransactionName,InDoubtTransaction,../data/xml/h2_call_methods/InDoubtTransaction.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the state of this transaction as a text.
     *
     * @return the transaction state text
     */
default String getStateDescription() {
        int state = getState();
        switch (state) {
        case 0:
            return ""IN_DOUBT"";
        case 1:
            return ""COMMIT"";
        case 2:
            return ""ROLLBACK"";
        default:
            throw DbException.getInternalError(""state="" + state);
        }
    }

    ",GET_SORTED_SETTINGS,(I)org.h2.store.InDoubtTransaction:getStateDescription(),getStateDescription,InDoubtTransaction,../data/xml/h2_call_methods/InDoubtTransaction.xml
org.h2.engine.Database:getSettings(),"
public IndexColumn[] getColumns() {
        return columns;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getColumns(),getColumns,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),"
public IndexColumn[] getRefColumns() {
        return refColumns;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getRefColumns(),getRefColumns,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getTable(),getTable,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Table getRefTable() {
        return refTable;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getRefTable(),getRefTable,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),"
public ConstraintActionType getUpdateAction() {
        return updateAction;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getUpdateAction(),getUpdateAction,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),"
private static short getRefAction(ConstraintActionType action) {
        switch (action) {
        case CASCADE:
            return DatabaseMetaData.importedKeyCascade;
        case RESTRICT:
            return DatabaseMetaData.importedKeyRestrict;
        case SET_DEFAULT:
            return DatabaseMetaData.importedKeySetDefault;
        case SET_NULL:
            return DatabaseMetaData.importedKeySetNull;
        default:
            throw DbException.getInternalError(""action=""+action);
        }
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.table.InformationSchemaTableLegacy:getRefAction(org.h2.constraint.ConstraintActionType),getRefAction,InformationSchemaTableLegacy,../data/xml/h2_call_methods/InformationSchemaTableLegacy.xml
org.h2.engine.Database:getSettings(),"
public ConstraintActionType getDeleteAction() {
        return deleteAction;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getDeleteAction(),getDeleteAction,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getName(),getName,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),"
@Override
    public ConstraintUnique getReferencedConstraint() {
        return refConstraint;
    }

}",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getReferencedConstraint(),getReferencedConstraint,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintUnique:getName(),getName,ConstraintUnique,../data/xml/h2_call_methods/ConstraintUnique.xml
org.h2.engine.Database:getSettings(),"
public Table getTable() {
        return table;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getTable(),getTable,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the index of this constraint in the source table, or null if no index
     * is used.
     *
     * @return the index
     */
public Index getIndex() {
        return null;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getIndex(),getIndex,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Expression getExpression() {
        return expr;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintCheck:getExpression(),getExpression,ConstraintCheck,../data/xml/h2_call_methods/ConstraintCheck.xml
org.h2.engine.Database:getSettings(),"
@Override
    public final String getSQL(int sqlFlags) {
        return getSQL(new StringBuilder(), sqlFlags, AUTO_PARENTHESES).toString();
    }

    

@Override
    public final StringBuilder getSQL(StringBuilder builder, int sqlFlags) {
        return getSQL(builder, sqlFlags, AUTO_PARENTHESES);
    }

    
/**
     * Get the SQL statement of this expression. This may not always be the
     * original SQL statement, especially after optimization.
     *
     * @param sqlFlags
     *            formatting flags
     * @param parentheses
     *            parentheses mode
     * @return the SQL statement
     */
public final String getSQL(int sqlFlags, int parentheses) {
        return getSQL(new StringBuilder(), sqlFlags, parentheses).toString();
    }

    
/**
     * Get the SQL statement of this expression. This may not always be the
     * original SQL statement, especially after optimization.
     *
     * @param builder
     *            string builder
     * @param sqlFlags
     *            formatting flags
     * @param parentheses
     *            parentheses mode
     * @return the specified string builder
     */
public final StringBuilder getSQL(StringBuilder builder, int sqlFlags, int parentheses) {
        return parentheses == WITH_PARENTHESES || parentheses != WITHOUT_PARENTHESES && needParentheses()
                ? getUnenclosedSQL(builder.append('('), sqlFlags).append(')')
                : getUnenclosedSQL(builder, sqlFlags);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.expression.Expression:getSQL(int),getSQL,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
public IndexColumn[] getColumns() {
        return columns;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintUnique:getColumns(),getColumns,ConstraintUnique,../data/xml/h2_call_methods/ConstraintUnique.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getSchema(),getSchema,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"/**
         * Get standard SQL type name.
         *
         * @return standard SQL type name
         */
public String getSqlName() {
            if (this == Constraint.Type.PRIMARY_KEY) {
                return ""PRIMARY KEY"";
            }
            if (this == Constraint.Type.REFERENTIAL) {
                return ""FOREIGN KEY"";
            }
            return name();
        }

    }",GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint$Type:getSqlName(),getSqlName,Constraint$Type,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint$Type:name(),name,Constraint$Type,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getComment(),getComment,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getCreateSQL(),getCreateSQL,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getId(),getId,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"
public ValueExpression getValue() {
        return expression;
    }

}",GET_SORTED_SETTINGS,(M)org.h2.schema.Constant:getValue(),getValue,Constant,../data/xml/h2_call_methods/Constant.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Constant:getSchema(),getSchema,Constant,../data/xml/h2_call_methods/Constant.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Constant:getName(),getName,Constant,../data/xml/h2_call_methods/Constant.xml
org.h2.engine.Database:getSettings(),"
@Override
    public TypeInfo getType() {
        return value.getType();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.expression.ValueExpression:getType(),getType,ValueExpression,../data/xml/h2_call_methods/ValueExpression.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Constant:getComment(),getComment,Constant,../data/xml/h2_call_methods/Constant.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.expression.ValueExpression:getSQL(int),getSQL,ValueExpression,../data/xml/h2_call_methods/ValueExpression.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Constant:getId(),getId,Constant,../data/xml/h2_call_methods/Constant.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Domain getDomain() {
        return domain;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getDomain(),getDomain,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"
public TypeInfo getDataType() {
        return type;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getDataType(),getDataType,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getDefaultSQL() {
        return defaultExpression == null ? null
                : defaultExpression.getUnenclosedSQL(new StringBuilder(), DEFAULT_SQL_FLAGS).toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getDefaultSQL(),getDefaultSQL,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getOnUpdateSQL() {
        return onUpdateExpression == null ? null
                : onUpdateExpression.getUnenclosedSQL(new StringBuilder(), DEFAULT_SQL_FLAGS).toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getOnUpdateSQL(),getOnUpdateSQL,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getComment(),getComment,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getCreateSQL() {
        StringBuilder builder = getSQL(new StringBuilder(""CREATE DOMAIN ""), DEFAULT_SQL_FLAGS).append("" AS "");
        if (domain != null) {
            domain.getSQL(builder, DEFAULT_SQL_FLAGS);
        } else {
            type.getSQL(builder, DEFAULT_SQL_FLAGS);
        }
        if (defaultExpression != null) {
            defaultExpression.getUnenclosedSQL(builder.append("" DEFAULT ""), DEFAULT_SQL_FLAGS);
        }
        if (onUpdateExpression != null) {
            onUpdateExpression.getUnenclosedSQL(builder.append("" ON UPDATE ""), DEFAULT_SQL_FLAGS);
        }
        return builder.toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getCreateSQL(),getCreateSQL,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.Domain:getId(),getId,Domain,../data/xml/h2_call_methods/Domain.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the table of this trigger.
     *
     * @return the table
     */
public Table getTable() {
        return table;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getTable(),getTable,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getSchema(),getSchema,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getName(),getName,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if this is a before trigger.
     *
     * @return true if it is
     */
public boolean isBefore() {
        return before;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:isBefore(),isBefore,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the trigger class name.
     *
     * @return the class name
     */
public String getTriggerClassName() {
        return triggerClassName;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getTriggerClassName(),getTriggerClassName,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"
public int getQueueSize() {
        return queueSize;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getQueueSize(),getQueueSize,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"
public boolean isNoWait() {
        return noWait;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:isNoWait(),isNoWait,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getComment(),getComment,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getCreateSQL() {
        return getCreateSQLForCopy(table, getSQL(DEFAULT_SQL_FLAGS));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getCreateSQL(),getCreateSQL,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.TriggerObject:getId(),getId,TriggerObject,../data/xml/h2_call_methods/TriggerObject.xml
org.h2.engine.Database:getSettings(),"/**
     * Get all sessions that are currently connected to the database.
     *
     * @param includingSystemSession if the system session should also be
     *            included
     * @return the list of sessions
     */
public SessionLocal[] getSessions(boolean includingSystemSession) {
        ArrayList<SessionLocal> list;
        // need to synchronized on this database,
        // otherwise the list may contain null elements
        synchronized (this) {
            list = new ArrayList<>(userSessions);
        }
        if (includingSystemSession) {
            // copy, to ensure the reference is stable
            SessionLocal s = systemSession;
            if (s != null) {
                list.add(s);
            }
            s = lobSession;
            if (s != null) {
                list.add(s);
            }
        }
        return list.toArray(new SessionLocal[0]);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getSessions(boolean),getSessions,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the network connection information, or {@code null}.
     *
     * @return the network connection information, or {@code null}
     */
public NetworkConnectionInfo getNetworkConnectionInfo() {
        return networkConnectionInfo;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getNetworkConnectionInfo(),getNetworkConnectionInfo,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public Command getCurrentCommand() {
        return currentCommand;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getCurrentCommand(),getCurrentCommand,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public int getBlockingSessionId() {
        return transaction == null ? 0 : transaction.getBlockerId();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getBlockingSessionId(),getBlockingSessionId,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public int getId() {
        return id;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getId(),getId,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the protocol and port of the server.
     *
     * @return the protocol and port of the server
     */
public String getServer() {
        return server;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.util.NetworkConnectionInfo:getServer(),getServer,NetworkConnectionInfo,../data/xml/h2_call_methods/NetworkConnectionInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the client address and port.
     *
     * @return the client address and port
     */
public String getClient() {
        return NetUtils.ipToShortForm(new StringBuilder(), clientAddr, true).append(':').append(clientPort).toString();
    }

}",GET_SORTED_SETTINGS,(M)org.h2.util.NetworkConnectionInfo:getClient(),getClient,NetworkConnectionInfo,../data/xml/h2_call_methods/NetworkConnectionInfo.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns additional client information, or {@code null}.
     *
     * @return additional client information, or {@code null}
     */
public String getClientInfo() {
        return clientInfo;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.util.NetworkConnectionInfo:getClientInfo(),getClientInfo,NetworkConnectionInfo,../data/xml/h2_call_methods/NetworkConnectionInfo.xml
org.h2.engine.Database:getSettings(),"
public ValueTimestampTimeZone getSessionStart() {
        return sessionStart;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getSessionStart(),getSessionStart,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public IsolationLevel getIsolationLevel() {
        return isolationLevel;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getIsolationLevel(),getIsolationLevel,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the SQL representation of this isolation level.
     *
     * @return SQL representation of this isolation level
     */
public String getSQL() {
        return sql;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.IsolationLevel:getSQL(),getSQL,IsolationLevel,../data/xml/h2_call_methods/IsolationLevel.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String toString() {
        return sql + Trace.formatParams(getParameters());
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.command.Command:toString(),toString,Command,../data/xml/h2_call_methods/Command.xml
org.h2.engine.Database:getSettings(),"
public ValueTimestampTimeZone getCommandStartOrEnd() {
        return DateTimeUtils.currentTimestamp(timeZone, commandStartOrEnd);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getCommandStartOrEnd(),getCommandStartOrEnd,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean hasPendingTransaction() {
        return hasTransaction() && transaction.hasChanges() && transaction.getStatus() != Transaction.STATUS_PREPARED;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:hasPendingTransaction(),hasPendingTransaction,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public State getState() {
        return getBlockingSessionId() != 0 ? State.BLOCKED : state.get();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getState(),getState,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public Set<Table> getLocks() {
        /*
         * This implementation needs to be lock-free.
         */
        if (database.getLockMode() == Constants.LOCK_MODE_OFF || locks.isEmpty()) {
            return Collections.emptySet();
        }
        /*
         * Do not use ArrayList.toArray(T[]) here, its implementation is not
         * thread-safe.
         */
        Object[] array = locks.toArray();
        /*
         * The returned array may contain null elements and may contain
         * duplicates due to concurrent remove().
         */
        switch (array.length) {
        case 1: {
            Object table = array[0];
            if (table != null) {
                return Collections.singleton((Table) table);
            }
        }
        //$FALL-THROUGH$
        case 0:
            return Collections.emptySet();
        default: {
            HashSet<Table> set = new HashSet<>();
            for (Object table : array) {
                if (table != null) {
                    set.add((Table) table);
                }
            }
            return set;
        }
        }
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getLocks(),getLocks,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if the table is exclusively locked by this session.
     *
     * @param session the session
     * @return true if it is
     */
@SuppressWarnings(""unused"")
    public boolean isLockedExclusivelyBy(SessionLocal session) {
        return false;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Table:isLockedExclusivelyBy(org.h2.engine.SessionLocal),isLockedExclusivelyBy,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the list of variable names that are set for this session.
     *
     * @return the list of names
     */
public String[] getVariableNames() {
        if (variables == null) {
            return new String[0];
        }
        return variables.keySet().toArray(new String[0]);
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getVariableNames(),getVariableNames,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public List<Table> getLocalTempTables() {
        if (localTempTables == null) {
            return Collections.emptyList();
        }
        return new ArrayList<>(localTempTables.values());
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getLocalTempTables(),getLocalTempTables,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public String[] getSchemaSearchPath() {
        return schemaSearchPath;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getSchemaSearchPath(),getSchemaSearchPath,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getCurrentSchemaName() {
        return currentSchemaName;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.SessionLocal:getCurrentSchemaName(),getCurrentSchemaName,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the time zone provider for the default time zone.
     *
     * @return the time zone provider for the default time zone
     */
public static TimeZoneProvider getTimeZone() {
        TimeZoneProvider local = LOCAL;
        if (local == null) {
            LOCAL = local = TimeZoneProvider.getDefault();
        }
        return local;
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.util.DateTimeUtils:getTimeZone(),getTimeZone,DateTimeUtils,../data/xml/h2_call_methods/DateTimeUtils.xml
org.h2.engine.Database:getSettings(),"
public QueryStatisticsData getQueryStatisticsData() {
        if (!queryStatistics) {
            return null;
        }
        if (queryStatisticsData == null) {
            synchronized (this) {
                if (queryStatisticsData == null) {
                    queryStatisticsData = new QueryStatisticsData(queryStatisticsMaxEntries);
                }
            }
        }
        return queryStatisticsData;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getQueryStatisticsData(),getQueryStatisticsData,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public synchronized List<QueryEntry> getQueries() {
        // return a copy of the map so we don't have to
        // worry about external synchronization
        ArrayList<QueryEntry> list = new ArrayList<>(map.values());
        // only return the newest 100 entries
        list.sort(QUERY_ENTRY_COMPARATOR);
        return list.subList(0, Math.min(list.size(), maxQueryEntries));
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.QueryStatisticsData:getQueries(),getQueries,QueryStatisticsData,../data/xml/h2_call_methods/QueryStatisticsData.xml
org.h2.engine.Database:getSettings(),"/**
     * Get or create a DOUBLE PRECISION value for the given double.
     *
     * @param d the double
     * @return the value
     */
public static ValueDouble get(double d) {
        if (d == 1.0) {
            return ONE;
        } else if (d == 0.0) {
            // -0.0 == 0.0, and we want to return 0.0 for both
            return ZERO;
        } else if (Double.isNaN(d)) {
            return NAN;
        }
        return (ValueDouble) Value.cache(new ValueDouble(d));
    }

    ",GET_SORTED_SETTINGS,(S)org.h2.value.ValueDouble:get(double),get,ValueDouble,../data/xml/h2_call_methods/ValueDouble.xml
org.h2.engine.Database:getSettings(),"
public double getExecutionTimeStandardDeviation() {
            // population standard deviation
            return Math.sqrt(executionTimeM2Nanos / count);
        }

        ",GET_SORTED_SETTINGS,(M)org.h2.engine.QueryStatisticsData$QueryEntry:getExecutionTimeStandardDeviation(),getExecutionTimeStandardDeviation,QueryStatisticsData$QueryEntry,../data/xml/h2_call_methods/QueryStatisticsData.xml
org.h2.engine.Database:getSettings(),"
public double getRowCountStandardDeviation() {
            // population standard deviation
            return Math.sqrt(rowCountM2 / count);
        }

    }",GET_SORTED_SETTINGS,(M)org.h2.engine.QueryStatisticsData$QueryEntry:getRowCountStandardDeviation(),getRowCountStandardDeviation,QueryStatisticsData$QueryEntry,../data/xml/h2_call_methods/QueryStatisticsData.xml
org.h2.engine.Database:getSettings(),"/**
     * Get all synonyms.
     *
     * @return all objects of that type
     */
public ArrayList<TableSynonym> getAllSynonyms() {
        ArrayList<TableSynonym> list = new ArrayList<>();
        for (Schema schema : schemas.values()) {
            list.addAll(schema.getAllSynonyms());
        }
        return list;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getAllSynonyms(),getAllSynonyms,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getSchema(),getSchema,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getName(),getName,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),"/**
     * @return the table this synonym is for
     */
public String getSynonymForName() {
        return data.synonymFor;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getSynonymForName(),getSynonymForName,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),"/**
     * @return the schema this synonym is for
     */
public Schema getSynonymForSchema() {
        return data.synonymForSchema;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getSynonymForSchema(),getSynonymForSchema,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getComment(),getComment,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.table.TableSynonym:getId(),getId,TableSynonym,../data/xml/h2_call_methods/TableSynonym.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the domain of this constraint.
     *
     * @return the domain
     */
public Domain getDomain() {
        return domain;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getDomain(),getDomain,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getSchema(),getSchema,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getName(),getName,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getComment(),getComment,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),"
@Override
    public String getCreateSQL() {
        StringBuilder builder = new StringBuilder(""ALTER DOMAIN "");
        domain.getSQL(builder, DEFAULT_SQL_FLAGS).append("" ADD CONSTRAINT "");
        getSQL(builder, DEFAULT_SQL_FLAGS);
        if (comment != null) {
            builder.append("" COMMENT "");
            StringUtils.quoteStringSQL(builder, comment);
        }
        builder.append("" CHECK"");
        expr.getEnclosedSQL(builder, DEFAULT_SQL_FLAGS).append("" NOCHECK"");
        return builder.toString();
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getCreateSQL(),getCreateSQL,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintDomain:getId(),getId,ConstraintDomain,../data/xml/h2_call_methods/ConstraintDomain.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.index.Index:getSchema(),getSchema,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintReferential:getSchema(),getSchema,ConstraintReferential,../data/xml/h2_call_methods/ConstraintReferential.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintUnique:getSchema(),getSchema,ConstraintUnique,../data/xml/h2_call_methods/ConstraintUnique.xml
org.h2.engine.Database:getSettings(),"/**
     * Get standard SQL type name.
     *
     * @return standard SQL type name
     */
public String getSqlName() {
        if (this == ConstraintActionType.SET_DEFAULT) {
            return ""SET DEFAULT"";
        }
        if (this == SET_NULL) {
            return ""SET NULL"";
        }
        return name();
    }

}",GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintActionType:getSqlName(),getSqlName,ConstraintActionType,../data/xml/h2_call_methods/ConstraintActionType.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.ConstraintCheck:getTable(),getTable,ConstraintCheck,../data/xml/h2_call_methods/ConstraintCheck.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the schema in which this object is defined
     *
     * @return the schema
     */
public final Schema getSchema() {
        return schema;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.schema.SchemaObject:getSchema(),getSchema,SchemaObject,../data/xml/h2_call_methods/SchemaObject.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.schema.SchemaObject:getName(),getName,SchemaObject,../data/xml/h2_call_methods/SchemaObject.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the CHECK expression or null.
     *
     * @return the CHECK expression or null.
     */
public Expression getExpression() {
        return null;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getExpression(),getExpression,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"
@Override
    public final String getSQL(int sqlFlags) {
        return getSQL(new StringBuilder(), sqlFlags, AUTO_PARENTHESES).toString();
    }

    

@Override
    public final StringBuilder getSQL(StringBuilder builder, int sqlFlags) {
        return getSQL(builder, sqlFlags, AUTO_PARENTHESES);
    }

    
/**
     * Get the SQL statement of this expression. This may not always be the
     * original SQL statement, especially after optimization.
     *
     * @param sqlFlags
     *            formatting flags
     * @param parentheses
     *            parentheses mode
     * @return the SQL statement
     */
public final String getSQL(int sqlFlags, int parentheses) {
        return getSQL(new StringBuilder(), sqlFlags, parentheses).toString();
    }

    
/**
     * Get the SQL statement of this expression. This may not always be the
     * original SQL statement, especially after optimization.
     *
     * @param builder
     *            string builder
     * @param sqlFlags
     *            formatting flags
     * @param parentheses
     *            parentheses mode
     * @return the specified string builder
     */
public final StringBuilder getSQL(StringBuilder builder, int sqlFlags, int parentheses) {
        return parentheses == WITH_PARENTHESES || parentheses != WITHOUT_PARENTHESES && needParentheses()
                ? getUnenclosedSQL(builder.append('('), sqlFlags).append(')')
                : getUnenclosedSQL(builder, sqlFlags);
    }

    ",GET_SORTED_SETTINGS,"(M)org.h2.expression.Expression:getSQL(int,int)",getSQL,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint$Type:ordinal(),ordinal,Constraint$Type,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.expression.Expression:isEverything(org.h2.expression.ExpressionVisitor),isEverything,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
public Table getTable() {
        return table;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.table.Column:getTable(),getTable,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
public Table getRefTable() {
        return table;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getRefTable(),getRefTable,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.constraint.Constraint:getReferencedColumns(org.h2.table.Table),getReferencedColumns,Constraint,../data/xml/h2_call_methods/Constraint.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",GET_SORTED_SETTINGS,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,GET_SORTED_SETTINGS,(M)org.h2.engine.DbSettings:getSortedSettings(),getSortedSettings,DbSettings,../data/xml/h2_call_methods/DbSettings.xml
