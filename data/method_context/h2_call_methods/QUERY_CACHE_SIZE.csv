function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"
Session() {
    }

    ",QUERY_CACHE_SIZE,(O)org.h2.engine.Session:<init>(),<init>,Session,../data/xml/h2_call_methods/Session.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a new ArrayList with an initial capacity of 4.
     *
     * @param <T> the type
     * @return the object
     */
public static <T> ArrayList<T> newSmallArrayList() {
        return new ArrayList<>(4);
    }

    ",QUERY_CACHE_SIZE,(S)org.h2.util.Utils:newSmallArrayList(),newSmallArrayList,Utils,../data/xml/h2_call_methods/Utils.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",QUERY_CACHE_SIZE,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public int getLockTimeout() {
        Setting setting = findSetting(SetTypes.getTypeName(SetTypes.DEFAULT_LOCK_TIMEOUT));
        return setting == null ? Constants.INITIAL_LOCK_TIMEOUT : setting.getIntValue();
    }

    ",QUERY_CACHE_SIZE,(M)org.h2.engine.Database:getLockTimeout(),getLockTimeout,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns main schema (usually PUBLIC).
     *
     * @return main schema (usually PUBLIC)
     */
public Schema getMainSchema() {
        return mainSchema;
    }

    ",QUERY_CACHE_SIZE,(M)org.h2.engine.Database:getMainSchema(),getMainSchema,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,QUERY_CACHE_SIZE,(M)org.h2.schema.Schema:getName(),getName,Schema,../data/xml/h2_call_methods/Schema.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the time zone provider for the default time zone.
     *
     * @return the time zone provider for the default time zone
     */
public static TimeZoneProvider getTimeZone() {
        TimeZoneProvider local = LOCAL;
        if (local == null) {
            LOCAL = local = TimeZoneProvider.getDefault();
        }
        return local;
    }

    ",QUERY_CACHE_SIZE,(S)org.h2.util.DateTimeUtils:getTimeZone(),getTimeZone,DateTimeUtils,../data/xml/h2_call_methods/DateTimeUtils.xml
