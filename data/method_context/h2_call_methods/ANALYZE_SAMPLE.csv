function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"/**
     * Create a new command for the given session.
     *
     * @param session the session
     */
DefineCommand(SessionLocal session) {
        super(session);
    }

    ",ANALYZE_SAMPLE,(O)org.h2.command.ddl.DefineCommand:<init>(org.h2.engine.SessionLocal),<init>,DefineCommand,../data/xml/h2_call_methods/DefineCommand.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Analyze this table.
     *
     * @param session the session
     * @param table the table
     * @param sample the number of sample rows
     * @param manual whether the command was called by the user
     */
public static void analyzeTable(SessionLocal session, Table table, int sample, boolean manual) {
        if (table.getTableType() != TableType.TABLE //
                || table.isHidden() //
                || session == null //
                || !manual && (session.getDatabase().isSysTableLocked() || table.hasSelectTrigger()) //
                || table.isTemporary() && !table.isGlobalTemporary() //
                        && session.findLocalTempTable(table.getName()) == null //
                || table.isLockedExclusively() && !table.isLockedExclusivelyBy(session)
                || !session.getUser().hasTableRight(table, Right.SELECT) //
                // if the connection is closed and there is something to undo
                || session.getCancel() != 0) {
            return;
        }
        table.lock(session, Table.READ_LOCK);
        Column[] columns = table.getColumns();
        int columnCount = columns.length;
        if (columnCount == 0) {
            return;
        }
        Cursor cursor = table.getScanIndex(session).find(session, null, null);
        if (cursor.next()) {
            SelectivityData[] array = new SelectivityData[columnCount];
            for (int i = 0; i < columnCount; i++) {
                Column col = columns[i];
                if (!DataType.isLargeObject(col.getType().getValueType())) {
                    array[i] = new SelectivityData();
                }
            }
            long rowNumber = 0;
            do {
                Row row = cursor.get();
                for (int i = 0; i < columnCount; i++) {
                    SelectivityData selectivity = array[i];
                    if (selectivity != null) {
                        selectivity.add(row.getValue(i));
                    }
                }
                rowNumber++;
            } while ((sample <= 0 || rowNumber < sample) && cursor.next());
            for (int i = 0; i < columnCount; i++) {
                SelectivityData selectivity = array[i];
                if (selectivity != null) {
                    columns[i].setSelectivity(selectivity.getSelectivity(rowNumber));
                }
            }
        } else {
            for (int i = 0; i < columnCount; i++) {
                columns[i].setSelectivity(0);
            }
        }
        session.getDatabase().updateMeta(session, table);
    }

    ",ANALYZE_SAMPLE,"(S)org.h2.command.ddl.Analyze:analyzeTable(org.h2.engine.SessionLocal,org.h2.table.Table,int,boolean)",analyzeTable,Analyze,../data/xml/h2_call_methods/Analyze.xml
org.h2.engine.Database:getSettings(),"/**
     * Unlock the metadata table.
     *
     * @param session the session
     */
public void unlockMeta(SessionLocal session) {
        if (meta != null) {
            unlockMetaDebug(session);
            meta.unlock(session);
            session.unlock(meta);
        }
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.Database:unlockMeta(org.h2.engine.SessionLocal),unlockMeta,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Commit the current transaction. If the statement was not a data
     * definition statement, and if there are temporary tables that should be
     * dropped or truncated at commit, this is done as well.
     *
     * @param ddl if the statement was a data definition statement
     */
public void commit(boolean ddl) {
        beforeCommitOrRollback();
        if (hasTransaction()) {
            try {
                markUsedTablesAsUpdated();
                transaction.commit();
                removeTemporaryLobs(true);
                endTransaction();
            } finally {
                transaction = null;
            }
            if (!ddl) {
                // do not clean the temp tables if the last command was a
                // create/drop
                cleanTempTables(false);
                if (autoCommitAtTransactionEnd) {
                    autoCommit = true;
                    autoCommitAtTransactionEnd = false;
                }
            }
            analyzeTables();
        }
    }

    ",ANALYZE_SAMPLE,(M)org.h2.engine.SessionLocal:commit(boolean),commit,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
