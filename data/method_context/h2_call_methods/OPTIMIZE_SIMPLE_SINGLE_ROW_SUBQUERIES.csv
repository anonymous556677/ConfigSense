function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.command.query.Query:prepare(),prepare,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),"/**
     * Check if this query will always return the same value and has no side
     * effects.
     *
     * @return if this query will always return the same value and has no side
     *         effects.
     */
public boolean isConstantQuery() {
        return !hasOrder() && (offsetExpr == null || offsetExpr.isConstant())
                && (fetchExpr == null || fetchExpr.isConstant());
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.command.query.Query:isConstantQuery(),isConstantQuery,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),"
private void setType() {
        ArrayList<Expression> expressions = query.getExpressions();
        int columnCount = query.getColumnCount();
        if (columnCount == 1) {
            expression = expressions.get(0);
            nullValue = ValueNull.INSTANCE;
        } else {
            Expression[] list = new Expression[columnCount];
            Value[] nulls = new Value[columnCount];
            for (int i = 0; i < columnCount; i++) {
                list[i] = expressions.get(i);
                nulls[i] = ValueNull.INSTANCE;
            }
            ExpressionList expressionList = new ExpressionList(list, false);
            expressionList.initializeType();
            expression = expressionList;
            nullValue = ValueRow.get(new ExtTypeInfoRow(list), nulls);
        }
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(O)org.h2.expression.Subquery:setType(),setType,Subquery,../data/xml/h2_call_methods/Subquery.xml
org.h2.engine.Database:getSettings(),"
@Override
    public Value getValue(SessionLocal session) {
        query.setSession(session);
        try (ResultInterface result = query.query(2)) {
            Value v;
            if (!result.next()) {
                return nullValue;
            } else {
                v = readRow(result);
                if (result.hasNext()) {
                    throw DbException.get(ErrorCode.SCALAR_SUBQUERY_CONTAINS_MORE_THAN_ONE_ROW);
                }
            }
            return v;
        }
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.expression.Subquery:getValue(org.h2.engine.SessionLocal),getValue,Subquery,../data/xml/h2_call_methods/Subquery.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a new expression with the given value.
     *
     * @param value the value
     * @return the expression
     */
public static ValueExpression get(Value value) {
        if (value == ValueNull.INSTANCE) {
            return NULL;
        }
        if (value.getValueType() == Value.BOOLEAN) {
            return getBoolean(value.getBoolean());
        }
        return new ValueExpression(value);
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(S)org.h2.expression.ValueExpression:get(org.h2.value.Value),get,ValueExpression,../data/xml/h2_call_methods/ValueExpression.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * If this query is determined as a single-row query, returns a replacement
     * expression.
     *
     * @return the expression, or {@code null}
     */
public Expression getIfSingleRow() {
        return null;
    }

}",OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.command.query.Query:getIfSingleRow(),getIfSingleRow,Query,../data/xml/h2_call_methods/Query.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.expression.Expression:isEverything(org.h2.expression.ExpressionVisitor),isEverything,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES,(M)org.h2.expression.Expression:optimize(org.h2.engine.SessionLocal),optimize,Expression,../data/xml/h2_call_methods/Expression.xml
