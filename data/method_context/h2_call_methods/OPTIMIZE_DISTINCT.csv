function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),"
@Override
    public Mode getMode() {
        return database.getMode();
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.engine.SessionLocal:getMode(),getMode,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
private void optimizeExpressionsAndPreserveAliases() {
        for (int i = 0; i < expressions.size(); i++) {
            Expression e = expressions.get(i);
            String alias = e.getAlias(session, i);
            e = e.optimize(session);
            if (!e.getAlias(session, i).equals(alias)) {
                e = new Alias(e, alias, true);
            }
            expressions.set(i, e);
        }
    }

    ",OPTIMIZE_DISTINCT,(O)org.h2.command.query.Select:optimizeExpressionsAndPreserveAliases(),optimizeExpressionsAndPreserveAliases,Select,../data/xml/h2_call_methods/Select.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_DISTINCT,(M)org.h2.expression.Expression:optimize(org.h2.engine.SessionLocal),optimize,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),not found,OPTIMIZE_DISTINCT,(M)org.h2.command.query.Select:cleanupOrder(),cleanupOrder,Select,../data/xml/h2_call_methods/Select.xml
org.h2.engine.Database:getSettings(),"/**
     * Try to optimize or remove the condition.
     *
     * @param session the session
     * @return the optimized condition, or {@code null}
     */
public final Expression optimizeCondition(SessionLocal session) {
        Expression e = optimize(session);
        if (e.isConstant()) {
            return e.getBooleanValue(session) ? null : ValueExpression.FALSE;
        }
        return e;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.expression.Expression:optimizeCondition(org.h2.engine.SessionLocal),optimizeCondition,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"/**
     * Whether this is an outer joined table.
     *
     * @return true if it is
     */
public boolean isJoinOuter() {
        return joinOuter;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:isJoinOuter(),isJoinOuter,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Whether this is indirectly an outer joined table (nested within an inner
     * join).
     *
     * @return true if it is
     */
public boolean isJoinOuterIndirect() {
        return joinOuterIndirect;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:isJoinOuterIndirect(),isJoinOuterIndirect,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Create index conditions if possible and attach them to the table filter.
     *
     * @param session the session
     * @param filter the table filter
     */
@SuppressWarnings(""unused"")
    public void createIndexConditions(SessionLocal session, TableFilter filter) {
        // default is do nothing
    }

    ",OPTIMIZE_DISTINCT,"(M)org.h2.expression.Expression:createIndexConditions(org.h2.engine.SessionLocal,org.h2.table.TableFilter)",createIndexConditions,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
public Table getTable() {
        return table;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:getTable(),getTable,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Create a new visitor to check if all aggregates are for the given table.
     *
     * @param table the table
     * @return the new visitor
     */
public static ExpressionVisitor getOptimizableVisitor(Table table) {
        return new ExpressionVisitor(OPTIMIZABLE_AGGREGATE, 0, null,
                null, table, null, null);
    }

    ",OPTIMIZE_DISTINCT,(S)org.h2.expression.ExpressionVisitor:getOptimizableVisitor(org.h2.table.Table),getOptimizableVisitor,ExpressionVisitor,../data/xml/h2_call_methods/ExpressionVisitor.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean isEverything(ExpressionVisitor visitor) {
        switch (visitor.getType()) {
        case ExpressionVisitor.DETERMINISTIC: {
            if (isForUpdate) {
                return false;
            }
            for (TableFilter f : filters) {
                if (!f.getTable().isDeterministic()) {
                    return false;
                }
            }
            break;
        }
        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID: {
            for (TableFilter f : filters) {
                long m = f.getTable().getMaxDataModificationId();
                visitor.addDataModificationId(m);
            }
            break;
        }
        case ExpressionVisitor.EVALUATABLE: {
            if (!session.getDatabase().getSettings().optimizeEvaluatableSubqueries) {
                return false;
            }
            break;
        }
        case ExpressionVisitor.GET_DEPENDENCIES: {
            for (TableFilter f : filters) {
                Table table = f.getTable();
                visitor.addDependency(table);
                table.addDependencies(visitor.getDependencies());
            }
            break;
        }
        default:
        }
        ExpressionVisitor v2 = visitor.incrementQueryLevel(1);
        for (Expression e : expressions) {
            if (!e.isEverything(v2)) {
                return false;
            }
        }
        if (condition != null && !condition.isEverything(v2)) {
            return false;
        }
        if (having != null && !having.isEverything(v2)) {
            return false;
        }
        if (qualify != null && !qualify.isEverything(v2)) {
            return false;
        }
        return true;
    }


    ",OPTIMIZE_DISTINCT,(M)org.h2.command.query.Select:isEverything(org.h2.expression.ExpressionVisitor),isEverything,Select,../data/xml/h2_call_methods/Select.xml
org.h2.engine.Database:getSettings(),"
public boolean isParsingCreateView() {
        return createViewLevel != 0;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.engine.SessionLocal:isParsingCreateView(),isParsingCreateView,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
private double preparePlan(boolean parse) {
        TableFilter[] topArray = topFilters.toArray(new TableFilter[0]);
        for (TableFilter t : topArray) {
            t.createIndexConditions();
            t.setFullCondition(condition);
        }

        Optimizer optimizer = new Optimizer(topArray, condition, session);
        optimizer.optimize(parse);
        topTableFilter = optimizer.getTopFilter();
        double planCost = optimizer.getCost();

        setEvaluatableRecursive(topTableFilter);

        if (!parse) {
            topTableFilter.prepare();
        }
        return planCost;
    }

    ",OPTIMIZE_DISTINCT,(O)org.h2.command.query.Select:preparePlan(boolean),preparePlan,Select,../data/xml/h2_call_methods/Select.xml
org.h2.engine.Database:getSettings(),"
public Database getDatabase() {
        return database;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.engine.SessionLocal:getDatabase(),getDatabase,SessionLocal,../data/xml/h2_call_methods/SessionLocal.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),"/**
     * Returns the main expression, skipping aliases.
     *
     * @return the expression
     */
public Expression getNonAliasExpression() {
        return this;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.expression.Expression:getNonAliasExpression(),getNonAliasExpression,Expression,../data/xml/h2_call_methods/Expression.xml
org.h2.engine.Database:getSettings(),"
public Column getColumn() {
        return column;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.expression.ExpressionColumn:getColumn(),getColumn,ExpressionColumn,../data/xml/h2_call_methods/ExpressionColumn.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the selectivity of the column. Selectivity 100 means values are
     * unique, 10 means every distinct value appears 10 times on average.
     *
     * @return the selectivity
     */
public int getSelectivity() {
        return selectivity == 0 ? Constants.SELECTIVITY_DEFAULT : selectivity;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.Column:getSelectivity(),getSelectivity,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the index that has the given column as the first element.
     * This method returns null if no matching index is found.
     *
     * @param column the column
     * @param needGetFirstOrLast if the returned index must be able
     *          to do {@link Index#canGetFirstOrLast()}
     * @param needFindNext if the returned index must be able to do
     *          {@link Index#findNext(SessionLocal, SearchRow, SearchRow)}
     * @return the index or null
     */
public Index getIndexForColumn(Column column,
            boolean needGetFirstOrLast, boolean needFindNext) {
        ArrayList<Index> indexes = getIndexes();
        Index result = null;
        if (indexes != null) {
            for (int i = 1, size = indexes.size(); i < size; i++) {
                Index index = indexes.get(i);
                if (needGetFirstOrLast && !index.canGetFirstOrLast()) {
                    continue;
                }
                if (needFindNext && !index.canFindNext()) {
                    continue;
                }
                // choose the minimal covering index with the needed first
                // column to work consistently with execution plan from
                // Optimizer
                if (index.isFirstColumn(column) && (result == null ||
                        result.getColumns().length > index.getColumns().length)) {
                    result = index;
                }
            }
        }
        return result;
    }

    ",OPTIMIZE_DISTINCT,"(M)org.h2.table.Table:getIndexForColumn(org.h2.table.Column,boolean,boolean)",getIndexForColumn,Table,../data/xml/h2_call_methods/Table.xml
org.h2.engine.Database:getSettings(),"
public Index getIndex() {
        return index;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:getIndex(),getIndex,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the index type.
     *
     * @return the index type
     */
public final IndexType getIndexType() {
        return indexType;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.index.Index:getIndexType(),getIndexType,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Is this a table scan pseudo-index?
     *
     * @return true if it is
     */
public boolean isScan() {
        return scan;
    }

}",OPTIMIZE_DISTINCT,(M)org.h2.index.IndexType:isScan(),isScan,IndexType,../data/xml/h2_call_methods/IndexType.xml
org.h2.engine.Database:getSettings(),"
public void setIndex(Index index) {
        this.index = index;
        cursor.setIndex(index);
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:setIndex(org.h2.index.Index),setIndex,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the index that matches the ORDER BY list, if one exists. This is to
     * avoid running a separate ORDER BY if an index can be used. This is
     * specially important for large result sets, if only the first few rows are
     * important (LIMIT is used)
     *
     * @return the index if one is found
     */
private Index getSortIndex() {
        if (sort == null) {
            return null;
        }
        ArrayList<Column> sortColumns = Utils.newSmallArrayList();
        int[] queryColumnIndexes = sort.getQueryColumnIndexes();
        int queryIndexesLength = queryColumnIndexes.length;
        int[] sortIndex = new int[queryIndexesLength];
        for (int i = 0, j = 0; i < queryIndexesLength; i++) {
            int idx = queryColumnIndexes[i];
            if (idx < 0 || idx >= expressions.size()) {
                throw DbException.getInvalidValueException(""ORDER BY"", idx + 1);
            }
            Expression expr = expressions.get(idx);
            expr = expr.getNonAliasExpression();
            if (expr.isConstant()) {
                continue;
            }
            if (!(expr instanceof ExpressionColumn)) {
                return null;
            }
            ExpressionColumn exprCol = (ExpressionColumn) expr;
            if (exprCol.getTableFilter() != topTableFilter) {
                return null;
            }
            sortColumns.add(exprCol.getColumn());
            sortIndex[j++] = i;
        }
        Column[] sortCols = sortColumns.toArray(new Column[0]);
        if (sortCols.length == 0) {
            // sort just on constants - can use scan index
            return topTableFilter.getTable().getScanIndex(session);
        }
        ArrayList<Index> list = topTableFilter.getTable().getIndexes();
        if (list != null) {
            int[] sortTypes = sort.getSortTypesWithNullOrdering();
            DefaultNullOrdering defaultNullOrdering = session.getDatabase().getDefaultNullOrdering();
            loop: for (Index index : list) {
                if (index.getCreateSQL() == null) {
                    // can't use the scan index
                    continue;
                }
                if (index.getIndexType().isHash()) {
                    continue;
                }
                IndexColumn[] indexCols = index.getIndexColumns();
                if (indexCols.length < sortCols.length) {
                    continue;
                }
                for (int j = 0; j < sortCols.length; j++) {
                    // the index and the sort order must start
                    // with the exact same columns
                    IndexColumn idxCol = indexCols[j];
                    Column sortCol = sortCols[j];
                    if (idxCol.column != sortCol) {
                        continue loop;
                    }
                    int sortType = sortTypes[sortIndex[j]];
                    if (sortCol.isNullable()
                            ? defaultNullOrdering.addExplicitNullOrdering(idxCol.sortType) != sortType
                            : (idxCol.sortType & SortOrder.DESCENDING) != (sortType & SortOrder.DESCENDING)) {
                        continue loop;
                    }
                }
                return index;
            }
        }
        if (sortCols.length == 1 && sortCols[0].getColumnId() == -1) {
            // special case: order by _ROWID_
            Index index = topTableFilter.getTable().getScanIndex(session);
            if (index.isRowIdIndex()) {
                return index;
            }
        }
        return null;
    }

    ",OPTIMIZE_DISTINCT,(O)org.h2.command.query.Select:getSortIndex(),getSortIndex,Select,../data/xml/h2_call_methods/Select.xml
org.h2.engine.Database:getSettings(),"/**
     * Are there any index conditions that involve IN(...).
     *
     * @return whether there are IN(...) comparisons
     */
public boolean hasInComparisons() {
        for (IndexCondition cond : indexConditions) {
            int compareType = cond.getCompareType();
            if (compareType == Comparison.IN_QUERY || compareType == Comparison.IN_LIST) {
                return true;
            }
        }
        return false;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.table.TableFilter:hasInComparisons(),hasInComparisons,TableFilter,../data/xml/h2_call_methods/TableFilter.xml
org.h2.engine.Database:getSettings(),"/**
     * Get the indexed columns as index columns (with ordering information).
     *
     * @return the index columns
     */
public final IndexColumn[] getIndexColumns() {
        return indexColumns;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.index.Index:getIndexColumns(),getIndexColumns,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"/**
     * Does this index support lookup by row id?
     *
     * @return true if it does
     */
public boolean isRowIdIndex() {
        return false;
    }

    ",OPTIMIZE_DISTINCT,(M)org.h2.index.Index:isRowIdIndex(),isRowIdIndex,Index,../data/xml/h2_call_methods/Index.xml
org.h2.engine.Database:getSettings(),"
private Index getGroupSortedIndex() {
        if (groupIndex == null || groupByExpression == null) {
            return null;
        }
        ArrayList<Index> indexes = topTableFilter.getTable().getIndexes();
        if (indexes != null) {
            for (Index index : indexes) {
                if (index.getIndexType().isScan()) {
                    continue;
                }
                if (index.getIndexType().isHash()) {
                    // does not allow scanning entries
                    continue;
                }
                if (isGroupSortedIndex(topTableFilter, index)) {
                    return index;
                }
            }
        }
        return null;
    }

    ",OPTIMIZE_DISTINCT,(O)org.h2.command.query.Select:getGroupSortedIndex(),getGroupSortedIndex,Select,../data/xml/h2_call_methods/Select.xml
