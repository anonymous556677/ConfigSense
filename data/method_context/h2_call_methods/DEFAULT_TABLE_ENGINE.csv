function,Method_body,option,Method,Method_short,class_name,xml_path
org.h2.engine.Database:getSettings(),not found,DEFAULT_TABLE_ENGINE,(M)org.h2.table.TableBase:getDatabase(),getDatabase,TableBase,../data/xml/h2_call_methods/TableBase.xml
org.h2.engine.Database:getSettings(),not found,DEFAULT_TABLE_ENGINE,(M)org.h2.table.TableBase:isTemporary(),isTemporary,TableBase,../data/xml/h2_call_methods/TableBase.xml
org.h2.engine.Database:getSettings(),"
@Override
    public boolean isGlobalTemporary() {
        return globalTemporary;
    }

}",DEFAULT_TABLE_ENGINE,(M)org.h2.table.TableBase:isGlobalTemporary(),isGlobalTemporary,TableBase,../data/xml/h2_call_methods/TableBase.xml
org.h2.engine.Database:getSettings(),not found,DEFAULT_TABLE_ENGINE,(M)org.h2.table.TableBase:isPersistIndexes(),isPersistIndexes,TableBase,../data/xml/h2_call_methods/TableBase.xml
org.h2.engine.Database:getSettings(),"
public String getCreateSQL() {
        return getCreateSQL(false);
    }

    
/**
     * Get this columns part of CREATE TABLE SQL statement.
     *
     * @param forMeta whether this is for the metadata table
     * @return the SQL statement
     */
public String getCreateSQL(boolean forMeta) {
        StringBuilder builder = new StringBuilder();
        if (name != null) {
            ParserUtil.quoteIdentifier(builder, name, DEFAULT_SQL_FLAGS).append(' ');
        }
        return getCreateSQL(builder, forMeta);
    }

    

private String getCreateSQL(StringBuilder builder, boolean forMeta) {
        if (domain != null) {
            domain.getSQL(builder, DEFAULT_SQL_FLAGS);
        } else {
            type.getSQL(builder, DEFAULT_SQL_FLAGS);
        }
        if (!visible) {
            builder.append("" INVISIBLE "");
        }
        if (sequence != null) {
            builder.append("" GENERATED "").append(isGeneratedAlways ? ""ALWAYS"" : ""BY DEFAULT"").append("" AS IDENTITY"");
            if (!forMeta) {
                sequence.getSequenceOptionsSQL(builder.append('(')).append(')');
            }
        } else if (defaultExpression != null) {
            if (isGeneratedAlways) {
                defaultExpression.getEnclosedSQL(builder.append("" GENERATED ALWAYS AS ""), DEFAULT_SQL_FLAGS);
            } else {
                defaultExpression.getUnenclosedSQL(builder.append("" DEFAULT ""), DEFAULT_SQL_FLAGS);
            }
        }
        if (onUpdateExpression != null) {
            onUpdateExpression.getUnenclosedSQL(builder.append("" ON UPDATE ""), DEFAULT_SQL_FLAGS);
        }
        if (defaultOnNull) {
            builder.append("" DEFAULT ON NULL"");
        }
        if (forMeta && sequence != null) {
            sequence.getSQL(builder.append("" SEQUENCE ""), DEFAULT_SQL_FLAGS);
        }
        if (selectivity != 0) {
            builder.append("" SELECTIVITY "").append(selectivity);
        }
        if (comment != null) {
            StringUtils.quoteStringSQL(builder.append("" COMMENT ""), comment);
        }
        if (!nullable) {
            builder.append("" NOT NULL"");
        }
        return builder.toString();
    }

    ",DEFAULT_TABLE_ENGINE,(M)org.h2.table.Column:getCreateSQL(boolean),getCreateSQL,Column,../data/xml/h2_call_methods/Column.xml
org.h2.engine.Database:getSettings(),"
public DbSettings getSettings() {
        return dbSettings;
    }

    ",DEFAULT_TABLE_ENGINE,(M)org.h2.engine.Database:getSettings(),getSettings,Database,../data/xml/h2_call_methods/Database.xml
org.h2.engine.Database:getSettings(),not found,DEFAULT_TABLE_ENGINE,(M)org.h2.table.TableBase:isPersistData(),isPersistData,TableBase,../data/xml/h2_call_methods/TableBase.xml
