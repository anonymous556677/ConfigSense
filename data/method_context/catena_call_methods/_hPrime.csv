function,option,Method,Method_short,class_name,xml_path,Method_body
main.java.Catena:get_hPrime(),_hPrime,(M)main.java.Catena:get_hPrime(),get_hPrime,Catena,../data/xml/catena_call_methods/Catena.xml,"
public HashInterface get_hPrime() {
        return this._hPrime;
    }

    "
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.hash.HashInterface:reset(),reset,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(M)main.java.Catena:get_k(),get_k,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_k() {
        return this._k;
    }

    "
main.java.Catena:get_hPrime(),_hPrime,(O)main.java.Catena:hInit(byte[]),hInit,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * Initialisation of the 2 values for flap rounds
	 * 
	 * @param x		Input Array
	 * @return 		2 hashed values v_-1, V_-2 in one byte array
	 * 				(output is already splitted in the middle and swapped)
	 */
private byte[] hInit(byte[] x) {
        int l = 2 * this.get_k() / this.get_n();
        byte[][] xLoop = new byte[l][this.get_n()];
        byte[] iByte = new byte[1];
        int i = 0;
        while (i <= l - 1) {
            iByte[0] = (byte)i;
            this.get_h().update(this.helper.concateByteArrays(iByte, x));
            xLoop[i] = this.get_h().doFinal();
            this.get_h().reset();
            ++i;
        }
        return this.helper.twoDimByteArrayToOne(xLoop);
    }

	"
main.java.Catena:get_hPrime(),_hPrime,"(M)main.java.Helper:concateByteArrays(byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.hash.HashInterface:update(byte[]),update,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.hash.HashInterface:doFinal(),doFinal,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,"(O)main.java.Catena:gamma(int,byte[][],byte[])",gamma,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * salt dependent update with random access
	 * 
	 * @param g		garlic
	 * @param x		hash array
	 * @param gamma	gamma
	 * @return		hash array
	 */
private byte[][] gamma(int g, byte[][] x, byte[] gamma) {
        return this.get_gamma().gamma(g, x, gamma);
    }

	"
main.java.Catena:get_hPrime(),_hPrime,(M)main.java.Catena:get_lambda(),get_lambda,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_lambda() {
        return this._lambda;
    }

    "
main.java.Catena:get_hPrime(),_hPrime,"(O)main.java.Catena:f(int,byte[][],int)",f,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * phi function from catena specification
	 * 
	 * @param x		hash input
	 * @return		hash output
	 */
private byte[][] f(int g, byte[][] x, int lambda) {
        return this.get_f().graph(g, x, lambda);
    }

    "
main.java.Catena:get_hPrime(),_hPrime,"(O)main.java.Catena:phi(int,byte[][],byte[])",phi,Catena,../data/xml/catena_call_methods/Catena.xml,"
private byte[][] phi(int garlic, byte[][] x, byte[] m) {
        return this.get_phi().phi(garlic, x, m);
    }

	"
main.java.Catena:get_hPrime(),_hPrime,(M)main.java.Catena:get_h(),get_h,Catena,../data/xml/catena_call_methods/Catena.xml,"
public HashInterface get_h() {
        return this._h;
    }

    "
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.gamma.GammaInterface:setH(main.java.components.hash.HashInterface),setH,GammaInterface,../data/xml/catena_call_methods/GammaInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.gamma.GammaInterface:setHPrime(main.java.components.hash.HashInterface),setHPrime,GammaInterface,../data/xml/catena_call_methods/GammaInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.graph.GraphInterface:setH(main.java.components.hash.HashInterface),setH,GraphInterface,../data/xml/catena_call_methods/GraphInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.graph.GraphInterface:setHPrime(main.java.components.hash.HashInterface),setHPrime,GraphInterface,../data/xml/catena_call_methods/GraphInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.graph.GraphInterface:setIndexing(main.java.components.graph.algorithms.IdxInterface),setIndexing,GraphInterface,../data/xml/catena_call_methods/GraphInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.phi.PhiInterface:setH(main.java.components.hash.HashInterface),setH,PhiInterface,../data/xml/catena_call_methods/PhiInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.phi.PhiInterface:setHPrime(main.java.components.hash.HashInterface),setHPrime,PhiInterface,../data/xml/catena_call_methods/PhiInterface.xml,not found
main.java.Catena:get_hPrime(),_hPrime,(I)main.java.components.hash.HashInterface:getOutputSize(),getOutputSize,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
