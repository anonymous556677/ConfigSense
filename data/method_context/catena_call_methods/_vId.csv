function,option,Method,Method_short,class_name,xml_path,Method_body
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_vId(),get_vId,Catena,../data/xml/catena_call_methods/Catena.xml,"
public String get_vId() {
        return this._vId;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_d(),get_d,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_d() {
        return this._d;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_lambda(),get_lambda,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_lambda() {
        return this._lambda;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_h(),get_h,Catena,../data/xml/catena_call_methods/Catena.xml,"
public HashInterface get_h() {
        return this._h;
    }

    "
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:concateByteArrays(byte[],byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_vId(),_vId,(I)main.java.components.hash.HashInterface:update(byte[]),update,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_vId(),_vId,(I)main.java.components.hash.HashInterface:doFinal(),doFinal,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_vId(),_vId,(O)main.java.Catena:erasePwd(byte[]),erasePwd,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * Clear the password
	 * 
	 * @param pwd	the password to be cleared
	 */
private final void erasePwd(byte[] pwd) {
        Arrays.fill(pwd, (byte)0);
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_gLow(),get_gLow,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_gLow() {
        return this._gLow;
    }

    "
main.java.Catena:get_vId(),_vId,"(O)main.java.Catena:flap(int,byte[],byte[])",flap,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * flap function from catena specification
	 * 
	 * @param g
	 * @param xIn
	 * @param gamma
	 * @return
	 */
private byte[] flap(int g, byte[] xIn, byte[] gamma) {
        this.get_hPrime().reset();
        int iterations = (int)Math.pow(2.0, g);
        byte[][] v = new byte[iterations + 2][this.get_k()];
        byte[] xHinit = this.hInit(xIn);
        System.arraycopy(xHinit, 0, v[0], 0, this.get_k());
        System.arraycopy(xHinit, this.get_k(), v[1], 0, this.get_k());
        int i = 2;
        while (i < iterations + 2) {
            this.get_hPrime().update(this.helper.concateByteArrays(v[i - 1], v[i - 2]));
            v[i] = this.get_hPrime().doFinal();
            ++i;
        }
        byte[][] v2 = new byte[iterations][this.get_k()];
        System.arraycopy(v, 2, v2, 0, v2.length);
        this.get_hPrime().reset();
        v2 = this.gamma(g, v2, gamma);
        this.get_hPrime().reset();
        v2 = this.f(g, v2, this.get_lambda());
        this.get_hPrime().reset();
        v2 = this.phi(g, v2, v2[v2.length - 1]);
        return v2[v2.length - 1];
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_n(),get_n,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_n() {
        return this._n;
    }

    "
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:paddWithZero(byte[],int)",paddWithZero,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] paddWithZero(byte[] b, int l) {
        byte[] output = new byte[l];
        System.arraycopy(b, 0, output, 0, b.length);
        return output;
    }

    "
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:concateByteArrays(byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:truncate(byte[],int)",truncate,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] truncate(byte[] x, int m) {
        return Arrays.copyOfRange(x, 0, m);
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Catena:get_gHigh(),get_gHigh,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_gHigh() {
        return this._gHigh;
    }

    "
main.java.Catena:get_vId(),_vId,(I)main.java.components.hash.HashInterface:getOutputSize(),getOutputSize,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:intToByteArrayLittleEndian(int,int)",intToByteArrayLittleEndian,Helper,../data/xml/catena_call_methods/Helper.xml,"
public byte[] intToByteArrayLittleEndian(int data, int bytes) {
        if (bytes == 4) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8), (byte)((data & 0xFF0000) >> 16), (byte)((data & 0xFF000000) >> 24)};
            return result;
        }
        if (bytes == 2) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8)};
            return result;
        }
        return new byte[1];
    }

    "
main.java.Catena:get_vId(),_vId,"(M)main.java.Helper:concateByteArrays(byte[],byte[],byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_vId(),_vId,(O)main.java.DefaultInstances:<init>(),<init>,DefaultInstances,../data/xml/catena_call_methods/DefaultInstances.xml,not found
main.java.Catena:get_vId(),_vId,(M)main.java.DefaultInstances:initButterfly(),initButterfly,DefaultInstances,../data/xml/catena_call_methods/DefaultInstances.xml,"
public Catena initButterfly() {
        Catena catena = new Catena();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        SaltMix gamma = new SaltMix();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 16;
        int gHigh = 16;
        int lambda = 4;
        String vID = ""Butterfly"";
        catena.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return catena;
    }

    "
main.java.Catena:get_vId(),_vId,(M)org.json.JSONArray:get(int),get,JSONArray,../data/xml/catena_call_methods/JSONArray.xml,"
public Object get(int index) throws JSONException {
        Object object = this.opt(index);
        if (object == null) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        return object;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.Helper:bytes2hex(byte[]),bytes2hex,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final String bytes2hex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        int j = 0;
        while (j < bytes.length) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0xF];
            ++j;
        }
        return new String(hexChars).toLowerCase();
    }

    "
main.java.Catena:get_vId(),_vId,(S)org.junit.Assert:assertTrue(boolean),assertTrue,Assert,../data/xml/catena_call_methods/Assert.xml,"
public static void assertTrue(String message, boolean condition) {
        if (!condition) {
            Assert.fail(message);
        }
    }

    

public static void assertTrue(boolean condition) {
        Assert.assertTrue(null, condition);
    }

    "
main.java.Catena:get_vId(),_vId,(M)org.json.JSONArray:length(),length,JSONArray,../data/xml/catena_call_methods/JSONArray.xml,"
public int length() {
        return this.myArrayList.size();
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.DefaultInstances:initButterflyFull(),initButterflyFull,DefaultInstances,../data/xml/catena_call_methods/DefaultInstances.xml,"
public Catena initButterflyFull() {
        Catena catena = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        DoubleButterflyGraph f = new DoubleButterflyGraph();
        IndexDBG idx = new IndexDBG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 17;
        int gHigh = 17;
        int lambda = 4;
        String vID = ""Butterfly-Full"";
        catena.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return catena;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.DefaultInstances:initDragonfly(),initDragonfly,DefaultInstances,../data/xml/catena_call_methods/DefaultInstances.xml,"
public Catena initDragonfly() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b_1 hPrime = new Blake2b_1();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 21;
        int gHigh = 21;
        int lambda = 2;
        String vID = ""Dragonfly"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }

    "
main.java.Catena:get_vId(),_vId,(M)main.java.DefaultInstances:initDragonflyFull(),initDragonflyFull,DefaultInstances,../data/xml/catena_call_methods/DefaultInstances.xml,"
public Catena initDragonflyFull() {
        Catena c = new Catena();
        Blake2b h = new Blake2b();
        Blake2b hPrime = new Blake2b();
        SaltMix gamma = new SaltMix();
        GenericGraph f = new GenericGraph();
        IndexBRG idx = new IndexBRG();
        IdentityPhi phi = new IdentityPhi();
        int gLow = 22;
        int gHigh = 22;
        int lambda = 2;
        String vID = ""Dragonfly-Full"";
        c.init(h, hPrime, gamma, f, idx, phi, gLow, gHigh, lambda, vID);
        return c;
    }

    "
