function,option,Method,Method_short,class_name,xml_path,Method_body
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_vId(),get_vId,Catena,../data/xml/catena_call_methods/Catena.xml,"
public String get_vId() {
        return this._vId;
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_d(),get_d,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_d() {
        return this._d;
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_lambda(),get_lambda,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_lambda() {
        return this._lambda;
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_h(),get_h,Catena,../data/xml/catena_call_methods/Catena.xml,"
public HashInterface get_h() {
        return this._h;
    }

    "
main.java.Catena:get_n(),_n,"(M)main.java.Helper:concateByteArrays(byte[],byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_n(),_n,(I)main.java.components.hash.HashInterface:update(byte[]),update,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_n(),_n,(I)main.java.components.hash.HashInterface:doFinal(),doFinal,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_n(),_n,(O)main.java.Catena:erasePwd(byte[]),erasePwd,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * Clear the password
	 * 
	 * @param pwd	the password to be cleared
	 */
private final void erasePwd(byte[] pwd) {
        Arrays.fill(pwd, (byte)0);
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_gLow(),get_gLow,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_gLow() {
        return this._gLow;
    }

    "
main.java.Catena:get_n(),_n,"(O)main.java.Catena:flap(int,byte[],byte[])",flap,Catena,../data/xml/catena_call_methods/Catena.xml,"/**
	 * flap function from catena specification
	 * 
	 * @param g
	 * @param xIn
	 * @param gamma
	 * @return
	 */
private byte[] flap(int g, byte[] xIn, byte[] gamma) {
        this.get_hPrime().reset();
        int iterations = (int)Math.pow(2.0, g);
        byte[][] v = new byte[iterations + 2][this.get_k()];
        byte[] xHinit = this.hInit(xIn);
        System.arraycopy(xHinit, 0, v[0], 0, this.get_k());
        System.arraycopy(xHinit, this.get_k(), v[1], 0, this.get_k());
        int i = 2;
        while (i < iterations + 2) {
            this.get_hPrime().update(this.helper.concateByteArrays(v[i - 1], v[i - 2]));
            v[i] = this.get_hPrime().doFinal();
            ++i;
        }
        byte[][] v2 = new byte[iterations][this.get_k()];
        System.arraycopy(v, 2, v2, 0, v2.length);
        this.get_hPrime().reset();
        v2 = this.gamma(g, v2, gamma);
        this.get_hPrime().reset();
        v2 = this.f(g, v2, this.get_lambda());
        this.get_hPrime().reset();
        v2 = this.phi(g, v2, v2[v2.length - 1]);
        return v2[v2.length - 1];
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_n(),get_n,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_n() {
        return this._n;
    }

    "
main.java.Catena:get_n(),_n,"(M)main.java.Helper:paddWithZero(byte[],int)",paddWithZero,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] paddWithZero(byte[] b, int l) {
        byte[] output = new byte[l];
        System.arraycopy(b, 0, output, 0, b.length);
        return output;
    }

    "
main.java.Catena:get_n(),_n,"(M)main.java.Helper:concateByteArrays(byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_n(),_n,"(M)main.java.Helper:truncate(byte[],int)",truncate,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] truncate(byte[] x, int m) {
        return Arrays.copyOfRange(x, 0, m);
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_gHigh(),get_gHigh,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_gHigh() {
        return this._gHigh;
    }

    "
main.java.Catena:get_n(),_n,(M)main.java.Catena:get_k(),get_k,Catena,../data/xml/catena_call_methods/Catena.xml,"
public int get_k() {
        return this._k;
    }

    "
main.java.Catena:get_n(),_n,(I)main.java.components.hash.HashInterface:reset(),reset,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_n(),_n,(M)main.java.Helper:twoDimByteArrayToOne(byte[][]),twoDimByteArrayToOne,Helper,../data/xml/catena_call_methods/Helper.xml,"
public byte[] twoDimByteArrayToOne(byte[][] bytes) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int row = 0;
        while (row < bytes.length) {
            try {
                out.write(bytes[row]);
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            ++row;
        }
        return out.toByteArray();
    }

    "
main.java.Catena:get_n(),_n,(I)main.java.components.hash.HashInterface:getOutputSize(),getOutputSize,HashInterface,../data/xml/catena_call_methods/HashInterface.xml,not found
main.java.Catena:get_n(),_n,"(M)main.java.Helper:intToByteArrayLittleEndian(int,int)",intToByteArrayLittleEndian,Helper,../data/xml/catena_call_methods/Helper.xml,"
public byte[] intToByteArrayLittleEndian(int data, int bytes) {
        if (bytes == 4) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8), (byte)((data & 0xFF0000) >> 16), (byte)((data & 0xFF000000) >> 24)};
            return result;
        }
        if (bytes == 2) {
            byte[] result = new byte[]{(byte)(data & 0xFF), (byte)((data & 0xFF00) >> 8)};
            return result;
        }
        return new byte[1];
    }

    "
main.java.Catena:get_n(),_n,"(M)main.java.Helper:concateByteArrays(byte[],byte[],byte[],byte[])",concateByteArrays,Helper,../data/xml/catena_call_methods/Helper.xml,"
public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4, byte[] bytes5, byte[] bytes6) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
            out.write(bytes5);
            out.write(bytes6);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2, byte[] bytes3, byte[] bytes4) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
            out.write(bytes3);
            out.write(bytes4);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    

public final byte[] concateByteArrays(byte[] bytes1, byte[] bytes2) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            out.write(bytes1);
            out.write(bytes2);
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }

    "
