function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryResizeIntervalInMinutes(),index_summary_resize_interval_in_minutes,(S)org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryCapacityInMB(),getIndexSummaryCapacityInMB,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static long getIndexSummaryCapacityInMB()
    {
        return indexSummaryCapacityInMB;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryResizeIntervalInMinutes(),index_summary_resize_interval_in_minutes,(S)org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryResizeIntervalInMinutes(),getIndexSummaryResizeIntervalInMinutes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getIndexSummaryResizeIntervalInMinutes()
    {
        return conf.index_summary_resize_interval_in_minutes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryResizeIntervalInMinutes(),index_summary_resize_interval_in_minutes,(M)org.apache.cassandra.io.sstable.IndexSummaryManager:setMemoryPoolCapacityInMB(long),setMemoryPoolCapacityInMB,IndexSummaryManager,../data/xml/cassandra_call_methods/IndexSummaryManager.xml,"
public void setMemoryPoolCapacityInMB(long memoryPoolCapacityInMB)
    {
        this.memoryPoolBytes = memoryPoolCapacityInMB * 1024L * 1024L;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getIndexSummaryResizeIntervalInMinutes(),index_summary_resize_interval_in_minutes,(M)org.apache.cassandra.io.sstable.IndexSummaryManager:setResizeIntervalInMinutes(int),setResizeIntervalInMinutes,IndexSummaryManager,../data/xml/cassandra_call_methods/IndexSummaryManager.xml,"
public void setResizeIntervalInMinutes(int resizeIntervalInMinutes)
    {
        int oldInterval = this.resizeIntervalInMinutes;
        this.resizeIntervalInMinutes = resizeIntervalInMinutes;

        long initialDelay;
        if (future != null)
        {
            initialDelay = oldInterval < 0
                           ? resizeIntervalInMinutes
                           : Math.max(0, resizeIntervalInMinutes - (oldInterval - future.getDelay(TimeUnit.MINUTES)));
            future.cancel(false);
        }
        else
        {
            initialDelay = resizeIntervalInMinutes;
        }

        if (this.resizeIntervalInMinutes < 0)
        {
            future = null;
            return;
        }

        future = executor.scheduleWithFixedDelay(new WrappedRunnable()
        {
            protected void runMayThrow() throws Exception
            {
                redistributeSummaries();
            }
        }, initialDelay, resizeIntervalInMinutes, TimeUnit.MINUTES);
    }

    "
