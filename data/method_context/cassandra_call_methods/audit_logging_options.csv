function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(S)org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),getAuditLoggingOptions,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static AuditLogOptions getAuditLoggingOptions()
    {
        return conf.audit_logging_options;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(O)org.apache.cassandra.audit.AuditLogManager:getAuditLogger(org.apache.cassandra.config.ParameterizedClass),getAuditLogger,AuditLogManager,../data/xml/cassandra_call_methods/AuditLogManager.xml,"
private IAuditLogger getAuditLogger(ParameterizedClass logger) throws ConfigurationException
    {
        if (logger.class_name != null)
        {
            return FBUtilities.newAuditLogger(logger.class_name, logger.parameters == null ? Collections.emptyMap() : logger.parameters);
        }

        return FBUtilities.newAuditLogger(BinAuditLogger.class.getName(), Collections.emptyMap());
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(S)org.apache.cassandra.audit.AuditLogFilter:create(org.apache.cassandra.audit.AuditLogOptions),create,AuditLogFilter,../data/xml/cassandra_call_methods/AuditLogFilter.xml,"/**
     * (Re-)Loads filters from config. Called during startup as well as JMX invocations.
     */
public static AuditLogFilter create(AuditLogOptions auditLogOptions)
    {
        logger.trace(""Loading AuditLog filters"");

        IncludeExcludeHolder keyspaces = loadInputSets(auditLogOptions.included_keyspaces, auditLogOptions.excluded_keyspaces);
        IncludeExcludeHolder categories = loadInputSets(auditLogOptions.included_categories, auditLogOptions.excluded_categories);
        IncludeExcludeHolder users = loadInputSets(auditLogOptions.included_users, auditLogOptions.excluded_users);

        return new AuditLogFilter(keyspaces.excludedSet, keyspaces.includedSet,
                                  categories.excludedSet, categories.includedSet,
                                  users.excludedSet, users.includedSet);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(O)org.apache.cassandra.audit.AuditLogManager:registerAsListener(),registerAsListener,AuditLogManager,../data/xml/cassandra_call_methods/AuditLogManager.xml,"
private void registerAsListener()
    {
        QueryEvents.instance.registerListener(this);
        AuthEvents.instance.registerListener(this);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(O)org.apache.cassandra.utils.binlog.BinLog$Builder:<init>(),<init>,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"/**
 * Bin log is a is quick and dirty binary log that is kind of a NIH version of binary logging with a traditional logging
 * framework. It's goal is good enough performance, predictable footprint, simplicity in terms of implementation and configuration
 * and most importantly minimal impact on producers of log records.
 *
 * Performance safety is accomplished by feeding items to the binary log using a weighted queue and dropping records if the binary log falls
 * sufficiently far behind.
 *
 * Simplicity and good enough perforamance is achieved by using a single log writing thread as well as Chronicle Queue
 * to handle writing the log, making it available for readers, as well as log rolling.
 *
 */
public class BinLog implements Runnable
{
    private static final Logger logger = LoggerFactory.getLogger(BinLog.class);
    private static final NoSpamLogger noSpamLogger = NoSpamLogger.getLogger(logger, 1, TimeUnit.MINUTES);
    private static final NoSpamLogger.NoSpamLogStatement droppedSamplesStatement = noSpamLogger.getStatement(""Dropped {} binary log samples"", 1, TimeUnit.MINUTES);

    public final Path path;

    public static final String VERSION = ""version"";
    public static final String TYPE = ""type"";

    private ChronicleQueue queue;
    private ExcerptAppender appender;
    @VisibleForTesting
    Thread binLogThread = new NamedThreadFactory(""Binary Log thread"").newThread(this);
    final WeightedQueue<ReleaseableWriteMarshallable> sampleQueue;
    private final BinLogArchiver archiver;
    private final boolean blocking;

    private final AtomicLong droppedSamplesSinceLastLog = new AtomicLong();

    private BinLogOptions options;

    /*
    This set contains all the paths we are currently logging to, it is used to make sure
    we don't start writing audit and full query logs to the same path.
    */
    private static final Set<Path> currentPaths = Collections.synchronizedSet(new HashSet<>());

    private static final ReleaseableWriteMarshallable NO_OP = new ReleaseableWriteMarshallable()
    {
        @Override
        protected long version()
        {
            return 0;
        }

        @Override
        protected String type()
        {
            return ""no-op"";
        }

        @Override
        public void writeMarshallablePayload(WireOut wire)
        {
        }

        @Override
        public void release()
        {
        }
    };

    private volatile boolean shouldContinue = true;

    private BinLog(Path path, BinLogOptions options, BinLogArchiver archiver)
    {
        Preconditions.checkNotNull(path, ""path was null"");
        Preconditions.checkNotNull(options.roll_cycle, ""roll_cycle was null"");
        Preconditions.checkArgument(options.max_queue_weight > 0, ""max_queue_weight must be > 0"");
        SingleChronicleQueueBuilder builder = SingleChronicleQueueBuilder.single(path.toFile());
        builder.rollCycle(RollCycles.valueOf(options.roll_cycle));

        sampleQueue = new WeightedQueue<>(options.max_queue_weight);
        this.archiver = archiver;
        builder.storeFileListener(this.archiver);
        queue = builder.build();
        appender = queue.acquireAppender();
        this.blocking = options.block;
        this.path = path;

        this.options = options;
    }

    public BinLogOptions getBinLogOptions()
    {
        return options;
    }

    /**
     * Start the consumer thread that writes log records. Can only be done once.
     */
    @VisibleForTesting
    void start()
    {
        if (!shouldContinue)
        {
            throw new IllegalStateException(""Can't reuse stopped BinLog"");
        }
        binLogThread.start();
    }

    /**
     * Stop the consumer thread that writes log records. Can be called multiple times.
     * @throws InterruptedException
     */
    public synchronized void stop() throws InterruptedException
    {
        if (!shouldContinue)
        {
            return;
        }

        shouldContinue = false;
        sampleQueue.put(NO_OP);
        binLogThread.join();
        appender.close();
        appender = null;
        queue.close();
        queue = null;
        archiver.stop();
        currentPaths.remove(path);
    }

    /**
     * Offer a record to the log. If the in memory queue is full the record will be dropped and offer will return false.
     * @param record The record to write to the log
     * @return true if the record was queued and false otherwise
     */
    public boolean offer(ReleaseableWriteMarshallable record)
    {
        if (!shouldContinue)
        {
            return false;
        }

        return sampleQueue.offer(record);
    }

    /**
     * Put a record into the log. If the in memory queue is full the putting thread will be blocked until there is space or it is interrupted.
     * @param record The record to write to the log
     * @throws InterruptedException
     */
    public void put(ReleaseableWriteMarshallable record) throws InterruptedException
    {
        if (!shouldContinue)
        {
            return;
        }

        //Resolve potential deadlock at shutdown when queue is full
        while (shouldContinue)
        {
            if (sampleQueue.offer(record, 1, TimeUnit.SECONDS))
            {
                return;
            }
        }
    }

    private void processTasks(List<ReleaseableWriteMarshallable> tasks)
    {
        for (int ii = 0; ii < tasks.size(); ii++)
        {
            WriteMarshallable t = tasks.get(ii);
            //Don't write an empty document
            if (t == NO_OP)
            {
                continue;
            }

            appender.writeDocument(t);
        }
    }

    @Override
    public void run()
    {
        List<ReleaseableWriteMarshallable> tasks = new ArrayList<>(16);
        while (shouldContinue)
        {
            try
            {
                tasks.clear();
                ReleaseableWriteMarshallable task = sampleQueue.take();
                tasks.add(task);
                sampleQueue.drainTo(tasks, 15);

                processTasks(tasks);
            }
            catch (Throwable t)
            {
                logger.error(""Unexpected exception in binary log thread"", t);
            }
            finally
            {
                for (int ii = 0; ii < tasks.size(); ii++)
                {
                    tasks.get(ii).release();
                }
            }
        }

        //Clean up the buffers on thread exit, finalization will check again once this
        //is no longer reachable ensuring there are no stragglers in the queue.
        finalize();
    }


    /**
     * There is a race where we might not release a buffer, going to let finalization
     * catch it since it shouldn't happen to a lot of buffers. Only test code would run
     * into it anyways.
     */
    @Override
    public void finalize()
    {
        ReleaseableWriteMarshallable toRelease;
        while (((toRelease = sampleQueue.poll()) != null))
        {
            toRelease.release();
        }
    }

    // todo: refactor to helper class?
    public void logRecord(ReleaseableWriteMarshallable record)
    {
        boolean putInQueue = false;
        try
        {
            if (blocking)
            {
                try
                {
                    put(record);
                    putInQueue = true;
                }
                catch (InterruptedException e)
                {
                    throw new RuntimeException(e);
                }
            }
            else
            {
                if (!offer(record))
                {
                    logDroppedSample();
                }
                else
                {
                    putInQueue = true;
                }
            }
        }
        finally
        {
            if (!putInQueue)
            {
                record.release();
            }
        }
    }

    /**
     * This is potentially lossy, but it's not super critical as we will always generally know
     * when this is happening and roughly how bad it is.
     */
    private void logDroppedSample()
    {
        droppedSamplesSinceLastLog.incrementAndGet();
        if (droppedSamplesStatement.warn(new Object[] {droppedSamplesSinceLastLog.get()}))
        {
            droppedSamplesSinceLastLog.set(0);
        }
    }


    public 

BinLog.class

private BinLog(Path path, BinLogOptions options, BinLogArchiver archiver)
    {
        Preconditions.checkNotNull(path, ""path was null"");
        Preconditions.checkNotNull(options.roll_cycle, ""roll_cycle was null"");
        Preconditions.checkArgument(options.max_queue_weight > 0, ""max_queue_weight must be > 0"");
        SingleChronicleQueueBuilder builder = SingleChronicleQueueBuilder.single(path.toFile());
        builder.rollCycle(RollCycles.valueOf(options.roll_cycle));

        sampleQueue = new WeightedQueue<>(options.max_queue_weight);
        this.archiver = archiver;
        builder.storeFileListener(this.archiver);
        queue = builder.build();
        appender = queue.acquireAppender();
        this.blocking = options.block;
        this.path = path;

        this.options = options;
    }

    

public BinLog 

BinLog 

BinLog(path, options, archiver)"
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.utils.binlog.BinLog$Builder:blocking(boolean),blocking,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"
public Builder blocking(boolean blocking)
        {
            this.blocking = blocking;
            return this;
        }


        "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.utils.binlog.BinLog$Builder:maxQueueWeight(int),maxQueueWeight,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"
public Builder maxQueueWeight(int maxQueueWeight)
        {
            Preconditions.checkArgument(maxQueueWeight > 0, ""maxQueueWeight must be > 0"");
            this.maxQueueWeight = maxQueueWeight;
            return this;
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.utils.binlog.BinLog$Builder:maxLogSize(long),maxLogSize,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"
public Builder maxLogSize(long maxLogSize)
        {
            Preconditions.checkArgument(maxLogSize > 0, ""maxLogSize must be > 0"");
            this.maxLogSize = maxLogSize;
            return this;
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.utils.binlog.BinLog$Builder:maxArchiveRetries(int),maxArchiveRetries,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"
public Builder maxArchiveRetries(int maxArchiveRetries)
        {
            this.maxArchiveRetries = maxArchiveRetries;
            return this;
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.utils.binlog.BinLog$Builder:build(boolean),build,BinLog$Builder,../data/xml/cassandra_call_methods/BinLog.xml,"
public BinLog build(boolean cleanDirectory)
        {
            logger.info(""Attempting to configure bin log: Path: {} Roll cycle: {} Blocking: {} Max queue weight: {} Max log size:{} Archive command: {}"", path, rollCycle, blocking, maxQueueWeight, maxLogSize, archiveCommand);
            synchronized (currentPaths)
            {
                if (currentPaths.contains(path))
                    throw new IllegalStateException(""Already logging to "" + path);
                currentPaths.add(path);
            }
            try
            {
                // create the archiver before cleaning directories - ExternalArchiver will try to archive any existing file.
                BinLogArchiver archiver = Strings.isNullOrEmpty(archiveCommand) ? new DeletingArchiver(maxLogSize) : new ExternalArchiver(archiveCommand, path, maxArchiveRetries);
                if (cleanDirectory)
                {
                    logger.info(""Cleaning directory: {} as requested"", path);
                    if (path.toFile().exists())
                    {
                        Throwable error = cleanDirectory(path.toFile(), null);
                        if (error != null)
                        {
                            throw new RuntimeException(error);
                        }
                    }
                }

                final BinLogOptions options = new BinLogOptions();

                options.max_log_size = maxLogSize;
                options.max_queue_weight = maxQueueWeight;
                options.block = blocking;
                options.roll_cycle = rollCycle;
                options.archive_command = archiveCommand;
                options.max_archive_retries = maxArchiveRetries;

                BinLog binlog = new BinLog(path, options, archiver);
                binlog.start();
                return binlog;
            }
            catch (Exception e)
            {
                currentPaths.remove(path);
                throw e;
            }
        }
    }"
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(O)org.apache.cassandra.audit.AuditLogOptions:<init>(),<init>,AuditLogOptions,../data/xml/cassandra_call_methods/AuditLogOptions.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuditLoggingOptions(),audit_logging_options,(M)org.apache.cassandra.audit.AuditLogManager:enable(org.apache.cassandra.audit.AuditLogOptions),enable,AuditLogManager,../data/xml/cassandra_call_methods/AuditLogManager.xml,"/**
     * Enables AuditLog, designed to be invoked only via JMX/ Nodetool, not from anywhere else in the codepath.
     * @param auditLogOptions AuditLogOptions to be used for enabling AuditLog
     * @throws ConfigurationException It can throw configuration exception when provided logger class does not exist in the classpath
     */
public synchronized void enable(AuditLogOptions auditLogOptions) throws ConfigurationException
    {
        // always reload the filters
        filter = AuditLogFilter.create(auditLogOptions);

        // next, check to see if we're changing the logging implementation; if not, keep the same instance and bail.
        // note: auditLogger should never be null
        IAuditLogger oldLogger = auditLogger;
        if (oldLogger.getClass().getSimpleName().equals(auditLogOptions.logger.class_name))
            return;

        auditLogger = getAuditLogger(auditLogOptions.logger);

        // note that we might already be registered here and we rely on the fact that Query/AuthEvents have a Set of listeners
        registerAsListener();

        // ensure oldLogger's stop() is called after we swap it with new logger,
        // otherwise, we might be calling log() on the stopped logger.
        oldLogger.stop();
    }

    "
