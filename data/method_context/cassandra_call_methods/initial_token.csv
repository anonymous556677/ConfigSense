function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,(S)org.apache.cassandra.config.DatabaseDescriptor:getAllocateTokensForKeyspace(),getAllocateTokensForKeyspace,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static String getAllocateTokensForKeyspace()
    {
        return System.getProperty(Config.PROPERTY_PREFIX + ""allocate_tokens_for_keyspace"", conf.allocate_tokens_for_keyspace);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,(S)org.apache.cassandra.config.DatabaseDescriptor:getAllocateTokensForLocalRf(),getAllocateTokensForLocalRf,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static Integer getAllocateTokensForLocalRf()
    {
        return conf.allocate_tokens_for_local_replication_factor;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,(S)org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),getInitialTokens,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static Collection<String> getInitialTokens()
    {
        return tokensFromString(System.getProperty(Config.PROPERTY_PREFIX + ""initial_token"", conf.initial_token));
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,(S)org.apache.cassandra.config.DatabaseDescriptor:getNumTokens(),getNumTokens,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getNumTokens()
    {
        return conf.num_tokens;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,"(S)org.apache.cassandra.dht.BootStrapper:allocateTokens(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.InetAddressAndPort,int,int,long)",allocateTokens,BootStrapper,../data/xml/cassandra_call_methods/BootStrapper.xml,"
static Collection<Token> allocateTokens(final TokenMetadata metadata,
                                            InetAddressAndPort address,
                                            String allocationKeyspace,
                                            int numTokens,
                                            long schemaWaitDelay)
    {
        StorageService.instance.waitForSchema(schemaWaitDelay);
        if (!FBUtilities.getBroadcastAddressAndPort().equals(InetAddressAndPort.getLoopbackAddress()))
            Gossiper.waitToSettle();

        Keyspace ks = Keyspace.open(allocationKeyspace);
        if (ks == null)
            throw new ConfigurationException(""Problem opening token allocation keyspace "" + allocationKeyspace);
        AbstractReplicationStrategy rs = ks.getReplicationStrategy();

        Collection<Token> tokens = TokenAllocation.allocateTokens(metadata, rs, address, numTokens);
        BootstrapDiagnostics.tokensAllocated(address, metadata, allocationKeyspace, numTokens, tokens);
        return tokens;
    }


    

static Collection<Token> allocateTokens(final TokenMetadata metadata,
                                            InetAddressAndPort address,
                                            int rf,
                                            int numTokens,
                                            long schemaWaitDelay)
    {
        StorageService.instance.waitForSchema(schemaWaitDelay);
        if (!FBUtilities.getBroadcastAddressAndPort().equals(InetAddressAndPort.getLoopbackAddress()))
            Gossiper.waitToSettle();

        Collection<Token> tokens = TokenAllocation.allocateTokens(metadata, rf, address, numTokens);
        BootstrapDiagnostics.tokensAllocated(address, metadata, rf, numTokens, tokens);
        return tokens;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInitialTokens(),initial_token,"(S)org.apache.cassandra.dht.BootStrapper:getRandomTokens(org.apache.cassandra.locator.TokenMetadata,int)",getRandomTokens,BootStrapper,../data/xml/cassandra_call_methods/BootStrapper.xml,"
public static Collection<Token> getRandomTokens(TokenMetadata metadata, int numTokens)
    {
        Set<Token> tokens = new HashSet<>(numTokens);
        while (tokens.size() < numTokens)
        {
            Token token = metadata.partitioner.getRandomToken();
            if (metadata.getEndpoint(token) == null)
                tokens.add(token);
        }

        logger.info(""Generated random tokens. tokens are {}"", tokens);
        return tokens;
    }
}"
