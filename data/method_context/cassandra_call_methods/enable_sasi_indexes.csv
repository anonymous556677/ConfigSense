function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.cql3.statements.schema.IndexAttributes:validate(),validate,IndexAttributes,../data/xml/cassandra_call_methods/IndexAttributes.xml,"
public void validate() throws RequestValidationException
    {
        validate(keywords, obsoleteKeywords);

        if (isCustom && customClass == null)
            throw new InvalidRequestException(""CUSTOM index requires specifiying the index class"");

        if (!isCustom && customClass != null)
            throw new InvalidRequestException(""Cannot specify index class for a non-CUSTOM index"");

        if (!isCustom && !properties.isEmpty())
            throw new InvalidRequestException(""Cannot specify options for a non-CUSTOM index"");

        if (getRawOptions().containsKey(IndexTarget.CUSTOM_INDEX_OPTION_NAME))
            throw new InvalidRequestException(String.format(""Cannot specify %s as a CUSTOM option"",
                                                            IndexTarget.CUSTOM_INDEX_OPTION_NAME));

        if (getRawOptions().containsKey(IndexTarget.TARGET_OPTION_NAME))
            throw new InvalidRequestException(String.format(""Cannot specify %s as a CUSTOM option"",
                                                            IndexTarget.TARGET_OPTION_NAME));

    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(S)org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),getEnableSASIIndexes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean getEnableSASIIndexes()
    {
        return conf.enable_sasi_indexes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.TableMetadata:isCounter(),isCounter,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public boolean isCounter()
    {
        return flags.contains(Flag.COUNTER);
    }

    

public Builder isCounter(boolean val)
        {
            return flag(Flag.COUNTER, val);
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.TableMetadata:isView(),isView,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public boolean isView()
    {
        return kind == Kind.VIEW;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.db.Keyspace:getReplicationStrategy(),getReplicationStrategy,Keyspace,../data/xml/cassandra_call_methods/Keyspace.xml,"
public AbstractReplicationStrategy getReplicationStrategy()
    {
        return replicationStrategy;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.locator.AbstractReplicationStrategy:hasTransientReplicas(),hasTransientReplicas,AbstractReplicationStrategy,../data/xml/cassandra_call_methods/AbstractReplicationStrategy.xml,"
public boolean hasTransientReplicas()
    {
        return getReplicationFactor().hasTransientReplicas();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(D)com.google.common.base.Function:apply(org.apache.cassandra.schema.TableMetadata),apply,Function,../data/xml/cassandra_call_methods/cannot find.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.cql3.statements.schema.IndexAttributes:getOptions(),getOptions,IndexAttributes,../data/xml/cassandra_call_methods/IndexAttributes.xml,"
public Map<String, String> getOptions() throws SyntaxException
    {
        Map<String, String> options = new HashMap<>(getRawOptions());
        options.put(IndexTarget.CUSTOM_INDEX_OPTION_NAME, customClass);
        return options;
    }
}"
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(D)com.google.common.base.Predicate:apply(org.apache.cassandra.schema.IndexMetadata),apply,Predicate,../data/xml/cassandra_call_methods/cannot find.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.Indexes:with(org.apache.cassandra.schema.IndexMetadata),with,Indexes,../data/xml/cassandra_call_methods/Indexes.xml,"/**
     * Create a SecondaryIndexes instance with the provided index added
     */
public Indexes with(IndexMetadata index)
    {
        if (get(index.name).isPresent())
            throw new IllegalStateException(format(""Index %s already exists"", index.name));

        return builder().add(this).add(index).build();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.TableMetadata:withSwapped(org.apache.cassandra.schema.Indexes),withSwapped,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public TableMetadata withSwapped(TableParams params)
    {
        return unbuild().params(params).build();
    }

    

public TableMetadata withSwapped(Set<Flag> flags)
    {
        return unbuild().flags(flags).build();
    }

    

public TableMetadata withSwapped(Triggers triggers)
    {
        return unbuild().triggers(triggers).build();
    }

    

public TableMetadata withSwapped(Indexes indexes)
    {
        return unbuild().indexes(indexes).build();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.TableMetadata:validate(),validate,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public void validate()
    {
        if (!isNameValid(keyspace))
            except(""Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \""%s\"")"", SchemaConstants.NAME_LENGTH, keyspace);

        if (!isNameValid(name))
            except(""Table name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \""%s\"")"", SchemaConstants.NAME_LENGTH, name);

        params.validate();

        if (partitionKeyColumns.stream().anyMatch(c -> c.type.isCounter()))
            except(""PRIMARY KEY columns cannot contain counters"");

        // Mixing counter with non counter columns is not supported (#2614)
        if (isCounter())
        {
            for (ColumnMetadata column : regularAndStaticColumns)
                if (!(column.type.isCounter()) && !isSuperColumnMapColumnName(column.name))
                    except(""Cannot have a non counter column (\""%s\"") in a counter table"", column.name);
        }
        else
        {
            for (ColumnMetadata column : regularAndStaticColumns)
                if (column.type.isCounter())
                    except(""Cannot have a counter column (\""%s\"") in a non counter table"", column.name);
        }

        // All tables should have a partition key
        if (partitionKeyColumns.isEmpty())
            except(""Missing partition keys for table %s"", toString());

        indexes.validate(this);
    }

    

public void validate()
        {
            super.validate();

            // A compact table should always have a clustering
            if (!Flag.isCQLTable(flags) && clusteringColumns.isEmpty())
                except(""For table %s, isDense=%b, isCompound=%b, clustering=%s"", toString(),
                       Flag.isDense(flags), Flag.isCompound(flags), clusteringColumns);
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.Tables:withSwapped(org.apache.cassandra.schema.TableMetadata),withSwapped,Tables,../data/xml/cassandra_call_methods/Tables.xml,"
public Tables withSwapped(TableMetadata table)
    {
        return without(table.name).with(table);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.KeyspaceMetadata:withSwapped(org.apache.cassandra.schema.Tables),withSwapped,KeyspaceMetadata,../data/xml/cassandra_call_methods/KeyspaceMetadata.xml,"
public KeyspaceMetadata withSwapped(KeyspaceParams params)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Tables regular)
    {
        return new KeyspaceMetadata(name, kind, params, regular, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Views views)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Types types)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Functions functions)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getEnableSASIIndexes(),enable_sasi_indexes,(M)org.apache.cassandra.schema.Keyspaces:withAddedOrUpdated(org.apache.cassandra.schema.KeyspaceMetadata),withAddedOrUpdated,Keyspaces,../data/xml/cassandra_call_methods/Keyspaces.xml,"
public Keyspaces withAddedOrUpdated(KeyspaceMetadata keyspace)
    {
        return builder().add(Iterables.filter(this, k -> !k.name.equals(keyspace.name)))
                        .add(keyspace)
                        .build();
    }

    "
