function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getRawConfig(),getRawConfig,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static Config getRawConfig()
    {
        return conf;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(O)org.apache.cassandra.auth.AllowAllAuthenticator:<init>(),<init>,AllowAllAuthenticator,../data/xml/cassandra_call_methods/AllowAllAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:setAuthenticator(org.apache.cassandra.auth.IAuthenticator),setAuthenticator,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static void setAuthenticator(IAuthenticator authenticator)
    {
        DatabaseDescriptor.authenticator = authenticator;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(O)org.apache.cassandra.auth.AllowAllAuthorizer:<init>(),<init>,AllowAllAuthorizer,../data/xml/cassandra_call_methods/AllowAllAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IAuthenticator:requireAuthentication(),requireAuthentication,IAuthenticator,../data/xml/cassandra_call_methods/IAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IAuthorizer:requireAuthorization(),requireAuthorization,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,"/**
     * Whether or not the authorizer will attempt authorization.
     * If false the authorizer will not be called for authorization of resources.
     */
default boolean requireAuthorization()
    {
        return true;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:setAuthorizer(org.apache.cassandra.auth.IAuthorizer),setAuthorizer,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static void setAuthorizer(IAuthorizer authorizer)
    {
        DatabaseDescriptor.authorizer = authorizer;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(O)org.apache.cassandra.auth.CassandraRoleManager:<init>(),<init>,CassandraRoleManager,../data/xml/cassandra_call_methods/CassandraRoleManager.xml,"
public CassandraRoleManager()
    {
        supportedOptions = DatabaseDescriptor.getAuthenticator().getClass() == PasswordAuthenticator.class
                         ? ImmutableSet.of(Option.LOGIN, Option.SUPERUSER, Option.PASSWORD)
                         : ImmutableSet.of(Option.LOGIN, Option.SUPERUSER);
        alterableOptions = DatabaseDescriptor.getAuthenticator().getClass().equals(PasswordAuthenticator.class)
                         ? ImmutableSet.of(Option.PASSWORD)
                         : ImmutableSet.<Option>of();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:setRoleManager(org.apache.cassandra.auth.IRoleManager),setRoleManager,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static void setRoleManager(IRoleManager roleManager)
    {
        DatabaseDescriptor.roleManager = roleManager;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:setInternodeAuthenticator(org.apache.cassandra.auth.IInternodeAuthenticator),setInternodeAuthenticator,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static void setInternodeAuthenticator(IInternodeAuthenticator internodeAuthenticator)
    {
        Preconditions.checkNotNull(internodeAuthenticator);
        DatabaseDescriptor.internodeAuthenticator = internodeAuthenticator;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:setNetworkAuthorizer(org.apache.cassandra.auth.INetworkAuthorizer),setNetworkAuthorizer,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static void setNetworkAuthorizer(INetworkAuthorizer networkAuthorizer)
    {
        DatabaseDescriptor.networkAuthorizer = networkAuthorizer;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.INetworkAuthorizer:requireAuthorization(),requireAuthorization,INetworkAuthorizer,../data/xml/cassandra_call_methods/INetworkAuthorizer.xml,"/**
     * Whether or not the authorizer will attempt authorization.
     * If false the authorizer will not be called for authorization of resources.
     */
default boolean requireAuthorization()
    {
        return true;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IAuthenticator:validateConfiguration(),validateConfiguration,IAuthenticator,../data/xml/cassandra_call_methods/IAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IAuthorizer:validateConfiguration(),validateConfiguration,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IRoleManager:validateConfiguration(),validateConfiguration,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.INetworkAuthorizer:validateConfiguration(),validateConfiguration,INetworkAuthorizer,../data/xml/cassandra_call_methods/INetworkAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),getInternodeAuthenticator,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static IInternodeAuthenticator getInternodeAuthenticator()
    {
        return internodeAuthenticator;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(I)org.apache.cassandra.auth.IInternodeAuthenticator:validateConfiguration(),validateConfiguration,IInternodeAuthenticator,../data/xml/cassandra_call_methods/IInternodeAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getStoragePort(),getStoragePort,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getStoragePort()
    {
        return Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + ""storage_port"", Integer.toString(conf.storage_port)));
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getSSLStoragePort(),getSSLStoragePort,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getSSLStoragePort()
    {
        return Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + ""ssl_storage_port"", Integer.toString(conf.ssl_storage_port)));
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeMessagingEncyptionOptions(),getInternodeMessagingEncyptionOptions,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static EncryptionOptions.ServerEncryptionOptions getInternodeMessagingEncyptionOptions()
    {
        return conf.server_encryption_options;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeSocketReceiveBufferSizeInBytes(),getInternodeSocketReceiveBufferSizeInBytes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getInternodeSocketReceiveBufferSizeInBytes()
    {
        return conf.internode_socket_receive_buffer_size_in_bytes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueCapacityInBytes(),getInternodeApplicationReceiveQueueCapacityInBytes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getInternodeApplicationReceiveQueueCapacityInBytes()
    {
        return conf.internode_application_receive_queue_capacity_in_bytes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeAuthenticator(),internode_authenticator,(S)org.apache.cassandra.net.MessagingService:instance(),instance,MessagingService,../data/xml/cassandra_call_methods/MessagingService.xml,"
public static MessagingService instance()
    {
        return MSHandle.instance;
    }

    "
