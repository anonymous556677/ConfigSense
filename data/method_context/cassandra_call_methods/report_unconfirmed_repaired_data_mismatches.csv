function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),report_unconfirmed_repaired_data_mismatches,(S)org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),reportUnconfirmedRepairedDataMismatches,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean reportUnconfirmedRepairedDataMismatches()
    {
        return conf.report_unconfirmed_repaired_data_mismatches;
    }

    

public static void reportUnconfirmedRepairedDataMismatches(boolean enabled)
    {
        conf.report_unconfirmed_repaired_data_mismatches = enabled;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),report_unconfirmed_repaired_data_mismatches,(M)org.apache.cassandra.db.ReadCommand:metadata(),metadata,ReadCommand,../data/xml/cassandra_call_methods/ReadCommand.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),report_unconfirmed_repaired_data_mismatches,(S)org.apache.cassandra.db.ColumnFamilyStore:metricsFor(org.apache.cassandra.schema.TableId),metricsFor,ColumnFamilyStore,../data/xml/cassandra_call_methods/ColumnFamilyStore.xml,"
public static TableMetrics metricsFor(TableId tableId)
    {
        return Objects.requireNonNull(getIfExists(tableId)).metric;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),report_unconfirmed_repaired_data_mismatches,(M)org.apache.cassandra.metrics.TableMetrics$TableMeter:mark(),mark,TableMetrics$TableMeter,../data/xml/cassandra_call_methods/TableMetrics.xml,"
public void mark()
        {
            for (Meter meter : all)
            {
                meter.mark();
            }
        }
    }"
org.apache.cassandra.config.DatabaseDescriptor:reportUnconfirmedRepairedDataMismatches(),report_unconfirmed_repaired_data_mismatches,(O)org.apache.cassandra.service.reads.repair.RepairedDataVerifier$SimpleVerifier:verify(org.apache.cassandra.service.reads.repair.RepairedDataTracker),verify,RepairedDataVerifier$SimpleVerifier,../data/xml/cassandra_call_methods/RepairedDataVerifier.xml,"
@Override
        public void verify(RepairedDataTracker tracker)
        {
            Tracing.trace(""Verifying repaired data tracker {}"", tracker);

            // some mismatch occurred between the repaired datasets on the replicas
            if (tracker.digests.keySet().size() > 1)
            {
                // if any of the digests should be considered inconclusive, because there were
                // pending repair sessions which had not yet been committed or unrepaired partition
                // deletes which meant some sstables were skipped during reads, mark the inconsistency
                // as confirmed
                if (tracker.inconclusiveDigests.isEmpty())
                {
                    TableMetrics metrics = ColumnFamilyStore.metricsFor(command.metadata().id);
                    metrics.confirmedRepairedInconsistencies.mark();
                    NoSpamLogger.log(logger, NoSpamLogger.Level.WARN, 1, TimeUnit.MINUTES,
                                     INCONSISTENCY_WARNING, command.metadata().keyspace,
                                     command.metadata().name, command.toString(), tracker);
                }
                else if (DatabaseDescriptor.reportUnconfirmedRepairedDataMismatches())
                {
                    TableMetrics metrics = ColumnFamilyStore.metricsFor(command.metadata().id);
                    metrics.unconfirmedRepairedInconsistencies.mark();
                    NoSpamLogger.log(logger, NoSpamLogger.Level.WARN, 1, TimeUnit.MINUTES,
                                     INCONSISTENCY_WARNING, command.metadata().keyspace,
                                     command.metadata().name, command.toString(), tracker);
                }
            }
        }
    }

public void verify(RepairedDataTracker tracker)
        {
            super.verify(tracker);
            if (tracker.digests.keySet().size() > 1)
            {
                if (tracker.inconclusiveDigests.isEmpty() ||  DatabaseDescriptor.reportUnconfirmedRepairedDataMismatches())
                {
                    logger.warn(SNAPSHOTTING_WARNING, command.metadata().keyspace, command.metadata().name, command.toString(), tracker);
                    DiagnosticSnapshotService.repairedDataMismatch(command.metadata(), tracker.digests.values());
                }
            }
        }
    }"
