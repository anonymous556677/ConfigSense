function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes(),internode_application_receive_queue_reserve_endpoint_capacity_in_bytes,(S)org.apache.cassandra.utils.FBUtilities:getLocalAddressAndPort(),getLocalAddressAndPort,FBUtilities,../data/xml/cassandra_call_methods/FBUtilities.xml,"/**
     * The address and port to listen on for intra-cluster storage traffic (not client). Use this to get the correct
     * stuff to listen on for intra-cluster communication.
     */
public static InetAddressAndPort getLocalAddressAndPort()
    {
        if (localInetAddressAndPort == null)
        {
            if(DatabaseDescriptor.getRawConfig() == null)
            {
                localInetAddressAndPort = InetAddressAndPort.getByAddress(getJustLocalAddress());
            }
            else
            {
                localInetAddressAndPort = InetAddressAndPort.getByAddressOverrideDefaults(getJustLocalAddress(),
                                                                                          DatabaseDescriptor.getStoragePort());
            }
        }
        return localInetAddressAndPort;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes(),internode_application_receive_queue_reserve_endpoint_capacity_in_bytes,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueCapacityInBytes(),getInternodeApplicationReceiveQueueCapacityInBytes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getInternodeApplicationReceiveQueueCapacityInBytes()
    {
        return conf.internode_application_receive_queue_capacity_in_bytes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes(),internode_application_receive_queue_reserve_endpoint_capacity_in_bytes,(S)org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes(),getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes()
    {
        return conf.internode_application_receive_queue_reserve_endpoint_capacity_in_bytes;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes(),internode_application_receive_queue_reserve_endpoint_capacity_in_bytes,"(O)org.apache.cassandra.net.InboundMessageHandlers:<init>(org.apache.cassandra.locator.InetAddressAndPort,org.apache.cassandra.locator.InetAddressAndPort,int,long,org.apache.cassandra.net.InboundMessageHandlers$GlobalResourceLimits,org.apache.cassandra.net.InboundMessageHandlers$GlobalMetricCallbacks,org.apache.cassandra.net.InboundMessageHandlers$MessageConsumer)",<init>,InboundMessageHandlers,../data/xml/cassandra_call_methods/InboundMessageHandlers.xml,"
public InboundMessageHandlers(InetAddressAndPort self,
                                  InetAddressAndPort peer,
                                  int queueCapacity,
                                  long endpointReserveCapacity,
                                  GlobalResourceLimits globalResourceLimits,
                                  GlobalMetricCallbacks globalMetricCallbacks,
                                  MessageConsumer messageConsumer)
    {
        this(self, peer, queueCapacity, endpointReserveCapacity, globalResourceLimits, globalMetricCallbacks, messageConsumer, InboundMessageHandler::new);
    }

    

public InboundMessageHandlers(InetAddressAndPort self,
                                  InetAddressAndPort peer,
                                  int queueCapacity,
                                  long endpointReserveCapacity,
                                  GlobalResourceLimits globalResourceLimits,
                                  GlobalMetricCallbacks globalMetricCallbacks,
                                  MessageConsumer messageConsumer,
                                  HandlerProvider handlerProvider)
    {
        this.self = self;
        this.peer = peer;

        this.queueCapacity = queueCapacity;
        this.endpointReserveCapacity = new ResourceLimits.Concurrent(endpointReserveCapacity);
        this.globalReserveCapacity = globalResourceLimits.reserveCapacity;
        this.endpointWaitQueue = InboundMessageHandler.WaitQueue.endpoint(this.endpointReserveCapacity);
        this.globalWaitQueue = globalResourceLimits.waitQueue;
        this.messageConsumer = messageConsumer;

        this.handlerProvider = handlerProvider;

        urgentCallbacks = makeMessageCallbacks(peer, urgentCounters, globalMetricCallbacks, messageConsumer);
        smallCallbacks  = makeMessageCallbacks(peer, smallCounters,  globalMetricCallbacks, messageConsumer);
        largeCallbacks  = makeMessageCallbacks(peer, largeCounters,  globalMetricCallbacks, messageConsumer);
        legacyCallbacks = makeMessageCallbacks(peer, legacyCounters, globalMetricCallbacks, messageConsumer);

        metrics = new InternodeInboundMetrics(peer, this);
    }

    "
