function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(S)org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enableDropCompactStorage,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean enableDropCompactStorage()
    {
        return conf.enable_drop_compact_storage;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(M)org.apache.cassandra.schema.TableMetadata:isCompactTable(),isCompactTable,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public boolean isCompactTable()
    {
        return false;
    }

    

@Override
        public boolean isCompactTable()
        {
            return true;
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(O)org.apache.cassandra.cql3.statements.schema.AlterTableStatement$DropCompactStorage:validateCanDropCompactStorage(),validateCanDropCompactStorage,AlterTableStatement$DropCompactStorage,../data/xml/cassandra_call_methods/AlterTableStatement.xml,"/**
         * Throws if DROP COMPACT STORAGE cannot be used (yet) because the cluster is not sufficiently upgraded. To be able
         * to use DROP COMPACT STORAGE, we need to ensure that no pre-3.0 sstables exists in the cluster, as we won't be
         * able to read them anymore once COMPACT STORAGE is dropped (see CASSANDRA-15897). In practice, this method checks
         * 3 things:
         *   1) that all nodes are on 3.0+. We need this because 2.x nodes don't advertise their sstable versions.
         *   2) for 3.0+, we use the new (CASSANDRA-15897) sstables versions set gossiped by all nodes to ensure all
         *      sstables have been upgraded cluster-wise.
         *   3) if the cluster still has some 3.0 nodes that predate CASSANDRA-15897, we will not have the sstable versions
         *      for them. In that case, we also refuse DROP COMPACT (even though it may well be safe at this point) and ask
         *      the user to upgrade all nodes.
         */
private void validateCanDropCompactStorage()
        {
            Set<InetAddressAndPort> before4 = new HashSet<>();
            Set<InetAddressAndPort> preC15897nodes = new HashSet<>();
            Set<InetAddressAndPort> with2xSStables = new HashSet<>();
            Splitter onComma = Splitter.on(',').omitEmptyStrings().trimResults();
            for (InetAddressAndPort node : StorageService.instance.getTokenMetadata().getAllEndpoints())
            {
                if (MessagingService.instance().versions.knows(node) &&
                    MessagingService.instance().versions.getRaw(node) < MessagingService.VERSION_40)
                {
                    before4.add(node);
                    continue;
                }

                String sstableVersionsString = Gossiper.instance.getApplicationState(node, ApplicationState.SSTABLE_VERSIONS);
                if (sstableVersionsString == null)
                {
                    preC15897nodes.add(node);
                    continue;
                }

                try
                {
                    boolean has2xSStables = onComma.splitToList(sstableVersionsString)
                                                   .stream()
                                                   .anyMatch(v -> v.compareTo(""big-ma"")<=0);
                    if (has2xSStables)
                        with2xSStables.add(node);
                }
                catch (IllegalArgumentException e)
                {
                    // Means VersionType::fromString didn't parse a version correctly. Which shouldn't happen, we shouldn't
                    // have garbage in Gossip. But crashing the request is not ideal, so we log the error but ignore the
                    // node otherwise.
                    noSpamLogger.error(""Unexpected error parsing sstable versions from gossip for {} (gossiped value "" +
                                       ""is '{}'). This is a bug and should be reported. Cannot ensure that {} has no "" +
                                       ""non-upgraded 2.x sstables anymore. If after this DROP COMPACT STORAGE some old "" +
                                       ""sstables cannot be read anymore, please use `upgradesstables` with the "" +
                                       ""`--force-compact-storage-on` option."", node, sstableVersionsString, node);
                }
            }

            if (!before4.isEmpty())
                throw new InvalidRequestException(format(""Cannot DROP COMPACT STORAGE as some nodes in the cluster (%s) "" +
                                                         ""are not on 4.0+ yet. Please upgrade those nodes and run "" +
                                                         ""`upgradesstables` before retrying."", before4));
            if (!preC15897nodes.isEmpty())
                throw new InvalidRequestException(format(""Cannot guarantee that DROP COMPACT STORAGE is safe as some nodes "" +
                                                         ""in the cluster (%s) do not have https://issues.apache.org/jira/browse/CASSANDRA-15897. "" +
                                                         ""Please upgrade those nodes and retry."", preC15897nodes));
            if (!with2xSStables.isEmpty())
                throw new InvalidRequestException(format(""Cannot DROP COMPACT STORAGE as some nodes in the cluster (%s) "" +
                                                         ""has some non-upgraded 2.x sstables. Please run `upgradesstables` "" +
                                                         ""on those nodes before retrying"", with2xSStables));
        }
    }"
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(M)org.apache.cassandra.schema.TableMetadata:isCounter(),isCounter,TableMetadata,../data/xml/cassandra_call_methods/TableMetadata.xml,"
public boolean isCounter()
    {
        return flags.contains(Flag.COUNTER);
    }

    

public Builder isCounter(boolean val)
        {
            return flag(Flag.COUNTER, val);
        }

        "
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(M)org.apache.cassandra.schema.Tables:withSwapped(org.apache.cassandra.schema.TableMetadata),withSwapped,Tables,../data/xml/cassandra_call_methods/Tables.xml,"
public Tables withSwapped(TableMetadata table)
    {
        return without(table.name).with(table);
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:enableDropCompactStorage(),enable_drop_compact_storage,(M)org.apache.cassandra.schema.KeyspaceMetadata:withSwapped(org.apache.cassandra.schema.Tables),withSwapped,KeyspaceMetadata,../data/xml/cassandra_call_methods/KeyspaceMetadata.xml,"
public KeyspaceMetadata withSwapped(KeyspaceParams params)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Tables regular)
    {
        return new KeyspaceMetadata(name, kind, params, regular, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Views views)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Types types)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    

public KeyspaceMetadata withSwapped(Functions functions)
    {
        return new KeyspaceMetadata(name, kind, params, tables, views, types, functions);
    }

    "
