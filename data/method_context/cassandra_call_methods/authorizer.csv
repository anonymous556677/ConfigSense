function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),getAuthorizer,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static IAuthorizer getAuthorizer()
    {
        return authorizer;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthorizer:revokeAllOn(org.apache.cassandra.auth.IResource),revokeAllOn,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(O)org.apache.cassandra.auth.PermissionsCache:<init>(org.apache.cassandra.auth.IAuthorizer),<init>,PermissionsCache,../data/xml/cassandra_call_methods/PermissionsCache.xml,"
public PermissionsCache(IAuthorizer authorizer)
    {
        super(""PermissionsCache"",
              DatabaseDescriptor::setPermissionsValidity,
              DatabaseDescriptor::getPermissionsValidity,
              DatabaseDescriptor::setPermissionsUpdateInterval,
              DatabaseDescriptor::getPermissionsUpdateInterval,
              DatabaseDescriptor::setPermissionsCacheMaxEntries,
              DatabaseDescriptor::getPermissionsCacheMaxEntries,
              (p) -> authorizer.authorize(p.left, p.right),
              () -> DatabaseDescriptor.getAuthorizer().requireAuthorization());
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.config.DatabaseDescriptor:getNetworkAuthorizer(),getNetworkAuthorizer,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static INetworkAuthorizer getNetworkAuthorizer()
    {
        return networkAuthorizer;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(O)org.apache.cassandra.auth.NetworkAuthCache:<init>(org.apache.cassandra.auth.INetworkAuthorizer),<init>,NetworkAuthCache,../data/xml/cassandra_call_methods/NetworkAuthCache.xml,"
public NetworkAuthCache(INetworkAuthorizer authorizer)
    {
        super(""NetworkAuthCache"",
              DatabaseDescriptor::setRolesValidity,
              DatabaseDescriptor::getRolesValidity,
              DatabaseDescriptor::setRolesUpdateInterval,
              DatabaseDescriptor::getRolesUpdateInterval,
              DatabaseDescriptor::setRolesCacheMaxEntries,
              DatabaseDescriptor::getRolesCacheMaxEntries,
              authorizer::authorize,
              () -> DatabaseDescriptor.getAuthenticator().requireAuthentication());
    }
}"
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthorizer:requireAuthorization(),requireAuthorization,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,"/**
     * Whether or not the authorizer will attempt authorization.
     * If false the authorizer will not be called for authorization of resources.
     */
default boolean requireAuthorization()
    {
        return true;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.service.ClientState:getUser(),getUser,ClientState,../data/xml/cassandra_call_methods/ClientState.xml,"
public AuthenticatedUser getUser()
    {
        return user;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.AuthenticatedUser:isAnonymous(),isAnonymous,AuthenticatedUser,../data/xml/cassandra_call_methods/AuthenticatedUser.xml,"/**
     * If IAuthenticator doesn't require authentication, this method may return true.
     */
public boolean isAnonymous()
    {
        return this == ANONYMOUS_USER;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.RoleResource:applicablePermissions(),applicablePermissions,RoleResource,../data/xml/cassandra_call_methods/RoleResource.xml,"
public Set<Permission> applicablePermissions()
    {
        return level == Level.ROOT ? ROOT_LEVEL_PERMISSIONS : ROLE_LEVEL_PERMISSIONS;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.AuthenticatedUser:getName(),getName,AuthenticatedUser,../data/xml/cassandra_call_methods/AuthenticatedUser.xml,"
public String getName()
    {
        return name;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.config.DatabaseDescriptor:getRoleManager(),getRoleManager,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static IRoleManager getRoleManager()
    {
        return roleManager;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IRoleManager:isExistingRole(org.apache.cassandra.auth.RoleResource),isExistingRole,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,"(I)org.apache.cassandra.auth.IRoleManager:dropRole(org.apache.cassandra.auth.AuthenticatedUser,org.apache.cassandra.auth.RoleResource)",dropRole,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthorizer:revokeAllFrom(org.apache.cassandra.auth.RoleResource),revokeAllFrom,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.INetworkAuthorizer:drop(org.apache.cassandra.auth.RoleResource),drop,INetworkAuthorizer,../data/xml/cassandra_call_methods/INetworkAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.auth.RoleResource:root(),root,RoleResource,../data/xml/cassandra_call_methods/RoleResource.xml,"/**
     * @return the root-level resource.
     */
public static RoleResource root()
    {
        return ROOT_RESOURCE;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,"(I)org.apache.cassandra.auth.IAuthorizer:authorize(org.apache.cassandra.auth.AuthenticatedUser,org.apache.cassandra.auth.IResource)",authorize,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IRoleManager:getAllRoles(),getAllRoles,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,"(I)org.apache.cassandra.auth.IRoleManager:getRoles(org.apache.cassandra.auth.RoleResource,boolean)",getRoles,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.RoleResource:getRoleName(),getRoleName,RoleResource,../data/xml/cassandra_call_methods/RoleResource.xml,"/**
     * @return short form name of a role level resource. i.e. not the full ""root/name"" version returned by getName().
     * Throws IllegalStateException if called on the root-level resource.
     */
public String getRoleName()
    {
        if (level == Level.ROOT)
            throw new IllegalStateException(String.format(""%s role resource has no role name"", level));
        return name;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IResource:applicablePermissions(),applicablePermissions,IResource,../data/xml/cassandra_call_methods/IResource.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.AuthenticatedUser:getPrimaryRole(),getPrimaryRole,AuthenticatedUser,../data/xml/cassandra_call_methods/AuthenticatedUser.xml,"
public RoleResource getPrimaryRole()
    {
        return role;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IResource:hasParent(),hasParent,IResource,../data/xml/cassandra_call_methods/IResource.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.auth.FunctionResource:getKeyspace(),getKeyspace,FunctionResource,../data/xml/cassandra_call_methods/FunctionResource.xml,"/**
     * Get the name of the keyspace this resource relates to. In the case of the
     * global root resource, return null
     *
     * @return the keyspace name of this resource, or null for the root resource
     */
public String getKeyspace()
    {
        return keyspace;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,"(O)org.apache.cassandra.service.ClientState:ensurePermissionOnResourceChain(org.apache.cassandra.auth.Permission,org.apache.cassandra.auth.IResource)",ensurePermissionOnResourceChain,ClientState,../data/xml/cassandra_call_methods/ClientState.xml,"
private void ensurePermissionOnResourceChain(Permission perm, IResource resource)
    {
        for (IResource r : Resources.chain(resource))
            if (authorize(r).contains(perm))
                return;

        throw new UnauthorizedException(String.format(""User %s has no %s permission on %s or any of its parents"",
                                                      user.getName(),
                                                      perm,
                                                      resource));
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.cql3.functions.Function:isNative(),isNative,Function,../data/xml/cassandra_call_methods/Function.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.cql3.functions.Function:name(),name,Function,../data/xml/cassandra_call_methods/Function.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.cql3.functions.Function:argTypes(),argTypes,Function,../data/xml/cassandra_call_methods/Function.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.db.virtual.VirtualSchemaKeyspace:tables(),tables,VirtualSchemaKeyspace,../data/xml/cassandra_call_methods/VirtualSchemaKeyspace.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.config.DatabaseDescriptor:isDaemonInitialized(),isDaemonInitialized,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean isDaemonInitialized()
    {
        return daemonInitialized;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.config.DatabaseDescriptor:getAuthenticator(),getAuthenticator,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static IAuthenticator getAuthenticator()
    {
        return authenticator;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthenticator:protectedResources(),protectedResources,IAuthenticator,../data/xml/cassandra_call_methods/IAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthorizer:protectedResources(),protectedResources,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IRoleManager:protectedResources(),protectedResources,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(S)org.apache.cassandra.auth.AuthKeyspace:metadata(),metadata,AuthKeyspace,../data/xml/cassandra_call_methods/AuthKeyspace.xml,"
public static KeyspaceMetadata metadata()
    {
        return KeyspaceMetadata.create(SchemaConstants.AUTH_KEYSPACE_NAME,
                                       KeyspaceParams.simple(1),
                                       Tables.of(Roles, RoleMembers, RolePermissions, ResourceRoleIndex, NetworkPermissions));
    }
}"
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,"(S)org.apache.cassandra.schema.MigrationManager:evolveSystemKeyspace(org.apache.cassandra.schema.KeyspaceMetadata,long)",evolveSystemKeyspace,MigrationManager,../data/xml/cassandra_call_methods/MigrationManager.xml,"/**
     * We have a set of non-local, distributed system keyspaces, e.g. system_traces, system_auth, etc.
     * (see {@link SchemaConstants#REPLICATED_SYSTEM_KEYSPACE_NAMES}), that need to be created on cluster initialisation,
     * and later evolved on major upgrades (sometimes minor too). This method compares the current known definitions
     * of the tables (if the keyspace exists) to the expected, most modern ones expected by the running version of C*;
     * if any changes have been detected, a schema Mutation will be created which, when applied, should make
     * cluster's view of that keyspace aligned with the expected modern definition.
     *
     * @param keyspace   the expected modern definition of the keyspace
     * @param generation timestamp to use for the table changes in the schema mutation
     *
     * @return empty Optional if the current definition is up to date, or an Optional with the Mutation that would
     *         bring the schema in line with the expected definition.
     */
public static Optional<Mutation> evolveSystemKeyspace(KeyspaceMetadata keyspace, long generation)
    {
        Mutation.SimpleBuilder builder = null;

        KeyspaceMetadata definedKeyspace = Schema.instance.getKeyspaceMetadata(keyspace.name);
        Tables definedTables = null == definedKeyspace ? Tables.none() : definedKeyspace.tables;

        for (TableMetadata table : keyspace.tables)
        {
            if (table.equals(definedTables.getNullable(table.name)))
                continue;

            if (null == builder)
            {
                // for the keyspace definition itself (name, replication, durability) always use generation 0;
                // this ensures that any changes made to replication by the user will never be overwritten.
                builder = SchemaKeyspace.makeCreateKeyspaceMutation(keyspace.name, keyspace.params, 0);

                // now set the timestamp to generation, so the tables have the expected timestamp
                builder.timestamp(generation);
            }

            // for table definitions always use the provided generation; these tables, unlike their containing
            // keyspaces, are *NOT* meant to be altered by the user; if their definitions need to change,
            // the schema must be updated in code, and the appropriate generation must be bumped.
            SchemaKeyspace.addTableToSchemaMutation(table, true, builder);
        }

        return builder == null ? Optional.empty() : Optional.of(builder.build());
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IRoleManager:setup(),setup,IRoleManager,../data/xml/cassandra_call_methods/IRoleManager.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthenticator:setup(),setup,IAuthenticator,../data/xml/cassandra_call_methods/IAuthenticator.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.IAuthorizer:setup(),setup,IAuthorizer,../data/xml/cassandra_call_methods/IAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(I)org.apache.cassandra.auth.INetworkAuthorizer:setup(),setup,INetworkAuthorizer,../data/xml/cassandra_call_methods/INetworkAuthorizer.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(O)org.apache.cassandra.auth.AuthSchemaChangeListener:<init>(),<init>,AuthSchemaChangeListener,../data/xml/cassandra_call_methods/AuthSchemaChangeListener.xml,not found
org.apache.cassandra.config.DatabaseDescriptor:getAuthorizer(),authorizer,(M)org.apache.cassandra.schema.Schema:registerListener(org.apache.cassandra.schema.SchemaChangeListener),registerListener,Schema,../data/xml/cassandra_call_methods/Schema.xml,"
public void registerListener(SchemaChangeListener listener)
    {
        changeListeners.add(listener);
    }

    "
