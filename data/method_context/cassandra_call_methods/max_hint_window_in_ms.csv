function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(S)org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),getMaxHintWindow,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static int getMaxHintWindow()
    {
        return conf.max_hint_window_in_ms;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(S)org.apache.cassandra.config.DatabaseDescriptor:hintedHandoffEnabled(),hintedHandoffEnabled,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean hintedHandoffEnabled()
    {
        return conf.hinted_handoff_enabled;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(M)org.apache.cassandra.locator.Replica:isTransient(),isTransient,Replica,../data/xml/cassandra_call_methods/Replica.xml,"
public final boolean isTransient()
    {
        return !isFull();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(M)org.apache.cassandra.locator.Replica:isSelf(),isSelf,Replica,../data/xml/cassandra_call_methods/Replica.xml,"
public boolean isSelf()
    {
        return endpoint.equals(FBUtilities.getBroadcastAddressAndPort());
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(S)org.apache.cassandra.config.DatabaseDescriptor:hintedHandoffDisabledDCs(),hintedHandoffDisabledDCs,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static Set<String> hintedHandoffDisabledDCs()
    {
        return conf.hinted_handoff_disabled_datacenters;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(S)org.apache.cassandra.config.DatabaseDescriptor:getEndpointSnitch(),getEndpointSnitch,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static IEndpointSnitch getEndpointSnitch()
    {
        return snitch;
    }
    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(I)org.apache.cassandra.locator.IEndpointSnitch:getDatacenter(org.apache.cassandra.locator.Replica),getDatacenter,IEndpointSnitch,../data/xml/cassandra_call_methods/IEndpointSnitch.xml,"
default public String getDatacenter(Replica replica)
    {
        return getDatacenter(replica.endpoint());
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(M)org.apache.cassandra.locator.Replica:endpoint(),endpoint,Replica,../data/xml/cassandra_call_methods/Replica.xml,"
public final InetAddressAndPort endpoint()
    {
        return endpoint;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(M)org.apache.cassandra.gms.Gossiper:getEndpointDowntime(org.apache.cassandra.locator.InetAddressAndPort),getEndpointDowntime,Gossiper,../data/xml/cassandra_call_methods/Gossiper.xml,"
public long getEndpointDowntime(InetAddressAndPort ep)
    {
        Long downtime = unreachableEndpoints.get(ep);
        if (downtime != null)
            return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - downtime);
        else
            return 0L;
    }

    

public long getEndpointDowntime(String address) throws UnknownHostException
    {
        return getEndpointDowntime(InetAddressAndPort.getByName(address));
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:getMaxHintWindow(),max_hint_window_in_ms,(M)org.apache.cassandra.metrics.HintedHandoffMetrics:incrPastWindow(org.apache.cassandra.locator.InetAddressAndPort),incrPastWindow,HintedHandoffMetrics,../data/xml/cassandra_call_methods/HintedHandoffMetrics.xml,"
public void incrPastWindow(InetAddressAndPort address)
    {
        notStored.get(address).mark();
    }

    "
