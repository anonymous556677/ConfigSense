function,option,Method,Method_short,class_name,xml_path,Method_body
org.apache.cassandra.config.DatabaseDescriptor:startNativeTransport(),start_native_transport,(S)org.apache.cassandra.config.DatabaseDescriptor:startNativeTransport(),startNativeTransport,DatabaseDescriptor,../data/xml/cassandra_call_methods/DatabaseDescriptor.xml,"
public static boolean startNativeTransport()
    {
        return conf.start_native_transport;
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:startNativeTransport(),start_native_transport,(M)org.apache.cassandra.service.CassandraDaemon:startNativeTransport(),startNativeTransport,CassandraDaemon,../data/xml/cassandra_call_methods/CassandraDaemon.xml,"
public void startNativeTransport()
    {
        validateTransportsCanStart();

        if (nativeTransportService == null)
            throw new IllegalStateException(""setup() must be called first for CassandraDaemon"");

        nativeTransportService.start();
    }

    "
org.apache.cassandra.config.DatabaseDescriptor:startNativeTransport(),start_native_transport,(M)org.apache.cassandra.service.StorageService:setRpcReady(boolean),setRpcReady,StorageService,../data/xml/cassandra_call_methods/StorageService.xml,"/**
     * Set the RPC status. Because when draining a node we need to set the RPC
     * status to not ready, and drain is called by the shutdown hook, it may be that value is false
     * and there is no local endpoint state. In this case it's OK to just do nothing. Therefore,
     * we assert that the local endpoint state is not null only when value is true.
     *
     * @param value - true indicates that RPC is ready, false indicates the opposite.
     */
public void setRpcReady(boolean value)
    {
        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(FBUtilities.getBroadcastAddressAndPort());
        // if value is false we're OK with a null state, if it is true we are not.
        assert !value || state != null;

        if (state != null)
            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_READY, valueFactory.rpcReady(value));
    }

    "
