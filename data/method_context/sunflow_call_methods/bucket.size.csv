function,option,Method_short,class_name,xml_path,Method_body,Method
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,clamp,MathUtils,../data/xml/sunflow_call_methods/MathUtils.xml,"
public static final int clamp(int x, int min, int max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    

public static final float clamp(float x, float min, float max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    

public static final double clamp(double x, double min, double max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    ","(S)org.sunflow.math.MathUtils:clamp(int,int,int)"
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,getBucketSequence,BucketOrder,../data/xml/sunflow_call_methods/BucketOrder.xml,not found,"(I)org.sunflow.core.BucketOrder:getBucketSequence(int,int)"
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,clamp,MathUtils,../data/xml/sunflow_call_methods/MathUtils.xml,"
public static final int clamp(int x, int min, int max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    

public static final float clamp(float x, float min, float max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    

public static final double clamp(double x, double min, double max) {
        if (x > max)
            return max;
        if (x > min)
            return x;
        return min;
    }

    ","(S)org.sunflow.math.MathUtils:clamp(float,float,float)"
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,<init>,BoxFilter,../data/xml/sunflow_call_methods/BoxFilter.xml,"
public BoxFilter(float size) {
        s = size;
    }

    ",(O)org.sunflow.core.filter.BoxFilter:<init>(float)
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,getSize,Filter,../data/xml/sunflow_call_methods/Filter.xml,not found,(I)org.sunflow.core.Filter:getSize()
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,generateSigmaTable,QMC,../data/xml/sunflow_call_methods/QMC.xml,"
public static final int[] generateSigmaTable(int n) {
        assert (n & (n - 1)) == 0;
        int[] sigma = new int[n];
        for (int i = 0; i < n; i++) {
            int digit = n;
            sigma[i] = 0;
            for (int bits = i; bits != 0; bits >>= 1) {
                digit >>= 1;
                if ((bits & 1) != 0)
                    sigma[i] += digit;
            }
        }
        return sigma;
    }
}",(S)org.sunflow.math.QMC:generateSigmaTable(int)
"org.sunflow.core.Options:getInt(java.lang.String,int)",bucket.size,aaDepthToString,BucketRenderer,../data/xml/sunflow_call_methods/BucketRenderer.xml,not found,(O)org.sunflow.core.renderer.BucketRenderer:aaDepthToString(int)
