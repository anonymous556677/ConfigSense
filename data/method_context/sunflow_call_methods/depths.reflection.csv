function,option,Method_short,class_name,xml_path,Method_body,Method
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,create,GIEngineFactory,../data/xml/sunflow_call_methods/GIEngineFactory.xml,"
public static final GIEngine create(Options options) {
        String type = options.getString(""gi.engine"", null);
        if (type == null || type.equals(""null"") || type.equals(""none""))
            return null;
        else if (type.equals(""ambocc""))
            return new AmbientOcclusionGIEngine(options);
        else if (type.equals(""fake""))
            return new FakeGIEngine(options);
        else if (type.equals(""igi""))
            return new InstantGI(options);
        else if (type.equals(""irr-cache""))
            return new IrradianceCacheGIEngine(options);
        else if (type.equals(""path""))
            return new PathTracingGIEngine(options);
        else {
            UI.printWarning(Module.LIGHT, ""Unrecognized GI engine type \""%s\"" - ignoring"", type);
            return null;
        }
    }
}",(S)org.sunflow.core.gi.GIEngineFactory:create(org.sunflow.core.Options)
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,<init>,CausticPhotonMap,../data/xml/sunflow_call_methods/CausticPhotonMap.xml,"
public CausticPhotonMap(Options options) {
        numEmit = options.getInt(""caustics.emit"", 10000);
        gatherNum = options.getInt(""caustics.gather"", 50);
        gatherRadius = options.getFloat(""caustics.radius"", 0.5f);
        filterValue = options.getFloat(""caustics.filter"", 1.1f);
        bounds = new BoundingBox();
        maxPower = 0;
        maxRadius = 0;
    }

    ",(O)org.sunflow.core.photonmap.CausticPhotonMap:<init>(org.sunflow.core.Options)
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,<init>,Timer,../data/xml/sunflow_call_methods/Timer.xml,"
public Timer() {
        startTime = endTime = 0;
    }

    ",(O)org.sunflow.system.Timer:<init>()
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,start,Timer,../data/xml/sunflow_call_methods/Timer.xml,"
public void start() {
        startTime = endTime = System.nanoTime();
    }

    ",(M)org.sunflow.system.Timer:start()
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,getNumSamples,LightSource,../data/xml/sunflow_call_methods/LightSource.xml,not found,(I)org.sunflow.core.LightSource:getNumSamples()
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,init,GIEngine,../data/xml/sunflow_call_methods/GIEngine.xml,not found,(I)org.sunflow.core.GIEngine:init(org.sunflow.core.Scene)
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,end,Timer,../data/xml/sunflow_call_methods/Timer.xml,"
public void end() {
        endTime = System.nanoTime();
    }

    ",(M)org.sunflow.system.Timer:end()
"org.sunflow.core.Options:getInt(java.lang.String,int)",depths.reflection,toString,Timer,../data/xml/sunflow_call_methods/Timer.xml,"
public static String toString(long nanos) {
        Timer t = new Timer();
        t.endTime = nanos;
        return t.toString();
    }

    

public static String toString(double seconds) {
        Timer t = new Timer();
        t.endTime = (long) (seconds * 1e9);
        return t.toString();
    }

    

@Override
    public String toString() {
        long millis = nanos() / (1000 * 1000);
        if (millis < 10000)
            return String.format(""%dms"", millis);
        long hours = millis / (60 * 60 * 1000);
        millis -= hours * 60 * 60 * 1000;
        long minutes = millis / (60 * 1000);
        millis -= minutes * 60 * 1000;
        long seconds = millis / 1000;
        millis -= seconds * 1000;
        return String.format(""%d:%02d:%02d.%1d"", hours, minutes, seconds, millis / 100);
    }
}",(M)org.sunflow.system.Timer:toString()
