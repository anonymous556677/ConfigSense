Method,Called_Method
C:kanzi.util.IntBTree$CallbackImpl,kanzi.util.IntBTree$CallbackImpl
C:kanzi.util.IntBTree$CallbackImpl,java.lang.Object
C:kanzi.util.IntBTree$CallbackImpl,kanzi.util.IntBTree$Callback
C:kanzi.util.IntBTree$CallbackImpl,kanzi.util.IntBTree$IntBTNode
C:kanzi.util.IntBTree$CallbackImpl,kanzi.util.IntBTree
C:kanzi.transform.BWTS,java.lang.IllegalArgumentException
C:kanzi.transform.BWTS,java.lang.StringBuilder
C:kanzi.transform.BWTS,kanzi.transform.DivSufSort
C:kanzi.transform.BWTS,kanzi.transform.BWTS
C:kanzi.transform.BWTS,java.lang.Object
C:kanzi.transform.BWTS,kanzi.ByteTransform
C:kanzi.transform.BWTS,kanzi.SliceByteArray
C:kanzi.transform.BWTS,[B
C:kanzi.transform.BWTS,[I
C:kanzi.transform.LZCodec$LZPCodec,kanzi.transform.LZCodec$LZPCodec
C:kanzi.transform.LZCodec$LZPCodec,java.lang.Object
C:kanzi.transform.LZCodec$LZPCodec,kanzi.ByteTransform
C:kanzi.transform.LZCodec$LZPCodec,kanzi.SliceByteArray
C:kanzi.transform.LZCodec$LZPCodec,[B
C:kanzi.transform.LZCodec$LZPCodec,kanzi.transform.LZCodec
C:kanzi.transform.LZCodec$LZPCodec,kanzi.Memory$LittleEndian
C:kanzi.transform.LZCodec$LZPCodec,kanzi.Memory
C:kanzi.util.hash.XXHash32,kanzi.util.hash.XXHash32
C:kanzi.util.hash.XXHash32,java.lang.Object
C:kanzi.util.hash.XXHash32,[B
C:kanzi.util.hash.XXHash32,java.lang.System
C:kanzi.util.hash.XXHash32,kanzi.Memory$LittleEndian
C:kanzi.util.hash.XXHash32,kanzi.Memory
C:kanzi.entropy.NullEntropyDecoder,java.lang.NullPointerException
C:kanzi.entropy.NullEntropyDecoder,kanzi.entropy.NullEntropyDecoder
C:kanzi.entropy.NullEntropyDecoder,java.lang.Object
C:kanzi.entropy.NullEntropyDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.NullEntropyDecoder,kanzi.InputBitStream
C:kanzi.util.hash.SipHash_2_4,java.lang.NullPointerException
C:kanzi.util.hash.SipHash_2_4,java.lang.IllegalArgumentException
C:kanzi.util.hash.SipHash_2_4,kanzi.util.hash.SipHash_2_4
C:kanzi.util.hash.SipHash_2_4,java.lang.Object
C:kanzi.util.hash.SipHash_2_4,kanzi.Memory$LittleEndian
C:kanzi.util.hash.SipHash_2_4,kanzi.Memory
C:kanzi.transform.BWTBlockCodec,kanzi.transform.BWT
C:kanzi.transform.BWTBlockCodec,kanzi.transform.BWTBlockCodec
C:kanzi.transform.BWTBlockCodec,java.lang.Object
C:kanzi.transform.BWTBlockCodec,kanzi.ByteTransform
C:kanzi.transform.BWTBlockCodec,kanzi.SliceByteArray
C:kanzi.transform.BWTBlockCodec,java.lang.System
C:kanzi.entropy.HuffmanCommon,kanzi.entropy.HuffmanCommon
C:kanzi.entropy.HuffmanCommon,java.lang.Object
C:kanzi.entropy.HuffmanCommon,[B
C:kanzi.entropy.RangeDecoder,kanzi.entropy.RangeDecoder
C:kanzi.entropy.RangeDecoder,java.lang.NullPointerException
C:kanzi.entropy.RangeDecoder,java.lang.IllegalArgumentException
C:kanzi.entropy.RangeDecoder,kanzi.BitStreamException
C:kanzi.entropy.RangeDecoder,java.lang.StringBuilder
C:kanzi.entropy.RangeDecoder,java.lang.Object
C:kanzi.entropy.RangeDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.RangeDecoder,kanzi.InputBitStream
C:kanzi.entropy.RangeDecoder,[I
C:kanzi.entropy.RangeDecoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.NullEntropyEncoder,java.lang.NullPointerException
C:kanzi.entropy.NullEntropyEncoder,kanzi.entropy.NullEntropyEncoder
C:kanzi.entropy.NullEntropyEncoder,java.lang.Object
C:kanzi.entropy.NullEntropyEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.NullEntropyEncoder,kanzi.OutputBitStream
C:kanzi.entropy.ExpGolombEncoder,java.lang.NullPointerException
C:kanzi.entropy.ExpGolombEncoder,[I
C:kanzi.entropy.ExpGolombEncoder,kanzi.entropy.ExpGolombEncoder
C:kanzi.entropy.ExpGolombEncoder,java.lang.Object
C:kanzi.entropy.ExpGolombEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.ExpGolombEncoder,kanzi.OutputBitStream
C:kanzi.io.CompressedInputStream$Status,kanzi.io.CompressedInputStream$Status
C:kanzi.io.CompressedInputStream$Status,java.lang.Object
C:kanzi.io.CompressedInputStream$Status,kanzi.SliceByteArray
C:kanzi.io.CompressedInputStream$Status,java.lang.System
C:kanzi.io.CompressedInputStream$Status,kanzi.io.CompressedInputStream
C:kanzi.util.hash.XXHash64,kanzi.util.hash.XXHash64
C:kanzi.util.hash.XXHash64,java.lang.Object
C:kanzi.util.hash.XXHash64,[B
C:kanzi.util.hash.XXHash64,java.lang.System
C:kanzi.util.hash.XXHash64,kanzi.Memory$LittleEndian
C:kanzi.util.hash.XXHash64,kanzi.Memory
C:kanzi.transform.FSDCodec,kanzi.transform.FSDCodec
C:kanzi.transform.FSDCodec,kanzi.Global$DataType
C:kanzi.transform.FSDCodec,[[I
C:kanzi.transform.FSDCodec,java.lang.Object
C:kanzi.transform.FSDCodec,kanzi.ByteTransform
C:kanzi.transform.FSDCodec,kanzi.SliceByteArray
C:kanzi.transform.FSDCodec,[B
C:kanzi.transform.FSDCodec,[I
C:kanzi.transform.FSDCodec,java.util.Map
C:kanzi.transform.FSDCodec,kanzi.Global
C:kanzi.transform.FSDCodec,java.lang.Boolean
C:kanzi.transform.FSDCodec,java.lang.Math
C:kanzi.util.hash.MurMurHash3,kanzi.util.hash.MurMurHash3
C:kanzi.util.hash.MurMurHash3,java.lang.Object
C:kanzi.util.hash.MurMurHash3,java.lang.System
C:kanzi.util.hash.MurMurHash3,kanzi.Memory$LittleEndian
C:kanzi.util.hash.MurMurHash3,kanzi.Memory
C:kanzi.entropy.HuffmanEncoder,kanzi.entropy.HuffmanCommon
C:kanzi.entropy.HuffmanEncoder,java.lang.NullPointerException
C:kanzi.entropy.HuffmanEncoder,java.lang.IllegalArgumentException
C:kanzi.entropy.HuffmanEncoder,kanzi.entropy.ExpGolombEncoder
C:kanzi.entropy.HuffmanEncoder,kanzi.entropy.HuffmanEncoder
C:kanzi.entropy.HuffmanEncoder,java.lang.Object
C:kanzi.entropy.HuffmanEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.HuffmanEncoder,kanzi.BitStreamException
C:kanzi.entropy.HuffmanEncoder,kanzi.OutputBitStream
C:kanzi.entropy.HuffmanEncoder,[I
C:kanzi.entropy.HuffmanEncoder,[B
C:kanzi.entropy.HuffmanEncoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.HuffmanEncoder,java.lang.System
C:kanzi.entropy.HuffmanEncoder,java.util.Arrays
C:kanzi.entropy.HuffmanEncoder,java.lang.Math
C:kanzi.entropy.HuffmanEncoder,kanzi.Global
C:kanzi.util.IntBTree,kanzi.util.IntBTree
C:kanzi.util.IntBTree,kanzi.util.IntBTree$IntBTNode
C:kanzi.util.IntBTree,java.lang.IllegalStateException
C:kanzi.util.IntBTree,kanzi.util.IntBTree$CallbackImpl
C:kanzi.util.IntBTree,java.lang.StringBuilder
C:kanzi.util.IntBTree,java.lang.Object
C:kanzi.util.IntBTree,kanzi.util.IntBTree$Callback
C:kanzi.util.IntBTree,[I
C:kanzi.transform.Sequence,java.lang.NullPointerException
C:kanzi.transform.Sequence,kanzi.transform.Sequence
C:kanzi.transform.Sequence,kanzi.SliceByteArray
C:kanzi.transform.Sequence,java.lang.Object
C:kanzi.transform.Sequence,kanzi.ByteTransform
C:kanzi.transform.Sequence,[Lkanzi.ByteTransform;
C:kanzi.transform.Sequence,[Lkanzi.SliceByteArray;
C:kanzi.transform.Sequence,java.lang.System
C:kanzi.entropy.BinaryEntropyEncoder,java.lang.NullPointerException
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.entropy.BinaryEntropyEncoder
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.SliceByteArray
C:kanzi.entropy.BinaryEntropyEncoder,java.lang.Object
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.OutputBitStream
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.Predictor
C:kanzi.entropy.BinaryEntropyEncoder,java.lang.Math
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.Memory$BigEndian
C:kanzi.entropy.BinaryEntropyEncoder,kanzi.Memory
C:kanzi.util.sort.FlashSort,kanzi.util.sort.InsertionSort
C:kanzi.util.sort.FlashSort,kanzi.util.sort.FlashSort
C:kanzi.util.sort.FlashSort,java.lang.Integer
C:kanzi.util.sort.FlashSort,java.lang.Object
C:kanzi.util.sort.FlashSort,kanzi.IntSorter
C:kanzi.util.sort.FlashSort,[I
C:kanzi.transform.TextCodec,kanzi.transform.TextCodec
C:kanzi.transform.TextCodec,kanzi.transform.TextCodec$TextCodec1
C:kanzi.transform.TextCodec,java.lang.Integer
C:kanzi.transform.TextCodec,kanzi.transform.TextCodec$TextCodec2
C:kanzi.transform.TextCodec,kanzi.transform.TextCodec$DictEntry
C:kanzi.transform.TextCodec,[[I
C:kanzi.transform.TextCodec,java.lang.IllegalArgumentException
C:kanzi.transform.TextCodec,java.lang.StringBuilder
C:kanzi.transform.TextCodec,java.lang.Object
C:kanzi.transform.TextCodec,kanzi.ByteTransform
C:kanzi.transform.TextCodec,[Z
C:kanzi.transform.TextCodec,java.util.Map
C:kanzi.transform.TextCodec,[B
C:kanzi.transform.TextCodec,[Lkanzi.transform.TextCodec$DictEntry;
C:kanzi.transform.TextCodec,[I
C:kanzi.transform.TextCodec,java.lang.Math
C:kanzi.transform.TextCodec,kanzi.SliceByteArray
C:kanzi.transform.TextCodec,java.lang.String
C:kanzi.util.sort.HeapSort,kanzi.util.sort.HeapSort
C:kanzi.util.sort.HeapSort,java.lang.Object
C:kanzi.util.sort.HeapSort,kanzi.IntSorter
C:kanzi.util.sort.HeapSort,kanzi.ArrayComparator
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.transform.ROLZCodec$ROLZCodec2
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.transform.ROLZCodec
C:kanzi.transform.ROLZCodec$ROLZCodec2,java.lang.IllegalArgumentException
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.SliceByteArray
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.transform.ROLZCodec$ROLZEncoder
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.transform.ROLZCodec$ROLZDecoder
C:kanzi.transform.ROLZCodec$ROLZCodec2,java.lang.Object
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.ByteTransform
C:kanzi.transform.ROLZCodec$ROLZCodec2,java.util.Map
C:kanzi.transform.ROLZCodec$ROLZCodec2,[B
C:kanzi.transform.ROLZCodec$ROLZCodec2,java.lang.Math
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.Memory$LittleEndian
C:kanzi.transform.ROLZCodec$ROLZCodec2,java.lang.Integer
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.Memory$BigEndian
C:kanzi.transform.ROLZCodec$ROLZCodec2,kanzi.Memory
C:kanzi.entropy.TPAQPredictor,kanzi.entropy.TPAQPredictor
C:kanzi.entropy.TPAQPredictor,java.lang.String
C:kanzi.entropy.TPAQPredictor,java.lang.Integer
C:kanzi.entropy.TPAQPredictor,kanzi.entropy.TPAQPredictor$Mixer
C:kanzi.entropy.TPAQPredictor,kanzi.entropy.LogisticAdaptiveProbMap
C:kanzi.entropy.TPAQPredictor,[B
C:kanzi.entropy.TPAQPredictor,java.lang.Object
C:kanzi.entropy.TPAQPredictor,kanzi.Predictor
C:kanzi.entropy.TPAQPredictor,java.util.Map
C:kanzi.entropy.TPAQPredictor,[Lkanzi.entropy.TPAQPredictor$Mixer;
C:kanzi.entropy.TPAQPredictor,java.lang.Math
C:kanzi.util.sort.InsertionSort,kanzi.util.sort.InsertionSort
C:kanzi.util.sort.InsertionSort,java.lang.Object
C:kanzi.util.sort.InsertionSort,kanzi.IntSorter
C:kanzi.util.sort.InsertionSort,kanzi.ArrayComparator
C:kanzi.transform.TextCodec$TextCodec2,kanzi.transform.TextCodec
C:kanzi.transform.TextCodec$TextCodec2,kanzi.transform.TextCodec$DictEntry
C:kanzi.transform.TextCodec$TextCodec2,java.lang.Integer
C:kanzi.transform.TextCodec$TextCodec2,java.lang.Boolean
C:kanzi.transform.TextCodec$TextCodec2,kanzi.Global$DataType
C:kanzi.transform.TextCodec$TextCodec2,kanzi.transform.TextCodec$TextCodec2
C:kanzi.transform.TextCodec$TextCodec2,java.lang.Object
C:kanzi.transform.TextCodec$TextCodec2,kanzi.ByteTransform
C:kanzi.transform.TextCodec$TextCodec2,java.util.Map
C:kanzi.transform.TextCodec$TextCodec2,kanzi.SliceByteArray
C:kanzi.transform.TextCodec$TextCodec2,[B
C:kanzi.transform.TextCodec$TextCodec2,[I
C:kanzi.transform.TextCodec$TextCodec2,[Lkanzi.transform.TextCodec$DictEntry;
C:kanzi.transform.TextCodec$TextCodec2,kanzi.Global
C:kanzi.transform.TextCodec$TextCodec2,java.lang.Math
C:kanzi.transform.TextCodec$TextCodec2,java.lang.System
C:kanzi.entropy.RangeEncoder,kanzi.entropy.RangeEncoder
C:kanzi.entropy.RangeEncoder,java.lang.NullPointerException
C:kanzi.entropy.RangeEncoder,java.lang.IllegalArgumentException
C:kanzi.entropy.RangeEncoder,java.lang.StringBuilder
C:kanzi.entropy.RangeEncoder,java.lang.Object
C:kanzi.entropy.RangeEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.RangeEncoder,kanzi.OutputBitStream
C:kanzi.entropy.RangeEncoder,[I
C:kanzi.entropy.RangeEncoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.RangeEncoder,kanzi.Global
C:kanzi.io.CompressedInputStream,java.lang.Integer
C:kanzi.io.CompressedInputStream,kanzi.bitstream.DefaultInputBitStream
C:kanzi.io.CompressedInputStream,kanzi.io.CompressedInputStream
C:kanzi.io.CompressedInputStream,java.lang.NullPointerException
C:kanzi.io.CompressedInputStream,java.lang.IllegalArgumentException
C:kanzi.io.CompressedInputStream,java.util.concurrent.ExecutorService
C:kanzi.io.CompressedInputStream,java.lang.StringBuilder
C:kanzi.io.CompressedInputStream,kanzi.SliceByteArray
C:kanzi.io.CompressedInputStream,java.util.concurrent.atomic.AtomicBoolean
C:kanzi.io.CompressedInputStream,java.util.concurrent.atomic.AtomicInteger
C:kanzi.io.CompressedInputStream,java.util.ArrayList
C:kanzi.io.CompressedInputStream,kanzi.entropy.EntropyCodecFactory
C:kanzi.io.CompressedInputStream,kanzi.transform.TransformFactory
C:kanzi.io.CompressedInputStream,kanzi.io.IOException
C:kanzi.io.CompressedInputStream,kanzi.Error
C:kanzi.io.CompressedInputStream,kanzi.util.hash.XXHash32
C:kanzi.io.CompressedInputStream,kanzi.Listener
C:kanzi.io.CompressedInputStream,[Lkanzi.Listener;
C:kanzi.io.CompressedInputStream,kanzi.Event
C:kanzi.io.CompressedInputStream,kanzi.BitStreamException
C:kanzi.io.CompressedInputStream,java.lang.Exception
C:kanzi.io.CompressedInputStream,java.lang.IndexOutOfBoundsException
C:kanzi.io.CompressedInputStream,java.util.HashMap
C:kanzi.io.CompressedInputStream,kanzi.io.CompressedInputStream$DecodingTask
C:kanzi.io.CompressedInputStream,java.util.concurrent.Callable
C:kanzi.io.CompressedInputStream,kanzi.io.CompressedInputStream$Status
C:kanzi.io.CompressedInputStream,java.util.concurrent.Future
C:kanzi.io.CompressedInputStream,java.io.InputStream
C:kanzi.io.CompressedInputStream,kanzi.InputBitStream
C:kanzi.io.CompressedInputStream,java.util.Map
C:kanzi.io.CompressedInputStream,java.lang.String
C:kanzi.io.CompressedInputStream,java.io.IOException
C:kanzi.io.CompressedInputStream,java.util.List
C:kanzi.io.CompressedInputStream,[I
C:kanzi.io.CompressedInputStream,java.util.Iterator
C:kanzi.io.CompressedInputStream,kanzi.Event$Type
C:kanzi.io.CompressedInputStream,java.lang.Boolean
C:kanzi.io.CompressedInputStream,java.lang.Math
C:kanzi.io.CompressedInputStream,java.lang.System
C:kanzi.io.CompressedInputStream,kanzi.Global
C:kanzi.util.sort.BitonicSort,kanzi.util.sort.BitonicSort
C:kanzi.util.sort.BitonicSort,java.lang.Object
C:kanzi.util.sort.BitonicSort,kanzi.IntSorter
C:kanzi.util.sort.BitonicSort,[I
C:kanzi.transform.ZRLT,kanzi.transform.ZRLT
C:kanzi.transform.ZRLT,java.lang.Object
C:kanzi.transform.ZRLT,kanzi.ByteTransform
C:kanzi.transform.ZRLT,kanzi.SliceByteArray
C:kanzi.transform.ZRLT,[B
C:kanzi.transform.ZRLT,kanzi.Global
C:kanzi.transform.ZRLT,java.lang.Integer
C:kanzi.entropy.TPAQPredictor$Mixer,kanzi.entropy.TPAQPredictor$Mixer
C:kanzi.entropy.TPAQPredictor$Mixer,java.lang.Object
C:kanzi.entropy.TPAQPredictor$Mixer,kanzi.entropy.TPAQPredictor
C:kanzi.entropy.TPAQPredictor$Mixer,kanzi.Global
C:kanzi.util.sort.DefaultArrayComparator,java.lang.NullPointerException
C:kanzi.util.sort.DefaultArrayComparator,kanzi.util.sort.DefaultArrayComparator
C:kanzi.util.sort.DefaultArrayComparator,java.lang.Object
C:kanzi.util.sort.DefaultArrayComparator,kanzi.ArrayComparator
C:kanzi.util.sort.DefaultArrayComparator,[I
C:kanzi.transform.LZCodec,kanzi.transform.LZCodec$LZXCodec
C:kanzi.transform.LZCodec,kanzi.transform.TransformFactory
C:kanzi.transform.LZCodec,java.lang.Short
C:kanzi.transform.LZCodec,kanzi.transform.LZCodec$LZPCodec
C:kanzi.transform.LZCodec,kanzi.transform.LZCodec
C:kanzi.transform.LZCodec,java.lang.Object
C:kanzi.transform.LZCodec,kanzi.ByteTransform
C:kanzi.transform.LZCodec,java.util.Map
C:kanzi.transform.LZCodec,kanzi.SliceByteArray
C:kanzi.entropy.ANSRangeDecoder$Symbol,kanzi.entropy.ANSRangeDecoder$Symbol
C:kanzi.entropy.ANSRangeDecoder$Symbol,java.lang.Object
C:kanzi.entropy.ANSRangeDecoder$Symbol,kanzi.entropy.ANSRangeDecoder
C:kanzi.util.sort.SpreadSort,kanzi.SliceIntArray
C:kanzi.util.sort.SpreadSort,kanzi.util.sort.SpreadSort
C:kanzi.util.sort.SpreadSort,kanzi.util.sort.SpreadSort$Bin
C:kanzi.util.sort.SpreadSort,java.lang.Object
C:kanzi.util.sort.SpreadSort,kanzi.IntSorter
C:kanzi.util.sort.SpreadSort,kanzi.util.sort.SpreadSort$1
C:kanzi.util.sort.SpreadSort,[I
C:kanzi.util.sort.SpreadSort,[Lkanzi.util.sort.SpreadSort$Bin;
C:kanzi.util.sort.SpreadSort,kanzi.Global
C:kanzi.util.sort.SpreadSort,java.util.Arrays
C:kanzi.transform.DivSufSort$TRBudget,kanzi.transform.DivSufSort$TRBudget
C:kanzi.transform.DivSufSort$TRBudget,java.lang.Object
C:kanzi.transform.DivSufSort$TRBudget,kanzi.transform.DivSufSort$1
C:kanzi.transform.DivSufSort$TRBudget,kanzi.transform.DivSufSort
C:kanzi.util.sort.MergeSort,kanzi.util.sort.InsertionSort
C:kanzi.util.sort.MergeSort,kanzi.util.sort.MergeSort
C:kanzi.util.sort.MergeSort,java.lang.Object
C:kanzi.util.sort.MergeSort,kanzi.IntSorter
C:kanzi.util.sort.MergeSort,java.lang.System
C:kanzi.transform.NullTransform,kanzi.transform.NullTransform
C:kanzi.transform.NullTransform,java.lang.Object
C:kanzi.transform.NullTransform,kanzi.ByteTransform
C:kanzi.transform.NullTransform,kanzi.SliceByteArray
C:kanzi.transform.NullTransform,java.lang.System
C:kanzi.entropy.ANSRangeEncoder$Symbol,kanzi.entropy.ANSRangeEncoder
C:kanzi.entropy.ANSRangeEncoder$Symbol,kanzi.entropy.ANSRangeEncoder$Symbol
C:kanzi.entropy.ANSRangeEncoder$Symbol,java.lang.Object
C:kanzi.util.sort.RadixSort,[[I
C:kanzi.util.sort.RadixSort,java.lang.IllegalArgumentException
C:kanzi.util.sort.RadixSort,kanzi.util.sort.BucketSort
C:kanzi.util.sort.RadixSort,kanzi.util.sort.RadixSort
C:kanzi.util.sort.RadixSort,java.lang.Object
C:kanzi.util.sort.RadixSort,kanzi.IntSorter
C:kanzi.util.sort.RadixSort,kanzi.ByteSorter
C:kanzi.util.sort.RadixSort,[I
C:kanzi.util.sort.RadixSort,[B
C:kanzi.util.sort.RadixSort,java.lang.System
C:kanzi.app.BlockDecompressor$FileDecompressResult,kanzi.app.BlockDecompressor$FileDecompressResult
C:kanzi.app.BlockDecompressor$FileDecompressResult,java.lang.Object
C:kanzi.app.BlockDecompressor$FileDecompressResult,kanzi.app.BlockDecompressor
C:kanzi.entropy.EntropyCodecFactory,java.lang.NullPointerException
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.HuffmanDecoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.ANSRangeDecoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.RangeDecoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.FPAQDecoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.BinaryEntropyDecoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.CMPredictor
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.TPAQPredictor
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.NullEntropyDecoder
C:kanzi.entropy.EntropyCodecFactory,java.lang.IllegalArgumentException
C:kanzi.entropy.EntropyCodecFactory,java.lang.StringBuilder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.HuffmanEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.ANSRangeEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.RangeEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.FPAQEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.BinaryEntropyEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.NullEntropyEncoder
C:kanzi.entropy.EntropyCodecFactory,kanzi.entropy.EntropyCodecFactory
C:kanzi.entropy.EntropyCodecFactory,java.lang.Object
C:kanzi.entropy.EntropyCodecFactory,java.lang.String
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.util.sort.ForkJoinParallelSort$SortTask
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.util.sort.FlashSort
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.util.sort.BucketSort
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,java.util.concurrent.RecursiveAction
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,[I
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,[B
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.util.sort.ForkJoinParallelSort
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.ByteSorter
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,java.lang.System
C:kanzi.util.sort.ForkJoinParallelSort$SortTask,kanzi.IntSorter
C:kanzi.BitStreamException,kanzi.BitStreamException
C:kanzi.BitStreamException,java.lang.RuntimeException
C:kanzi.entropy.EntropyUtils$FreqSortData,kanzi.entropy.EntropyUtils$FreqSortData
C:kanzi.entropy.EntropyUtils$FreqSortData,java.lang.ClassCastException
C:kanzi.entropy.EntropyUtils$FreqSortData,java.lang.Object
C:kanzi.entropy.EntropyUtils$FreqSortData,java.lang.Comparable
C:kanzi.entropy.EntropyUtils$FreqSortData,kanzi.entropy.EntropyUtils
C:kanzi.util.sort.BucketSort,java.lang.IllegalArgumentException
C:kanzi.util.sort.BucketSort,kanzi.util.sort.BucketSort
C:kanzi.util.sort.BucketSort,java.lang.Object
C:kanzi.util.sort.BucketSort,kanzi.IntSorter
C:kanzi.util.sort.BucketSort,kanzi.ByteSorter
C:kanzi.util.sort.BucketSort,[I
C:kanzi.util.sort.BucketSort,[B
C:kanzi.app.InfoPrinter$Type,[Lkanzi.app.InfoPrinter$Type;
C:kanzi.app.InfoPrinter$Type,kanzi.app.InfoPrinter$Type
C:kanzi.app.InfoPrinter$Type,java.lang.Enum
C:kanzi.app.InfoPrinter$Type,[Lkanzi.app.InfoPrinter$Type;
C:kanzi.app.InfoPrinter$Type,kanzi.app.InfoPrinter
C:kanzi.util.sort.SpreadSort$Bin,kanzi.util.sort.SpreadSort$Bin
C:kanzi.util.sort.SpreadSort$Bin,java.lang.Object
C:kanzi.util.sort.SpreadSort$Bin,kanzi.util.sort.SpreadSort$1
C:kanzi.util.sort.SpreadSort$Bin,kanzi.util.sort.SpreadSort
C:kanzi.app.InfoPrinter,java.lang.NullPointerException
C:kanzi.app.InfoPrinter,java.util.concurrent.ConcurrentHashMap
C:kanzi.app.InfoPrinter,kanzi.Event$Type
C:kanzi.app.InfoPrinter,kanzi.app.InfoPrinter$BlockInfo
C:kanzi.app.InfoPrinter,java.lang.Object
C:kanzi.app.InfoPrinter,java.lang.StringBuilder
C:kanzi.app.InfoPrinter,kanzi.app.InfoPrinter
C:kanzi.app.InfoPrinter,kanzi.Listener
C:kanzi.app.InfoPrinter,kanzi.app.InfoPrinter$Type
C:kanzi.app.InfoPrinter,java.io.PrintStream
C:kanzi.app.InfoPrinter,[Lkanzi.Event$Type;
C:kanzi.app.InfoPrinter,kanzi.Event
C:kanzi.app.InfoPrinter,java.lang.Integer
C:kanzi.app.InfoPrinter,java.util.Map
C:kanzi.app.InfoPrinter,java.lang.Long
C:kanzi.app.InfoPrinter,java.lang.String
C:kanzi.app.BlockCompressor,java.lang.Integer
C:kanzi.app.BlockCompressor,java.lang.Boolean
C:kanzi.app.BlockCompressor,java.lang.String
C:kanzi.app.BlockCompressor,kanzi.app.BlockCompressor
C:kanzi.app.BlockCompressor,java.lang.IllegalArgumentException
C:kanzi.app.BlockCompressor,java.lang.StringBuilder
C:kanzi.app.BlockCompressor,kanzi.transform.TransformFactory
C:kanzi.app.BlockCompressor,java.util.ArrayList
C:kanzi.app.BlockCompressor,java.io.IOException
C:kanzi.app.BlockCompressor,kanzi.Error
C:kanzi.app.BlockCompressor,kanzi.app.InfoPrinter
C:kanzi.app.BlockCompressor,java.nio.file.LinkOption
C:kanzi.app.BlockCompressor,java.util.HashMap
C:kanzi.app.BlockCompressor,java.nio.file.Path
C:kanzi.app.BlockCompressor,kanzi.app.BlockCompressor$FileCompressTask
C:kanzi.app.BlockCompressor,java.util.concurrent.ArrayBlockingQueue
C:kanzi.app.BlockCompressor,java.lang.RuntimeException
C:kanzi.app.BlockCompressor,kanzi.app.BlockCompressor$FileCompressWorker
C:kanzi.app.BlockCompressor,java.util.concurrent.Future
C:kanzi.app.BlockCompressor,kanzi.app.BlockCompressor$FileCompressResult
C:kanzi.app.BlockCompressor,java.lang.Exception
C:kanzi.app.BlockCompressor,java.lang.Object
C:kanzi.app.BlockCompressor,java.lang.Runnable
C:kanzi.app.BlockCompressor,java.util.concurrent.Callable
C:kanzi.app.BlockCompressor,java.util.Map
C:kanzi.app.BlockCompressor,java.util.Iterator
C:kanzi.app.BlockCompressor,java.util.List
C:kanzi.app.BlockCompressor,[I
C:kanzi.app.BlockCompressor,[Lkanzi.Listener;
C:kanzi.app.BlockCompressor,kanzi.Event
C:kanzi.app.BlockCompressor,kanzi.Listener
C:kanzi.app.BlockCompressor,java.lang.Math
C:kanzi.app.BlockCompressor,java.lang.System
C:kanzi.app.BlockCompressor,java.io.PrintStream
C:kanzi.app.BlockCompressor,java.util.concurrent.Executors
C:kanzi.app.BlockCompressor,java.util.Set
C:kanzi.app.BlockCompressor,java.util.concurrent.ExecutorService
C:kanzi.app.BlockCompressor,kanzi.app.Kanzi
C:kanzi.app.BlockCompressor,kanzi.app.InfoPrinter$Type
C:kanzi.app.BlockCompressor,java.nio.file.Paths
C:kanzi.app.BlockCompressor,java.nio.file.Files
C:kanzi.app.BlockCompressor,java.io.File
C:kanzi.app.BlockCompressor,java.lang.Long
C:kanzi.app.BlockCompressor,kanzi.Global
C:kanzi.app.BlockCompressor,java.lang.Float
C:kanzi.io.CompressedOutputStream,kanzi.bitstream.DefaultOutputBitStream
C:kanzi.io.CompressedOutputStream,kanzi.io.CompressedOutputStream
C:kanzi.io.CompressedOutputStream,java.lang.NullPointerException
C:kanzi.io.CompressedOutputStream,java.lang.String
C:kanzi.io.CompressedOutputStream,java.lang.Integer
C:kanzi.io.CompressedOutputStream,java.lang.IllegalArgumentException
C:kanzi.io.CompressedOutputStream,java.util.concurrent.ExecutorService
C:kanzi.io.CompressedOutputStream,java.lang.StringBuilder
C:kanzi.io.CompressedOutputStream,kanzi.transform.TransformFactory
C:kanzi.io.CompressedOutputStream,java.lang.Long
C:kanzi.io.CompressedOutputStream,java.lang.Boolean
C:kanzi.io.CompressedOutputStream,kanzi.util.hash.XXHash32
C:kanzi.io.CompressedOutputStream,java.util.concurrent.atomic.AtomicBoolean
C:kanzi.io.CompressedOutputStream,kanzi.SliceByteArray
C:kanzi.io.CompressedOutputStream,java.util.concurrent.atomic.AtomicInteger
C:kanzi.io.CompressedOutputStream,java.util.ArrayList
C:kanzi.io.CompressedOutputStream,kanzi.io.IOException
C:kanzi.io.CompressedOutputStream,kanzi.Error
C:kanzi.io.CompressedOutputStream,java.lang.IndexOutOfBoundsException
C:kanzi.io.CompressedOutputStream,kanzi.BitStreamException
C:kanzi.io.CompressedOutputStream,java.lang.Exception
C:kanzi.io.CompressedOutputStream,kanzi.Listener
C:kanzi.io.CompressedOutputStream,[Lkanzi.Listener;
C:kanzi.io.CompressedOutputStream,java.util.HashMap
C:kanzi.io.CompressedOutputStream,kanzi.io.CompressedOutputStream$EncodingTask
C:kanzi.io.CompressedOutputStream,java.util.concurrent.Callable
C:kanzi.io.CompressedOutputStream,kanzi.io.CompressedOutputStream$Status
C:kanzi.io.CompressedOutputStream,java.util.concurrent.Future
C:kanzi.io.CompressedOutputStream,java.io.OutputStream
C:kanzi.io.CompressedOutputStream,kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream
C:kanzi.io.CompressedOutputStream,kanzi.OutputBitStream
C:kanzi.io.CompressedOutputStream,java.util.Map
C:kanzi.io.CompressedOutputStream,java.io.IOException
C:kanzi.io.CompressedOutputStream,[I
C:kanzi.io.CompressedOutputStream,java.util.List
C:kanzi.io.CompressedOutputStream,java.util.Iterator
C:kanzi.io.CompressedOutputStream,kanzi.Event
C:kanzi.io.CompressedOutputStream,kanzi.entropy.EntropyCodecFactory
C:kanzi.io.CompressedOutputStream,java.lang.Math
C:kanzi.io.CompressedOutputStream,java.lang.System
C:kanzi.io.CompressedOutputStream,kanzi.Global
C:kanzi.util.sort.ForkJoinParallelSort,java.lang.NullPointerException
C:kanzi.util.sort.ForkJoinParallelSort,kanzi.util.sort.ForkJoinParallelSort$SortTask
C:kanzi.util.sort.ForkJoinParallelSort,java.util.concurrent.RejectedExecutionException
C:kanzi.util.sort.ForkJoinParallelSort,kanzi.util.sort.ForkJoinParallelSort
C:kanzi.util.sort.ForkJoinParallelSort,java.lang.Object
C:kanzi.util.sort.ForkJoinParallelSort,kanzi.IntSorter
C:kanzi.util.sort.ForkJoinParallelSort,kanzi.ByteSorter
C:kanzi.util.sort.ForkJoinParallelSort,java.util.concurrent.ForkJoinPool
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.app.BlockCompressor
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Integer
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.String
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.StringBuilder
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Boolean
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.io.NullOutputStream
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.File
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.app.BlockCompressor$FileCompressResult
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.Error
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.FileOutputStream
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.IOException
C:kanzi.app.BlockCompressor$FileCompressTask,java.nio.file.attribute.FileAttribute
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.io.CompressedOutputStream
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.Listener
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Exception
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.FileInputStream
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.SliceByteArray
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.Event
C:kanzi.app.BlockCompressor$FileCompressTask,[Lkanzi.Listener;
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.io.IOException
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Object
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.app.BlockCompressor$FileCompressTask
C:kanzi.app.BlockCompressor$FileCompressTask,java.util.concurrent.Callable
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.OutputStream
C:kanzi.app.BlockCompressor$FileCompressTask,java.util.Iterator
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.InputStream
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Throwable
C:kanzi.app.BlockCompressor$FileCompressTask,java.util.Map
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.System
C:kanzi.app.BlockCompressor$FileCompressTask,java.io.PrintStream
C:kanzi.app.BlockCompressor$FileCompressTask,java.nio.file.FileSystems
C:kanzi.app.BlockCompressor$FileCompressTask,java.nio.file.FileSystem
C:kanzi.app.BlockCompressor$FileCompressTask,java.nio.file.Path
C:kanzi.app.BlockCompressor$FileCompressTask,java.nio.file.Files
C:kanzi.app.BlockCompressor$FileCompressTask,java.util.List
C:kanzi.app.BlockCompressor$FileCompressTask,kanzi.Event$Type
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Float
C:kanzi.app.BlockCompressor$FileCompressTask,java.lang.Long
C:kanzi.util.sort.QuickSort,kanzi.util.sort.QuickSort
C:kanzi.util.sort.QuickSort,java.lang.Object
C:kanzi.util.sort.QuickSort,kanzi.IntSorter
C:kanzi.util.sort.QuickSort,[I
C:kanzi.util.sort.QuickSort,kanzi.ArrayComparator
C:kanzi.app.InfoPrinter$BlockInfo,kanzi.app.InfoPrinter$BlockInfo
C:kanzi.app.InfoPrinter$BlockInfo,java.lang.Object
C:kanzi.app.InfoPrinter$BlockInfo,kanzi.app.InfoPrinter
C:kanzi.Global$DataType,[Lkanzi.Global$DataType;
C:kanzi.Global$DataType,kanzi.Global$DataType
C:kanzi.Global$DataType,java.lang.Enum
C:kanzi.Global$DataType,[Lkanzi.Global$DataType;
C:kanzi.Global$DataType,kanzi.Global
C:kanzi.util.sort.SpreadSort$1,kanzi.util.sort.SpreadSort$1
C:kanzi.util.sort.SpreadSort$1,java.lang.Object
C:kanzi.util.sort.SpreadSort$1,kanzi.util.sort.SpreadSort
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.app.BlockDecompressor
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Integer
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.String
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.StringBuilder
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Boolean
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.Event
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.Listener
C:kanzi.app.BlockDecompressor$FileDecompressTask,[Lkanzi.Listener;
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.io.NullOutputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.File
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.app.BlockDecompressor$FileDecompressResult
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.Error
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.FileOutputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.IOException
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.nio.file.attribute.FileAttribute
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Exception
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.FileInputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.io.CompressedInputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.SliceByteArray
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.io.IOException
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Object
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.app.BlockDecompressor$FileDecompressTask
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.util.concurrent.Callable
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.InputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.util.Iterator
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Throwable
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.util.Map
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.util.List
C:kanzi.app.BlockDecompressor$FileDecompressTask,kanzi.Event$Type
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.System
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.PrintStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.nio.file.FileSystems
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.nio.file.FileSystem
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.nio.file.Path
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.nio.file.Files
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.io.OutputStream
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Float
C:kanzi.app.BlockDecompressor$FileDecompressTask,java.lang.Long
C:kanzi.Listener,kanzi.Listener
C:kanzi.Listener,java.lang.Object
C:kanzi.EntropyDecoder,kanzi.EntropyDecoder
C:kanzi.EntropyDecoder,java.lang.Object
C:kanzi.Global$1,java.io.IOException
C:kanzi.Global$1,java.nio.file.Path
C:kanzi.Global$1,kanzi.Global$1
C:kanzi.Global$1,java.lang.Object
C:kanzi.Global$1,java.util.Comparator
C:kanzi.Global$1,kanzi.Global
C:kanzi.Global$1,java.nio.file.Files
C:kanzi.io.NullOutputStream,kanzi.io.NullOutputStream
C:kanzi.io.NullOutputStream,java.io.OutputStream
C:kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree
C:kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree$IntBTNode
C:kanzi.util.IntBTree$IntBTNode,java.lang.Object
C:kanzi.app.BlockDecompressor$FileDecompressWorker,kanzi.app.BlockDecompressor$FileDecompressTask
C:kanzi.app.BlockDecompressor$FileDecompressWorker,kanzi.app.BlockDecompressor$FileDecompressResult
C:kanzi.app.BlockDecompressor$FileDecompressWorker,kanzi.app.BlockDecompressor$FileDecompressWorker
C:kanzi.app.BlockDecompressor$FileDecompressWorker,java.lang.Object
C:kanzi.app.BlockDecompressor$FileDecompressWorker,java.util.concurrent.Callable
C:kanzi.app.BlockDecompressor$FileDecompressWorker,java.lang.Exception
C:kanzi.app.BlockDecompressor$FileDecompressWorker,java.util.concurrent.ArrayBlockingQueue
C:kanzi.app.BlockDecompressor$FileDecompressWorker,kanzi.app.BlockDecompressor
C:kanzi.InputBitStream,kanzi.InputBitStream
C:kanzi.InputBitStream,java.lang.Object
C:kanzi.InputBitStream,kanzi.BitStreamException
C:kanzi.util.IntBTree$Callback,kanzi.util.IntBTree$Callback
C:kanzi.util.IntBTree$Callback,java.lang.Object
C:kanzi.util.IntBTree$Callback,kanzi.util.IntBTree$IntBTNode
C:kanzi.util.IntBTree$Callback,kanzi.util.IntBTree
C:kanzi.util.LyndonWords,java.util.ArrayList
C:kanzi.util.LyndonWords,java.lang.String
C:kanzi.util.LyndonWords,java.lang.Integer
C:kanzi.util.LyndonWords,kanzi.util.LyndonWords
C:kanzi.util.LyndonWords,java.lang.Object
C:kanzi.util.LyndonWords,[B
C:kanzi.util.LyndonWords,java.nio.charset.Charset
C:kanzi.util.LyndonWords,[Ljava.lang.String;
C:kanzi.util.LyndonWords,java.util.Iterator
C:kanzi.util.LyndonWords,[I
C:kanzi.util.LyndonWords,java.util.List
C:kanzi.util.LyndonWords,java.lang.System
C:kanzi.util.LyndonWords,java.io.PrintStream
C:kanzi.app.Kanzi,java.util.HashMap
C:kanzi.app.Kanzi,java.lang.Character
C:kanzi.app.Kanzi,kanzi.app.BlockCompressor
C:kanzi.app.Kanzi,java.lang.Exception
C:kanzi.app.Kanzi,java.lang.StringBuilder
C:kanzi.app.Kanzi,kanzi.Error
C:kanzi.app.Kanzi,kanzi.app.BlockDecompressor
C:kanzi.app.Kanzi,kanzi.app.Kanzi
C:kanzi.app.Kanzi,java.lang.NumberFormatException
C:kanzi.app.Kanzi,java.lang.String
C:kanzi.app.Kanzi,java.nio.file.LinkOption
C:kanzi.app.Kanzi,java.io.IOException
C:kanzi.app.Kanzi,java.nio.file.Path
C:kanzi.app.Kanzi,java.lang.Throwable
C:kanzi.app.Kanzi,java.nio.file.DirectoryIteratorException
C:kanzi.app.Kanzi,java.lang.Object
C:kanzi.app.Kanzi,java.util.Map
C:kanzi.app.Kanzi,[Ljava.lang.String;
C:kanzi.app.Kanzi,java.nio.file.DirectoryStream
C:kanzi.app.Kanzi,java.util.Iterator
C:kanzi.app.Kanzi,java.util.List
C:kanzi.app.Kanzi,java.lang.System
C:kanzi.app.Kanzi,java.io.PrintStream
C:kanzi.app.Kanzi,java.lang.Integer
C:kanzi.app.Kanzi,java.lang.Boolean
C:kanzi.app.Kanzi,java.io.File
C:kanzi.app.Kanzi,java.nio.file.Paths
C:kanzi.app.Kanzi,java.nio.file.Files
C:kanzi.EntropyEncoder,kanzi.EntropyEncoder
C:kanzi.EntropyEncoder,java.lang.Object
C:kanzi.bitstream.DefaultInputBitStream,java.lang.NullPointerException
C:kanzi.bitstream.DefaultInputBitStream,java.lang.IllegalArgumentException
C:kanzi.bitstream.DefaultInputBitStream,kanzi.BitStreamException
C:kanzi.bitstream.DefaultInputBitStream,java.io.IOException
C:kanzi.bitstream.DefaultInputBitStream,java.lang.StringBuilder
C:kanzi.bitstream.DefaultInputBitStream,kanzi.bitstream.DefaultInputBitStream
C:kanzi.bitstream.DefaultInputBitStream,java.lang.Object
C:kanzi.bitstream.DefaultInputBitStream,kanzi.InputBitStream
C:kanzi.bitstream.DefaultInputBitStream,java.io.InputStream
C:kanzi.bitstream.DefaultInputBitStream,java.lang.Throwable
C:kanzi.bitstream.DefaultInputBitStream,java.lang.System
C:kanzi.bitstream.DefaultInputBitStream,kanzi.Memory$BigEndian
C:kanzi.bitstream.DefaultInputBitStream,kanzi.Memory
C:kanzi.app.BlockCompressor$FileCompressWorker,kanzi.app.BlockCompressor$FileCompressTask
C:kanzi.app.BlockCompressor$FileCompressWorker,kanzi.app.BlockCompressor$FileCompressResult
C:kanzi.app.BlockCompressor$FileCompressWorker,kanzi.app.BlockCompressor$FileCompressWorker
C:kanzi.app.BlockCompressor$FileCompressWorker,java.lang.Object
C:kanzi.app.BlockCompressor$FileCompressWorker,java.util.concurrent.Callable
C:kanzi.app.BlockCompressor$FileCompressWorker,java.lang.Exception
C:kanzi.app.BlockCompressor$FileCompressWorker,java.util.concurrent.ArrayBlockingQueue
C:kanzi.app.BlockCompressor$FileCompressWorker,kanzi.app.BlockCompressor
C:kanzi.app.BlockCompressor$FileCompressResult,kanzi.app.BlockCompressor$FileCompressResult
C:kanzi.app.BlockCompressor$FileCompressResult,java.lang.Object
C:kanzi.app.BlockCompressor$FileCompressResult,kanzi.app.BlockCompressor
C:kanzi.ByteSorter,kanzi.ByteSorter
C:kanzi.ByteSorter,java.lang.Object
C:kanzi.io.CompressedOutputStream$Status,kanzi.io.CompressedOutputStream$Status
C:kanzi.io.CompressedOutputStream$Status,java.lang.Object
C:kanzi.io.CompressedOutputStream$Status,kanzi.io.CompressedOutputStream
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.io.CompressedOutputStream
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.io.CompressedOutputStream$Status
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.Event
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.transform.TransformFactory
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.entropy.EntropyCodecFactory
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Boolean
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.entropy.EntropyUtils
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.Error
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.bitstream.DefaultOutputBitStream
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Exception
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.StringBuilder
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.io.CompressedOutputStream$EncodingTask
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Object
C:kanzi.io.CompressedOutputStream$EncodingTask,java.util.concurrent.Callable
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.EntropyEncoder
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.SliceByteArray
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.Event$Type
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.transform.Sequence
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Throwable
C:kanzi.io.CompressedOutputStream$EncodingTask,java.util.concurrent.atomic.AtomicInteger
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.util.hash.XXHash32
C:kanzi.io.CompressedOutputStream$EncodingTask,java.util.Map
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.Global
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Integer
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Math
C:kanzi.io.CompressedOutputStream$EncodingTask,java.lang.Thread
C:kanzi.io.CompressedOutputStream$EncodingTask,kanzi.OutputBitStream
C:kanzi.bitstream.DefaultOutputBitStream,java.lang.NullPointerException
C:kanzi.bitstream.DefaultOutputBitStream,java.lang.IllegalArgumentException
C:kanzi.bitstream.DefaultOutputBitStream,java.lang.StringBuilder
C:kanzi.bitstream.DefaultOutputBitStream,kanzi.BitStreamException
C:kanzi.bitstream.DefaultOutputBitStream,java.io.IOException
C:kanzi.bitstream.DefaultOutputBitStream,kanzi.bitstream.DefaultOutputBitStream
C:kanzi.bitstream.DefaultOutputBitStream,java.lang.Object
C:kanzi.bitstream.DefaultOutputBitStream,kanzi.OutputBitStream
C:kanzi.bitstream.DefaultOutputBitStream,java.io.OutputStream
C:kanzi.bitstream.DefaultOutputBitStream,java.lang.System
C:kanzi.bitstream.DefaultOutputBitStream,kanzi.Memory$BigEndian
C:kanzi.bitstream.DefaultOutputBitStream,kanzi.Memory
C:kanzi.app.BlockDecompressor,java.lang.Boolean
C:kanzi.app.BlockDecompressor,java.lang.String
C:kanzi.app.BlockDecompressor,java.lang.Integer
C:kanzi.app.BlockDecompressor,kanzi.app.BlockDecompressor
C:kanzi.app.BlockDecompressor,java.util.ArrayList
C:kanzi.app.BlockDecompressor,java.lang.StringBuilder
C:kanzi.app.BlockDecompressor,java.io.IOException
C:kanzi.app.BlockDecompressor,kanzi.Error
C:kanzi.app.BlockDecompressor,kanzi.app.InfoPrinter
C:kanzi.app.BlockDecompressor,java.nio.file.LinkOption
C:kanzi.app.BlockDecompressor,java.util.HashMap
C:kanzi.app.BlockDecompressor,java.nio.file.Path
C:kanzi.app.BlockDecompressor,kanzi.app.BlockDecompressor$FileDecompressTask
C:kanzi.app.BlockDecompressor,java.util.concurrent.ArrayBlockingQueue
C:kanzi.app.BlockDecompressor,java.lang.RuntimeException
C:kanzi.app.BlockDecompressor,kanzi.app.BlockDecompressor$FileDecompressWorker
C:kanzi.app.BlockDecompressor,java.util.concurrent.Future
C:kanzi.app.BlockDecompressor,kanzi.app.BlockDecompressor$FileDecompressResult
C:kanzi.app.BlockDecompressor,java.lang.Exception
C:kanzi.app.BlockDecompressor,java.lang.Object
C:kanzi.app.BlockDecompressor,java.lang.Runnable
C:kanzi.app.BlockDecompressor,java.util.concurrent.Callable
C:kanzi.app.BlockDecompressor,java.util.Map
C:kanzi.app.BlockDecompressor,java.util.Iterator
C:kanzi.app.BlockDecompressor,java.util.List
C:kanzi.app.BlockDecompressor,[I
C:kanzi.app.BlockDecompressor,[Lkanzi.Listener;
C:kanzi.app.BlockDecompressor,kanzi.Event
C:kanzi.app.BlockDecompressor,kanzi.Listener
C:kanzi.app.BlockDecompressor,java.lang.System
C:kanzi.app.BlockDecompressor,java.io.PrintStream
C:kanzi.app.BlockDecompressor,java.util.concurrent.Executors
C:kanzi.app.BlockDecompressor,java.util.Set
C:kanzi.app.BlockDecompressor,java.util.concurrent.ExecutorService
C:kanzi.app.BlockDecompressor,kanzi.app.Kanzi
C:kanzi.app.BlockDecompressor,kanzi.app.InfoPrinter$Type
C:kanzi.app.BlockDecompressor,java.nio.file.Paths
C:kanzi.app.BlockDecompressor,java.nio.file.Files
C:kanzi.app.BlockDecompressor,java.io.File
C:kanzi.app.BlockDecompressor,java.lang.Long
C:kanzi.app.BlockDecompressor,kanzi.Global
C:kanzi.app.BlockDecompressor,java.lang.Float
C:kanzi.Memory$LittleEndian,kanzi.Memory$LittleEndian
C:kanzi.Memory$LittleEndian,java.lang.Object
C:kanzi.Memory$LittleEndian,kanzi.Memory
C:kanzi.bitstream.DebugOutputBitStream,java.lang.NullPointerException
C:kanzi.bitstream.DebugOutputBitStream,java.lang.StringBuilder
C:kanzi.bitstream.DebugOutputBitStream,kanzi.bitstream.DebugOutputBitStream
C:kanzi.bitstream.DebugOutputBitStream,java.lang.Object
C:kanzi.bitstream.DebugOutputBitStream,kanzi.OutputBitStream
C:kanzi.bitstream.DebugOutputBitStream,java.io.PrintStream
C:kanzi.bitstream.DebugOutputBitStream,java.lang.String
C:kanzi.bitstream.DebugOutputBitStream,kanzi.BitStreamException
C:kanzi.bitstream.DebugOutputBitStream,[B
C:kanzi.bitstream.DebugOutputBitStream,java.lang.System
C:kanzi.Predictor,kanzi.Predictor
C:kanzi.Predictor,java.lang.Object
C:kanzi.bitstream.DebugInputBitStream,java.lang.NullPointerException
C:kanzi.bitstream.DebugInputBitStream,java.lang.StringBuilder
C:kanzi.bitstream.DebugInputBitStream,kanzi.bitstream.DebugInputBitStream
C:kanzi.bitstream.DebugInputBitStream,java.lang.Object
C:kanzi.bitstream.DebugInputBitStream,kanzi.InputBitStream
C:kanzi.bitstream.DebugInputBitStream,java.io.PrintStream
C:kanzi.bitstream.DebugInputBitStream,java.lang.String
C:kanzi.bitstream.DebugInputBitStream,kanzi.BitStreamException
C:kanzi.bitstream.DebugInputBitStream,[B
C:kanzi.bitstream.DebugInputBitStream,java.lang.System
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.io.CompressedInputStream
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.io.CompressedInputStream$Status
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.Error
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Integer
C:kanzi.io.CompressedInputStream$DecodingTask,java.io.ByteArrayInputStream
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.bitstream.DefaultInputBitStream
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.transform.TransformFactory
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.entropy.EntropyCodecFactory
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.StringBuilder
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.Event
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Exception
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.io.CompressedInputStream$DecodingTask
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Object
C:kanzi.io.CompressedInputStream$DecodingTask,java.util.concurrent.Callable
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.SliceByteArray
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.EntropyDecoder
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.Event$Type
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.transform.Sequence
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Throwable
C:kanzi.io.CompressedInputStream$DecodingTask,java.util.concurrent.atomic.AtomicInteger
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Thread
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.InputBitStream
C:kanzi.io.CompressedInputStream$DecodingTask,java.lang.Math
C:kanzi.io.CompressedInputStream$DecodingTask,java.util.Map
C:kanzi.io.CompressedInputStream$DecodingTask,kanzi.util.hash.XXHash32
C:kanzi.Memory$BigEndian,kanzi.Memory$BigEndian
C:kanzi.Memory$BigEndian,java.lang.Object
C:kanzi.Memory$BigEndian,kanzi.Memory
C:kanzi.SliceIntArray,java.lang.NullPointerException
C:kanzi.SliceIntArray,java.lang.IllegalArgumentException
C:kanzi.SliceIntArray,kanzi.SliceIntArray
C:kanzi.SliceIntArray,java.lang.ClassCastException
C:kanzi.SliceIntArray,java.lang.StringBuilder
C:kanzi.SliceIntArray,java.lang.Object
C:kanzi.SliceIntArray,[I
C:kanzi.SliceIntArray,java.util.Objects
C:kanzi.SliceIntArray,java.lang.String
C:kanzi.Global,kanzi.Global
C:kanzi.Global,java.lang.ArithmeticException
C:kanzi.Global,java.lang.IllegalArgumentException
C:kanzi.Global,java.lang.StringBuilder
C:kanzi.Global,kanzi.Global$1
C:kanzi.Global,java.lang.Object
C:kanzi.Global,kanzi.Global$DataType
C:kanzi.Global,[I
C:kanzi.Global,[B
C:kanzi.Global,[[I
C:kanzi.Global,java.lang.Integer
C:kanzi.Global,java.util.Arrays
C:kanzi.Global,java.util.Collections
C:kanzi.SliceByteArray,java.lang.NullPointerException
C:kanzi.SliceByteArray,java.lang.IllegalArgumentException
C:kanzi.SliceByteArray,kanzi.SliceByteArray
C:kanzi.SliceByteArray,java.lang.ClassCastException
C:kanzi.SliceByteArray,java.lang.StringBuilder
C:kanzi.SliceByteArray,java.lang.Object
C:kanzi.SliceByteArray,[B
C:kanzi.SliceByteArray,java.util.Objects
C:kanzi.SliceByteArray,java.lang.String
C:kanzi.ByteTransform,kanzi.ByteTransform
C:kanzi.ByteTransform,java.lang.Object
C:kanzi.ArrayComparator,kanzi.ArrayComparator
C:kanzi.ArrayComparator,java.lang.Object
C:kanzi.transform.ROLZCodec$ROLZEncoder,kanzi.transform.ROLZCodec$ROLZEncoder
C:kanzi.transform.ROLZCodec$ROLZEncoder,[I
C:kanzi.transform.ROLZCodec$ROLZEncoder,java.lang.Object
C:kanzi.transform.ROLZCodec$ROLZEncoder,kanzi.transform.ROLZCodec
C:kanzi.transform.ROLZCodec$ROLZEncoder,kanzi.SliceByteArray
C:kanzi.transform.ROLZCodec$ROLZEncoder,kanzi.Memory$BigEndian
C:kanzi.transform.ROLZCodec$ROLZEncoder,kanzi.Memory
C:kanzi.transform.LZCodec$LZXCodec,kanzi.transform.LZCodec$LZXCodec
C:kanzi.transform.LZCodec$LZXCodec,kanzi.transform.TransformFactory
C:kanzi.transform.LZCodec$LZXCodec,java.lang.Short
C:kanzi.transform.LZCodec$LZXCodec,kanzi.SliceByteArray
C:kanzi.transform.LZCodec$LZXCodec,java.lang.Object
C:kanzi.transform.LZCodec$LZXCodec,kanzi.ByteTransform
C:kanzi.transform.LZCodec$LZXCodec,java.util.Map
C:kanzi.transform.LZCodec$LZXCodec,[I
C:kanzi.transform.LZCodec$LZXCodec,[B
C:kanzi.transform.LZCodec$LZXCodec,kanzi.transform.LZCodec
C:kanzi.transform.LZCodec$LZXCodec,java.lang.Math
C:kanzi.transform.LZCodec$LZXCodec,java.lang.System
C:kanzi.transform.LZCodec$LZXCodec,kanzi.Memory$LittleEndian
C:kanzi.transform.LZCodec$LZXCodec,kanzi.Memory
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,java.lang.IllegalArgumentException
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,java.lang.StringBuilder
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,java.io.ByteArrayOutputStream
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,[B
C:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream,kanzi.io.CompressedOutputStream
C:kanzi.Memory,java.lang.StringBuilder
C:kanzi.Memory,kanzi.Memory
C:kanzi.Memory,java.lang.Object
C:kanzi.Memory,kanzi.Memory$LittleEndian
C:kanzi.Memory,kanzi.Memory$BigEndian
C:kanzi.Memory,[Ljava.lang.String;
C:kanzi.Memory,[B
C:kanzi.Memory,java.io.PrintStream
C:kanzi.Memory,java.lang.System
C:kanzi.Memory,java.nio.ByteOrder
C:kanzi.Memory,java.lang.Integer
C:kanzi.transform.TextCodec$TextCodec1,kanzi.transform.TextCodec
C:kanzi.transform.TextCodec$TextCodec1,kanzi.transform.TextCodec$DictEntry
C:kanzi.transform.TextCodec$TextCodec1,java.lang.Integer
C:kanzi.transform.TextCodec$TextCodec1,java.lang.Boolean
C:kanzi.transform.TextCodec$TextCodec1,kanzi.Global$DataType
C:kanzi.transform.TextCodec$TextCodec1,kanzi.transform.TextCodec$TextCodec1
C:kanzi.transform.TextCodec$TextCodec1,java.lang.Object
C:kanzi.transform.TextCodec$TextCodec1,kanzi.ByteTransform
C:kanzi.transform.TextCodec$TextCodec1,java.util.Map
C:kanzi.transform.TextCodec$TextCodec1,kanzi.SliceByteArray
C:kanzi.transform.TextCodec$TextCodec1,[B
C:kanzi.transform.TextCodec$TextCodec1,[I
C:kanzi.transform.TextCodec$TextCodec1,[Lkanzi.transform.TextCodec$DictEntry;
C:kanzi.transform.TextCodec$TextCodec1,kanzi.Global
C:kanzi.transform.TextCodec$TextCodec1,java.lang.Math
C:kanzi.transform.TextCodec$TextCodec1,java.lang.System
C:kanzi.Error,kanzi.Error
C:kanzi.Error,java.lang.Object
C:kanzi.io.IOException,kanzi.io.IOException
C:kanzi.io.IOException,java.io.IOException
C:kanzi.transform.BWT,kanzi.transform.BWT
C:kanzi.transform.BWT,java.lang.Integer
C:kanzi.transform.BWT,java.lang.IllegalArgumentException
C:kanzi.transform.BWT,java.util.concurrent.ExecutorService
C:kanzi.transform.BWT,java.lang.StringBuilder
C:kanzi.transform.BWT,kanzi.transform.DivSufSort
C:kanzi.transform.BWT,java.util.ArrayList
C:kanzi.transform.BWT,kanzi.transform.BWT$InverseBiPSIv2Task
C:kanzi.transform.BWT,java.util.concurrent.Callable
C:kanzi.transform.BWT,java.util.concurrent.Future
C:kanzi.transform.BWT,java.lang.Exception
C:kanzi.transform.BWT,java.lang.Object
C:kanzi.transform.BWT,kanzi.ByteTransform
C:kanzi.transform.BWT,java.util.Map
C:kanzi.transform.BWT,kanzi.SliceByteArray
C:kanzi.transform.BWT,[B
C:kanzi.transform.BWT,[I
C:kanzi.transform.BWT,[S
C:kanzi.transform.BWT,java.util.List
C:kanzi.transform.BWT,java.util.Iterator
C:kanzi.transform.BWT,java.lang.Math
C:kanzi.transform.BWT,kanzi.Global
C:kanzi.Event,java.lang.StringBuilder
C:kanzi.Event,kanzi.Event
C:kanzi.Event,java.lang.Object
C:kanzi.Event,kanzi.Event$Type
C:kanzi.Event,java.lang.String
C:kanzi.Event,java.lang.Integer
C:kanzi.Event,java.lang.System
C:kanzi.entropy.RiceGolombDecoder,java.lang.NullPointerException
C:kanzi.entropy.RiceGolombDecoder,java.lang.IllegalArgumentException
C:kanzi.entropy.RiceGolombDecoder,java.lang.StringBuilder
C:kanzi.entropy.RiceGolombDecoder,kanzi.entropy.RiceGolombDecoder
C:kanzi.entropy.RiceGolombDecoder,java.lang.Object
C:kanzi.entropy.RiceGolombDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.RiceGolombDecoder,kanzi.InputBitStream
C:kanzi.transform.X86Codec,kanzi.Global$DataType
C:kanzi.transform.X86Codec,kanzi.transform.X86Codec
C:kanzi.transform.X86Codec,java.lang.Object
C:kanzi.transform.X86Codec,kanzi.ByteTransform
C:kanzi.transform.X86Codec,[B
C:kanzi.transform.X86Codec,kanzi.SliceByteArray
C:kanzi.transform.X86Codec,java.util.Map
C:kanzi.transform.X86Codec,kanzi.Global
C:kanzi.Event$Type,[Lkanzi.Event$Type;
C:kanzi.Event$Type,kanzi.Event$Type
C:kanzi.Event$Type,java.lang.Enum
C:kanzi.Event$Type,[Lkanzi.Event$Type;
C:kanzi.Event$Type,kanzi.Event
C:kanzi.entropy.HuffmanDecoder,kanzi.entropy.HuffmanDecoder
C:kanzi.entropy.HuffmanDecoder,kanzi.entropy.HuffmanCommon
C:kanzi.entropy.HuffmanDecoder,java.lang.NullPointerException
C:kanzi.entropy.HuffmanDecoder,java.lang.IllegalArgumentException
C:kanzi.entropy.HuffmanDecoder,kanzi.entropy.ExpGolombDecoder
C:kanzi.entropy.HuffmanDecoder,kanzi.BitStreamException
C:kanzi.entropy.HuffmanDecoder,java.lang.StringBuilder
C:kanzi.entropy.HuffmanDecoder,java.lang.Object
C:kanzi.entropy.HuffmanDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.HuffmanDecoder,kanzi.InputBitStream
C:kanzi.entropy.HuffmanDecoder,[B
C:kanzi.entropy.HuffmanDecoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.HuffmanDecoder,java.lang.Math
C:kanzi.transform.TransformFactory,kanzi.transform.TransformFactory
C:kanzi.transform.TransformFactory,java.lang.IllegalArgumentException
C:kanzi.transform.TransformFactory,java.lang.StringBuilder
C:kanzi.transform.TransformFactory,kanzi.ByteTransform
C:kanzi.transform.TransformFactory,kanzi.transform.Sequence
C:kanzi.transform.TransformFactory,java.lang.String
C:kanzi.transform.TransformFactory,kanzi.transform.TextCodec
C:kanzi.transform.TransformFactory,kanzi.transform.ROLZCodec
C:kanzi.transform.TransformFactory,kanzi.transform.BWTBlockCodec
C:kanzi.transform.TransformFactory,kanzi.transform.BWTS
C:kanzi.transform.TransformFactory,kanzi.transform.SBRT
C:kanzi.transform.TransformFactory,kanzi.transform.SRT
C:kanzi.transform.TransformFactory,kanzi.transform.ZRLT
C:kanzi.transform.TransformFactory,kanzi.transform.RLT
C:kanzi.transform.TransformFactory,kanzi.transform.LZCodec
C:kanzi.transform.TransformFactory,kanzi.transform.X86Codec
C:kanzi.transform.TransformFactory,kanzi.transform.FSDCodec
C:kanzi.transform.TransformFactory,kanzi.transform.NullTransform
C:kanzi.transform.TransformFactory,java.lang.Object
C:kanzi.transform.TransformFactory,[Ljava.lang.String;
C:kanzi.transform.TransformFactory,[Lkanzi.ByteTransform;
C:kanzi.transform.TransformFactory,java.util.Map
C:kanzi.transform.TransformFactory,java.lang.Integer
C:kanzi.transform.TransformFactory,java.lang.Short
C:kanzi.IntSorter,kanzi.IntSorter
C:kanzi.IntSorter,java.lang.Object
C:kanzi.transform.SBRT,kanzi.transform.SBRT
C:kanzi.transform.SBRT,java.lang.IllegalArgumentException
C:kanzi.transform.SBRT,java.lang.Integer
C:kanzi.transform.SBRT,java.lang.Object
C:kanzi.transform.SBRT,kanzi.ByteTransform
C:kanzi.transform.SBRT,java.util.Map
C:kanzi.transform.SBRT,kanzi.SliceByteArray
C:kanzi.transform.SBRT,[B
C:kanzi.transform.SBRT,[I
C:kanzi.OutputBitStream,kanzi.OutputBitStream
C:kanzi.OutputBitStream,java.lang.Object
C:kanzi.OutputBitStream,kanzi.BitStreamException
C:kanzi.transform.RLT,kanzi.transform.RLT
C:kanzi.transform.RLT,java.lang.Object
C:kanzi.transform.RLT,kanzi.ByteTransform
C:kanzi.transform.RLT,kanzi.SliceByteArray
C:kanzi.transform.RLT,[B
C:kanzi.transform.RLT,kanzi.Global
C:kanzi.entropy.ANSRangeDecoder,kanzi.entropy.ANSRangeDecoder
C:kanzi.entropy.ANSRangeDecoder,java.lang.NullPointerException
C:kanzi.entropy.ANSRangeDecoder,java.lang.IllegalArgumentException
C:kanzi.entropy.ANSRangeDecoder,[[I
C:kanzi.entropy.ANSRangeDecoder,[[B
C:kanzi.entropy.ANSRangeDecoder,[[Lkanzi.entropy.ANSRangeDecoder$Symbol;
C:kanzi.entropy.ANSRangeDecoder,kanzi.entropy.ANSRangeDecoder$Symbol
C:kanzi.entropy.ANSRangeDecoder,java.lang.Integer
C:kanzi.entropy.ANSRangeDecoder,kanzi.BitStreamException
C:kanzi.entropy.ANSRangeDecoder,java.lang.StringBuilder
C:kanzi.entropy.ANSRangeDecoder,java.lang.Object
C:kanzi.entropy.ANSRangeDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.ANSRangeDecoder,kanzi.InputBitStream
C:kanzi.entropy.ANSRangeDecoder,java.util.Map
C:kanzi.entropy.ANSRangeDecoder,[B
C:kanzi.entropy.ANSRangeDecoder,[Lkanzi.entropy.ANSRangeDecoder$Symbol;
C:kanzi.entropy.ANSRangeDecoder,[I
C:kanzi.entropy.ANSRangeDecoder,java.lang.Math
C:kanzi.entropy.ANSRangeDecoder,kanzi.entropy.EntropyUtils
C:kanzi.transform.ROLZCodec,kanzi.transform.ROLZCodec
C:kanzi.transform.ROLZCodec,kanzi.transform.ROLZCodec$ROLZCodec1
C:kanzi.transform.ROLZCodec,kanzi.transform.ROLZCodec$ROLZCodec2
C:kanzi.transform.ROLZCodec,java.lang.String
C:kanzi.transform.ROLZCodec,java.lang.IllegalArgumentException
C:kanzi.transform.ROLZCodec,java.lang.StringBuilder
C:kanzi.transform.ROLZCodec,java.lang.Object
C:kanzi.transform.ROLZCodec,kanzi.ByteTransform
C:kanzi.transform.ROLZCodec,kanzi.transform.ROLZCodec$ROLZDecoder
C:kanzi.transform.ROLZCodec,kanzi.transform.ROLZCodec$ROLZEncoder
C:kanzi.transform.ROLZCodec,java.util.Map
C:kanzi.transform.ROLZCodec,kanzi.Memory$LittleEndian
C:kanzi.transform.ROLZCodec,kanzi.SliceByteArray
C:kanzi.transform.ROLZCodec,kanzi.Memory
C:kanzi.entropy.FPAQEncoder,java.lang.NullPointerException
C:kanzi.entropy.FPAQEncoder,kanzi.entropy.FPAQEncoder
C:kanzi.entropy.FPAQEncoder,kanzi.SliceByteArray
C:kanzi.entropy.FPAQEncoder,[[I
C:kanzi.entropy.FPAQEncoder,java.lang.Object
C:kanzi.entropy.FPAQEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.FPAQEncoder,kanzi.OutputBitStream
C:kanzi.entropy.FPAQEncoder,java.util.Arrays
C:kanzi.entropy.FPAQEncoder,java.lang.Math
C:kanzi.entropy.FPAQEncoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.FPAQEncoder,kanzi.Memory$BigEndian
C:kanzi.entropy.FPAQEncoder,kanzi.Memory
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.transform.ROLZCodec$ROLZCodec1
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.transform.ROLZCodec
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.lang.IllegalArgumentException
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.lang.Integer
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.SliceByteArray
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.io.ByteArrayOutputStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.bitstream.DefaultOutputBitStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.entropy.ANSRangeEncoder
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.io.ByteArrayInputStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.bitstream.DefaultInputBitStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.util.HashMap
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.entropy.ANSRangeDecoder
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.lang.Object
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.ByteTransform
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.util.Map
C:kanzi.transform.ROLZCodec$ROLZCodec1,[B
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.InputBitStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.lang.Math
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.Memory$LittleEndian
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.Memory$BigEndian
C:kanzi.transform.ROLZCodec$ROLZCodec1,java.lang.System
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.OutputBitStream
C:kanzi.transform.ROLZCodec$ROLZCodec1,kanzi.Memory
C:kanzi.entropy.ExpGolombDecoder,java.lang.NullPointerException
C:kanzi.entropy.ExpGolombDecoder,kanzi.entropy.ExpGolombDecoder
C:kanzi.entropy.ExpGolombDecoder,java.lang.Object
C:kanzi.entropy.ExpGolombDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.ExpGolombDecoder,kanzi.InputBitStream
C:kanzi.transform.DivSufSort$Stack,kanzi.transform.DivSufSort$StackElement
C:kanzi.transform.DivSufSort$Stack,kanzi.transform.DivSufSort$Stack
C:kanzi.transform.DivSufSort$Stack,java.lang.Object
C:kanzi.transform.DivSufSort$Stack,kanzi.transform.DivSufSort
C:kanzi.transform.DivSufSort$Stack,kanzi.transform.DivSufSort$1
C:kanzi.transform.DivSufSort,kanzi.transform.DivSufSort$Stack
C:kanzi.transform.DivSufSort,kanzi.transform.DivSufSort
C:kanzi.transform.DivSufSort,kanzi.transform.DivSufSort$TRBudget
C:kanzi.transform.DivSufSort,java.lang.Object
C:kanzi.transform.DivSufSort,kanzi.transform.DivSufSort$1
C:kanzi.transform.DivSufSort,kanzi.transform.DivSufSort$StackElement
C:kanzi.transform.DivSufSort,[I
C:kanzi.transform.DivSufSort,[B
C:kanzi.transform.DivSufSort$1,kanzi.transform.DivSufSort$1
C:kanzi.transform.DivSufSort$1,java.lang.Object
C:kanzi.transform.DivSufSort$1,kanzi.transform.DivSufSort
C:kanzi.entropy.FPAQDecoder,java.lang.NullPointerException
C:kanzi.entropy.FPAQDecoder,kanzi.entropy.FPAQDecoder
C:kanzi.entropy.FPAQDecoder,kanzi.SliceByteArray
C:kanzi.entropy.FPAQDecoder,[[I
C:kanzi.entropy.FPAQDecoder,java.lang.Object
C:kanzi.entropy.FPAQDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.FPAQDecoder,kanzi.InputBitStream
C:kanzi.entropy.FPAQDecoder,java.util.Arrays
C:kanzi.entropy.FPAQDecoder,java.lang.Math
C:kanzi.entropy.FPAQDecoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.FPAQDecoder,kanzi.Memory$BigEndian
C:kanzi.entropy.FPAQDecoder,kanzi.Memory
C:kanzi.entropy.ANSRangeEncoder,kanzi.entropy.ANSRangeEncoder
C:kanzi.entropy.ANSRangeEncoder,java.lang.NullPointerException
C:kanzi.entropy.ANSRangeEncoder,java.lang.IllegalArgumentException
C:kanzi.entropy.ANSRangeEncoder,java.lang.StringBuilder
C:kanzi.entropy.ANSRangeEncoder,[[I
C:kanzi.entropy.ANSRangeEncoder,[[Lkanzi.entropy.ANSRangeEncoder$Symbol;
C:kanzi.entropy.ANSRangeEncoder,kanzi.entropy.ANSRangeEncoder$Symbol
C:kanzi.entropy.ANSRangeEncoder,java.lang.Object
C:kanzi.entropy.ANSRangeEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.ANSRangeEncoder,kanzi.OutputBitStream
C:kanzi.entropy.ANSRangeEncoder,java.util.Map
C:kanzi.entropy.ANSRangeEncoder,[I
C:kanzi.entropy.ANSRangeEncoder,[Lkanzi.entropy.ANSRangeEncoder$Symbol;
C:kanzi.entropy.ANSRangeEncoder,[B
C:kanzi.entropy.ANSRangeEncoder,java.lang.Math
C:kanzi.entropy.ANSRangeEncoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.ANSRangeEncoder,kanzi.Global
C:kanzi.entropy.CMPredictor,[[I
C:kanzi.entropy.CMPredictor,kanzi.entropy.CMPredictor
C:kanzi.entropy.CMPredictor,java.lang.Object
C:kanzi.entropy.CMPredictor,kanzi.Predictor
C:kanzi.entropy.CMPredictor,[I
C:kanzi.entropy.CMPredictor,java.util.Arrays
C:kanzi.IntTransform,kanzi.IntTransform
C:kanzi.IntTransform,java.lang.Object
C:kanzi.transform.DivSufSort$StackElement,kanzi.transform.DivSufSort$StackElement
C:kanzi.transform.DivSufSort$StackElement,java.lang.Object
C:kanzi.transform.DivSufSort$StackElement,kanzi.transform.DivSufSort$1
C:kanzi.transform.DivSufSort$StackElement,kanzi.transform.DivSufSort
C:kanzi.entropy.LinearAdaptiveProbMap,kanzi.entropy.LinearAdaptiveProbMap
C:kanzi.entropy.LinearAdaptiveProbMap,java.lang.Object
C:kanzi.entropy.LinearAdaptiveProbMap,java.lang.System
C:kanzi.transform.BWT$InverseBiPSIv2Task,kanzi.transform.BWT
C:kanzi.transform.BWT$InverseBiPSIv2Task,kanzi.transform.BWT$InverseBiPSIv2Task
C:kanzi.transform.BWT$InverseBiPSIv2Task,java.lang.Object
C:kanzi.transform.BWT$InverseBiPSIv2Task,java.util.concurrent.Callable
C:kanzi.transform.BWT$InverseBiPSIv2Task,[I
C:kanzi.transform.BWT$InverseBiPSIv2Task,[S
C:kanzi.transform.BWT$InverseBiPSIv2Task,java.lang.Exception
C:kanzi.transform.BWT$InverseBiPSIv2Task,java.lang.Math
C:kanzi.transform.BWT$InverseBiPSIv2Task,java.lang.Integer
C:kanzi.entropy.RiceGolombEncoder,java.lang.NullPointerException
C:kanzi.entropy.RiceGolombEncoder,java.lang.IllegalArgumentException
C:kanzi.entropy.RiceGolombEncoder,java.lang.StringBuilder
C:kanzi.entropy.RiceGolombEncoder,kanzi.entropy.RiceGolombEncoder
C:kanzi.entropy.RiceGolombEncoder,java.lang.Object
C:kanzi.entropy.RiceGolombEncoder,kanzi.EntropyEncoder
C:kanzi.entropy.RiceGolombEncoder,kanzi.OutputBitStream
C:kanzi.transform.SA_IS,kanzi.SliceIntArray
C:kanzi.transform.SA_IS,kanzi.transform.SA_IS
C:kanzi.transform.SA_IS,java.lang.Object
C:kanzi.transform.SA_IS,[I
C:kanzi.entropy.FastLogisticAdaptiveProbMap,kanzi.entropy.FastLogisticAdaptiveProbMap
C:kanzi.entropy.FastLogisticAdaptiveProbMap,java.lang.Object
C:kanzi.entropy.FastLogisticAdaptiveProbMap,kanzi.Global
C:kanzi.entropy.FastLogisticAdaptiveProbMap,java.lang.System
C:kanzi.transform.SRT,kanzi.transform.SRT
C:kanzi.transform.SRT,java.lang.Object
C:kanzi.transform.SRT,kanzi.ByteTransform
C:kanzi.transform.SRT,kanzi.SliceByteArray
C:kanzi.transform.SRT,[B
C:kanzi.transform.SRT,[I
C:kanzi.entropy.EntropyUtils,kanzi.entropy.EntropyUtils
C:kanzi.entropy.EntropyUtils,kanzi.BitStreamException
C:kanzi.entropy.EntropyUtils,java.lang.IllegalArgumentException
C:kanzi.entropy.EntropyUtils,java.lang.StringBuilder
C:kanzi.entropy.EntropyUtils,java.util.ArrayList
C:kanzi.entropy.EntropyUtils,kanzi.entropy.EntropyUtils$FreqSortData
C:kanzi.entropy.EntropyUtils,java.util.ArrayDeque
C:kanzi.entropy.EntropyUtils,java.lang.Object
C:kanzi.entropy.EntropyUtils,[B
C:kanzi.entropy.EntropyUtils,[I
C:kanzi.entropy.EntropyUtils,java.util.Deque
C:kanzi.entropy.EntropyUtils,kanzi.OutputBitStream
C:kanzi.entropy.EntropyUtils,kanzi.InputBitStream
C:kanzi.entropy.EntropyUtils,java.lang.Math
C:kanzi.entropy.EntropyUtils,java.util.Collections
C:kanzi.transform.TextCodec$DictEntry,java.lang.StringBuilder
C:kanzi.transform.TextCodec$DictEntry,kanzi.transform.TextCodec$DictEntry
C:kanzi.transform.TextCodec$DictEntry,java.lang.Object
C:kanzi.transform.TextCodec$DictEntry,kanzi.transform.TextCodec
C:kanzi.entropy.LogisticAdaptiveProbMap,kanzi.entropy.LogisticAdaptiveProbMap
C:kanzi.entropy.LogisticAdaptiveProbMap,java.lang.Object
C:kanzi.entropy.LogisticAdaptiveProbMap,kanzi.Global
C:kanzi.entropy.LogisticAdaptiveProbMap,java.lang.System
C:kanzi.transform.ROLZCodec$ROLZDecoder,kanzi.transform.ROLZCodec$ROLZDecoder
C:kanzi.transform.ROLZCodec$ROLZDecoder,[I
C:kanzi.transform.ROLZCodec$ROLZDecoder,java.lang.Object
C:kanzi.transform.ROLZCodec$ROLZDecoder,kanzi.SliceByteArray
C:kanzi.transform.ROLZCodec$ROLZDecoder,kanzi.transform.ROLZCodec
C:kanzi.transform.ROLZCodec$ROLZDecoder,kanzi.Memory$BigEndian
C:kanzi.transform.ROLZCodec$ROLZDecoder,kanzi.Memory
C:kanzi.entropy.BinaryEntropyDecoder,java.lang.NullPointerException
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.entropy.BinaryEntropyDecoder
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.SliceByteArray
C:kanzi.entropy.BinaryEntropyDecoder,java.lang.Object
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.EntropyDecoder
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.InputBitStream
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.Predictor
C:kanzi.entropy.BinaryEntropyDecoder,java.lang.Math
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.entropy.EntropyUtils
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.Memory$BigEndian
C:kanzi.entropy.BinaryEntropyDecoder,kanzi.Memory
M:kanzi.util.IntBTree$CallbackImpl:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.util.IntBTree$CallbackImpl:call(kanzi.util.IntBTree$IntBTNode,int[],int,boolean)","(M)kanzi.util.IntBTree$IntBTNode:values(int[],int,boolean)"
M:kanzi.transform.BWTS:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.BWTS:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWTS:maxBlockSize()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWTS:maxBlockSize()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.DivSufSort:<init>()
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.DivSufSort:computeSuffixArray(byte[],int[],int,int)"
"M:kanzi.transform.BWTS:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.BWTS:moveLyndonWordHead(int[],int[],byte[],int,int,int,int,int)"
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWTS:maxBlockSize()
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWTS:maxBlockSize()
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.BWTS:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.LZCodec$LZPCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.LZCodec$LZPCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.LZCodec$LZPCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.LZCodec$LZPCodec:getMaxEncodedLength(int)
"M:kanzi.transform.LZCodec$LZPCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZPCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec:access$000(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZPCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZPCodec:findMatch(byte[],int,int,int)"
"M:kanzi.transform.LZCodec$LZPCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZPCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZPCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZPCodec:findMatch(byte[],int,int,int)","(S)kanzi.transform.LZCodec:access$000(byte[],int,int)"
M:kanzi.util.hash.XXHash32:<init>(),(S)java.lang.System:nanoTime()
M:kanzi.util.hash.XXHash32:<init>(),(O)kanzi.util.hash.XXHash32:<init>(int)
M:kanzi.util.hash.XXHash32:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.util.hash.XXHash32:hash(byte[]),"(M)kanzi.util.hash.XXHash32:hash(byte[],int,int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash32:round(int,int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash32:round(int,int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash32:round(int,int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash32:round(int,int)"
"M:kanzi.util.hash.XXHash32:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
M:kanzi.entropy.NullEntropyDecoder:<init>(kanzi.InputBitStream),(O)java.lang.Object:<init>()
M:kanzi.entropy.NullEntropyDecoder:<init>(kanzi.InputBitStream),(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.NullEntropyDecoder:decode(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
M:kanzi.entropy.NullEntropyDecoder:decodeByte(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.util.hash.SipHash_2_4:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.hash.SipHash_2_4:<init>(byte[]),(O)java.lang.Object:<init>()
M:kanzi.util.hash.SipHash_2_4:<init>(byte[]),(M)kanzi.util.hash.SipHash_2_4:setSeed(byte[])
"M:kanzi.util.hash.SipHash_2_4:<init>(long,long)",(O)java.lang.Object:<init>()
"M:kanzi.util.hash.SipHash_2_4:<init>(long,long)","(M)kanzi.util.hash.SipHash_2_4:setSeed(long,long)"
M:kanzi.util.hash.SipHash_2_4:setSeed(byte[]),(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.util.hash.SipHash_2_4:setSeed(byte[]),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.util.hash.SipHash_2_4:setSeed(byte[]),"(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
M:kanzi.util.hash.SipHash_2_4:setSeed(byte[]),"(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
M:kanzi.util.hash.SipHash_2_4:setSeed(byte[]),"(M)kanzi.util.hash.SipHash_2_4:setSeed(long,long)"
M:kanzi.util.hash.SipHash_2_4:hash(byte[]),"(M)kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)"
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
"M:kanzi.util.hash.SipHash_2_4:hash(byte[],int,int)",(O)kanzi.util.hash.SipHash_2_4:sipRound()
M:kanzi.transform.BWTBlockCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.BWTBlockCodec:<init>(),(O)kanzi.transform.BWT:<init>()
M:kanzi.transform.BWTBlockCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.BWTBlockCodec:<init>(java.util.Map),(O)kanzi.transform.BWT:<init>(java.util.Map)
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.BWTBlockCodec:getMaxEncodedLength(int)
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:getBWTChunks(int)
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.BWTBlockCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWTBlockCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:getBWTChunks(int)
"M:kanzi.transform.BWTBlockCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.BWT:setPrimaryIndex(int,int)"
"M:kanzi.transform.BWTBlockCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
M:kanzi.entropy.HuffmanCommon:<init>(),(O)java.lang.Object:<init>()
M:kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream),"(O)kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream,int)"
"M:kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),"(S)kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])"
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.RangeDecoder:decodeHeader(int[]),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.RangeDecoder:decode(byte[],int,int)",(M)kanzi.entropy.RangeDecoder:decodeHeader(int[])
"M:kanzi.entropy.RangeDecoder:decode(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.RangeDecoder:decode(byte[],int,int)",(M)kanzi.entropy.RangeDecoder:decodeByte()
M:kanzi.entropy.RangeDecoder:decodeByte(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.NullEntropyEncoder:<init>(kanzi.OutputBitStream),(O)java.lang.Object:<init>()
M:kanzi.entropy.NullEntropyEncoder:<init>(kanzi.OutputBitStream),(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.NullEntropyEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
M:kanzi.entropy.NullEntropyEncoder:encodeByte(byte),"(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ExpGolombEncoder:<init>(kanzi.OutputBitStream,boolean)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ExpGolombEncoder:<init>(kanzi.OutputBitStream,boolean)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.ExpGolombEncoder:encode(byte[],int,int)",(M)kanzi.entropy.ExpGolombEncoder:encodeByte(byte)
M:kanzi.entropy.ExpGolombEncoder:encodeByte(byte),(I)kanzi.OutputBitStream:writeBit(int)
M:kanzi.entropy.ExpGolombEncoder:encodeByte(byte),"(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String,boolean)"
"M:kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String,boolean)",(O)java.lang.Object:<init>()
"M:kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String,boolean)",(S)java.lang.System:nanoTime()
M:kanzi.util.hash.XXHash64:<init>(),(S)java.lang.System:nanoTime()
M:kanzi.util.hash.XXHash64:<init>(),(O)kanzi.util.hash.XXHash64:<init>(long)
M:kanzi.util.hash.XXHash64:<init>(long),(O)java.lang.Object:<init>()
M:kanzi.util.hash.XXHash64:hash(byte[]),"(M)kanzi.util.hash.XXHash64:hash(byte[],int,int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:round(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:round(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:round(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:round(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:mergeRound(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:mergeRound(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:mergeRound(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:mergeRound(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.util.hash.XXHash64:round(long,long)"
"M:kanzi.util.hash.XXHash64:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.util.hash.XXHash64:mergeRound(long,long)","(S)kanzi.util.hash.XXHash64:round(long,long)"
M:kanzi.transform.FSDCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.FSDCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.FSDCodec:getMaxEncodedLength(int)
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Global:computeFirstOrderEntropy1024(int,int[])"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Global:computeFirstOrderEntropy1024(int,int[])"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.FSDCodec:getMaxEncodedLength(int)
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)java.lang.Boolean:valueOf(boolean)
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.transform.FSDCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Global:computeFirstOrderEntropy1024(int,int[])"
M:kanzi.transform.FSDCodec:getMaxEncodedLength(int),"(S)java.lang.Math:max(int,int)"
M:kanzi.util.hash.MurMurHash3:<init>(),(S)java.lang.System:nanoTime()
M:kanzi.util.hash.MurMurHash3:<init>(),(O)kanzi.util.hash.MurMurHash3:<init>(int)
M:kanzi.util.hash.MurMurHash3:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.util.hash.MurMurHash3:hash(byte[]),"(M)kanzi.util.hash.MurMurHash3:hash(byte[],int,int)"
"M:kanzi.util.hash.MurMurHash3:hash(byte[],int,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
M:kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream),"(O)kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream,int)"
"M:kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(S)kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(O)kanzi.entropy.HuffmanEncoder:computeCodeLengths(int[],int)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(S)kanzi.entropy.HuffmanCommon:generateCanonicalCodes(short[],int[],int[],int)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(S)kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),"(O)kanzi.entropy.ExpGolombEncoder:<init>(kanzi.OutputBitStream,boolean)"
M:kanzi.entropy.HuffmanEncoder:updateFrequencies(int[]),(M)kanzi.entropy.ExpGolombEncoder:encodeByte(byte)
"M:kanzi.entropy.HuffmanEncoder:computeCodeLengths(int[],int)","(S)java.util.Arrays:sort(int[],int,int)"
"M:kanzi.entropy.HuffmanEncoder:computeCodeLengths(int[],int)","(S)kanzi.entropy.HuffmanEncoder:computeInPlaceSizesPhase1(int[],int)"
"M:kanzi.entropy.HuffmanEncoder:computeCodeLengths(int[],int)","(S)kanzi.entropy.HuffmanEncoder:computeInPlaceSizesPhase2(int[],int)"
"M:kanzi.entropy.HuffmanEncoder:computeCodeLengths(int[],int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.HuffmanEncoder:encode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.HuffmanEncoder:encode(byte[],int,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.entropy.HuffmanEncoder:encode(byte[],int,int)",(O)kanzi.entropy.HuffmanEncoder:updateFrequencies(int[])
"M:kanzi.entropy.HuffmanEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.HuffmanEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.util.IntBTree:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.IntBTree:add(int),(O)kanzi.util.IntBTree$IntBTNode:<init>(int)
M:kanzi.util.IntBTree:add(int),"(S)kanzi.util.IntBTree:addValue(kanzi.util.IntBTree$IntBTNode,int)"
"M:kanzi.util.IntBTree:addValue(kanzi.util.IntBTree$IntBTNode,int)",(O)kanzi.util.IntBTree$IntBTNode:<init>(int)
"M:kanzi.util.IntBTree:addValue(kanzi.util.IntBTree$IntBTNode,int)",(O)kanzi.util.IntBTree$IntBTNode:<init>(int)
M:kanzi.util.IntBTree:contains(int),"(S)kanzi.util.IntBTree:findNode(kanzi.util.IntBTree$IntBTNode,int)"
M:kanzi.util.IntBTree:remove(int),(O)kanzi.util.IntBTree:removeNode(int)
M:kanzi.util.IntBTree:removeNode(int),"(S)kanzi.util.IntBTree:addNode(kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree$IntBTNode)"
M:kanzi.util.IntBTree:removeNode(int),"(S)kanzi.util.IntBTree:addNode(kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree$IntBTNode)"
M:kanzi.util.IntBTree:removeNode(int),"(S)kanzi.util.IntBTree:addNode(kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree$IntBTNode)"
M:kanzi.util.IntBTree:removeNode(int),"(S)kanzi.util.IntBTree:addNode(kanzi.util.IntBTree$IntBTNode,kanzi.util.IntBTree$IntBTNode)"
M:kanzi.util.IntBTree:rank(int),(M)kanzi.util.IntBTree:min()
M:kanzi.util.IntBTree:rank(int),"(S)kanzi.util.IntBTree:findRank(kanzi.util.IntBTree$IntBTNode,int,int)"
"M:kanzi.util.IntBTree:findRank(kanzi.util.IntBTree$IntBTNode,int,int)","(S)kanzi.util.IntBTree:findRank(kanzi.util.IntBTree$IntBTNode,int,int)"
"M:kanzi.util.IntBTree:findRank(kanzi.util.IntBTree$IntBTNode,int,int)","(S)kanzi.util.IntBTree:findRank(kanzi.util.IntBTree$IntBTNode,int,int)"
"M:kanzi.util.IntBTree:scan(kanzi.util.IntBTree$Callback,boolean)","(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(I)kanzi.util.IntBTree$Callback:call(kanzi.util.IntBTree$IntBTNode,int[],int,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(I)kanzi.util.IntBTree$Callback:call(kanzi.util.IntBTree$IntBTNode,int[],int,boolean)"
"M:kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)","(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
M:kanzi.util.IntBTree:min(),(O)java.lang.IllegalStateException:<init>(java.lang.String)
M:kanzi.util.IntBTree:max(),(O)java.lang.IllegalStateException:<init>(java.lang.String)
M:kanzi.util.IntBTree:toArray(int[]),(O)kanzi.util.IntBTree$CallbackImpl:<init>()
M:kanzi.util.IntBTree:toArray(int[]),"(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
M:kanzi.util.IntBTree:toString(),(M)kanzi.util.IntBTree:size()
M:kanzi.util.IntBTree:toString(),(M)kanzi.util.IntBTree:size()
M:kanzi.util.IntBTree:toString(),(O)kanzi.util.IntBTree$CallbackImpl:<init>()
M:kanzi.util.IntBTree:toString(),"(S)kanzi.util.IntBTree:scanAndCall(kanzi.util.IntBTree$IntBTNode,int[],int,kanzi.util.IntBTree$Callback,boolean)"
M:kanzi.util.IntBTree:toString(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:append(char)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:append(char)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:append(char)
M:kanzi.util.IntBTree:toString(),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.Sequence:<init>(kanzi.ByteTransform[]),(O)java.lang.Object:<init>()
M:kanzi.transform.Sequence:<init>(kanzi.ByteTransform[]),(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.transform.Sequence:<init>(kanzi.ByteTransform[]),(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.transform.Sequence:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.Sequence:getMaxEncodedLength(int)
"M:kanzi.transform.Sequence:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.Sequence:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.Sequence:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.Sequence:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.Sequence:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.Sequence:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.Sequence:getMaxEncodedLength(int),(I)kanzi.ByteTransform:getMaxEncodedLength(int)
"M:kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.entropy.BinaryEntropyEncoder:encode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.BinaryEntropyEncoder:encode(byte[],int,int)",(M)kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte)
"M:kanzi.entropy.BinaryEntropyEncoder:encode(byte[],int,int)","(S)kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)"
"M:kanzi.entropy.BinaryEntropyEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
"M:kanzi.entropy.BinaryEntropyEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyEncoder:encodeByte(byte),"(M)kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)"
"M:kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)",(I)kanzi.Predictor:update(int)
"M:kanzi.entropy.BinaryEntropyEncoder:encodeBit(int,int)",(O)kanzi.entropy.BinaryEntropyEncoder:flush()
M:kanzi.entropy.BinaryEntropyEncoder:flush(),"(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
M:kanzi.entropy.BinaryEntropyEncoder:dispose(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.util.sort.FlashSort:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.FlashSort:sort(int[],int,int)","(O)kanzi.util.sort.FlashSort:partialFlashSort(int[],int,int)"
"M:kanzi.util.sort.FlashSort:sort(int[],int,int)",(O)kanzi.util.sort.InsertionSort:<init>()
"M:kanzi.util.sort.FlashSort:sort(int[],int,int)","(M)kanzi.util.sort.InsertionSort:sort(int[],int,int)"
M:kanzi.transform.TextCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec:<init>(),(O)kanzi.transform.TextCodec$TextCodec1:<init>()
M:kanzi.transform.TextCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec:<init>(java.util.Map),(S)java.lang.Integer:valueOf(int)
M:kanzi.transform.TextCodec:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.TextCodec:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.transform.TextCodec:<init>(java.util.Map),(O)kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map)
M:kanzi.transform.TextCodec:<init>(java.util.Map),(O)kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map)
"M:kanzi.transform.TextCodec:createDictionary(byte[],kanzi.transform.TextCodec$DictEntry[],int,int)",(S)kanzi.transform.TextCodec:isText(byte)
"M:kanzi.transform.TextCodec:createDictionary(byte[],kanzi.transform.TextCodec$DictEntry[],int,int)",(S)kanzi.transform.TextCodec:isUpperCase(byte)
"M:kanzi.transform.TextCodec:createDictionary(byte[],kanzi.transform.TextCodec$DictEntry[],int,int)","(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
"M:kanzi.transform.TextCodec:createDictionary(byte[],kanzi.transform.TextCodec$DictEntry[],int,int)","(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
M:kanzi.transform.TextCodec:isText(byte),(S)kanzi.transform.TextCodec:isLowerCase(byte)
"M:kanzi.transform.TextCodec:computeStats(byte[],int,int,int[],boolean)",(S)kanzi.transform.TextCodec:isText(byte)
"M:kanzi.transform.TextCodec:computeStats(byte[],int,int,int[],boolean)","(S)java.lang.Math:max(int,int)"
M:kanzi.transform.TextCodec:getMaxEncodedLength(int),(I)kanzi.ByteTransform:getMaxEncodedLength(int)
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.TextCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.TextCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
M:kanzi.transform.TextCodec:access$200(byte),(S)kanzi.transform.TextCodec:isText(byte)
"M:kanzi.transform.TextCodec:access$300(byte[],int,byte[],int,int)","(S)kanzi.transform.TextCodec:sameWords(byte[],int,byte[],int,int)"
M:kanzi.transform.TextCodec:<clinit>(),(S)kanzi.transform.TextCodec:initDelimiterChars()
M:kanzi.transform.TextCodec:<clinit>(),(M)java.lang.String:getBytes()
M:kanzi.transform.TextCodec:<clinit>(),(M)java.lang.String:getBytes()
M:kanzi.transform.TextCodec:<clinit>(),(M)java.lang.String:getBytes()
M:kanzi.transform.TextCodec:<clinit>(),(M)java.lang.String:getBytes()
M:kanzi.transform.TextCodec:<clinit>(),"(S)kanzi.transform.TextCodec:createDictionary(byte[],kanzi.transform.TextCodec$DictEntry[],int,int)"
M:kanzi.util.sort.HeapSort:<init>(),(O)kanzi.util.sort.HeapSort:<init>(kanzi.ArrayComparator)
M:kanzi.util.sort.HeapSort:<init>(kanzi.ArrayComparator),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.HeapSort:sort(int[],int,int)","(S)kanzi.util.sort.HeapSort:doSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.HeapSort:sort(int[],int,int)","(S)kanzi.util.sort.HeapSort:doSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.HeapSort:doSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
M:kanzi.transform.ROLZCodec$ROLZCodec2:<init>(),"(O)kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int,java.util.Map)"
M:kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int),"(O)kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int,java.util.Map)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int,java.util.Map)",(O)java.lang.Object:<init>()
"M:kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.transform.ROLZCodec:access$000(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.transform.ROLZCodec:access$100(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)",(S)java.lang.Integer:numberOfTrailingZeros(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZCodec2:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.ROLZCodec$ROLZEncoder:<init>(int,int,kanzi.SliceByteArray)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.ROLZCodec$ROLZCodec2:findMatch(kanzi.SliceByteArray,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBits(int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:dispose()
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.ROLZCodec$ROLZDecoder:<init>(int,int,kanzi.SliceByteArray)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits()
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits()
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec:access$000(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits()
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setMode(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:setContext(byte)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec:access$200(byte[],int,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZDecoder:dispose()
M:kanzi.entropy.TPAQPredictor:<init>(),(O)kanzi.entropy.TPAQPredictor:<init>(java.util.Map)
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(S)java.lang.Integer:valueOf(int)
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(S)java.lang.Integer:valueOf(int)
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(S)java.lang.Math:min(int,int)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(S)java.lang.Math:min(int,int)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),(O)kanzi.entropy.TPAQPredictor$Mixer:<init>()
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(O)kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(O)kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)"
M:kanzi.entropy.TPAQPredictor:<init>(java.util.Map),"(O)kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),(M)kanzi.entropy.TPAQPredictor$Mixer:update(int)
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:createContext(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:createContext(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:createContext(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:hash(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:createContext(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(S)kanzi.entropy.TPAQPredictor:hash(int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),(O)kanzi.entropy.TPAQPredictor:findMatch()
M:kanzi.entropy.TPAQPredictor:update(int),(O)kanzi.entropy.TPAQPredictor:getMatchContextPred()
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.TPAQPredictor$Mixer:get(int,int,int,int,int,int,int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.LogisticAdaptiveProbMap:get(int,int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.TPAQPredictor$Mixer:get(int,int,int,int,int,int,int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.LogisticAdaptiveProbMap:get(int,int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.LogisticAdaptiveProbMap:get(int,int,int)"
M:kanzi.entropy.TPAQPredictor:update(int),"(M)kanzi.entropy.LogisticAdaptiveProbMap:get(int,int,int)"
M:kanzi.util.sort.InsertionSort:<init>(),(O)kanzi.util.sort.InsertionSort:<init>(kanzi.ArrayComparator)
M:kanzi.util.sort.InsertionSort:<init>(kanzi.ArrayComparator),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.InsertionSort:sort(int[],int,int)","(S)kanzi.util.sort.InsertionSort:sortNoComparator(int[],int,int)"
"M:kanzi.util.sort.InsertionSort:sort(int[],int,int)","(S)kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.InsertionSort:sortWithComparator(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec$TextCodec2:<init>(),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(I)java.util.Map:containsKey(java.lang.Object)
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(I)java.util.Map:get(java.lang.Object)
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(S)kanzi.Global:log2(int)
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),"(S)java.lang.Math:max(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.transform.TextCodec$TextCodec2:<init>(java.util.Map),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec2:reset(int),(S)kanzi.Global:log2(int)
M:kanzi.transform.TextCodec$TextCodec2:reset(int),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:reset(int),"(S)java.lang.Math:max(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:reset(int),(S)kanzi.transform.TextCodec:access$100()
M:kanzi.transform.TextCodec$TextCodec2:reset(int),(S)kanzi.transform.TextCodec:access$100()
M:kanzi.transform.TextCodec$TextCodec2:reset(int),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec2:reset(int),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.TextCodec$TextCodec2:reset(int),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.TextCodec$TextCodec2:getMaxEncodedLength(int)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:computeStats(byte[],int,int,int[],boolean)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec2:reset(int)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.TextCodec$TextCodec2:getMaxEncodedLength(int)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:isDelimiter(byte)
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:access$300(byte[],int,byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec2:expandDictionary()
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.TextCodec$TextCodec2:emitSymbols(byte[],int,byte[],int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec$TextCodec2:emitWordIndex(byte[],int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.TextCodec$TextCodec2:emitSymbols(byte[],int,byte[],int,int,int)"
M:kanzi.transform.TextCodec$TextCodec2:expandDictionary(),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.TextCodec$TextCodec2:expandDictionary(),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec2:reset(int)
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:isDelimiter(byte)
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:access$300(byte[],int,byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec2:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec2:expandDictionary()
M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream),"(O)kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)"
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.RangeEncoder:updateFrequencies(int[],int,int)","(S)kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)"
"M:kanzi.entropy.RangeEncoder:updateFrequencies(int[],int,int)","(M)kanzi.entropy.RangeEncoder:encodeHeader(int,int[],int[],int)"
"M:kanzi.entropy.RangeEncoder:encodeHeader(int,int[],int[],int)","(S)kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)"
"M:kanzi.entropy.RangeEncoder:encodeHeader(int,int[],int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.RangeEncoder:encodeHeader(int,int[],int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.RangeEncoder:encodeHeader(int,int[],int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.RangeEncoder:encode(byte[],int,int)","(O)kanzi.entropy.RangeEncoder:rebuildStatistics(byte[],int,int,int)"
"M:kanzi.entropy.RangeEncoder:encode(byte[],int,int)",(M)kanzi.entropy.RangeEncoder:encodeByte(byte)
"M:kanzi.entropy.RangeEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.entropy.RangeEncoder:encodeByte(byte),"(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.RangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.entropy.RangeEncoder:rebuildStatistics(byte[],int,int,int)","(O)kanzi.entropy.RangeEncoder:updateFrequencies(int[],int,int)"
"M:kanzi.io.CompressedInputStream:<init>(java.io.InputStream,java.util.Map)","(O)kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)"
"M:kanzi.io.CompressedInputStream:<init>(java.io.InputStream,java.util.Map)","(O)kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)"
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.io.InputStream:<init>()
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(M)java.lang.Integer:intValue()
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicBoolean:<init>(boolean)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicBoolean:<init>(boolean)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicInteger:<init>(int)
"M:kanzi.io.CompressedInputStream:<init>(kanzi.InputBitStream,java.util.Map)",(O)java.util.ArrayList:<init>(int)
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(O)java.lang.StringBuilder:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:toString()
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:readHeader(),(S)java.lang.Integer:valueOf(int)
M:kanzi.io.CompressedInputStream:readHeader(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBit()
M:kanzi.io.CompressedInputStream:readHeader(),(O)kanzi.util.hash.XXHash32:<init>(int)
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(S)kanzi.entropy.EntropyCodecFactory:getName(int)
M:kanzi.io.CompressedInputStream:readHeader(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:readHeader(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.io.CompressedInputStream:readHeader(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(O)kanzi.transform.TransformFactory:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)kanzi.transform.TransformFactory:getName(long)
M:kanzi.io.CompressedInputStream:readHeader(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(O)java.lang.StringBuilder:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:toString()
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:readHeader(),(S)java.lang.Integer:valueOf(int)
M:kanzi.io.CompressedInputStream:readHeader(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.io.CompressedInputStream:readHeader(),(I)java.util.List:size()
M:kanzi.io.CompressedInputStream:readHeader(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(boolean)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(S)kanzi.entropy.EntropyCodecFactory:getName(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(O)java.lang.StringBuilder:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(int)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:toString()
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:readHeader(),(O)kanzi.transform.TransformFactory:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)kanzi.transform.TransformFactory:getName(long)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(O)java.lang.StringBuilder:<init>()
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:append(long)
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:toString()
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:readHeader(),(I)java.util.List:size()
M:kanzi.io.CompressedInputStream:readHeader(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.io.CompressedInputStream:readHeader(),(M)java.lang.StringBuilder:toString()
M:kanzi.io.CompressedInputStream:readHeader(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,java.lang.String)"
M:kanzi.io.CompressedInputStream:readHeader(),"(S)kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.io.CompressedInputStream:addListener(kanzi.Listener),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedInputStream:removeListener(kanzi.Listener),(I)java.util.List:remove(java.lang.Object)
M:kanzi.io.CompressedInputStream:read(),(M)java.util.concurrent.atomic.AtomicBoolean:get()
M:kanzi.io.CompressedInputStream:read(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:read(),(O)kanzi.io.CompressedInputStream:processBlock()
M:kanzi.io.CompressedInputStream:read(),(M)kanzi.BitStreamException:getMessage()
M:kanzi.io.CompressedInputStream:read(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:read(),(M)java.lang.Exception:getMessage()
M:kanzi.io.CompressedInputStream:read(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
"M:kanzi.io.CompressedInputStream:read(byte[],int,int)",(O)java.lang.IndexOutOfBoundsException:<init>()
"M:kanzi.io.CompressedInputStream:read(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.io.CompressedInputStream:read(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.io.CompressedInputStream:read(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.io.CompressedInputStream:read(byte[],int,int)",(M)kanzi.io.CompressedInputStream:read()
M:kanzi.io.CompressedInputStream:processBlock(),(M)java.util.concurrent.atomic.AtomicBoolean:getAndSet(boolean)
M:kanzi.io.CompressedInputStream:processBlock(),(M)kanzi.io.CompressedInputStream:readHeader()
M:kanzi.io.CompressedInputStream:processBlock(),"(S)java.lang.Math:max(int,int)"
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:size()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.io.CompressedInputStream:processBlock(),(O)java.util.ArrayList:<init>(int)
M:kanzi.io.CompressedInputStream:processBlock(),(M)java.util.concurrent.atomic.AtomicInteger:get()
M:kanzi.io.CompressedInputStream:processBlock(),"(S)java.lang.Math:min(int,int)"
M:kanzi.io.CompressedInputStream:processBlock(),"(S)kanzi.Global:computeJobsPerTask(int[],int,int)"
M:kanzi.io.CompressedInputStream:processBlock(),"(S)java.lang.Math:max(int,int)"
M:kanzi.io.CompressedInputStream:processBlock(),(O)java.util.HashMap:<init>(java.util.Map)
M:kanzi.io.CompressedInputStream:processBlock(),(S)java.lang.Integer:valueOf(int)
M:kanzi.io.CompressedInputStream:processBlock(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.CompressedInputStream$DecodingTask:<init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int,kanzi.InputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],java.util.Map)"
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:size()
M:kanzi.io.CompressedInputStream:processBlock(),(O)java.util.ArrayList:<init>(int)
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:get(int)
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.concurrent.Callable:call()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.concurrent.ExecutorService:invokeAll(java.util.Collection)
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:iterator()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.Iterator:hasNext()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.Iterator:next()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.concurrent.Future:get()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:iterator()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.Iterator:hasNext()
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.Iterator:next()
M:kanzi.io.CompressedInputStream:processBlock(),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean,long)"
M:kanzi.io.CompressedInputStream:processBlock(),"(S)kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.io.CompressedInputStream:processBlock(),(I)java.util.List:size()
M:kanzi.io.CompressedInputStream:processBlock(),(M)kanzi.BitStreamException:getErrorCode()
M:kanzi.io.CompressedInputStream:processBlock(),(M)java.lang.Exception:getMessage()
M:kanzi.io.CompressedInputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:close(),(M)java.util.concurrent.atomic.AtomicBoolean:getAndSet(boolean)
M:kanzi.io.CompressedInputStream:close(),(I)kanzi.InputBitStream:close()
M:kanzi.io.CompressedInputStream:close(),(M)kanzi.BitStreamException:getMessage()
M:kanzi.io.CompressedInputStream:close(),(M)kanzi.BitStreamException:getErrorCode()
M:kanzi.io.CompressedInputStream:close(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedInputStream:close(),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.io.CompressedInputStream:getRead(),(I)kanzi.InputBitStream:read()
"M:kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)",(I)kanzi.Listener:processEvent(kanzi.Event)
M:kanzi.util.sort.BitonicSort:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.BitonicSort:sort(int[],int,int)","(S)kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)"
"M:kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)","(S)kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)"
"M:kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)","(S)kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)"
"M:kanzi.util.sort.BitonicSort:sort(int[],int,int,boolean)","(S)kanzi.util.sort.BitonicSort:merge(int[],int,int,boolean)"
"M:kanzi.util.sort.BitonicSort:merge(int[],int,int,boolean)","(S)kanzi.util.sort.BitonicSort:merge(int[],int,int,boolean)"
"M:kanzi.util.sort.BitonicSort:merge(int[],int,int,boolean)","(S)kanzi.util.sort.BitonicSort:merge(int[],int,int,boolean)"
M:kanzi.transform.ZRLT:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.ZRLT:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.ZRLT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ZRLT:getMaxEncodedLength(int)
"M:kanzi.transform.ZRLT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)java.lang.Integer:numberOfLeadingZeros(int)
M:kanzi.entropy.TPAQPredictor$Mixer:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.entropy.TPAQPredictor$Mixer:get(int,int,int,int,int,int,int,int)",(S)kanzi.Global:squash(int)
M:kanzi.util.sort.DefaultArrayComparator:<init>(int[]),(O)java.lang.Object:<init>()
M:kanzi.util.sort.DefaultArrayComparator:<init>(int[]),(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.transform.LZCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.LZCodec:<init>(),(O)kanzi.transform.LZCodec$LZXCodec:<init>()
M:kanzi.transform.LZCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.LZCodec:<init>(java.util.Map),(S)java.lang.Short:valueOf(short)
M:kanzi.transform.LZCodec:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.LZCodec:<init>(java.util.Map),(M)java.lang.Short:shortValue()
M:kanzi.transform.LZCodec:<init>(java.util.Map),(O)kanzi.transform.LZCodec$LZPCodec:<init>(java.util.Map)
M:kanzi.transform.LZCodec:<init>(java.util.Map),(O)kanzi.transform.LZCodec$LZXCodec:<init>(java.util.Map)
M:kanzi.transform.LZCodec:getMaxEncodedLength(int),(I)kanzi.ByteTransform:getMaxEncodedLength(int)
"M:kanzi.transform.LZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.LZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.LZCodec:access$000(byte[],int,int)","(S)kanzi.transform.LZCodec:differentInts(byte[],int,int)"
M:kanzi.entropy.ANSRangeDecoder$Symbol:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.SpreadSort:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.SpreadSort:sort(int[],int,int)","(S)kanzi.util.sort.SpreadSort:_sort(int[],int,int)"
"M:kanzi.util.sort.SpreadSort:_sort(int[],int,int)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.util.sort.SpreadSort:_sort(int[],int,int)","(S)kanzi.util.sort.SpreadSort:spreadSortCore(kanzi.SliceIntArray,int,int[])"
"M:kanzi.util.sort.SpreadSort:_sort(int[],int,int)",(S)kanzi.util.sort.SpreadSort:roughLog2(int)
"M:kanzi.util.sort.SpreadSort:_sort(int[],int,int)","(S)kanzi.util.sort.SpreadSort:getMaxCount(int,int)"
"M:kanzi.util.sort.SpreadSort:_sort(int[],int,int)","(S)kanzi.util.sort.SpreadSort:spreadSortBins(kanzi.SliceIntArray,int[],kanzi.util.sort.SpreadSort$Bin[],int)"
M:kanzi.util.sort.SpreadSort:roughLog2(int),(S)kanzi.Global:log2(int)
"M:kanzi.util.sort.SpreadSort:getMaxCount(int,int)",(S)kanzi.util.sort.SpreadSort:roughLog2(int)
"M:kanzi.util.sort.SpreadSort:spreadSortCore(kanzi.SliceIntArray,int,int[])","(S)kanzi.util.sort.SpreadSort:findExtremes(kanzi.SliceIntArray,int,int[])"
"M:kanzi.util.sort.SpreadSort:spreadSortCore(kanzi.SliceIntArray,int,int[])",(S)kanzi.util.sort.SpreadSort:roughLog2(int)
"M:kanzi.util.sort.SpreadSort:spreadSortCore(kanzi.SliceIntArray,int,int[])",(S)kanzi.util.sort.SpreadSort:roughLog2(int)
"M:kanzi.util.sort.SpreadSort:spreadSortCore(kanzi.SliceIntArray,int,int[])",(O)kanzi.util.sort.SpreadSort$Bin:<init>(kanzi.util.sort.SpreadSort$1)
"M:kanzi.util.sort.SpreadSort:spreadSortBins(kanzi.SliceIntArray,int[],kanzi.util.sort.SpreadSort$Bin[],int)","(S)java.util.Arrays:sort(int[],int,int)"
"M:kanzi.util.sort.SpreadSort:spreadSortBins(kanzi.SliceIntArray,int[],kanzi.util.sort.SpreadSort$Bin[],int)","(S)kanzi.util.sort.SpreadSort:_sort(int[],int,int)"
"M:kanzi.transform.DivSufSort$TRBudget:<init>(int,int)",(O)java.lang.Object:<init>()
"M:kanzi.transform.DivSufSort$TRBudget:<init>(int,int,kanzi.transform.DivSufSort$1)","(O)kanzi.transform.DivSufSort$TRBudget:<init>(int,int)"
"M:kanzi.transform.DivSufSort$TRBudget:access$200(kanzi.transform.DivSufSort$TRBudget,int)",(O)kanzi.transform.DivSufSort$TRBudget:check(int)
M:kanzi.util.sort.MergeSort:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.MergeSort:<init>(),(O)kanzi.util.sort.InsertionSort:<init>()
"M:kanzi.util.sort.MergeSort:sort(int[],int,int)","(O)kanzi.util.sort.MergeSort:mergesort(int[],int,int)"
"M:kanzi.util.sort.MergeSort:mergesort(int[],int,int)","(I)kanzi.IntSorter:sort(int[],int,int)"
"M:kanzi.util.sort.MergeSort:mergesort(int[],int,int)","(O)kanzi.util.sort.MergeSort:mergesort(int[],int,int)"
"M:kanzi.util.sort.MergeSort:mergesort(int[],int,int)","(O)kanzi.util.sort.MergeSort:mergesort(int[],int,int)"
"M:kanzi.util.sort.MergeSort:mergesort(int[],int,int)","(O)kanzi.util.sort.MergeSort:merge(int[],int,int,int)"
"M:kanzi.util.sort.MergeSort:merge(int[],int,int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.util.sort.MergeSort:merge(int[],int,int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.NullTransform:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.NullTransform:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.NullTransform:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.NullTransform:doCopy(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.NullTransform:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.NullTransform:doCopy(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.NullTransform:doCopy(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.entropy.ANSRangeEncoder$Symbol:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.RadixSort:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.RadixSort:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.util.sort.RadixSort:<init>(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.util.sort.RadixSort:sort(int[],int,int)","(O)kanzi.util.sort.RadixSort:sort16(int[],int,int)"
"M:kanzi.util.sort.RadixSort:sort(int[],int,int)","(O)kanzi.util.sort.RadixSort:sort256(int[],int,int)"
"M:kanzi.util.sort.RadixSort:sort16(int[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.util.sort.RadixSort:sort256(int[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.util.sort.RadixSort:sort(byte[],int,int)","(O)kanzi.util.sort.RadixSort:sort16(byte[],int,int)"
"M:kanzi.util.sort.RadixSort:sort(byte[],int,int)","(O)kanzi.util.sort.RadixSort:sort256(byte[],int,int)"
"M:kanzi.util.sort.RadixSort:sort256(byte[],int,int)",(O)kanzi.util.sort.BucketSort:<init>()
"M:kanzi.util.sort.RadixSort:sort256(byte[],int,int)","(M)kanzi.util.sort.BucketSort:sort(byte[],int,int)"
"M:kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)",(O)java.lang.Object:<init>()
M:kanzi.entropy.EntropyCodecFactory:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)","(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)"
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)","(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)"
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.RangeDecoder:<init>(kanzi.InputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.FPAQDecoder:<init>(kanzi.InputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.CMPredictor:<init>()
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.TPAQPredictor:<init>(java.util.Map)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.TPAQPredictor:<init>(java.util.Map)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)kanzi.entropy.NullEntropyDecoder:<init>(kanzi.InputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:append(char)
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.HuffmanEncoder:<init>(kanzi.OutputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)","(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)"
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)","(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)"
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.RangeEncoder:<init>(kanzi.OutputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.FPAQEncoder:<init>(kanzi.OutputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.CMPredictor:<init>()
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.TPAQPredictor:<init>(java.util.Map)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.TPAQPredictor:<init>(java.util.Map)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)","(O)kanzi.entropy.BinaryEntropyEncoder:<init>(kanzi.OutputBitStream,kanzi.Predictor)"
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)kanzi.entropy.NullEntropyEncoder:<init>(kanzi.OutputBitStream)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:append(char)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getName(int),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.EntropyCodecFactory:getName(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getName(int),(M)java.lang.StringBuilder:append(char)
M:kanzi.entropy.EntropyCodecFactory:getName(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getName(int),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.EntropyCodecFactory:getName(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:toUpperCase()
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:hashCode()
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.EntropyCodecFactory:getType(java.lang.String),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int)","(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])"
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])",(O)java.util.concurrent.RecursiveAction:<init>()
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])",(O)kanzi.util.sort.FlashSort:<init>()
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(byte[],int,int)","(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(byte[],int,int,byte[])"
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(byte[],int,int,byte[])",(O)java.util.concurrent.RecursiveAction:<init>()
"M:kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(byte[],int,int,byte[])",(O)kanzi.util.sort.BucketSort:<init>(int)
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:compute(),(M)kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts()
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:compute(),(M)kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes()
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes(),"(I)kanzi.ByteSorter:sort(byte[],int,int)"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes(),"(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes(),"(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes(),"(S)kanzi.util.sort.ForkJoinParallelSort$SortTask:invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortBytes(),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts(),"(I)kanzi.IntSorter:sort(int[],int,int)"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts(),"(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts(),"(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int,int[])"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts(),"(S)kanzi.util.sort.ForkJoinParallelSort$SortTask:invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)"
M:kanzi.util.sort.ForkJoinParallelSort$SortTask:sortInts(),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.BitStreamException:<init>(),(O)java.lang.RuntimeException:<init>()
"M:kanzi.BitStreamException:<init>(java.lang.String,int)",(O)java.lang.RuntimeException:<init>(java.lang.String)
"M:kanzi.BitStreamException:<init>(java.lang.String,java.lang.Throwable,int)","(O)java.lang.RuntimeException:<init>(java.lang.String,java.lang.Throwable)"
"M:kanzi.BitStreamException:<init>(java.lang.Throwable,int)",(O)java.lang.RuntimeException:<init>(java.lang.Throwable)
"M:kanzi.entropy.EntropyUtils$FreqSortData:<init>(int[],int)",(O)java.lang.Object:<init>()
M:kanzi.entropy.EntropyUtils$FreqSortData:compareTo(java.lang.Object),(M)kanzi.entropy.EntropyUtils$FreqSortData:compareTo(kanzi.entropy.EntropyUtils$FreqSortData)
M:kanzi.util.sort.BucketSort:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.BucketSort:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.util.sort.BucketSort:<init>(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.util.sort.BucketSort:<init>(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.app.InfoPrinter$Type:values(),(M)kanzi.app.InfoPrinter$Type[]:clone()
M:kanzi.app.InfoPrinter$Type:valueOf(java.lang.String),"(S)java.lang.Enum:valueOf(java.lang.Class,java.lang.String)"
"M:kanzi.app.InfoPrinter$Type:<init>(java.lang.String,int)","(O)java.lang.Enum:<init>(java.lang.String,int)"
M:kanzi.app.InfoPrinter$Type:<clinit>(),"(O)kanzi.app.InfoPrinter$Type:<init>(java.lang.String,int)"
M:kanzi.app.InfoPrinter$Type:<clinit>(),"(O)kanzi.app.InfoPrinter$Type:<init>(java.lang.String,int)"
M:kanzi.util.sort.SpreadSort$Bin:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.sort.SpreadSort$Bin:<init>(kanzi.util.sort.SpreadSort$1),(O)kanzi.util.sort.SpreadSort$Bin:<init>()
"M:kanzi.app.InfoPrinter:<init>(int,kanzi.app.InfoPrinter$Type,java.io.PrintStream)",(O)java.lang.Object:<init>()
"M:kanzi.app.InfoPrinter:<init>(int,kanzi.app.InfoPrinter$Type,java.io.PrintStream)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.app.InfoPrinter:<init>(int,kanzi.app.InfoPrinter$Type,java.io.PrintStream)",(O)java.util.concurrent.ConcurrentHashMap:<init>()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getId()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getType()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(O)kanzi.app.InfoPrinter$BlockInfo:<init>()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getTime()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getSize()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.Object)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getType()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getTime()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getSize()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getType()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getTime()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getSize()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getType()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getSize()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getTime()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Long:valueOf(long)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getHash()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getHash()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.lang.Integer:intValue()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(S)java.lang.Integer:toHexString(int)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.lang.StringBuilder:toString()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)kanzi.Event:getType()
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.Object)
M:kanzi.app.InfoPrinter:processEvent(kanzi.Event),(M)java.io.PrintStream:println(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(S)kanzi.app.BlockCompressor:getTransformAndCodec(int)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.String:split(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),"(S)java.lang.Math:min(int,int)"
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)kanzi.transform.TransformFactory:<init>()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)kanzi.transform.TransformFactory:getType(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)kanzi.transform.TransformFactory:getName(long)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(S)java.util.concurrent.Executors:newFixedThreadPool(int)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.util.ArrayList:<init>(int)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:size()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Map:keySet()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Set:iterator()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(I)java.util.Iterator:next()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:<init>(java.util.Map),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:dispose(),(I)java.util.concurrent.ExecutorService:shutdown()
M:kanzi.app.BlockCompressor:run(),(M)kanzi.app.BlockCompressor:call()
M:kanzi.app.BlockCompressor:call(),(O)java.util.ArrayList:<init>()
M:kanzi.app.BlockCompressor:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)"
M:kanzi.app.BlockCompressor:call(),(M)java.io.IOException:getMessage()
M:kanzi.app.BlockCompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:isEmpty()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:size()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(boolean)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(boolean)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),"(O)kanzi.app.InfoPrinter:<init>(int,kanzi.app.InfoPrinter$Type,java.io.PrintStream)"
M:kanzi.app.BlockCompressor:call(),(M)kanzi.app.BlockCompressor:addListener(kanzi.Listener)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockCompressor:call(),"(M)java.lang.String:substring(int,int)"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockCompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockCompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),(O)java.util.HashMap:<init>()
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:get(int)
M:kanzi.app.BlockCompressor:call(),(I)java.nio.file.Path:toString()
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:get(int)
M:kanzi.app.BlockCompressor:call(),(S)java.nio.file.Files:size(java.nio.file.Path)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:substring(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(O)kanzi.app.BlockCompressor$FileCompressTask:<init>(java.util.Map,java.util.List)"
M:kanzi.app.BlockCompressor:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:call()
M:kanzi.app.BlockCompressor:call(),"(O)java.util.concurrent.ArrayBlockingQueue:<init>(int,boolean)"
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.Global:computeJobsPerTask(int[],int,int)"
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.Global:sortFilesByPathAndSize(java.util.List,boolean)"
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockCompressor:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockCompressor:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockCompressor:call(),(I)java.nio.file.Path:toString()
M:kanzi.app.BlockCompressor:call(),(S)java.nio.file.Files:size(java.nio.file.Path)
M:kanzi.app.BlockCompressor:call(),(O)java.util.HashMap:<init>(java.util.Map)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.String:substring(int)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockCompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockCompressor:call(),"(O)kanzi.app.BlockCompressor$FileCompressTask:<init>(java.util.Map,java.util.List)"
M:kanzi.app.BlockCompressor:call(),(M)java.util.concurrent.ArrayBlockingQueue:offer(java.lang.Object)
M:kanzi.app.BlockCompressor:call(),(O)java.lang.RuntimeException:<init>(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(O)java.util.ArrayList:<init>(int)
M:kanzi.app.BlockCompressor:call(),(O)kanzi.app.BlockCompressor$FileCompressWorker:<init>(java.util.concurrent.ArrayBlockingQueue)
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:add(java.lang.Object)
M:kanzi.app.BlockCompressor:call(),(I)java.util.concurrent.ExecutorService:invokeAll(java.util.Collection)
M:kanzi.app.BlockCompressor:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockCompressor:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockCompressor:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockCompressor:call(),(I)java.util.concurrent.Future:get()
M:kanzi.app.BlockCompressor:call(),(M)java.util.concurrent.ArrayBlockingQueue:clear()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockCompressor:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(S)java.lang.String:valueOf(long)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockCompressor:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor:call(),"(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor:call(),(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)",(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor:addListener(kanzi.Listener),(I)java.util.List:add(java.lang.Object)
M:kanzi.app.BlockCompressor:removeListener(kanzi.Listener),(I)java.util.List:remove(java.lang.Object)
"M:kanzi.app.BlockCompressor:notifyListeners(kanzi.Listener[],kanzi.Event)",(I)kanzi.Listener:processEvent(kanzi.Event)
M:kanzi.app.BlockCompressor:call(),(M)kanzi.app.BlockCompressor:call()
"M:kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)","(S)kanzi.app.BlockCompressor:printOut(java.lang.String,boolean)"
"M:kanzi.io.CompressedOutputStream:<init>(java.io.OutputStream,java.util.Map)","(O)kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)"
"M:kanzi.io.CompressedOutputStream:<init>(java.io.OutputStream,java.util.Map)","(O)kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.io.OutputStream:<init>()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.Integer:intValue()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.Integer:intValue()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(S)kanzi.entropy.EntropyCodecFactory:getType(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)kanzi.transform.TransformFactory:<init>()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)kanzi.transform.TransformFactory:getType(java.lang.String)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(S)java.lang.Long:valueOf(long)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.Long:longValue()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(S)java.lang.Math:min(int,int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(I)java.util.Map:get(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(M)java.lang.Boolean:booleanValue()
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)kanzi.util.hash.XXHash32:<init>(int)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicBoolean:<init>(boolean)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicBoolean:<init>(boolean)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(O)kanzi.SliceByteArray:<init>(byte[],int,int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(O)kanzi.SliceByteArray:<init>(byte[],int,int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.util.concurrent.atomic.AtomicInteger:<init>(int)
"M:kanzi.io.CompressedOutputStream:<init>(kanzi.OutputBitStream,java.util.Map)",(O)java.util.ArrayList:<init>(int)
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:writeHeader(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:addListener(kanzi.Listener),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedOutputStream:removeListener(kanzi.Listener),(I)java.util.List:remove(java.lang.Object)
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)",(O)java.lang.IndexOutOfBoundsException:<init>()
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)",(O)kanzi.io.CompressedOutputStream:processBlock()
"M:kanzi.io.CompressedOutputStream:write(byte[],int,int)",(M)kanzi.io.CompressedOutputStream:write(int)
M:kanzi.io.CompressedOutputStream:write(int),"(S)java.lang.Math:min(int,int)"
M:kanzi.io.CompressedOutputStream:write(int),"(S)java.lang.Math:max(int,int)"
M:kanzi.io.CompressedOutputStream:write(int),(M)java.util.concurrent.atomic.AtomicBoolean:get()
M:kanzi.io.CompressedOutputStream:write(int),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:write(int),(O)kanzi.io.CompressedOutputStream:processBlock()
M:kanzi.io.CompressedOutputStream:write(int),(M)kanzi.BitStreamException:getMessage()
M:kanzi.io.CompressedOutputStream:write(int),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:write(int),(M)java.lang.Exception:getMessage()
M:kanzi.io.CompressedOutputStream:write(int),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:close(),(M)java.util.concurrent.atomic.AtomicBoolean:getAndSet(boolean)
M:kanzi.io.CompressedOutputStream:close(),(O)kanzi.io.CompressedOutputStream:processBlock()
M:kanzi.io.CompressedOutputStream:close(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:close(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.io.CompressedOutputStream:close(),(I)kanzi.OutputBitStream:close()
M:kanzi.io.CompressedOutputStream:close(),(M)kanzi.BitStreamException:getMessage()
M:kanzi.io.CompressedOutputStream:close(),(M)kanzi.BitStreamException:getErrorCode()
M:kanzi.io.CompressedOutputStream:close(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:close(),(I)java.util.List:clear()
M:kanzi.io.CompressedOutputStream:close(),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.io.CompressedOutputStream:processBlock(),(M)java.util.concurrent.atomic.AtomicBoolean:getAndSet(boolean)
M:kanzi.io.CompressedOutputStream:processBlock(),(M)kanzi.io.CompressedOutputStream:writeHeader()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:size()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.io.CompressedOutputStream:processBlock(),"(S)java.lang.Math:min(int,int)"
M:kanzi.io.CompressedOutputStream:processBlock(),"(S)kanzi.Global:computeJobsPerTask(int[],int,int)"
M:kanzi.io.CompressedOutputStream:processBlock(),(O)java.util.ArrayList:<init>(int)
M:kanzi.io.CompressedOutputStream:processBlock(),(M)java.util.concurrent.atomic.AtomicInteger:get()
M:kanzi.io.CompressedOutputStream:processBlock(),(O)java.util.HashMap:<init>(java.util.Map)
M:kanzi.io.CompressedOutputStream:processBlock(),(S)java.lang.Integer:valueOf(int)
M:kanzi.io.CompressedOutputStream:processBlock(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.io.CompressedOutputStream:processBlock(),"(O)kanzi.io.CompressedOutputStream$EncodingTask:<init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int,kanzi.OutputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],java.util.Map)"
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:add(java.lang.Object)
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:size()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:get(int)
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.concurrent.Callable:call()
M:kanzi.io.CompressedOutputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.concurrent.ExecutorService:invokeAll(java.util.Collection)
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.List:iterator()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.Iterator:hasNext()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.Iterator:next()
M:kanzi.io.CompressedOutputStream:processBlock(),(I)java.util.concurrent.Future:get()
M:kanzi.io.CompressedOutputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:processBlock(),(M)kanzi.BitStreamException:getErrorCode()
M:kanzi.io.CompressedOutputStream:processBlock(),(M)java.lang.Exception:getMessage()
M:kanzi.io.CompressedOutputStream:processBlock(),"(O)kanzi.io.IOException:<init>(java.lang.String,int)"
M:kanzi.io.CompressedOutputStream:getWritten(),(I)kanzi.OutputBitStream:written()
"M:kanzi.io.CompressedOutputStream:notifyListeners(kanzi.Listener[],kanzi.Event)",(I)kanzi.Listener:processEvent(kanzi.Event)
M:kanzi.util.sort.ForkJoinParallelSort:<init>(java.util.concurrent.ForkJoinPool),(O)java.lang.Object:<init>()
M:kanzi.util.sort.ForkJoinParallelSort:<init>(java.util.concurrent.ForkJoinPool),(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.util.sort.ForkJoinParallelSort:sort(int[],int,int)","(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(int[],int,int)"
"M:kanzi.util.sort.ForkJoinParallelSort:sort(int[],int,int)",(M)java.util.concurrent.ForkJoinPool:invoke(java.util.concurrent.ForkJoinTask)
"M:kanzi.util.sort.ForkJoinParallelSort:sort(byte[],int,int)","(O)kanzi.util.sort.ForkJoinParallelSort$SortTask:<init>(byte[],int,int)"
"M:kanzi.util.sort.ForkJoinParallelSort:sort(byte[],int,int)",(M)java.util.concurrent.ForkJoinPool:invoke(java.util.concurrent.ForkJoinTask)
"M:kanzi.app.BlockCompressor$FileCompressTask:<init>(java.util.Map,java.util.List)",(O)java.lang.Object:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)kanzi.io.NullOutputStream:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.io.File:<init>(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.File:exists()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.File:isDirectory()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.nio.file.Path:toAbsolutePath()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.nio.file.Path:toAbsolutePath()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.nio.file.Path:equals(java.lang.Object)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.io.FileOutputStream:<init>(java.io.File)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.nio.file.Path:getParent()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)java.nio.file.Files:createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.io.FileOutputStream:<init>(java.io.File)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.io.CompressedOutputStream:<init>(java.io.OutputStream,java.util.Map)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:addListener(kanzi.Listener)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.io.FileInputStream:<init>(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(M)java.io.InputStream:read(byte[],int,int)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:dispose()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(M)kanzi.io.CompressedOutputStream:write(byte[],int,int)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:dispose()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.IOException:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.IOException:getErrorCode()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:dispose()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:dispose()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:dispose()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.String:valueOf(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(S)kanzi.app.BlockCompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.io.CompressedOutputStream:getWritten()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressTask:dispose(),(M)java.io.InputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:dispose(),(M)kanzi.io.CompressedOutputStream:close()
M:kanzi.app.BlockCompressor$FileCompressTask:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:call()
M:kanzi.util.sort.QuickSort:<init>(),(O)kanzi.util.sort.QuickSort:<init>(kanzi.ArrayComparator)
M:kanzi.util.sort.QuickSort:<init>(kanzi.ArrayComparator),(O)java.lang.Object:<init>()
"M:kanzi.util.sort.QuickSort:sort(int[],int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:sort(int[],int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:nanoInsertionSort(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:heapSort(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:mergingSort(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int)"
"M:kanzi.util.sort.QuickSort:heapSort(int[],int,int)","(S)kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int)"
"M:kanzi.util.sort.QuickSort:heapSort(int[],int,int)","(S)kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int)","(S)kanzi.util.sort.QuickSort:merge(int[],int,int[],int,int,int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:nanoInsertionSort(int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:heapSort(int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:recursiveSort(int[],int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:nanoInsertionSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:pairInsertionSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:heapSort(int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:heapSort(int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:pushDown(int[],int,int,int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:swap(int[],int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
"M:kanzi.util.sort.QuickSort:mergingSort(int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:merge(int[],int[],boolean,int,int[],int,int,kanzi.ArrayComparator)","(S)kanzi.util.sort.QuickSort:merge(int[],int,int[],int,int,int[],int,int,kanzi.ArrayComparator)"
"M:kanzi.util.sort.QuickSort:merge(int[],int,int[],int,int,int[],int,int,kanzi.ArrayComparator)","(I)kanzi.ArrayComparator:compare(int,int)"
M:kanzi.app.InfoPrinter$BlockInfo:<init>(),(O)java.lang.Object:<init>()
M:kanzi.Global$DataType:values(),(M)kanzi.Global$DataType[]:clone()
M:kanzi.Global$DataType:valueOf(java.lang.String),"(S)java.lang.Enum:valueOf(java.lang.Class,java.lang.String)"
"M:kanzi.Global$DataType:<init>(java.lang.String,int)","(O)java.lang.Enum:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
M:kanzi.Global$DataType:<clinit>(),"(O)kanzi.Global$DataType:<init>(java.lang.String,int)"
"M:kanzi.app.BlockDecompressor$FileDecompressTask:<init>(java.util.Map,java.util.List)",(O)java.lang.Object:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)kanzi.io.NullOutputStream:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.io.File:<init>(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.File:exists()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.File:isDirectory()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.nio.file.Path:toAbsolutePath()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.nio.file.Path:toAbsolutePath()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.nio.file.Path:equals(java.lang.Object)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.io.FileOutputStream:<init>(java.io.File)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.nio.file.FileSystems:getDefault()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(M)java.nio.file.FileSystem:getPath(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.nio.file.Path:getParent()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)java.nio.file.Files:createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.io.FileOutputStream:<init>(java.io.File)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.io.File:<init>(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.io.FileInputStream:<init>(java.io.File)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.io.CompressedInputStream:<init>(java.io.InputStream,java.util.Map)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:addListener(kanzi.Listener)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(M)kanzi.io.CompressedInputStream:read(byte[],int,int)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(M)java.io.OutputStream:write(byte[],int,int)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.IOException:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.IOException:getErrorCode()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:dispose()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.io.InputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.Event:<init>(kanzi.Event$Type,int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(I)java.util.List:toArray(java.lang.Object[])
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.String:valueOf(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.io.CompressedInputStream:getRead()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(S)kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressTask:dispose(),(M)kanzi.io.CompressedInputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:dispose(),(M)java.io.OutputStream:close()
M:kanzi.app.BlockDecompressor$FileDecompressTask:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:call()
M:kanzi.Global$1:<init>(boolean),(O)java.lang.Object:<init>()
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(I)java.nio.file.Path:compareTo(java.nio.file.Path)
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(I)java.nio.file.Path:getParent()
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(I)java.nio.file.Path:getParent()
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(I)java.nio.file.Path:compareTo(java.nio.file.Path)
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(S)java.nio.file.Files:size(java.nio.file.Path)
"M:kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)",(S)java.nio.file.Files:size(java.nio.file.Path)
"M:kanzi.Global$1:compare(java.lang.Object,java.lang.Object)","(M)kanzi.Global$1:compare(java.nio.file.Path,java.nio.file.Path)"
M:kanzi.io.NullOutputStream:<init>(),(O)java.io.OutputStream:<init>()
M:kanzi.util.IntBTree$IntBTNode:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressWorker:<init>(java.util.concurrent.ArrayBlockingQueue),(O)java.lang.Object:<init>()
M:kanzi.app.BlockDecompressor$FileDecompressWorker:call(),(M)java.util.concurrent.ArrayBlockingQueue:poll()
M:kanzi.app.BlockDecompressor$FileDecompressWorker:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:call()
M:kanzi.app.BlockDecompressor$FileDecompressWorker:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressResult:<init>(int,long)"
M:kanzi.app.BlockDecompressor$FileDecompressWorker:call(),(M)kanzi.app.BlockDecompressor$FileDecompressWorker:call()
M:kanzi.util.LyndonWords:<init>(),(O)java.lang.Object:<init>()
M:kanzi.util.LyndonWords:<init>(),(O)java.util.ArrayList:<init>()
"M:kanzi.util.LyndonWords:chenFoxLyndonBreakpoints(byte[],int)",(I)java.util.List:clear()
"M:kanzi.util.LyndonWords:chenFoxLyndonBreakpoints(byte[],int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.util.LyndonWords:chenFoxLyndonBreakpoints(byte[],int)",(I)java.util.List:add(java.lang.Object)
M:kanzi.util.LyndonWords:split(java.lang.String),"(M)kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)"
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(M)java.lang.String:getBytes()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(M)java.lang.String:getBytes(java.nio.charset.Charset)
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(M)java.lang.String:length()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)","(O)kanzi.util.LyndonWords:chenFoxLyndonBreakpoints(byte[],int)"
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(I)java.util.List:size()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(I)java.util.List:iterator()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(I)java.util.Iterator:hasNext()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(I)java.util.Iterator:next()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)",(M)java.lang.Integer:intValue()
"M:kanzi.util.LyndonWords:split(java.lang.String,java.nio.charset.Charset)","(M)java.lang.String:substring(int,int)"
M:kanzi.util.LyndonWords:getPositions(java.lang.String),"(M)kanzi.util.LyndonWords:getPositions(java.lang.String,java.nio.charset.Charset)"
"M:kanzi.util.LyndonWords:getPositions(java.lang.String,java.nio.charset.Charset)",(M)java.lang.String:getBytes()
"M:kanzi.util.LyndonWords:getPositions(java.lang.String,java.nio.charset.Charset)",(M)java.lang.String:getBytes(java.nio.charset.Charset)
"M:kanzi.util.LyndonWords:getPositions(java.lang.String,java.nio.charset.Charset)","(M)kanzi.util.LyndonWords:getPositions(byte[],int)"
"M:kanzi.util.LyndonWords:getPositions(byte[],int)","(O)kanzi.util.LyndonWords:chenFoxLyndonBreakpoints(byte[],int)"
"M:kanzi.util.LyndonWords:getPositions(byte[],int)",(I)java.util.List:size()
"M:kanzi.util.LyndonWords:getPositions(byte[],int)",(I)java.util.List:iterator()
"M:kanzi.util.LyndonWords:getPositions(byte[],int)",(I)java.util.Iterator:hasNext()
"M:kanzi.util.LyndonWords:getPositions(byte[],int)",(I)java.util.Iterator:next()
"M:kanzi.util.LyndonWords:getPositions(byte[],int)",(M)java.lang.Integer:intValue()
M:kanzi.util.LyndonWords:main(java.lang.String[]),(O)kanzi.util.LyndonWords:<init>()
M:kanzi.util.LyndonWords:main(java.lang.String[]),(M)kanzi.util.LyndonWords:split(java.lang.String)
M:kanzi.util.LyndonWords:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:<init>(),(O)java.lang.Object:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)java.util.HashMap:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),"(S)kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)"
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(I)java.util.Map:containsKey(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Character:charValue()
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)kanzi.app.BlockCompressor:<init>(java.util.Map)
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Exception:getMessage()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)kanzi.app.BlockCompressor:call()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Integer:intValue()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)kanzi.app.BlockCompressor:dispose()
M:kanzi.app.Kanzi:main(java.lang.String[]),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Exception:getMessage()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)kanzi.app.BlockDecompressor:<init>(java.util.Map)
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Exception:getMessage()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)kanzi.app.BlockDecompressor:call()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Integer:intValue()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)kanzi.app.BlockDecompressor:dispose()
M:kanzi.app.Kanzi:main(java.lang.String[]),(I)java.util.Map:get(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.app.Kanzi:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.Exception:getMessage()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
M:kanzi.app.Kanzi:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.Kanzi:main(java.lang.String[]),(S)java.lang.System:exit(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.NumberFormatException:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equalsIgnoreCase(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)kanzi.app.Kanzi:printHelp(char)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)kanzi.app.Kanzi:printHelp(char)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:charAt(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:charAt(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(M)java.lang.String:substring(int,int)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:toUpperCase()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:charAt(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(M)java.lang.String:substring(int,int)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(M)java.lang.String:substring(int,int)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(M)java.lang.String:substring(int,int)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.NumberFormatException:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.String:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.NumberFormatException:<init>(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.NumberFormatException:getMessage()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:substring(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:trim()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:parseInt(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.NumberFormatException:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Character:valueOf(char)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Boolean:valueOf(boolean)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Boolean:valueOf(boolean)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Boolean:valueOf(boolean)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.Kanzi:processCommandLine(java.lang.String[],java.util.Map)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.Kanzi:printHelp(char),(M)java.lang.StringBuilder:toString()
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
M:kanzi.app.Kanzi:printHelp(char),"(S)kanzi.app.Kanzi:printOut(java.lang.String,boolean)"
"M:kanzi.app.Kanzi:printOut(java.lang.String,boolean)",(M)java.io.PrintStream:println(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:exists(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.io.IOException:<init>(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(S)java.nio.file.Files:isHidden(java.nio.file.Path)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.io.IOException:<init>(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.String:charAt(int)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.util.List:add(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.io.IOException:<init>(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.Path:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.String:endsWith(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.String:endsWith(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.StringBuilder:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.String:length()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(M)java.lang.String:substring(int,int)"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(S)java.nio.file.Files:newDirectoryStream(java.nio.file.Path)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.DirectoryStream:iterator()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.util.Iterator:hasNext()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.util.Iterator:next()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:exists(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(S)java.nio.file.Files:isHidden(java.nio.file.Path)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.Path:getFileName()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(S)java.lang.String:valueOf(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.String:startsWith(java.lang.String)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.util.List:add(java.lang.Object)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.Path:toString()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)","(S)kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)"
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.DirectoryStream:close()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(I)java.nio.file.DirectoryStream:close()
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.lang.Throwable:addSuppressed(java.lang.Throwable)
"M:kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)",(M)java.nio.file.DirectoryIteratorException:getCause()
"M:kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.bitstream.DefaultInputBitStream:readBit(),(O)kanzi.bitstream.DefaultInputBitStream:pullCurrent()
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),(M)kanzi.bitstream.DefaultInputBitStream:isClosed()
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),"(M)java.io.InputStream:read(byte[],int,int)"
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),(M)java.io.IOException:getMessage()
M:kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.bitstream.DefaultInputBitStream:readBits(int),(O)kanzi.bitstream.DefaultInputBitStream:pullCurrent()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DefaultInputBitStream:isClosed()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:append(long)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(O)kanzi.bitstream.DefaultInputBitStream:pullCurrent()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(O)kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(O)kanzi.bitstream.DefaultInputBitStream:pullCurrent()
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)","(S)kanzi.Memory$BigEndian:writeLong64(byte[],int,long)"
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.bitstream.DefaultInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
M:kanzi.bitstream.DefaultInputBitStream:pullCurrent(),(O)kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int)
M:kanzi.bitstream.DefaultInputBitStream:pullCurrent(),"(S)kanzi.Memory$BigEndian:readLong64(byte[],int)"
M:kanzi.bitstream.DefaultInputBitStream:close(),(M)kanzi.bitstream.DefaultInputBitStream:isClosed()
M:kanzi.bitstream.DefaultInputBitStream:hasMoreToRead(),(M)kanzi.bitstream.DefaultInputBitStream:isClosed()
M:kanzi.bitstream.DefaultInputBitStream:hasMoreToRead(),(O)kanzi.bitstream.DefaultInputBitStream:readFromInputStream(int)
M:kanzi.app.BlockCompressor$FileCompressWorker:<init>(java.util.concurrent.ArrayBlockingQueue),(O)java.lang.Object:<init>()
M:kanzi.app.BlockCompressor$FileCompressWorker:call(),(M)java.util.concurrent.ArrayBlockingQueue:poll()
M:kanzi.app.BlockCompressor$FileCompressWorker:call(),(M)kanzi.app.BlockCompressor$FileCompressTask:call()
M:kanzi.app.BlockCompressor$FileCompressWorker:call(),"(O)kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)"
M:kanzi.app.BlockCompressor$FileCompressWorker:call(),(M)kanzi.app.BlockCompressor$FileCompressWorker:call()
"M:kanzi.app.BlockCompressor$FileCompressResult:<init>(int,long,long)",(O)java.lang.Object:<init>()
"M:kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)",(O)java.lang.Object:<init>()
"M:kanzi.io.CompressedOutputStream$EncodingTask:<init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int,kanzi.OutputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],java.util.Map)",(O)java.lang.Object:<init>()
M:kanzi.io.CompressedOutputStream$EncodingTask:call(),"(O)kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.util.hash.XXHash32:hash(byte[],int,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.io.CompressedOutputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)java.lang.Boolean:valueOf(boolean)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.Boolean:booleanValue()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.Global:computeFirstOrderEntropy1024(int,int[])"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(O)kanzi.transform.TransformFactory:<init>()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.transform.TransformFactory:newFunction(java.util.Map,long)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.transform.Sequence:getMaxEncodedLength(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.transform.Sequence:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)kanzi.Global:log2(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.io.CompressedOutputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.transform.Sequence:getNbFunctions()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.transform.Sequence:getSkipFlags()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.transform.Sequence:getSkipFlags()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.io.CompressedOutputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(O)kanzi.entropy.EntropyCodecFactory:<init>()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(M)kanzi.entropy.EntropyCodecFactory:newEncoder(kanzi.OutputBitStream,java.util.Map,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)kanzi.EntropyEncoder:encode(byte[],int,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.bitstream.DefaultOutputBitStream:close()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)kanzi.bitstream.DefaultOutputBitStream:written()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)java.lang.Thread:onSpinWait()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)kanzi.io.CompressedOutputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(S)kanzi.Global:log2(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)java.lang.Math:min(long,long)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(S)java.lang.Math:min(long,long)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.Exception:getMessage()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)","(O)kanzi.io.CompressedOutputStream$Status:<init>(int,int,java.lang.String)"
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedOutputStream$EncodingTask:encodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int)",(I)kanzi.EntropyEncoder:dispose()
M:kanzi.io.CompressedOutputStream$EncodingTask:call(),(M)kanzi.io.CompressedOutputStream$EncodingTask:call()
"M:kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.bitstream.DefaultOutputBitStream:writeBit(int),(O)kanzi.bitstream.DefaultOutputBitStream:pushCurrent()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)",(O)kanzi.bitstream.DefaultOutputBitStream:pushCurrent()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DefaultOutputBitStream:isClosed()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:append(long)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(O)kanzi.bitstream.DefaultOutputBitStream:flush()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(S)kanzi.Memory$BigEndian:readLong64(byte[],int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)",(O)kanzi.bitstream.DefaultOutputBitStream:pushCurrent()
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
"M:kanzi.bitstream.DefaultOutputBitStream:writeBits(byte[],int,int)","(M)kanzi.bitstream.DefaultOutputBitStream:writeBits(long,int)"
M:kanzi.bitstream.DefaultOutputBitStream:pushCurrent(),"(S)kanzi.Memory$BigEndian:writeLong64(byte[],int,long)"
M:kanzi.bitstream.DefaultOutputBitStream:pushCurrent(),(O)kanzi.bitstream.DefaultOutputBitStream:flush()
M:kanzi.bitstream.DefaultOutputBitStream:flush(),(M)kanzi.bitstream.DefaultOutputBitStream:isClosed()
M:kanzi.bitstream.DefaultOutputBitStream:flush(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.bitstream.DefaultOutputBitStream:flush(),"(M)java.io.OutputStream:write(byte[],int,int)"
M:kanzi.bitstream.DefaultOutputBitStream:flush(),(M)java.io.IOException:getMessage()
M:kanzi.bitstream.DefaultOutputBitStream:flush(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.bitstream.DefaultOutputBitStream:close(),(M)kanzi.bitstream.DefaultOutputBitStream:isClosed()
M:kanzi.bitstream.DefaultOutputBitStream:close(),(O)kanzi.bitstream.DefaultOutputBitStream:flush()
M:kanzi.bitstream.DefaultOutputBitStream:close(),(M)java.io.OutputStream:flush()
M:kanzi.bitstream.DefaultOutputBitStream:close(),"(O)kanzi.BitStreamException:<init>(java.lang.Throwable,int)"
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:containsKey(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:containsKey(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:remove(java.lang.Object)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(S)java.util.concurrent.Executors:newFixedThreadPool(int)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(O)java.util.ArrayList:<init>(int)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:size()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Map:keySet()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Set:iterator()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(I)java.util.Iterator:next()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:<init>(java.util.Map),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:dispose(),(I)java.util.concurrent.ExecutorService:shutdown()
M:kanzi.app.BlockDecompressor:run(),(M)kanzi.app.BlockDecompressor:call()
M:kanzi.app.BlockDecompressor:call(),(O)java.util.ArrayList:<init>()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.Kanzi:createFileList(java.lang.String,java.util.List)"
M:kanzi.app.BlockDecompressor:call(),(M)java.io.IOException:getMessage()
M:kanzi.app.BlockDecompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:isEmpty()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:size()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(boolean)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),"(O)kanzi.app.InfoPrinter:<init>(int,kanzi.app.InfoPrinter$Type,java.io.PrintStream)"
M:kanzi.app.BlockDecompressor:call(),(M)kanzi.app.BlockDecompressor:addListener(kanzi.Listener)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockDecompressor:call(),"(M)java.lang.String:substring(int,int)"
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockDecompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:endsWith(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Paths:get(java.lang.String,java.lang.String[])"
M:kanzi.app.BlockDecompressor:call(),"(S)java.nio.file.Files:isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])"
M:kanzi.app.BlockDecompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),(O)java.util.HashMap:<init>()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:get(int)
M:kanzi.app.BlockDecompressor:call(),(I)java.nio.file.Path:toString()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:get(int)
M:kanzi.app.BlockDecompressor:call(),(S)java.nio.file.Files:size(java.nio.file.Path)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:substring(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressTask:<init>(java.util.Map,java.util.List)"
M:kanzi.app.BlockDecompressor:call(),(M)kanzi.app.BlockDecompressor$FileDecompressTask:call()
M:kanzi.app.BlockDecompressor:call(),"(O)java.util.concurrent.ArrayBlockingQueue:<init>(int,boolean)"
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.Global:computeJobsPerTask(int[],int,int)"
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.Global:sortFilesByPathAndSize(java.util.List,boolean)"
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockDecompressor:call(),(I)java.nio.file.Path:toString()
M:kanzi.app.BlockDecompressor:call(),(S)java.nio.file.Files:size(java.nio.file.Path)
M:kanzi.app.BlockDecompressor:call(),(O)java.util.HashMap:<init>(java.util.Map)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:length()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.String:substring(int)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Long:valueOf(long)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.app.BlockDecompressor:call(),"(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.app.BlockDecompressor:call(),"(O)kanzi.app.BlockDecompressor$FileDecompressTask:<init>(java.util.Map,java.util.List)"
M:kanzi.app.BlockDecompressor:call(),(M)java.util.concurrent.ArrayBlockingQueue:offer(java.lang.Object)
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.RuntimeException:<init>(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(O)java.util.ArrayList:<init>(int)
M:kanzi.app.BlockDecompressor:call(),(O)kanzi.app.BlockDecompressor$FileDecompressWorker:<init>(java.util.concurrent.ArrayBlockingQueue)
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:add(java.lang.Object)
M:kanzi.app.BlockDecompressor:call(),(I)java.util.concurrent.ExecutorService:invokeAll(java.util.Collection)
M:kanzi.app.BlockDecompressor:call(),(I)java.util.List:iterator()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.Iterator:hasNext()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.Iterator:next()
M:kanzi.app.BlockDecompressor:call(),(I)java.util.concurrent.Future:get()
M:kanzi.app.BlockDecompressor:call(),(M)java.util.concurrent.ArrayBlockingQueue:clear()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.Exception:getMessage()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.System:nanoTime()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Float:valueOf(float)
M:kanzi.app.BlockDecompressor:call(),"(S)java.lang.String:format(java.lang.String,java.lang.Object[])"
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.String:valueOf(long)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(O)java.lang.StringBuilder:<init>()
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(long)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.app.BlockDecompressor:call(),(M)java.lang.StringBuilder:toString()
M:kanzi.app.BlockDecompressor:call(),"(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.app.BlockDecompressor:call(),(S)java.lang.Integer:valueOf(int)
"M:kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)",(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.app.BlockDecompressor:addListener(kanzi.Listener),(I)java.util.List:add(java.lang.Object)
M:kanzi.app.BlockDecompressor:removeListener(kanzi.Listener),(I)java.util.List:remove(java.lang.Object)
"M:kanzi.app.BlockDecompressor:notifyListeners(kanzi.Listener[],kanzi.Event)",(I)kanzi.Listener:processEvent(kanzi.Event)
M:kanzi.app.BlockDecompressor:call(),(M)kanzi.app.BlockDecompressor:call()
"M:kanzi.app.BlockDecompressor:access$000(java.lang.String,boolean)","(S)kanzi.app.BlockDecompressor:printOut(java.lang.String,boolean)"
M:kanzi.Memory$LittleEndian:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$700()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$600()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$500()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$400()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$300()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$200()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$100()
"M:kanzi.Memory$LittleEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$000()
"M:kanzi.Memory$LittleEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$1100()
"M:kanzi.Memory$LittleEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$1000()
"M:kanzi.Memory$LittleEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$900()
"M:kanzi.Memory$LittleEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$800()
"M:kanzi.Memory$LittleEndian:readInt16(byte[],int)",(S)kanzi.Memory:access$1300()
"M:kanzi.Memory$LittleEndian:readInt16(byte[],int)",(S)kanzi.Memory:access$1200()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$000()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$100()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$200()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$300()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$400()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$500()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$600()
"M:kanzi.Memory$LittleEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$700()
"M:kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$800()
"M:kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$900()
"M:kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$1000()
"M:kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$1100()
"M:kanzi.Memory$LittleEndian:writeInt16(byte[],int,int)",(S)kanzi.Memory:access$1200()
"M:kanzi.Memory$LittleEndian:writeInt16(byte[],int,int)",(S)kanzi.Memory:access$1300()
M:kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream),"(O)kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream,int)"
"M:kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream)","(O)kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream,int)"
"M:kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:<init>(kanzi.OutputBitStream,java.io.PrintStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugOutputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:showByte()
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)java.io.PrintStream:println()
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:showByte()
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:showByte()
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:writeBit(int),(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)java.io.PrintStream:println()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(long,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)java.io.PrintStream:println()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:showByte()
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)kanzi.bitstream.DebugOutputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugOutputBitStream:writeBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugOutputBitStream:close(),(I)kanzi.OutputBitStream:close()
M:kanzi.bitstream.DebugOutputBitStream:written(),(I)kanzi.OutputBitStream:written()
M:kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream),"(O)kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream,int)"
"M:kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream)","(O)kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream,int)"
"M:kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.bitstream.DebugInputBitStream:<init>(kanzi.InputBitStream,java.io.PrintStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(O)java.lang.StringBuilder:<init>()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(int)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.lang.StringBuilder:toString()
M:kanzi.bitstream.DebugInputBitStream:printByte(byte),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(I)kanzi.InputBitStream:readBit()
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)java.io.PrintStream:println()
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBit(),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)java.io.PrintStream:println()
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:showByte()
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
M:kanzi.bitstream.DebugInputBitStream:readBits(int),(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:showByte()
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)java.io.PrintStream:println()
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:showByte()
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:showByte()
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)kanzi.bitstream.DebugInputBitStream:printByte(byte)
"M:kanzi.bitstream.DebugInputBitStream:readBits(byte[],int,int)",(M)java.io.PrintStream:print(java.lang.String)
M:kanzi.bitstream.DebugInputBitStream:close(),(I)kanzi.InputBitStream:close()
M:kanzi.bitstream.DebugInputBitStream:read(),(I)kanzi.InputBitStream:read()
M:kanzi.bitstream.DebugInputBitStream:hasMoreToRead(),(I)kanzi.InputBitStream:hasMoreToRead()
"M:kanzi.io.CompressedInputStream$DecodingTask:<init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,long,int,int,kanzi.InputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],java.util.Map)",(O)java.lang.Object:<init>()
M:kanzi.io.CompressedInputStream$DecodingTask:call(),"(O)kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Thread:onSpinWait()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.Integer:intValue()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.Integer:intValue()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String,boolean)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)java.io.ByteArrayInputStream:<init>(byte[],int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:readBits(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(O)kanzi.entropy.EntropyCodecFactory:<init>()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(M)kanzi.entropy.EntropyCodecFactory:newDecoder(kanzi.InputBitStream,java.util.Map,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(I)kanzi.EntropyDecoder:decode(byte[],int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:close()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.bitstream.DefaultInputBitStream:read()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(S)kanzi.io.CompressedInputStream:notifyListeners(kanzi.Listener[],kanzi.Event)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(O)kanzi.transform.TransformFactory:<init>()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(M)kanzi.transform.TransformFactory:newFunction(java.util.Map,long)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)kanzi.transform.Sequence:setSkipFlags(byte)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(M)kanzi.transform.Sequence:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(M)kanzi.util.hash.XXHash32:hash(byte[],int,int)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Integer:toHexString(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(S)java.lang.Integer:toHexString(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:set(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.Exception:getMessage()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)","(O)kanzi.io.CompressedInputStream$Status:<init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)"
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:get()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(M)java.util.concurrent.atomic.AtomicInteger:incrementAndGet()
"M:kanzi.io.CompressedInputStream$DecodingTask:decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,long,int,int)",(I)kanzi.EntropyDecoder:dispose()
M:kanzi.io.CompressedInputStream$DecodingTask:call(),(M)kanzi.io.CompressedInputStream$DecodingTask:call()
M:kanzi.Memory$BigEndian:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$000()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$100()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$200()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$300()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$400()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$500()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$600()
"M:kanzi.Memory$BigEndian:readLong64(byte[],int)",(S)kanzi.Memory:access$700()
"M:kanzi.Memory$BigEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$800()
"M:kanzi.Memory$BigEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$900()
"M:kanzi.Memory$BigEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$1000()
"M:kanzi.Memory$BigEndian:readInt32(byte[],int)",(S)kanzi.Memory:access$1100()
"M:kanzi.Memory$BigEndian:readInt16(byte[],int)",(S)kanzi.Memory:access$1200()
"M:kanzi.Memory$BigEndian:readInt16(byte[],int)",(S)kanzi.Memory:access$1300()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$700()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$600()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$500()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$400()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$300()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$200()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$100()
"M:kanzi.Memory$BigEndian:writeLong64(byte[],int,long)",(S)kanzi.Memory:access$000()
"M:kanzi.Memory$BigEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$1100()
"M:kanzi.Memory$BigEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$1000()
"M:kanzi.Memory$BigEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$900()
"M:kanzi.Memory$BigEndian:writeInt32(byte[],int,int)",(S)kanzi.Memory:access$800()
"M:kanzi.Memory$BigEndian:writeInt16(byte[],int,int)",(S)kanzi.Memory:access$1300()
"M:kanzi.Memory$BigEndian:writeInt16(byte[],int,int)",(S)kanzi.Memory:access$1200()
M:kanzi.SliceIntArray:<init>(),"(O)kanzi.SliceIntArray:<init>(int[],int,int)"
"M:kanzi.SliceIntArray:<init>(int[],int)",(O)java.lang.Object:<init>()
"M:kanzi.SliceIntArray:<init>(int[],int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceIntArray:<init>(int[],int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceIntArray:<init>(int[],int,int)",(O)java.lang.Object:<init>()
"M:kanzi.SliceIntArray:<init>(int[],int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceIntArray:<init>(int[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.SliceIntArray:<init>(int[],int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.SliceIntArray:hashCode(),(S)java.util.Objects:hashCode(java.lang.Object)
M:kanzi.SliceIntArray:toString(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceIntArray:toString(),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceIntArray:toString(),(M)java.lang.StringBuilder:toString()
M:kanzi.Global:<init>(),(O)java.lang.Object:<init>()
M:kanzi.Global:squash(int),(S)kanzi.Global:positiveOrNull(int)
M:kanzi.Global:initStretch(),(S)kanzi.Global:squash(int)
M:kanzi.Global:tenLog10(int),(O)java.lang.ArithmeticException:<init>(java.lang.String)
M:kanzi.Global:tenLog10(int),(S)kanzi.Global:log2_1024(int)
M:kanzi.Global:log2(int),(O)java.lang.ArithmeticException:<init>(java.lang.String)
M:kanzi.Global:log2(int),(S)java.lang.Integer:numberOfLeadingZeros(int)
M:kanzi.Global:log2_1024(int),(O)java.lang.ArithmeticException:<init>(java.lang.String)
M:kanzi.Global:log2_1024(int),(S)java.lang.Integer:numberOfLeadingZeros(int)
M:kanzi.Global:clip0_255(int),(S)kanzi.Global:positiveOrNull(int)
M:kanzi.Global:sqrt(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.Global:decodePair(int,int[])",(S)kanzi.Global:sqrt(int)
"M:kanzi.Global:computeFirstOrderEntropy1024(int,int[])",(S)kanzi.Global:log2_1024(int)
"M:kanzi.Global:computeFirstOrderEntropy1024(int,int[])",(S)kanzi.Global:log2_1024(int)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.Global:computeJobsPerTask(int[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.Global:computeJobsPerTask(int[],int,int)","(S)java.util.Arrays:fill(int[],int)"
"M:kanzi.Global:sortFilesByPathAndSize(java.util.List,boolean)",(O)kanzi.Global$1:<init>(boolean)
"M:kanzi.Global:sortFilesByPathAndSize(java.util.List,boolean)","(S)java.util.Collections:sort(java.util.List,java.util.Comparator)"
M:kanzi.Global:<clinit>(),(S)kanzi.Global:initSquash()
M:kanzi.Global:<clinit>(),(S)kanzi.Global:initStretch()
M:kanzi.SliceByteArray:<init>(),"(O)kanzi.SliceByteArray:<init>(byte[],int,int)"
"M:kanzi.SliceByteArray:<init>(byte[],int)",(O)java.lang.Object:<init>()
"M:kanzi.SliceByteArray:<init>(byte[],int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceByteArray:<init>(byte[],int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceByteArray:<init>(byte[],int,int)",(O)java.lang.Object:<init>()
"M:kanzi.SliceByteArray:<init>(byte[],int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.SliceByteArray:<init>(byte[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.SliceByteArray:<init>(byte[],int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.SliceByteArray:hashCode(),(S)java.util.Objects:hashCode(java.lang.Object)
M:kanzi.SliceByteArray:toString(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceByteArray:toString(),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.SliceByteArray:toString(),(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.ROLZCodec$ROLZEncoder:<init>(int,int,kanzi.SliceByteArray)",(O)java.lang.Object:<init>()
"M:kanzi.transform.ROLZCodec$ROLZEncoder:<init>(int,int,kanzi.SliceByteArray)",(O)kanzi.transform.ROLZCodec$ROLZEncoder:reset()
"M:kanzi.transform.ROLZCodec$ROLZEncoder:encodeBits(int,int)",(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encode9Bits(int),(M)kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int)
M:kanzi.transform.ROLZCodec$ROLZEncoder:encodeBit(int),"(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
M:kanzi.transform.LZCodec$LZXCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.LZCodec$LZXCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.LZCodec$LZXCodec:<init>(java.util.Map),(S)java.lang.Short:valueOf(short)
M:kanzi.transform.LZCodec$LZXCodec:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.LZCodec$LZXCodec:<init>(java.util.Map),(M)java.lang.Short:shortValue()
"M:kanzi.transform.LZCodec$LZXCodec:findMatch(byte[],int,int,int)","(S)kanzi.transform.LZCodec:access$000(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.LZCodec$LZXCodec:getMaxEncodedLength(int)
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.LZCodec$LZXCodec:hash(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec:access$000(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:min(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:findMatch(byte[],int,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.LZCodec$LZXCodec:hash(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:min(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:findMatch(byte[],int,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.Math:min(int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:emitLength(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:emitLiterals(byte[],int,byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:emitLength(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.LZCodec$LZXCodec:hash(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:emitLength(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.LZCodec$LZXCodec:readLength(kanzi.SliceByteArray)
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.LZCodec$LZXCodec:emitLiterals(byte[],int,byte[],int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.LZCodec$LZXCodec:readLength(kanzi.SliceByteArray)
"M:kanzi.transform.LZCodec$LZXCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.LZCodec$LZXCodec:hash(byte[],int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:hash(byte[],int)","(S)kanzi.Memory$LittleEndian:readLong64(byte[],int)"
"M:kanzi.transform.LZCodec$LZXCodec:emitLiterals(byte[],int,byte[],int,int)","(S)kanzi.transform.LZCodec$LZXCodec:arrayChunkCopy(byte[],int,byte[],int)"
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(O)java.io.ByteArrayOutputStream:<init>(int)
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.io.CompressedOutputStream$CustomByteArrayOutputStream:<init>(byte[],int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.Memory:<init>(),(O)java.lang.Object:<init>()
M:kanzi.Memory:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(boolean)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
M:kanzi.Memory:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
M:kanzi.Memory:main(java.lang.String[]),(S)java.lang.Integer:toHexString(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)"
M:kanzi.Memory:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
M:kanzi.Memory:main(java.lang.String[]),(S)java.lang.Integer:toHexString(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
M:kanzi.Memory:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
M:kanzi.Memory:main(java.lang.String[]),(S)java.lang.Integer:toHexString(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$LittleEndian:writeInt32(byte[],int,int)"
M:kanzi.Memory:main(java.lang.String[]),(O)java.lang.StringBuilder:<init>()
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:append(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.lang.StringBuilder:toString()
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:main(java.lang.String[]),"(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
M:kanzi.Memory:main(java.lang.String[]),(S)java.lang.Integer:toHexString(int)
M:kanzi.Memory:main(java.lang.String[]),(M)java.io.PrintStream:println(java.lang.String)
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.Memory:<clinit>(),(S)java.nio.ByteOrder:nativeOrder()
M:kanzi.transform.TextCodec$TextCodec1:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec$TextCodec1:<init>(),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(I)java.util.Map:containsKey(java.lang.Object)
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(I)java.util.Map:get(java.lang.Object)
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(S)kanzi.Global:log2(int)
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),"(S)java.lang.Math:max(int,int)"
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(S)java.lang.Boolean:valueOf(boolean)
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(M)java.lang.Boolean:booleanValue()
M:kanzi.transform.TextCodec$TextCodec1:<init>(java.util.Map),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.Global:log2(int)
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(S)java.lang.Math:max(int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$100()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$100()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),(S)kanzi.transform.TextCodec:access$000()
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
M:kanzi.transform.TextCodec$TextCodec1:reset(int),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.TextCodec$TextCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:computeStats(byte[],int,int,int[],boolean)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec1:reset(int)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.TextCodec$TextCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:isDelimiter(byte)
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:access$300(byte[],int,byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec1:expandDictionary()
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.TextCodec$TextCodec1:emitSymbols(byte[],int,byte[],int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec$TextCodec1:emitWordIndex(byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.TextCodec$TextCodec1:emitSymbols(byte[],int,byte[],int,int,int)"
M:kanzi.transform.TextCodec$TextCodec1:expandDictionary(),"(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.TextCodec$TextCodec1:expandDictionary(),"(O)kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:emitSymbols(byte[],int,byte[],int,int,int)","(S)kanzi.transform.TextCodec$TextCodec1:emitWordIndex(byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec1:reset(int)
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:access$200(byte)
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.TextCodec:isDelimiter(byte)
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.TextCodec:access$300(byte[],int,byte[],int,int)"
"M:kanzi.transform.TextCodec$TextCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.TextCodec$TextCodec1:expandDictionary()
M:kanzi.Error:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.io.IOException:<init>(java.lang.String,int)",(O)java.io.IOException:<init>(java.lang.String)
M:kanzi.transform.BWT:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.BWT:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.BWT:<init>(java.util.Map),(I)java.util.Map:get(java.lang.Object)
M:kanzi.transform.BWT:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.transform.BWT:<init>(java.util.Map),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.BWT:<init>(java.util.Map),(I)java.util.Map:get(java.lang.Object)
M:kanzi.transform.BWT:<init>(java.util.Map),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.BWT:<init>(java.util.Map),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.BWT:<init>(java.util.Map),(M)java.lang.StringBuilder:append(int)
M:kanzi.transform.BWT:<init>(java.util.Map),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.BWT:<init>(java.util.Map),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:maxBlockSize()
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:maxBlockSize()
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)kanzi.transform.DivSufSort:<init>()
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:getBWTChunks(int)
"M:kanzi.transform.BWT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.transform.DivSufSort:computeBWT(byte[],byte[],int[],int,int,int,int[],int)"
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:maxBlockSize()
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.BWT:maxBlockSize()
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)"
"M:kanzi.transform.BWT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)"
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseMergeTPSI(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(M)kanzi.transform.BWT:getPrimaryIndex(int)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(S)kanzi.transform.BWT:getBWTChunks(int)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(O)java.util.ArrayList:<init>(int)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(S)kanzi.Global:computeJobsPerTask(int[],int,int)"
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)","(O)kanzi.transform.BWT$InverseBiPSIv2Task:<init>(kanzi.transform.BWT,byte[],int,int,int,int,int)"
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.List:add(java.lang.Object)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.List:get(int)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.concurrent.Callable:call()
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.concurrent.ExecutorService:invokeAll(java.util.Collection)
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.List:iterator()
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.Iterator:hasNext()
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.Iterator:next()
"M:kanzi.transform.BWT:inverseBiPSIv2(kanzi.SliceByteArray,kanzi.SliceByteArray,int)",(I)java.util.concurrent.Future:get()
"M:kanzi.Event:<init>(kanzi.Event$Type,int,long)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)"
"M:kanzi.Event:<init>(kanzi.Event$Type,int,java.lang.String)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,java.lang.String,long)"
"M:kanzi.Event:<init>(kanzi.Event$Type,int,java.lang.String,long)",(O)java.lang.Object:<init>()
"M:kanzi.Event:<init>(kanzi.Event$Type,int,java.lang.String,long)",(S)java.lang.System:nanoTime()
"M:kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean)","(O)kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean,long)"
"M:kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean,long)",(O)java.lang.Object:<init>()
"M:kanzi.Event:<init>(kanzi.Event$Type,int,long,int,boolean,long)",(S)java.lang.System:nanoTime()
M:kanzi.Event:getHash(),(S)java.lang.Integer:valueOf(int)
M:kanzi.Event:toString(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)kanzi.Event:getType()
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.Object)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)kanzi.Event:getId()
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(int)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)kanzi.Event:getSize()
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(long)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)kanzi.Event:getTime()
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(long)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)kanzi.Event:getHash()
M:kanzi.Event:toString(),(M)java.lang.Integer:intValue()
M:kanzi.Event:toString(),(S)java.lang.Integer:toHexString(int)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.Event:toString(),(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.RiceGolombDecoder:<init>(kanzi.InputBitStream,boolean,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.RiceGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBit()
M:kanzi.entropy.RiceGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.RiceGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBit()
"M:kanzi.entropy.RiceGolombDecoder:decode(byte[],int,int)",(M)kanzi.entropy.RiceGolombDecoder:decodeByte()
M:kanzi.transform.X86Codec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.X86Codec:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.X86Codec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.X86Codec:getMaxEncodedLength(int)
"M:kanzi.transform.X86Codec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.X86Codec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.X86Codec:isExeBlock(byte[],int,int,int)"
"M:kanzi.transform.X86Codec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
M:kanzi.Event$Type:values(),(M)kanzi.Event$Type[]:clone()
M:kanzi.Event$Type:valueOf(java.lang.String),"(S)java.lang.Enum:valueOf(java.lang.Class,java.lang.String)"
"M:kanzi.Event$Type:<init>(java.lang.String,int)","(O)java.lang.Enum:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.Event$Type:<clinit>(),"(O)kanzi.Event$Type:<init>(java.lang.String,int)"
M:kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream),"(O)kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream,int)"
"M:kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.HuffmanDecoder:<init>(kanzi.InputBitStream,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(S)kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])"
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(O)kanzi.entropy.ExpGolombDecoder:<init>(kanzi.InputBitStream,boolean)"
M:kanzi.entropy.HuffmanDecoder:readLengths(),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)kanzi.entropy.ExpGolombDecoder:decodeByte()
M:kanzi.entropy.HuffmanDecoder:readLengths(),(O)java.lang.StringBuilder:<init>()
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:append(int)
M:kanzi.entropy.HuffmanDecoder:readLengths(),(M)java.lang.StringBuilder:toString()
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(S)kanzi.entropy.HuffmanCommon:generateCanonicalCodes(short[],int[],int[],int)"
M:kanzi.entropy.HuffmanDecoder:readLengths(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.HuffmanDecoder:readLengths(),(O)kanzi.entropy.HuffmanDecoder:buildDecodingTables(int)
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(M)kanzi.entropy.HuffmanDecoder:readLengths()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:fetchBits()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:decodeByte()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:decodeByte()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:decodeByte()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:decodeByte()
"M:kanzi.entropy.HuffmanDecoder:decode(byte[],int,int)",(O)kanzi.entropy.HuffmanDecoder:slowDecodeByte()
M:kanzi.entropy.HuffmanDecoder:slowDecodeByte(),(I)kanzi.InputBitStream:readBit()
M:kanzi.entropy.HuffmanDecoder:slowDecodeByte(),"(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
M:kanzi.entropy.HuffmanDecoder:fetchBits(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.HuffmanDecoder:fetchBits(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.transform.TransformFactory:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.String:indexOf(int)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)kanzi.transform.TransformFactory:getTypeToken(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.String:split(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.TransformFactory:getType(java.lang.String),(O)kanzi.transform.TransformFactory:getTypeToken(java.lang.String)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(S)java.lang.String:valueOf(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:toUpperCase()
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:hashCode()
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.String:equals(java.lang.Object)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.TransformFactory:getTypeToken(java.lang.String),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.TransformFactory:newFunction(java.util.Map,long)","(S)kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)"
"M:kanzi.transform.TransformFactory:newFunction(java.util.Map,long)",(O)kanzi.transform.Sequence:<init>(kanzi.ByteTransform[])
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.String:toUpperCase()
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.String:equals(java.lang.Object)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.TextCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.ROLZCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.ROLZCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.BWTBlockCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.BWTS:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.SBRT:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.SRT:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.SBRT:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.ZRLT:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.RLT:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Short:valueOf(short)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.LZCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Short:valueOf(short)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.LZCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(S)java.lang.Short:valueOf(short)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.LZCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.X86Codec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.FSDCodec:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)kanzi.transform.NullTransform:<init>(java.util.Map)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.TransformFactory:newFunctionToken(java.util.Map,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.TransformFactory:getName(long),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.TransformFactory:getName(long),(S)kanzi.transform.TransformFactory:getNameToken(int)
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:length()
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:append(char)
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:length()
M:kanzi.transform.TransformFactory:getName(long),(S)kanzi.transform.TransformFactory:getNameToken(int)
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getName(long),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.TransformFactory:getNameToken(int),(O)java.lang.StringBuilder:<init>()
M:kanzi.transform.TransformFactory:getNameToken(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getNameToken(int),(M)java.lang.StringBuilder:append(int)
M:kanzi.transform.TransformFactory:getNameToken(int),(M)java.lang.StringBuilder:append(java.lang.String)
M:kanzi.transform.TransformFactory:getNameToken(int),(M)java.lang.StringBuilder:toString()
M:kanzi.transform.TransformFactory:getNameToken(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.SBRT:<init>(),(O)kanzi.transform.SBRT:<init>(int)
M:kanzi.transform.SBRT:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.transform.SBRT:<init>(int),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.SBRT:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.SBRT:<init>(java.util.Map),(S)java.lang.Integer:valueOf(int)
M:kanzi.transform.SBRT:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.SBRT:<init>(java.util.Map),(M)java.lang.Integer:intValue()
M:kanzi.transform.SBRT:<init>(java.util.Map),(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.transform.RLT:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.RLT:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.RLT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.RLT:getMaxEncodedLength(int)
"M:kanzi.transform.RLT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.transform.RLT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.RLT:emitRunLength(byte[],int,int,int,byte,byte)"
M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream),"(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)"
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int)","(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)"
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)",(M)java.lang.Integer:intValue()
"M:kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)",(O)kanzi.entropy.ANSRangeDecoder$Symbol:<init>()
"M:kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)","(M)kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])"
"M:kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)","(M)kanzi.entropy.ANSRangeDecoder:decodeChunkV1(byte[],int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)","(M)kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV1(byte[],int,int)",(S)kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV1(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV1(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV1(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)",(S)kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeChunkV2(byte[],int,int)","(O)kanzi.entropy.ANSRangeDecoder:decodeSymbol(int[],int,kanzi.entropy.ANSRangeDecoder$Symbol,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(S)kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.ANSRangeDecoder:decodeHeader(int[][],int[])","(M)kanzi.entropy.ANSRangeDecoder$Symbol:reset(int,int,int)"
M:kanzi.transform.ROLZCodec:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.ROLZCodec:<init>(),(O)kanzi.transform.ROLZCodec$ROLZCodec1:<init>()
M:kanzi.transform.ROLZCodec:<init>(boolean),(O)java.lang.Object:<init>()
M:kanzi.transform.ROLZCodec:<init>(boolean),(O)kanzi.transform.ROLZCodec$ROLZCodec2:<init>()
M:kanzi.transform.ROLZCodec:<init>(boolean),(O)kanzi.transform.ROLZCodec$ROLZCodec1:<init>()
M:kanzi.transform.ROLZCodec:<init>(java.util.Map),(O)java.lang.Object:<init>()
M:kanzi.transform.ROLZCodec:<init>(java.util.Map),"(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
M:kanzi.transform.ROLZCodec:<init>(java.util.Map),(M)java.lang.String:contains(java.lang.CharSequence)
M:kanzi.transform.ROLZCodec:<init>(java.util.Map),"(O)kanzi.transform.ROLZCodec$ROLZCodec2:<init>(int,java.util.Map)"
M:kanzi.transform.ROLZCodec:<init>(java.util.Map),"(O)kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)"
"M:kanzi.transform.ROLZCodec:getKey(byte[],int)","(S)kanzi.Memory$LittleEndian:readInt16(byte[],int)"
"M:kanzi.transform.ROLZCodec:hash(byte[],int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
M:kanzi.transform.ROLZCodec:getMaxEncodedLength(int),(I)kanzi.ByteTransform:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.ROLZCodec:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.lang.StringBuilder:toString()
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.ROLZCodec:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.ByteTransform:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)"
"M:kanzi.transform.ROLZCodec:access$000(byte[],int)","(S)kanzi.transform.ROLZCodec:getKey(byte[],int)"
"M:kanzi.transform.ROLZCodec:access$100(byte[],int)","(S)kanzi.transform.ROLZCodec:hash(byte[],int)"
"M:kanzi.transform.ROLZCodec:access$200(byte[],int,int,int)","(S)kanzi.transform.ROLZCodec:emitCopy(byte[],int,int,int)"
M:kanzi.entropy.FPAQEncoder:<init>(kanzi.OutputBitStream),(O)java.lang.Object:<init>()
M:kanzi.entropy.FPAQEncoder:<init>(kanzi.OutputBitStream),(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.entropy.FPAQEncoder:<init>(kanzi.OutputBitStream),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.entropy.FPAQEncoder:<init>(kanzi.OutputBitStream),"(S)java.util.Arrays:fill(int[],int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(O)kanzi.entropy.FPAQEncoder:encodeBit(int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(S)kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
"M:kanzi.entropy.FPAQEncoder:encode(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.FPAQEncoder:encodeBit(int,int)",(O)kanzi.entropy.FPAQEncoder:flush()
M:kanzi.entropy.FPAQEncoder:flush(),"(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
M:kanzi.entropy.FPAQEncoder:dispose(),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(),"(O)kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)"
M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int),"(O)kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)",(O)java.lang.Object:<init>()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)","(I)java.util.Map:getOrDefault(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:<init>(int,java.util.Map)",(M)java.lang.Integer:intValue()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.transform.ROLZCodec:access$000(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.transform.ROLZCodec:access$100(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)","(S)kanzi.Memory$LittleEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)",(S)java.lang.Integer:numberOfTrailingZeros(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$BigEndian:writeInt32(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.io.ByteArrayOutputStream:<init>(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.ROLZCodec$ROLZCodec1:findMatch(kanzi.SliceByteArray,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec$ROLZCodec1:emitLength(kanzi.SliceByteArray,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec$ROLZCodec1:emitLength(kanzi.SliceByteArray,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec$ROLZCodec1:emitLength(kanzi.SliceByteArray,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.io.ByteArrayOutputStream:reset()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.bitstream.DefaultOutputBitStream:<init>(java.io.OutputStream,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.entropy.ANSRangeEncoder:dispose()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.entropy.ANSRangeEncoder:dispose()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.OutputBitStream:close()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)java.io.ByteArrayOutputStream:toByteArray()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.ROLZCodec$ROLZCodec1:getMaxEncodedLength(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)java.io.ByteArrayInputStream:<init>(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.bitstream.DefaultInputBitStream:<init>(java.io.InputStream,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(O)java.util.HashMap:<init>()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)java.lang.Integer:valueOf(int)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(I)java.util.Map:put(java.lang.Object,java.lang.Object)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.entropy.ANSRangeDecoder:dispose()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.entropy.ANSRangeDecoder:<init>(kanzi.InputBitStream,int,java.util.Map)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(M)kanzi.entropy.ANSRangeDecoder:decode(byte[],int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.entropy.ANSRangeDecoder:dispose()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:read()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(I)kanzi.InputBitStream:close()
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.ROLZCodec$ROLZCodec1:readLength(kanzi.SliceByteArray)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)",(S)kanzi.transform.ROLZCodec$ROLZCodec1:readLength(kanzi.SliceByteArray)
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(O)kanzi.transform.ROLZCodec$ROLZCodec1:emitLiterals(kanzi.SliceByteArray,byte[],int,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec:access$000(byte[],int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.ROLZCodec:access$200(byte[],int,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZCodec1:emitLiterals(kanzi.SliceByteArray,byte[],int,int,int)","(S)kanzi.transform.ROLZCodec:access$000(byte[],int)"
"M:kanzi.entropy.ExpGolombDecoder:<init>(kanzi.InputBitStream,boolean)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ExpGolombDecoder:<init>(kanzi.InputBitStream,boolean)",(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.entropy.ExpGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBit()
M:kanzi.entropy.ExpGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBit()
M:kanzi.entropy.ExpGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.ExpGolombDecoder:decodeByte(),(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.ExpGolombDecoder:decode(byte[],int,int)",(M)kanzi.entropy.ExpGolombDecoder:decodeByte()
M:kanzi.transform.DivSufSort$Stack:<init>(int),(O)java.lang.Object:<init>()
M:kanzi.transform.DivSufSort$Stack:<init>(int),(O)kanzi.transform.DivSufSort$StackElement:<init>(kanzi.transform.DivSufSort$1)
M:kanzi.transform.DivSufSort:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.DivSufSort:<init>(),(O)kanzi.transform.DivSufSort$Stack:<init>(int)
M:kanzi.transform.DivSufSort:<init>(),(O)kanzi.transform.DivSufSort$Stack:<init>(int)
M:kanzi.transform.DivSufSort:<init>(),(O)kanzi.transform.DivSufSort$Stack:<init>(int)
M:kanzi.transform.DivSufSort:reset(),"(S)kanzi.transform.DivSufSort$Stack:access$002(kanzi.transform.DivSufSort$Stack,int)"
M:kanzi.transform.DivSufSort:reset(),"(S)kanzi.transform.DivSufSort$Stack:access$002(kanzi.transform.DivSufSort$Stack,int)"
M:kanzi.transform.DivSufSort:reset(),"(S)kanzi.transform.DivSufSort$Stack:access$002(kanzi.transform.DivSufSort$Stack,int)"
"M:kanzi.transform.DivSufSort:computeSuffixArray(byte[],int[],int,int)",(M)kanzi.transform.DivSufSort:reset()
"M:kanzi.transform.DivSufSort:computeSuffixArray(byte[],int[],int,int)","(O)kanzi.transform.DivSufSort:sortTypeBstar(int[],int[],int)"
"M:kanzi.transform.DivSufSort:computeSuffixArray(byte[],int[],int,int)","(O)kanzi.transform.DivSufSort:constructSuffixArray(int[],int[],int,int)"
"M:kanzi.transform.DivSufSort:computeBWT(byte[],byte[],int[],int,int,int,int[],int)",(M)kanzi.transform.DivSufSort:reset()
"M:kanzi.transform.DivSufSort:computeBWT(byte[],byte[],int[],int,int,int,int[],int)","(O)kanzi.transform.DivSufSort:sortTypeBstar(int[],int[],int)"
"M:kanzi.transform.DivSufSort:computeBWT(byte[],byte[],int[],int,int,int,int[],int)","(O)kanzi.transform.DivSufSort:constructBWT(int[],int[],int,int,int[],int)"
"M:kanzi.transform.DivSufSort:sortTypeBstar(int[],int[],int)","(O)kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)"
"M:kanzi.transform.DivSufSort:sortTypeBstar(int[],int[],int)","(O)kanzi.transform.DivSufSort:trSort(int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)",(S)kanzi.transform.DivSufSort:ssIsqrt(int)
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssInplaceMerge(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSort(int,int,int,int,int,int,int,boolean)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssInplaceMerge(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssInplaceMerge(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssRotate(int,int,int)"
"M:kanzi.transform.DivSufSort:ssRotate(int,int,int)","(O)kanzi.transform.DivSufSort:ssBlockSwap(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMergeBackward(int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMergeForward(int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssBlockSwap(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(S)kanzi.transform.DivSufSort:getIndex(int)
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssSwapMerge(int,int,int,int,int,int,int)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:ssMergeForward(int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssBlockSwap(int,int,int)"
"M:kanzi.transform.DivSufSort:ssMergeForward(int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssMergeBackward(int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssBlockSwap(int,int,int)"
"M:kanzi.transform.DivSufSort:ssMergeBackward(int,int,int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssInsertionSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssCompare(int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssInsertionSort(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssPartition(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssPivot(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssPartition(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssPartition(int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssMultiKeyIntroSort(int,int,int,int)",(S)kanzi.transform.DivSufSort:ssIlg(int)
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian3(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian5(int,int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian3(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian3(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian3(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssPivot(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssMedian3(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssFixDown(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssFixDown(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:ssHeapSort(int,int,int,int)","(O)kanzi.transform.DivSufSort:ssFixDown(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trSort(int,int)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trSort(int,int)","(O)kanzi.transform.DivSufSort$TRBudget:<init>(int,int,kanzi.transform.DivSufSort$1)"
"M:kanzi.transform.DivSufSort:trSort(int,int)","(O)kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:size()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trCopy(int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:get(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trPartialCopy(int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(S)kanzi.transform.DivSufSort$TRBudget:access$200(kanzi.transform.DivSufSort$TRBudget,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:get(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trInsertionSort(int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trHeapSort(int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(S)kanzi.transform.DivSufSort:trPivot(int[],int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(O)kanzi.transform.DivSufSort:trPartition(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(S)kanzi.transform.DivSufSort$TRBudget:access$200(kanzi.transform.DivSufSort$TRBudget,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:get(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(M)kanzi.transform.DivSufSort$Stack:push(int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)","(S)kanzi.transform.DivSufSort$TRBudget:access$200(kanzi.transform.DivSufSort$TRBudget,int)"
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(S)kanzi.transform.DivSufSort:trIlg(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:get(int)
"M:kanzi.transform.DivSufSort:trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)",(M)kanzi.transform.DivSufSort$Stack:pop()
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian3(int[],int,int,int,int)"
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian5(int[],int,int,int,int,int,int)"
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian3(int[],int,int,int,int)"
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian3(int[],int,int,int,int)"
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian3(int[],int,int,int,int)"
"M:kanzi.transform.DivSufSort:trPivot(int[],int,int,int)","(S)kanzi.transform.DivSufSort:trMedian3(int[],int,int,int,int)"
"M:kanzi.transform.DivSufSort:trHeapSort(int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trHeapSort(int,int,int)","(O)kanzi.transform.DivSufSort:trFixDown(int,int,int,int)"
"M:kanzi.transform.DivSufSort:trHeapSort(int,int,int)","(O)kanzi.transform.DivSufSort:swapInSA(int,int)"
"M:kanzi.transform.DivSufSort:trHeapSort(int,int,int)","(O)kanzi.transform.DivSufSort:trFixDown(int,int,int,int)"
"M:kanzi.transform.DivSufSort:trHeapSort(int,int,int)","(O)kanzi.transform.DivSufSort:trFixDown(int,int,int,int)"
M:kanzi.entropy.FPAQDecoder:<init>(kanzi.InputBitStream),(O)java.lang.Object:<init>()
M:kanzi.entropy.FPAQDecoder:<init>(kanzi.InputBitStream),(O)java.lang.NullPointerException:<init>(java.lang.String)
M:kanzi.entropy.FPAQDecoder:<init>(kanzi.InputBitStream),"(O)kanzi.SliceByteArray:<init>(byte[],int)"
M:kanzi.entropy.FPAQDecoder:<init>(kanzi.InputBitStream),"(S)java.util.Arrays:fill(int[],int)"
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(S)kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
"M:kanzi.entropy.FPAQDecoder:decode(byte[],int,int)",(O)kanzi.entropy.FPAQDecoder:decodeBit(int)
M:kanzi.entropy.FPAQDecoder:decodeBit(int),(M)kanzi.entropy.FPAQDecoder:read()
M:kanzi.entropy.FPAQDecoder:read(),"(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream),"(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)"
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int)","(O)kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)"
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.ANSRangeEncoder:<init>(kanzi.OutputBitStream,int,java.util.Map)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeEncoder:updateFrequencies(int[][],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:updateFrequencies(int[][],int)","(S)kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)"
"M:kanzi.entropy.ANSRangeEncoder:updateFrequencies(int[][],int)","(M)kanzi.entropy.ANSRangeEncoder$Symbol:reset(int,int,int)"
"M:kanzi.entropy.ANSRangeEncoder:updateFrequencies(int[][],int)","(M)kanzi.entropy.ANSRangeEncoder:encodeHeader(int,int[],int[],int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeHeader(int,int[],int[],int)","(S)kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeHeader(int,int[],int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeHeader(int,int[],int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)",(O)kanzi.entropy.ANSRangeEncoder$Symbol:<init>()
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)","(S)java.lang.Math:max(int,int)"
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)"
"M:kanzi.entropy.ANSRangeEncoder:encode(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(O)kanzi.entropy.ANSRangeEncoder:encodeSymbol(int[],int,kanzi.entropy.ANSRangeEncoder$Symbol)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(S)kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.ANSRangeEncoder:encodeChunk(byte[],int,int)","(I)kanzi.OutputBitStream:writeBits(byte[],int,int)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder0(byte[],int,int,int[],boolean)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder1(byte[],int,int,int[][],boolean)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder1(byte[],int,int,int[][],boolean)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder1(byte[],int,int,int[][],boolean)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(S)kanzi.Global:computeHistogramOrder1(byte[],int,int,int[][],boolean)"
"M:kanzi.entropy.ANSRangeEncoder:rebuildStatistics(byte[],int,int,int)","(O)kanzi.entropy.ANSRangeEncoder:updateFrequencies(int[][],int)"
M:kanzi.entropy.CMPredictor:<init>(),(O)java.lang.Object:<init>()
M:kanzi.entropy.CMPredictor:<init>(),"(S)java.util.Arrays:fill(int[],int)"
M:kanzi.transform.DivSufSort$StackElement:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.DivSufSort$StackElement:<init>(kanzi.transform.DivSufSort$1),(O)kanzi.transform.DivSufSort$StackElement:<init>()
"M:kanzi.entropy.LinearAdaptiveProbMap:<init>(int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.LinearAdaptiveProbMap:<init>(int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.BWT$InverseBiPSIv2Task:<init>(kanzi.transform.BWT,byte[],int,int,int,int,int)",(O)java.lang.Object:<init>()
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(S)kanzi.transform.BWT:access$000(kanzi.transform.BWT)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(S)kanzi.transform.BWT:access$100(kanzi.transform.BWT)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(S)kanzi.transform.BWT:access$200(kanzi.transform.BWT)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT:getPrimaryIndex(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT:getPrimaryIndex(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT:getPrimaryIndex(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT:getPrimaryIndex(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),"(S)java.lang.Math:min(int,int)"
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT:getPrimaryIndex(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(S)java.lang.Integer:valueOf(int)
M:kanzi.transform.BWT$InverseBiPSIv2Task:call(),(M)kanzi.transform.BWT$InverseBiPSIv2Task:call()
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.RiceGolombEncoder:<init>(kanzi.OutputBitStream,boolean,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:kanzi.entropy.RiceGolombEncoder:encodeByte(byte),"(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.entropy.RiceGolombEncoder:encodeByte(byte),"(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.RiceGolombEncoder:encode(byte[],int,int)",(M)kanzi.entropy.RiceGolombEncoder:encodeByte(byte)
M:kanzi.transform.SA_IS:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.transform.SA_IS:sortLMSSuffixes(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:sortLMSSuffixes(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:sortLMSSuffixes(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:sortLMSSuffixes(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:induceSuffixArray(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:induceSuffixArray(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:induceSuffixArray(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:induceSuffixArray(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:computeBWT(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeBWT(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:computeBWT(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeBWT(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:sortLMSSuffixes(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:postProcessLMS(kanzi.SliceIntArray,int[],int,int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(O)kanzi.SliceIntArray:<init>(int[],int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:getCounts(kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:getBuckets(kanzi.SliceIntArray,kanzi.SliceIntArray,int,boolean)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:induceSuffixArray(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.transform.SA_IS:computeSuffixArray(kanzi.SliceIntArray,int[],int,int,int,boolean)","(S)kanzi.transform.SA_IS:computeBWT(kanzi.SliceIntArray,int[],kanzi.SliceIntArray,kanzi.SliceIntArray,int,int)"
"M:kanzi.entropy.FastLogisticAdaptiveProbMap:<init>(int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.FastLogisticAdaptiveProbMap:<init>(int,int)",(S)kanzi.Global:squash(int)
"M:kanzi.entropy.FastLogisticAdaptiveProbMap:<init>(int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
M:kanzi.transform.SRT:<init>(),(O)java.lang.Object:<init>()
M:kanzi.transform.SRT:<init>(java.util.Map),(O)java.lang.Object:<init>()
"M:kanzi.transform.SRT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)",(M)kanzi.transform.SRT:getMaxEncodedLength(int)
"M:kanzi.transform.SRT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.SRT:preprocess(int[],byte[])"
"M:kanzi.transform.SRT:forward(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.SRT:encodeHeader(int[],byte[],int)"
"M:kanzi.transform.SRT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.SRT:decodeHeader(byte[],int,int[])"
"M:kanzi.transform.SRT:inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)","(S)kanzi.transform.SRT:preprocess(int[],byte[])"
M:kanzi.entropy.EntropyUtils:<init>(),(O)java.lang.Object:<init>()
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)",(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)",(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)",(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)",(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)",(I)kanzi.OutputBitStream:writeBit(int)
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.EntropyUtils:encodeAlphabet(kanzi.OutputBitStream,int[],int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])",(I)kanzi.InputBitStream:readBit()
"M:kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])",(I)kanzi.InputBitStream:readBit()
"M:kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])","(O)kanzi.BitStreamException:<init>(java.lang.String,int)"
"M:kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.EntropyUtils:decodeAlphabet(kanzi.InputBitStream,int[])",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.lang.StringBuilder:<init>()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(int)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:append(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.lang.IllegalArgumentException:<init>(java.lang.String)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(S)java.lang.Math:abs(int)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.util.ArrayList:<init>(int)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)","(O)kanzi.entropy.EntropyUtils$FreqSortData:<init>(int[],int)"
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(M)java.util.ArrayList:add(java.lang.Object)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(S)java.util.Collections:sort(java.util.List)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(O)java.util.ArrayDeque:<init>(java.util.Collection)
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(I)java.util.Deque:size()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(I)java.util.Deque:removeFirst()
"M:kanzi.entropy.EntropyUtils:normalizeFrequencies(int[],int[],int,int)",(I)java.util.Deque:addLast(java.lang.Object)
"M:kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
"M:kanzi.entropy.EntropyUtils:writeVarInt(kanzi.OutputBitStream,int)","(I)kanzi.OutputBitStream:writeBits(long,int)"
M:kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream),(I)kanzi.InputBitStream:readBits(int)
M:kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream),(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.transform.TextCodec$DictEntry:<init>(byte[],int,int,int,int)",(O)java.lang.Object:<init>()
M:kanzi.transform.TextCodec$DictEntry:toString(),(O)java.lang.StringBuilder:<init>(int)
M:kanzi.transform.TextCodec$DictEntry:toString(),(M)java.lang.StringBuilder:append(char)
M:kanzi.transform.TextCodec$DictEntry:toString(),(M)java.lang.StringBuilder:toString()
"M:kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)",(S)kanzi.Global:squash(int)
"M:kanzi.entropy.LogisticAdaptiveProbMap:<init>(int,int)","(S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
"M:kanzi.transform.ROLZCodec$ROLZDecoder:<init>(int,int,kanzi.SliceByteArray)",(O)java.lang.Object:<init>()
"M:kanzi.transform.ROLZCodec$ROLZDecoder:<init>(int,int,kanzi.SliceByteArray)",(O)kanzi.transform.ROLZCodec$ROLZDecoder:reset()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decodeBits(int),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decode9Bits(),(M)kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit()
M:kanzi.transform.ROLZCodec$ROLZDecoder:decodeBit(),"(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
"M:kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)",(O)java.lang.Object:<init>()
"M:kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)",(O)java.lang.NullPointerException:<init>(java.lang.String)
"M:kanzi.entropy.BinaryEntropyDecoder:<init>(kanzi.InputBitStream,kanzi.Predictor)","(O)kanzi.SliceByteArray:<init>(byte[],int)"
"M:kanzi.entropy.BinaryEntropyDecoder:decode(byte[],int,int)","(S)java.lang.Math:min(int,int)"
"M:kanzi.entropy.BinaryEntropyDecoder:decode(byte[],int,int)",(S)kanzi.entropy.EntropyUtils:readVarInt(kanzi.InputBitStream)
"M:kanzi.entropy.BinaryEntropyDecoder:decode(byte[],int,int)",(I)kanzi.InputBitStream:readBits(int)
"M:kanzi.entropy.BinaryEntropyDecoder:decode(byte[],int,int)","(I)kanzi.InputBitStream:readBits(byte[],int,int)"
"M:kanzi.entropy.BinaryEntropyDecoder:decode(byte[],int,int)",(M)kanzi.entropy.BinaryEntropyDecoder:decodeByte()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(I)kanzi.Predictor:get()
M:kanzi.entropy.BinaryEntropyDecoder:decodeByte(),(M)kanzi.entropy.BinaryEntropyDecoder:decodeBit(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeBit(int),(I)kanzi.Predictor:update(int)
M:kanzi.entropy.BinaryEntropyDecoder:decodeBit(int),(M)kanzi.entropy.BinaryEntropyDecoder:read()
M:kanzi.entropy.BinaryEntropyDecoder:read(),"(S)kanzi.Memory$BigEndian:readInt32(byte[],int)"
