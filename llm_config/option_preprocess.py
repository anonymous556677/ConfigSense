import pandas as pd


def generate_config_csv(config_data):
    for project_name, data in config_data.items():
        functions = []
        option_names = []
        for config in data:
            function_name, option = config.split("|")
            function_name = function_name.split(' ')[0] + function_name.split(' ')[-1]
            function_name = function_name.replace("<", "").replace(">", "")
            functions.append(function_name)
            option_names.append(option)

        df = pd.DataFrame({
            "function": functions,
            "option": option_names
        })
        project_name = project_name.lower()
        csv_file_path = f"../config/config_extract_list/{project_name}.csv"
        df.to_csv(csv_file_path, index=False)


data_for_projects = {
    "cassandra": ["<org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getClusterName()>|cluster_name",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getNumTokens()>|num_tokens",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getAllocateTokensForKeyspace()>|allocate_tokens_for_keyspace",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.lang.Integer getAllocateTokensForLocalRf()>|allocate_tokens_for_local_replication_factor",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.util.Collection getInitialTokens()>|initial_token",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean hintedHandoffEnabled()>|hinted_handoff_enabled",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getMaxHintWindow()>|max_hint_window_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getHintedHandoffThrottleInKB()>|hinted_handoff_throttle_in_kb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getMaxHintsDeliveryThreads()>|max_hints_delivery_threads",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.io.File getHintsDirectory()>|hints_directory",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getHintsFlushPeriodInMS()>|hints_flush_period_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getMaxHintsFileSize()>|max_hints_file_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.ParameterizedClass getHintsCompression()>|hints_compression",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getBatchlogReplayThrottleInKB()>|batchlog_replay_throttle_in_kb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IAuthenticator getAuthenticator()>|authenticator",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IAuthorizer getAuthorizer()>|authorizer",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IRoleManager getRoleManager()>|role_manager",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.INetworkAuthorizer getNetworkAuthorizer()>|network_authorizer",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getRolesValidity()>|roles_validity_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getRolesUpdateInterval()>|roles_update_interval_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getPermissionsValidity()>|permissions_validity_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getPermissionsUpdateInterval()>|permissions_update_interval_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCredentialsValidity()>|credentials_validity_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCredentialsUpdateInterval()>|credentials_update_interval_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.dht.IPartitioner getPartitioner()>|partitioner",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean isCDCEnabled()>|cdc_enabled",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$DiskFailurePolicy getDiskFailurePolicy()>|disk_failure_policy",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$CommitFailurePolicy getCommitFailurePolicy()>|commit_failure_policy",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getPreparedStatementsCacheSizeMB()>|prepared_statements_cache_size_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getKeyCacheSizeInMB()>|key_cache_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getKeyCacheSavePeriod()>|key_cache_save_period",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getKeyCacheKeysToSave()>|key_cache_keys_to_save",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getRowCacheClassName()>|row_cache_class_name",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getRowCacheSizeInMB()>|row_cache_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getRowCacheSavePeriod()>|row_cache_save_period",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getCounterCacheSizeInMB()>|counter_cache_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCounterCacheSavePeriod()>|counter_cache_save_period",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCounterCacheKeysToSave()>|counter_cache_keys_to_save",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCacheLoadTimeout()>|cache_load_timeout_seconds",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$CommitLogSync getCommitLogSync()>|commitlog_sync",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCommitLogSyncPeriod()>|commitlog_sync_period_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getPeriodicCommitLogSyncBlock()>|periodic_commitlog_sync_lag_block_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCommitLogSegmentSize()>|commitlog_segment_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.ParameterizedClass getCommitLogCompression()>|commitlog_compression",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$FlushCompression getFlushCompression()>|flush_compression",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.locator.SeedProvider getSeedProvider()>|seed_provider",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentReaders()>|concurrent_reads",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentWriters()>|concurrent_writes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentCounterWriters()>|concurrent_counter_writes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentViewWriters()>|concurrent_materialized_view_writes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getNetworkingCacheSizeInMB()>|networking_cache_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getFileCacheEnabled()>|file_cache_enabled",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getFileCacheSizeInMB()>|file_cache_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.io.util.DiskOptimizationStrategy getDiskOptimizationStrategy()>|disk_optimization_strategy",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getMemtableHeapSpaceInMb()>|memtable_heap_space_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getMemtableOffheapSpaceInMb()>|memtable_offheap_space_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: java.lang.Float getMemtableCleanupThreshold()>|memtable_cleanup_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$MemtableAllocationType getMemtableAllocationType()>|memtable_allocation_type",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getRepairSessionSpaceInMegabytes()>|repair_session_space_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getTotalCommitlogSpaceInMB()>|commitlog_total_space_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getFlushWriters()>|memtable_flush_writers",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCDCSpaceInMB()>|cdc_total_space_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCDCDiskCheckInterval()>|cdc_free_space_check_interval_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getIndexSummaryCapacityInMB()>|index_summary_capacity_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getIndexSummaryResizeIntervalInMinutes()>|index_summary_resize_interval_in_minutes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getTrickleFsync()>|trickle_fsync",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getTrickleFsyncIntervalInKb()>|trickle_fsync_interval_in_kb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IInternodeAuthenticator getInternodeAuthenticator()>|internode_authenticator",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean startNativeTransport()>|start_native_transport",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getNativeTransportMaxThreads()>|native_transport_max_threads",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getNativeTransportMaxFrameSize()>|native_transport_max_frame_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getNativeTransportMaxConcurrentConnections()>|native_transport_max_concurrent_connections",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getNativeTransportMaxConcurrentConnectionsPerIp()>|native_transport_max_concurrent_connections_per_ip",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getNativeTransportAllowOlderProtocols()>|native_transport_allow_older_protocols",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long nativeTransportIdleTimeout()>|native_transport_idle_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getRpcKeepAlive()>|rpc_keepalive",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeSocketSendBufferSizeInBytes()>|internode_socket_send_buffer_size_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean isIncrementalBackupsEnabled()>|incremental_backups",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean isSnapshotBeforeCompaction()>|snapshot_before_compaction",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoSnapshot()>|auto_snapshot",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getSnapshotLinksPerSecond()>|snapshot_links_per_second",
                  #"<org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexSize()>|column_index_size_in_kb_0",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexSizeInKB()>|column_index_size_in_kb",
                  #"<org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexCacheSize()>|column_index_cache_size_in_kb_0",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexCacheSizeInKB()>|column_index_cache_size_in_kb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCompactionThroughputMbPerSec()>|compaction_throughput_mb_per_sec",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentCompactors()>|concurrent_compactors",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentValidations()>|concurrent_validations",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getConcurrentViewBuilders()>|concurrent_materialized_view_builders",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCompactionThroughputMbPerSec()>|compaction_throughput_mb_per_sec",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getSSTablePreemptiveOpenIntervalInMB()>|sstable_preemptive_open_interval_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean streamEntireSSTables()>|stream_entire_sstables",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getStreamThroughputOutboundMegabitsPerSec()>|stream_throughput_outbound_megabits_per_sec",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInterDCStreamThroughputOutboundMegabitsPerSec()>|inter_dc_stream_throughput_outbound_megabits_per_sec",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getReadRpcTimeout(java.util.concurrent.TimeUnit)>|read_request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getRangeRpcTimeout(java.util.concurrent.TimeUnit)>|range_request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getWriteRpcTimeout(java.util.concurrent.TimeUnit)>|write_request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getCounterWriteRpcTimeout(java.util.concurrent.TimeUnit)>|counter_write_request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getCasContentionTimeout(java.util.concurrent.TimeUnit)>|cas_contention_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getTruncateRpcTimeout(java.util.concurrent.TimeUnit)>|truncate_request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getRpcTimeout(java.util.concurrent.TimeUnit)>|request_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeTcpConnectTimeoutInMS()>|internode_tcp_connect_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeTcpUserTimeoutInMS()>|internode_tcp_user_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeStreamingTcpUserTimeoutInMS()>|internode_streaming_tcp_user_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationSendQueueCapacityInBytes()>|internode_application_send_queue_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationSendQueueReserveEndpointCapacityInBytes()>|internode_application_send_queue_reserve_endpoint_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationSendQueueReserveGlobalCapacityInBytes()>|internode_application_send_queue_reserve_global_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationReceiveQueueCapacityInBytes()>|internode_application_receive_queue_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes()>|internode_application_receive_queue_reserve_endpoint_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getInternodeApplicationReceiveQueueReserveGlobalCapacityInBytes()>|internode_application_receive_queue_reserve_global_capacity_in_bytes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getSlowQueryTimeout(java.util.concurrent.TimeUnit)>|slow_query_log_timeout_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean hasCrossNodeTimeout()>|cross_node_timeout",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getStreamingKeepAlivePeriod()>|streaming_keep_alive_period_in_secs",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getStreamingConnectionsPerHost()>|streaming_connections_per_host",
                  "<org.apache.cassandra.config.DatabaseDescriptor: double getPhiConvictThreshold()>|phi_convict_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.locator.IEndpointSnitch getEndpointSnitch()>|endpoint_snitch",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getDynamicUpdateInterval()>|dynamic_snitch_update_interval_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getDynamicResetInterval()>|dynamic_snitch_reset_interval_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: double getDynamicBadnessThreshold()>|dynamic_snitch_badness_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions getInternodeMessagingEncyptionOptions()>|server_encryption_options",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.EncryptionOptions getNativeProtocolEncryptionOptions()>|client_encryption_options",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$InternodeCompression internodeCompression()>|internode_compression",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getInterDCTcpNoDelay()>|inter_dc_tcp_nodelay",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getTracetypeQueryTTL()>|tracetype_query_ttl",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getTracetypeRepairTTL()>|tracetype_repair_ttl",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean enableUserDefinedFunctions()>|enable_user_defined_functions",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean enableScriptedUserDefinedFunctions()>|enable_scripted_user_defined_functions",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getWindowsTimerInterval()>|windows_timer_interval",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.security.EncryptionContext getEncryptionContext()>|transparent_data_encryption_options",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getTombstoneWarnThreshold()>|tombstone_warn_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getTombstoneFailureThreshold()>|tombstone_failure_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCachedReplicaRowsWarnThreshold()>|cached_rows_warn_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getCachedReplicaRowsFailThreshold()>|cached_rows_fail_threshold",
                  #"<org.apache.cassandra.config.DatabaseDescriptor: int getBatchSizeWarnThreshold()>|batch_size_warn_threshold_in_kb_0",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getBatchSizeWarnThresholdInKB()>|batch_size_warn_threshold_in_kb",
                  #"<org.apache.cassandra.config.DatabaseDescriptor: long getBatchSizeFailThreshold()>|batch_size_fail_threshold_in_kb_0",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getBatchSizeFailThresholdInKB()>|batch_size_fail_threshold_in_kb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getUnloggedBatchAcrossPartitionsWarnThreshold()>|unlogged_batch_across_partitions_warn_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getCompactionLargePartitionWarningThreshold()>|compaction_large_partition_warning_threshold_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getGCLogThreshold()>|gc_log_threshold_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: long getGCWarnThreshold()>|gc_warn_threshold_in_ms",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int getMaxValueSize()>|max_value_size_in_mb",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.db.ConsistencyLevel getIdealConsistencyLevel()>|ideal_consistency_level",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int maxConcurrentAutoUpgradeTasks()>|max_concurrent_automatic_sstable_upgrades",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.audit.AuditLogOptions getAuditLoggingOptions()>|audit_logging_options",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.fql.FullQueryLoggerOptions getFullQueryLogOptions()>|full_query_logging_options",
                  "<org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$CorruptedTombstoneStrategy getCorruptedTombstoneStrategy()>|corrupted_tombstone_strategy",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean diagnosticEventsEnabled()>|diagnostic_events_enabled",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean useNativeTransportLegacyFlusher()>|native_transport_flush_in_batches_legacy",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getRepairedDataTrackingForRangeReadsEnabled()>|repaired_data_tracking_for_range_reads_enabled",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean reportUnconfirmedRepairedDataMismatches()>|report_unconfirmed_repaired_data_mismatches",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int tableCountWarnThreshold()>|table_count_warn_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: int keyspaceCountWarnThreshold()>|keyspace_count_warn_threshold",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getEnableMaterializedViews()>|enable_materialized_views",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean getEnableSASIIndexes()>|enable_sasi_indexes",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean isTransientReplicationEnabled()>|enable_transient_replication",
                  "<org.apache.cassandra.config.DatabaseDescriptor: boolean enableDropCompactStorage()>|enable_drop_compact_storage"],
    "Catena":      ["<main.java.Catena: java.lang.String get_vId()>|_vId",
                    "<main.java.Catena: main.java.components.hash.HashInterface get_h()>|_h",
                    "<main.java.Catena: main.java.components.hash.HashInterface get_hPrime()>|_hPrime",
                    "<main.java.Catena: main.java.components.gamma.GammaInterface get_gamma()>|_gamma",
                    "<main.java.Catena: main.java.components.graph.GraphInterface get_f()>|_f",
                    "<main.java.Catena: main.java.components.phi.PhiInterface get_phi()>|_phi",
                    "<main.java.Catena: int get_d()>|_d",
                    "<main.java.Catena: int get_n()>|_n",
                    "<main.java.Catena: int get_k()>|_k",
                    "<main.java.Catena: int get_gLow()>|_gLow",
                    "<main.java.Catena: int get_gHigh()>|_gHigh",
                    "<main.java.Catena: int get_lambda()>|_lambda"],
    "Prevayler":   ["<org.prevayler.PrevaylerFactory: java.lang.Object prevalentSystem()>|_prevalentSystem",
                    "<org.prevayler.PrevaylerFactory: java.lang.String prevalenceDirectory()>|_prevalenceDirectory",
                    "<org.prevayler.PrevaylerFactory: org.prevayler.Clock clock()>|_clock",
                    "<org.prevayler.PrevaylerFactory: boolean transactionDeepCopyMode()>|_transactionDeepCopyMode",
                    "<org.prevayler.PrevaylerFactory: boolean transientMode()>|_transientMode",
                    "<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.NullSnapshotManager nullSnapshotManager()>|_nullSnapshotManager",
                    "<org.prevayler.PrevaylerFactory: long journalSizeThreshold()>|_journalSizeThreshold",
                    "<org.prevayler.PrevaylerFactory: long journalAgeThreshold()>|_journalAgeThreshold",
                    "<org.prevayler.PrevaylerFactory: boolean journalDiskSync()>|_journalDiskSync",
                    "<org.prevayler.PrevaylerFactory: org.prevayler.foundation.monitor.Monitor monitor()>|_monitor",
                    "<org.prevayler.PrevaylerFactory: org.prevayler.foundation.serialization.Serializer journalSerializer()>|_journalSerializer",
                    "<org.prevayler.PrevaylerFactory: org.prevayler.implementation.snapshot.GenericSnapshotManager snapshotManager()>|_snapshotSerializers"],
    "DConverter": [ "<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EOutputCompressionMode getOutputCompressionMode()>|outputCompressionMode",
                    "<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScaleMode getScaleMode()>|scaleMode",
                    "<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm getDownScalingAlgorithm()>|downScalingAlgorithm",
                    "<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm getUpScalingAlgorithm()>|upScalingAlgorithm",
                    "<at.favre.tools.dconvert.arg.Arguments: float getCompressionQuality()>|compressionQuality",
                    "<at.favre.tools.dconvert.arg.Arguments: int getThreadCount()>|threadCount",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isSkipExistingFiles()>|skipExistingFiles",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isSkipUpscaling()>|skipUpscaling",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isVerboseLog()>|verboseLog",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isIncludeAndroidLdpiTvdpi()>|includeAndroidLdpiTvdpi",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isHaltOnError()>|haltOnError",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isCreateMipMapInsteadOfDrawableDir()>|createMipMapInsteadOfDrawableDir",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isEnablePngCrush()>|enablePngCrush",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isEnableMozJpeg()>|enableMozJpeg",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isPostConvertWebp()>|postConvertWebp",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isEnableAntiAliasing()>|enableAntiAliasing",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isDryRun()>|dryRun",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isKeepUnoptimizedFilesPostProcessor()>|keepUnoptimizedFilesPostProcessor",
                    "<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.RoundingHandler$Strategy getRoundingHandler()>|roundingHandler",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isIosCreateImagesetFolders()>|iosCreateImagesetFolders",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isGuiAdvancedOptions()>|guiAdvancedOptions",
                    "<at.favre.tools.dconvert.arg.Arguments: boolean isClearDirBeforeConvert()>|clearDirBeforeConvert",
                    "<at.favre.tools.dconvert.arg.Arguments: java.util.List getFilesToProcess()>|filesToProcess"],
    "H2":           ["<org.h2.engine.DbSettings: int getANALYZE_AUTO_setting()>|ANALYZE_AUTO",
                    "<org.h2.engine.DbSettings: int getANALYZE_SAMPLE_setting()>|ANALYZE_SAMPLE",
                    "<org.h2.engine.DbSettings: int getAUTO_COMPACT_FILL_RATE_setting()>|AUTO_COMPACT_FILL_RATE",
                    "<org.h2.engine.DbSettings: boolean getCASE_INSENSITIVE_IDENTIFIERS_setting()>|CASE_INSENSITIVE_IDENTIFIERS",
                    "<org.h2.engine.DbSettings: boolean getDB_CLOSE_ON_EXIT_setting()>|DB_CLOSE_ON_EXIT",
                    "<org.h2.engine.DbSettings: boolean getDEFAULT_CONNECTION_setting()>|DEFAULT_CONNECTION",
                    "<org.h2.engine.DbSettings: java.lang.String getDEFAULT_ESCAPE_setting()>|DEFAULT_ESCAPE",
                    "<org.h2.engine.DbSettings: boolean getDEFRAG_ALWAYS_setting()>|DEFRAG_ALWAYS",
                    "<org.h2.engine.DbSettings: boolean getDROP_RESTRICT()>|DROP_RESTRICT",
                    "<org.h2.engine.DbSettings: int getESTIMATED_FUNCTION_TABLE_ROWS_setting()>|ESTIMATED_FUNCTION_TABLE_ROWS",
                    "<org.h2.engine.DbSettings: int getLOB_TIMEOUT_setting()>|LOB_TIMEOUT",
                    "<org.h2.engine.DbSettings: int getMAX_COMPACT_TIME_setting()>|MAX_COMPACT_TIME",
                    "<org.h2.engine.DbSettings: int getMAX_QUERY_TIMEOUT_setting()>|MAX_QUERY_TIMEOUT",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_DISTINCT_setting()>|OPTIMIZE_DISTINCT",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_EVALUATABLE_SUBQUERIES_setting()>|OPTIMIZE_EVALUATABLE_SUBQUERIES",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_INSERT_FROM_SELECT_setting()>|OPTIMIZE_INSERT_FROM_SELECT",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_IN_LIST_setting()>|OPTIMIZE_IN_LIST",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_IN_SELECT_setting()>|OPTIMIZE_IN_SELECT",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_OR_setting()>|OPTIMIZE_OR",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_TWO_EQUALS()>|OPTIMIZE_TWO_EQUALS",
                    "<org.h2.engine.DbSettings: boolean getOPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES_setting()>|OPTIMIZE_SIMPLE_SINGLE_ROW_SUBQUERIES",
                    "<org.h2.engine.DbSettings: int getQUERY_CACHE_SIZE_setting()>|QUERY_CACHE_SIZE",
                    "<org.h2.engine.DbSettings: boolean getRECOMPILE_ALWAYS_setting()>|RECOMPILE_ALWAYS",
                    "<org.h2.engine.DbSettings: boolean getREUSE_SPACE_setting()>|REUSE_SPACE",
                    "<org.h2.engine.DbSettings: boolean getSHARE_LINKED_CONNECTIONS_setting()>|SHARE_LINKED_CONNECTIONS",
                    "<org.h2.engine.DbSettings: java.lang.String getDEFAULT_TABLE_ENGINE_setting()>|DEFAULT_TABLE_ENGINE",
                    "<org.h2.engine.DbSettings: boolean getMV_STORE_setting()>|MV_STORE",
                    "<org.h2.engine.DbSettings: boolean getCOMPRESS_setting()>|COMPRESS",
                    "<org.h2.engine.DbSettings: boolean getIGNORE_CATALOGS_setting()>|IGNORE_CATALOGS",
                    "<org.h2.engine.DbSettings: boolean getZERO_BASED_ENUMS_setting()>|ZERO_BASED_ENUMS",
                    "<org.h2.engine.Database: getSettings()>|return setting instance"],
    "batik":        [
                    "<org.apache.batik.apps.rasterizer.SVGConverter: java.io.File getDst()>|dst",
                    "<org.apache.batik.apps.rasterizer.SVGConverter: org.apache.batik.apps.rasterizer.DestinationType getDestinationType()>|destinationType",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_WIDTH(java.lang.Object)>|width",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_HEIGHT(java.lang.Object)>|height",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_MAX_WIDTH(java.lang.Object)>|maxWidth",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_MAX_HEIGHT(java.lang.Object)>|maxHeight",
                    "<org.apache.batik.transcoder.TranscodingHints: java.awt.geom.Rectangle2D getKey_AOI(java.lang.Object)>|area",
                    "<org.apache.batik.transcoder.TranscodingHints: java.awt.Paint getKey_BACKGROUND_COLOR(java.lang.Object)>|backgroundColor",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: java.lang.String getMedia()>|mediaType",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: java.lang.String getDefaultFontFamily()>|defaultFontFamily",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: java.lang.String getAlternateStyleSheet()>|alternateStylesheet",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: java.lang.String getUserStyleSheetURI()>|userStylesheet",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: java.lang.String getLanguages()>|language",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: float getPixelUnitToMillimeter()>|pixelUnitToMillimeter",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_QUALITY(java.lang.Object)>|quality",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Integer getKey_INDEXED(java.lang.Object)>|indexed",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Object getKey_XML_PARSER_VALIDATING(java.lang.Object)>|validate",
                    #"<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: boolean isXMLParserValidating()>|validate1",
                    "<org.apache.batik.transcoder.TranscodingHints: boolean getKey_EXECUTE_ONLOAD(java.lang.Object)>|executeOnload",
                    "<org.apache.batik.transcoder.TranscodingHints: java.lang.Float getKey_SNAPSHOT_TIME(java.lang.Object)>|snapshotTime",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>|allowedScriptTypes",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>|constrainScriptOrigin",
                    "<org.apache.batik.transcoder.SVGAbstractTranscoder$SVGAbstractTranscoderUserAgent: boolean isAllowExternalResources()>|allowExternalResources",
                    "<org.apache.batik.transcoder.TranscodingHints:get(java.lang.Object)>|access config"],
    "sunflow":      [
                    # "<org.sunflow.Benchmark: int _get_Threads()>|threads",
                    # "<org.sunflow.Benchmark: int _get_Resolution()>|resolution",
                    # "<org.sunflow.Benchmark: int _get_DiffuseDepth()>|diffuseDepth",
                    # "<org.sunflow.Benchmark: int _get_ReflectionDepth()>|reflectionDepth",
                    # "<org.sunflow.Benchmark: int _get_BucketSize()>|bucketSize",
                    # "<org.sunflow.Benchmark: int _get_Samples()>|samples",
                    "<org.sunflow.core.ParameterList:getInt(java.lang.String,int)>|access_int",
                    "<org.sunflow.core.Options:getInt(java.lang.String,int)>|access_int"],
    "catena": [     "<main.java.Catena: java.lang.String get_vId()>|_vId",
                    "<main.java.Catena: main.java.components.hash.HashInterface get_h()>|_h",
                    "<main.java.Catena: main.java.components.hash.HashInterface get_hPrime()>|_hPrime",
                    "<main.java.Catena: main.java.components.gamma.GammaInterface get_gamma()>|_gamma",
                    "<main.java.Catena: main.java.components.graph.GraphInterface get_f()>|_f",
                    "<main.java.Catena: main.java.components.phi.PhiInterface get_phi()>|_phi",
                    "<main.java.Catena: int get_d()>|_d",
                    "<main.java.Catena: int get_n()>|_n",
                    "<main.java.Catena: int get_k()>|_k",
                    "<main.java.Catena: int get_gLow()>|_gLow",
                    "<main.java.Catena: int get_gHigh()>|_gHigh",
                    "<main.java.Catena: int get_lambda()>|_lambda"],
    "kanzi": [     "<kanzi.app.Kanzi: char _get_mode(java.util.Map)>|mode",
                    "<kanzi.app.BlockCompressor$FileCompressTask: java.lang.String _get_inputName()>|inputName",
                    "<kanzi.app.BlockCompressor$FileCompressTask: java.lang.String _get_outputName()>|outputName",
                    "<kanzi.app.BlockCompressor: int _get_level(java.util.Map)>|level",
                   "<kanzi.app.BlockCompressor$FileCompressTask: int _get_verbosity()>|verbose",
                    "<kanzi.app.BlockCompressor$FileCompressTask: boolean _get_overwrite()>|overwrite",
                    "<kanzi.io.CompressedOutputStream: java.lang.String _get_codec(java.util.Map)>|entropy",
                    "<kanzi.io.CompressedOutputStream: java.lang.String _get_transform(java.util.Map)>|transform",
                    "<kanzi.io.CompressedOutputStream: int _get_jobs(java.util.Map)>|jobs",
                    "<kanzi.io.CompressedOutputStream: int _get_blockSize(java.util.Map)>|block",
                    "<kanzi.io.CompressedOutputStream: java.util.concurrent.ExecutorService _get_pool(java.util.Map)>|jobs",
                    "<kanzi.io.CompressedOutputStream: boolean _get_checksum(java.util.Map)>|checksum",
                    "<kanzi.io.CompressedOutputStream$EncodingTask: boolean _get_skipBlocks(java.util.Map)>|skipBlocks",]
}

generate_config_csv(data_for_projects)
