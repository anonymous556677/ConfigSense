{
    "unclear_methods": [
        {
            "unclear_method_name": "getIndexedImage",
            "unclear_method_body": "No found this Method-related information"
        }
    ],
    "code_context": "/**\n     * @throws TranscoderException\n     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(\n     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,\n     * org.apache.batik.transcoder.TranscoderOutput)\n     */\npublic void writeImage(PNGTranscoder transcoder, BufferedImage img,\n            TranscoderOutput output) throws TranscoderException {\n        TranscodingHints hints = transcoder.getTranscodingHints();\n\n        int n=-1;\n        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {\n            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);\n            if (n==1||n==2||n==4||n==8)\n                //PNGEncodeParam.Palette can handle these numbers only.\n                img = IndexImage.getIndexedImage(img,1<<n);\n        }\n\n        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);\n        if (params instanceof PNGEncodeParam.RGB) {\n            ((PNGEncodeParam.RGB)params).setBackgroundRGB\n                (new int [] { 255, 255, 255 });\n        }\n\n        // If they specify GAMMA key with a value of '0' then omit\n        // gamma chunk.  If they do not provide a GAMMA then just\n        // generate an sRGB chunk. Otherwise supress the sRGB chunk\n        // and just generate gamma and chroma chunks.\n        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {\n            float gamma = (Float) hints.get(PNGTranscoder.KEY_GAMMA);\n            if (gamma > 0) {\n                params.setGamma(gamma);\n            }\n            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);\n        }  else {\n            // We generally want an sRGB chunk and our encoding intent\n            // is perceptual\n            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);\n        }\n\n\n        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();\n        // num Pixs in 1 Meter\n        int numPix      = (int)((1000/PixSzMM)+0.5);\n        params.setPhysicalDimension(numPix, numPix, 1); // 1 means 'pix/meter'\n\n        try {\n            OutputStream ostream = output.getOutputStream();\n            PNGImageEncoder pngEncoder = new PNGImageEncoder(ostream, params);\n            pngEncoder.encode(img);\n            ostream.flush();\n        } catch (IOException ex) {\n            throw new TranscoderException(ex);\n        }\n    }\n\n}\n/**\n     * @throws TranscoderException\n     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(\n     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,\n     * org.apache.batik.transcoder.TranscoderOutput)\n     */\npublic void writeImage(PNGTranscoder transcoder, BufferedImage img,\n            TranscoderOutput output) throws TranscoderException {\n        TranscodingHints hints = transcoder.getTranscodingHints();\n\n        int n=-1;\n        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {\n            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);\n            if (n==1||n==2||n==4||n==8)\n                //PNGEncodeParam.Palette can handle these numbers only.\n                img = IndexImage.getIndexedImage(img,1<<n);\n        }\n\n        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);\n        if (params instanceof PNGEncodeParam.RGB) {\n            ((PNGEncodeParam.RGB)params).setBackgroundRGB\n                (new int [] { 255, 255, 255 });\n        }\n\n        // If they specify GAMMA key with a value of '0' then omit\n        // gamma chunk.  If they do not provide a GAMMA then just\n        // generate an sRGB chunk. Otherwise supress the sRGB chunk\n        // and just generate gamma and chroma chunks.\n        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {\n            float gamma = (Float) hints.get(PNGTranscoder.KEY_GAMMA);\n            if (gamma > 0) {\n                params.setGamma(gamma);\n            }\n            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);\n        }  else {\n            // We generally want an sRGB chunk and our encoding intent\n            // is perceptual\n            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);\n        }\n\n\n        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();\n        // num Pixs in 1 Meter\n        int numPix      = (int)((1000/PixSzMM)+0.5);\n        params.setPhysicalDimension(numPix, numPix, 1); // 1 means 'pix/meter'\n\n        try {\n            OutputStream ostream = output.getOutputStream();\n            PNGImageEncoder pngEncoder = new PNGImageEncoder(ostream, params);\n            pngEncoder.encode(img);\n            ostream.flush();\n        } catch (IOException ex) {\n            throw new TranscoderException(ex);\n        }\n    }\n\n}\n/**\n     * @throws TranscoderException \n     * @see org.apache.batik.transcoder.image.PNGTranscoder.WriteAdapter#writeImage(\n     * org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage,\n     * org.apache.batik.transcoder.TranscoderOutput)\n     */\npublic void writeImage(PNGTranscoder transcoder, BufferedImage img,\n            TranscoderOutput output) throws TranscoderException {\n\n        TranscodingHints hints = transcoder.getTranscodingHints();\n\n        int n = -1;\n        if (hints.containsKey(PNGTranscoder.KEY_INDEXED)) {\n            n= (Integer) hints.get(PNGTranscoder.KEY_INDEXED);\n            if (n==1||n==2||n==4||n==8) \n                //PNGEncodeParam.Palette can handle these numbers only.\n                img = IndexImage.getIndexedImage(img, 1<<n);\n        }\n\n        ImageWriter writer = ImageWriterRegistry.getInstance()\n            .getWriterFor(\"image/png\");\n        ImageWriterParams params = new ImageWriterParams();\n\n        /* NYI!!!!!\n        PNGEncodeParam params = PNGEncodeParam.getDefaultEncodeParam(img);\n        if (params instanceof PNGEncodeParam.RGB) {\n            ((PNGEncodeParam.RGB)params).setBackgroundRGB\n                (new int [] { 255, 255, 255 });\n        }*/\n\n        // If they specify GAMMA key with a value of '0' then omit\n        // gamma chunk.  If they do not provide a GAMMA then just\n        // generate an sRGB chunk. Otherwise supress the sRGB chunk\n        // and just generate gamma and chroma chunks.\n        /* NYI!!!!!!\n        if (hints.containsKey(PNGTranscoder.KEY_GAMMA)) {\n            float gamma = ((Float)hints.get(PNGTranscoder.KEY_GAMMA)).floatValue();\n            if (gamma > 0) {\n                params.setGamma(gamma);\n            }\n            params.setChromaticity(PNGTranscoder.DEFAULT_CHROMA);\n        }  else {\n            // We generally want an sRGB chunk and our encoding intent\n            // is perceptual\n            params.setSRGBIntent(PNGEncodeParam.INTENT_PERCEPTUAL);\n        }*/\n\n\n        float PixSzMM = transcoder.getUserAgent().getPixelUnitToMillimeter();\n        int PixSzInch = (int)(25.4 / PixSzMM + 0.5);\n        params.setResolution(PixSzInch);\n\n        try {\n            OutputStream ostream = output.getOutputStream();\n            writer.writeImage(img, ostream, params);\n            ostream.flush();\n        } catch (IOException ex) {\n            throw new TranscoderException(ex);\n        }\n    }\n\n}",
    "config_description": "Cannot found this configuration description for this configuration.",
    "developer_understanding_on_working": "The configuration 'INDEXED' is used in the code to determine the number of colors to be used in the indexed image. If the configuration value is 1, 2, 4, or 8, the image is converted to an indexed image using the IndexImage class.",
    "developer_understanding_on_triggering_frequency": "The configuration 'INDEXED' is triggered whenever the PNGTranscoder.KEY_INDEXED hint is present in the TranscodingHints object.",
    "developer_understanding_on_size_impact": "The impact of the 'INDEXED' configuration option is that it affects the color depth and size of the image. By specifying a value of 1, 2, 4, or 8, the image is converted to an indexed image with a limited color palette, which can reduce the size of the image file."
}