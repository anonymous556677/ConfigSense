{
    "unclear_methods": [],
    "code_context": "private AutoSavingCache<CounterCacheKey, ClockAndCount> initCounterCache()\n    {\n        logger.info(\"Initializing counter cache with capacity of {} MBs\", DatabaseDescriptor.getCounterCacheSizeInMB());\n\n        long capacity = DatabaseDescriptor.getCounterCacheSizeInMB() * 1024 * 1024;\n\n        AutoSavingCache<CounterCacheKey, ClockAndCount> cache =\n            new AutoSavingCache<>(CaffeineCache.create(capacity),\n                                  CacheType.COUNTER_CACHE,\n                                  new CounterCacheSerializer());\n\n        int keysToSave = DatabaseDescriptor.getCounterCacheKeysToSave();\n\n        logger.info(\"Scheduling counter cache save to every {} seconds (going to save {} keys).\",\n                    DatabaseDescriptor.getCounterCacheSavePeriod(),\n                    keysToSave == Integer.MAX_VALUE ? \"all\" : keysToSave);\n\n        cache.scheduleSaving(DatabaseDescriptor.getCounterCacheSavePeriod(), keysToSave);\n\n        return cache;\n    }\n\n\n    \npublic void setCounterCacheSavePeriodInSeconds(int seconds)\n    {\n        if (seconds < 0)\n            throw new RuntimeException(\"CounterCacheSavePeriodInSeconds must be non-negative.\");\n\n        DatabaseDescriptor.setCounterCacheSavePeriod(seconds);\n        counterCache.scheduleSaving(seconds, DatabaseDescriptor.getCounterCacheKeysToSave());\n    }\n\n    \npublic int getCounterCacheKeysToSave()\n    {\n        return DatabaseDescriptor.getCounterCacheKeysToSave();\n    }\n\n    \npublic void saveCaches() throws ExecutionException, InterruptedException\n    {\n        List<Future<?>> futures = new ArrayList<>(3);\n        logger.debug(\"submitting cache saves\");\n\n        futures.add(keyCache.submitWrite(DatabaseDescriptor.getKeyCacheKeysToSave()));\n        futures.add(rowCache.submitWrite(DatabaseDescriptor.getRowCacheKeysToSave()));\n        futures.add(counterCache.submitWrite(DatabaseDescriptor.getCounterCacheKeysToSave()));\n\n        FBUtilities.waitOnFutures(futures);\n        logger.debug(\"cache saves completed\");\n    }\n\n    ",
    "config_description": "Number of keys from the counter cache to save Disabled by default, meaning all keys are going to be saved",
    "developer_understanding_on_working": "The 'counter_cache_keys_to_save' configuration determines the number of keys from the counter cache that are saved. By default, all keys are saved. The configuration is used to schedule the saving of keys in the counter cache at a specified interval.",
    "developer_understanding_on_triggering_frequency": "The configuration is triggered when the 'saveCaches' method is called, which submits cache saves for key caches, row caches, and the counter cache. The 'counterCache.submitWrite' method is used to save the keys from the counter cache based on the configured number of keys to save.",
    "developer_understanding_on_size_impact": "The impact of the 'counter_cache_keys_to_save' configuration option is on the storage size and performance of the system. Setting a lower number of keys to save may reduce the storage space required for the counter cache but may also impact the performance if not all keys are saved. On the other hand, saving all keys may consume more storage space but ensure better performance by saving all keys."
}