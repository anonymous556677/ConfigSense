{
    "unclear_methods": [],
    "code_context": "public Long getNativeTransportMaxConcurrentConnectionsPerIp() { return DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp(); }\n    \n@Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception\n    {\n        final long count = counter.incrementAndGet();\n        long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections();\n        // Setting the limit to -1 disables it.\n        if(limit < 0)\n        {\n            limit = Long.MAX_VALUE;\n        }\n        if (count > limit)\n        {\n            // The decrement will be done in channelClosed(...)\n            noSpamLogger.error(\"Exceeded maximum native connection limit of {} by using {} connections (see native_transport_max_concurrent_connections in cassandra.yaml)\", limit, count);\n            ctx.close();\n        }\n        else\n        {\n            long perIpLimit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp();\n            if (perIpLimit > 0)\n            {\n                InetAddress address = setRemoteAddressAttribute(ctx.channel());\n                if (address == null)\n                {\n                    ctx.close();\n                    return;\n                }\n                AtomicLong perIpCount = connectionsPerClient.get(address);\n                if (perIpCount == null)\n                {\n                    perIpCount = new AtomicLong(0);\n\n                    AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount);\n                    if (old != null)\n                    {\n                        perIpCount = old;\n                    }\n                }\n                if (perIpCount.incrementAndGet() > perIpLimit)\n                {\n                    // The decrement will be done in channelClosed(...)\n                    noSpamLogger.error(\"Exceeded maximum native connection limit per ip of {} by using {} connections (see native_transport_max_concurrent_connections_per_ip)\", perIpLimit, perIpCount);\n                    ctx.close();\n                    return;\n                }\n            }\n            ctx.fireChannelActive();\n        }\n    }\n\n    \npublic void configureInitialPipeline(Channel channel, Connection.Factory connectionFactory)\n    {\n        ChannelPipeline pipeline = channel.pipeline();\n\n        // Add the ConnectionLimitHandler to the pipeline if configured to do so.\n        if (DatabaseDescriptor.getNativeTransportMaxConcurrentConnections() > 0\n            || DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp() > 0)\n        {\n            // Add as first to the pipeline so the limit is enforced as first action.\n            pipeline.addFirst(CONNECTION_LIMIT_HANDLER, connectionLimitHandler);\n        }\n\n        long idleTimeout = DatabaseDescriptor.nativeTransportIdleTimeout();\n        if (idleTimeout > 0)\n        {\n            pipeline.addLast(IDLE_STATE_HANDLER, new IdleStateHandler(false, 0, 0, idleTimeout, TimeUnit.MILLISECONDS)\n            {\n                @Override\n                protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt)\n                {\n                    logger.info(\"Closing client connection {} after timeout of {}ms\", channel.remoteAddress(), idleTimeout);\n                    ctx.close();\n                }\n            });\n        }\n\n        if (DEBUG)\n            pipeline.addLast(DEBUG_HANDLER, new LoggingHandler(LogLevel.INFO));\n\n        pipeline.addLast(ENVELOPE_ENCODER, Envelope.Encoder.instance);\n        pipeline.addLast(INITIAL_HANDLER, new InitialConnectionHandler(new Envelope.Decoder(), connectionFactory, this));\n        // The exceptionHandler will take care of handling exceptionCaught(...) events while still running\n        // on the same EventLoop as all previous added handlers in the pipeline. This is important as the used\n        // eventExecutorGroup may not enforce strict ordering for channel events.\n        // As the exceptionHandler runs in the EventLoop as the previous handlers we are sure all exceptions are\n        // correctly handled before the handler itself is removed.\n        // See https://issues.apache.org/jira/browse/CASSANDRA-13649\n        pipeline.addLast(EXCEPTION_HANDLER, PreV5Handlers.ExceptionHandler.instance);\n        onInitialPipelineReady(pipeline);\n    }\n\n    ",
    "config_description": "The maximum number of concurrent client connections per source ip. The default is -1, which means unlimited.",
    "developer_understanding_on_working": "The configuration 'native_transport_max_concurrent_connections_per_ip' is used to limit the number of concurrent client connections per source IP. The code checks the number of connections per IP and closes the connection if it exceeds the configured limit.",
    "developer_understanding_on_triggering_frequency": "The configuration is triggered whenever a new client connection is established, as the code checks the number of connections per IP for each new connection.",
    "developer_understanding_on_size_impact": "The impact of the 'native_transport_max_concurrent_connections_per_ip' configuration option is to limit the number of connections per source IP. This can help in preventing resource exhaustion and potential denial of service attacks by limiting the number of connections a single IP can make to the system."
}