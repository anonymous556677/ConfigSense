{
    "unclear_methods": [
        {
            "unclear_method_name": "getInternodeStreamingTcpUserTimeoutInMS",
            "unclear_method_body": "\npublic static int getInternodeStreamingTcpUserTimeoutInMS()\n    {\n        return conf.internode_streaming_tcp_user_timeout_in_ms;\n    }\n\n    ",
            "understanding": {
                "developer_understanding_on_unclear_method": "The unclear code is a method named getInternodeStreamingTcpUserTimeoutInMS() which returns the value of internode_streaming_tcp_user_timeout_in_ms from the configuration.",
                "developer_understanding_on_unclear_code_to_configuration": "The unclear code directly accesses the configuration to retrieve the value of internode_streaming_tcp_user_timeout_in_ms. This value is used to determine the timeout for unacknowledged data on a streaming connection."
            }
        }
    ],
    "code_context": "public int tcpUserTimeoutInMS(ConnectionCategory category)\n    {\n        // Reusing tcpUserTimeoutInMS for both messaging and streaming, since the connection is created for either one of them.\n        if (tcpUserTimeoutInMS != null)\n            return tcpUserTimeoutInMS;\n\n        switch (category)\n        {\n            case MESSAGING: return DatabaseDescriptor.getInternodeTcpUserTimeoutInMS();\n            case STREAMING: return DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();\n            default: throw new IllegalArgumentException(\"Unknown connection category: \" + category);\n        }\n    }\n\n    \npublic int getInternodeStreamingTcpUserTimeoutInMS()\n    {\n        return DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();\n    }\n\n    \n/**\n     * Call back after receiving a stream.\n     *\n     * @param message received stream\n     */\npublic void receive(IncomingStreamMessage message)\n    {\n        if (isPreview())\n        {\n            throw new RuntimeException(String.format(\"[Stream #%s] Cannot receive files for preview session\", planId()));\n        }\n\n        long headerSize = message.stream.getSize();\n        StreamingMetrics.totalIncomingBytes.inc(headerSize);\n        metrics.incomingBytes.inc(headerSize);\n        // send back file received message\n        messageSender.sendMessage(new ReceivedMessage(message.header.tableId, message.header.sequenceNumber));\n        StreamHook.instance.reportIncomingStream(message.header.tableId, message.stream, this, message.header.sequenceNumber);\n        long receivedStartNanos = System.nanoTime();\n        try\n        {\n            receivers.get(message.header.tableId).received(message.stream);\n        }\n        finally\n        {\n            long latencyNanos = System.nanoTime() - receivedStartNanos;\n            metrics.incomingProcessTime.update(latencyNanos, TimeUnit.NANOSECONDS);\n            long latencyMs = TimeUnit.NANOSECONDS.toMillis(latencyNanos);\n            int timeout = DatabaseDescriptor.getInternodeStreamingTcpUserTimeoutInMS();\n            if (timeout > 0 && latencyMs > timeout)\n                NoSpamLogger.log(logger, NoSpamLogger.Level.WARN,\n                                 1, TimeUnit.MINUTES,\n                                 \"The time taken ({} ms) for processing the incoming stream message ({})\" +\n                                 \" exceeded internode streaming TCP user timeout ({} ms).\\n\" +\n                                 \"The streaming connection might be closed due to tcp user timeout.\\n\" +\n                                 \"Try to increase the internode_streaming_tcp_user_timeout_in_ms\" +\n                                 \" or set it to 0 to use system defaults.\",\n                                 latencyMs, message, timeout);\n        }\n    }\n\n    ",
    "config_description": "The amount of time unacknowledged data is allowed on a streaming connection. The default is 5 minutes. Increase it or set it to 0 in order to increase the timeout.",
    "developer_understanding_on_working": "The configuration option 'internode_streaming_tcp_user_timeout_in_ms' is used to set the amount of time unacknowledged data is allowed on a streaming connection. The code snippet provided shows that this configuration is used to check if the processing time of incoming stream messages exceeds the specified timeout value.",
    "developer_understanding_on_triggering_frequency": "The configuration is triggered whenever a stream message is received and processed. The triggering frequency depends on the rate at which stream messages are received in the system.",
    "developer_understanding_on_size_impact": "The impact of the 'internode_streaming_tcp_user_timeout_in_ms' configuration option is on the streaming connection timeout. If the processing time of incoming stream messages exceeds the specified timeout value, a warning is logged and the streaming connection might be closed. Increasing the timeout value can prevent premature closing of streaming connections due to timeout."
}