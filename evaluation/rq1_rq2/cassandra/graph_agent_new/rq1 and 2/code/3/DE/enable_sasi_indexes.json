{
    "unclear_methods": [
        {
            "unclear_method_name": "ire",
            "unclear_method_body": "No found this Method-related information"
        }
    ],
    "code_context": "public Keyspaces apply(Keyspaces schema)\n    {\n        attrs.validate();\n\n        if (attrs.isCustom && attrs.customClass.equals(SASIIndex.class.getName()) && !DatabaseDescriptor.getEnableSASIIndexes())\n            throw new InvalidRequestException(\"SASI indexes are disabled. Enable in cassandra.yaml to use.\");\n\n        KeyspaceMetadata keyspace = schema.getNullable(keyspaceName);\n        if (null == keyspace)\n            throw ire(\"Keyspace '%s' doesn't exist\", keyspaceName);\n\n        TableMetadata table = keyspace.getTableOrViewNullable(tableName);\n        if (null == table)\n            throw ire(\"Table '%s' doesn't exist\", tableName);\n\n        if (null != indexName && keyspace.hasIndex(indexName))\n        {\n            if (ifNotExists)\n                return schema;\n\n            throw ire(\"Index '%s' already exists\", indexName);\n        }\n\n        if (table.isCounter())\n            throw ire(\"Secondary indexes on counter tables aren't supported\");\n\n        if (table.isView())\n            throw ire(\"Secondary indexes on materialized views aren't supported\");\n\n        if (Keyspace.open(table.keyspace).getReplicationStrategy().hasTransientReplicas())\n            throw new InvalidRequestException(\"Secondary indexes are not supported on transiently replicated keyspaces\");\n\n        List<IndexTarget> indexTargets = Lists.newArrayList(transform(rawIndexTargets, t -> t.prepare(table)));\n\n        if (indexTargets.isEmpty() && !attrs.isCustom)\n            throw ire(\"Only CUSTOM indexes can be created without specifying a target column\");\n\n        if (indexTargets.size() > 1)\n        {\n            if (!attrs.isCustom)\n                throw ire(\"Only CUSTOM indexes support multiple columns\");\n\n            Set<ColumnIdentifier> columns = new HashSet<>();\n            for (IndexTarget target : indexTargets)\n                if (!columns.add(target.column))\n                    throw ire(\"Duplicate column '%s' in index target list\", target.column);\n        }\n\n        indexTargets.forEach(t -> validateIndexTarget(table, t));\n\n        String name = null == indexName ? generateIndexName(keyspace, indexTargets) : indexName;\n\n        IndexMetadata.Kind kind = attrs.isCustom ? IndexMetadata.Kind.CUSTOM : IndexMetadata.Kind.COMPOSITES;\n\n        Map<String, String> options = attrs.isCustom ? attrs.getOptions() : Collections.emptyMap();\n\n        IndexMetadata index = IndexMetadata.fromIndexTargets(indexTargets, name, kind, options);\n\n        // check to disallow creation of an index which duplicates an existing one in all but name\n        IndexMetadata equalIndex = tryFind(table.indexes, i -> i.equalsWithoutName(index)).orNull();\n        if (null != equalIndex)\n        {\n            if (ifNotExists)\n                return schema;\n\n            throw ire(\"Index %s is a duplicate of existing index %s\", index.name, equalIndex.name);\n        }\n\n        TableMetadata newTable = table.withSwapped(table.indexes.with(index));\n        newTable.validate();\n\n        return schema.withAddedOrUpdated(keyspace.withSwapped(keyspace.tables.withSwapped(newTable)));\n    }\n\n    ",
    "config_description": "Enables SASI index creation on this node. SASI indexes are considered experimental and are not recommended for production use.",
    "developer_understanding_on_working": "The configuration 'enable_sasi_indexes' is used to determine whether SASI index creation is enabled on the node. If the configuration is set to true in the cassandra.yaml file, SASI indexes can be created. If it is set to false, an InvalidRequestException is thrown when trying to create a SASI index.",
    "developer_understanding_on_triggering_frequency": "The triggering frequency of the 'enable_sasi_indexes' configuration depends on when the apply(Keyspaces schema) method is called in the code. This method is typically called when creating or updating a keyspace or table with an index. The frequency can vary based on the frequency of keyspace or table creation/update operations in the system.",
    "developer_understanding_on_size_impact": "The impact of the 'enable_sasi_indexes' configuration option on the system is that it determines whether SASI indexes can be created. Enabling SASI indexes can provide improved search performance for certain queries but may also introduce additional overhead in terms of storage and maintenance. It is recommended for experimental use and not for production environments."
}